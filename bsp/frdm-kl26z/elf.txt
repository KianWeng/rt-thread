
rtthread-kL26Z4.elf:     file format elf32-littlearm


Disassembly of section .text:

00000410 <rt_init_thread_entry>:
#include <rtthread.h>

#include "led.h"

void rt_init_thread_entry(void* parameter)
{
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	6078      	str	r0, [r7, #4]
#ifdef RT_USING_COMPONENTS_INIT
    /* initialization RT-Thread Components */
    rt_components_init();
     418:	f002 f872 	bl	2500 <rt_components_init>
#endif
}
     41c:	46c0      	nop			; (mov r8, r8)
     41e:	46bd      	mov	sp, r7
     420:	b002      	add	sp, #8
     422:	bd80      	pop	{r7, pc}

00000424 <rt_thread_entry_led1>:

ALIGN(RT_ALIGN_SIZE)
static char thread_led1_stack[1024];
struct rt_thread thread_led1;
static void rt_thread_entry_led1(void* parameter)
{
     424:	b580      	push	{r7, lr}
     426:	b084      	sub	sp, #16
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
    int n = 0;
     42c:	2300      	movs	r3, #0
     42e:	60fb      	str	r3, [r7, #12]
    rt_hw_led_init();
     430:	f000 fcfc 	bl	e2c <rt_hw_led_init>

    while (1)
    {
        //rt_kprintf("LED\t%d\tis shining\r\n",n);

        rt_hw_led_on(n);
     434:	68fb      	ldr	r3, [r7, #12]
     436:	0018      	movs	r0, r3
     438:	f000 fd5e 	bl	ef8 <rt_hw_led_on>
        rt_thread_delay(RT_TICK_PER_SECOND/2);
     43c:	2032      	movs	r0, #50	; 0x32
     43e:	f004 fd61 	bl	4f04 <rt_thread_delay>
        rt_hw_led_off(n);
     442:	68fb      	ldr	r3, [r7, #12]
     444:	0018      	movs	r0, r3
     446:	f000 fd7b 	bl	f40 <rt_hw_led_off>
        rt_thread_delay(RT_TICK_PER_SECOND/2);
     44a:	2032      	movs	r0, #50	; 0x32
     44c:	f004 fd5a 	bl	4f04 <rt_thread_delay>

        n++;
     450:	68fb      	ldr	r3, [r7, #12]
     452:	3301      	adds	r3, #1
     454:	60fb      	str	r3, [r7, #12]

        if (n == LED_MAX)
     456:	68fb      	ldr	r3, [r7, #12]
     458:	2b03      	cmp	r3, #3
     45a:	d1eb      	bne.n	434 <rt_thread_entry_led1+0x10>
            n = 0;
     45c:	2300      	movs	r3, #0
     45e:	60fb      	str	r3, [r7, #12]
        rt_hw_led_on(n);
     460:	e7e8      	b.n	434 <rt_thread_entry_led1+0x10>
	...

00000464 <rt_application_init>:
    }
}

int rt_application_init()
{
     464:	b580      	push	{r7, lr}
     466:	b086      	sub	sp, #24
     468:	af04      	add	r7, sp, #16
    rt_thread_t init_thread;

    init_thread = rt_thread_create("init",
     46a:	2380      	movs	r3, #128	; 0x80
     46c:	011b      	lsls	r3, r3, #4
     46e:	4915      	ldr	r1, [pc, #84]	; (4c4 <rt_application_init+0x60>)
     470:	4815      	ldr	r0, [pc, #84]	; (4c8 <rt_application_init+0x64>)
     472:	2214      	movs	r2, #20
     474:	9201      	str	r2, [sp, #4]
     476:	220a      	movs	r2, #10
     478:	9200      	str	r2, [sp, #0]
     47a:	2200      	movs	r2, #0
     47c:	f004 fc58 	bl	4d30 <rt_thread_create>
     480:	0003      	movs	r3, r0
     482:	607b      	str	r3, [r7, #4]
                                   rt_init_thread_entry, RT_NULL,
                                   2048, RT_THREAD_PRIORITY_MAX/3, 20);

    if (init_thread != RT_NULL)
     484:	687b      	ldr	r3, [r7, #4]
     486:	2b00      	cmp	r3, #0
     488:	d003      	beq.n	492 <rt_application_init+0x2e>
        rt_thread_startup(init_thread);
     48a:	687b      	ldr	r3, [r7, #4]
     48c:	0018      	movs	r0, r3
     48e:	f004 fb9d 	bl	4bcc <rt_thread_startup>

    //------- init led1 thread
    rt_thread_init(&thread_led1,
     492:	4a0e      	ldr	r2, [pc, #56]	; (4cc <rt_application_init+0x68>)
     494:	490e      	ldr	r1, [pc, #56]	; (4d0 <rt_application_init+0x6c>)
     496:	480f      	ldr	r0, [pc, #60]	; (4d4 <rt_application_init+0x70>)
     498:	2305      	movs	r3, #5
     49a:	9303      	str	r3, [sp, #12]
     49c:	230b      	movs	r3, #11
     49e:	9302      	str	r3, [sp, #8]
     4a0:	2380      	movs	r3, #128	; 0x80
     4a2:	00db      	lsls	r3, r3, #3
     4a4:	9301      	str	r3, [sp, #4]
     4a6:	4b0c      	ldr	r3, [pc, #48]	; (4d8 <rt_application_init+0x74>)
     4a8:	9300      	str	r3, [sp, #0]
     4aa:	2300      	movs	r3, #0
     4ac:	f004 fb46 	bl	4b3c <rt_thread_init>
                   "led_demo",
                   rt_thread_entry_led1,
                   RT_NULL,
                   &thread_led1_stack[0],
                   sizeof(thread_led1_stack),11,5);
    rt_thread_startup(&thread_led1);
     4b0:	4b08      	ldr	r3, [pc, #32]	; (4d4 <rt_application_init+0x70>)
     4b2:	0018      	movs	r0, r3
     4b4:	f004 fb8a 	bl	4bcc <rt_thread_startup>

    return 0;
     4b8:	2300      	movs	r3, #0
}
     4ba:	0018      	movs	r0, r3
     4bc:	46bd      	mov	sp, r7
     4be:	b002      	add	sp, #8
     4c0:	bd80      	pop	{r7, pc}
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	00000411 	.word	0x00000411
     4c8:	0000b3b8 	.word	0x0000b3b8
     4cc:	00000425 	.word	0x00000425
     4d0:	0000b3c0 	.word	0x0000b3c0
     4d4:	1ffffb18 	.word	0x1ffffb18
     4d8:	1ffff718 	.word	0x1ffff718

000004dc <rtthread_startup>:

/**
 * This function will startup RT-Thread RTOS.
 */
void rtthread_startup(void)
{
     4dc:	b580      	push	{r7, lr}
     4de:	af00      	add	r7, sp, #0
    /* init board */
    rt_hw_board_init();
     4e0:	f001 f856 	bl	1590 <rt_hw_board_init>

    /* show version */
    rt_show_version();
     4e4:	f002 ffca 	bl	347c <rt_show_version>

    /* init timer system */
    rt_system_timer_init();
     4e8:	f001 fe00 	bl	20ec <rt_system_timer_init>

    rt_system_heap_init((void*)KL26Z4_SRAM_BEGIN, (void*)KL26Z4_SRAM_END);
     4ec:	4a0c      	ldr	r2, [pc, #48]	; (520 <rtthread_startup+0x44>)
     4ee:	4b0d      	ldr	r3, [pc, #52]	; (524 <rtthread_startup+0x48>)
     4f0:	0011      	movs	r1, r2
     4f2:	0018      	movs	r0, r3
     4f4:	f003 fc62 	bl	3dbc <rt_system_heap_init>

    /* init scheduler system */
    rt_system_scheduler_init();
     4f8:	f001 f92e 	bl	1758 <rt_system_scheduler_init>

    /* init application */
    rt_application_init();
     4fc:	f7ff ffb2 	bl	464 <rt_application_init>

#ifdef RT_USING_FINSH
    /* init finsh */
    finsh_system_init();
     500:	f007 fa88 	bl	7a14 <finsh_system_init>
#if !defined(RT_USING_POSIX_STDIO) && defined(RT_USING_DEVICE)
    finsh_set_device(FINSH_DEVICE_NAME);
     504:	4b08      	ldr	r3, [pc, #32]	; (528 <rtthread_startup+0x4c>)
     506:	0018      	movs	r0, r3
     508:	f006 fde2 	bl	70d0 <finsh_set_device>
#endif
#endif

    /* init timer thread */
    rt_system_timer_thread_init();
     50c:	f001 fe08 	bl	2120 <rt_system_timer_thread_init>

    /* init idle thread */
    rt_thread_idle_init();
     510:	f004 ff04 	bl	531c <rt_thread_idle_init>

    /* start scheduler */
    rt_system_scheduler_start();
     514:	f001 f93c 	bl	1790 <rt_system_scheduler_start>

    /* never reach here */
    return ;
     518:	46c0      	nop			; (mov r8, r8)
}
     51a:	46bd      	mov	sp, r7
     51c:	bd80      	pop	{r7, pc}
     51e:	46c0      	nop			; (mov r8, r8)
     520:	20008000 	.word	0x20008000
     524:	20000325 	.word	0x20000325
     528:	0000b41c 	.word	0x0000b41c

0000052c <main>:

int main(void)
{
     52c:	b580      	push	{r7, lr}
     52e:	af00      	add	r7, sp, #0
    /* disable interrupt first */
    rt_hw_interrupt_disable();
     530:	f004 ffce 	bl	54d0 <rt_hw_interrupt_disable>

    /* startup RT-Thread RTOS */
    rtthread_startup();
     534:	f7ff ffd2 	bl	4dc <rtthread_startup>

    return 0;
     538:	2300      	movs	r3, #0
}
     53a:	0018      	movs	r0, r3
     53c:	46bd      	mov	sp, r7
     53e:	bd80      	pop	{r7, pc}

00000540 <SystemInit>:

/* ----------------------------------------------------------------------------
   -- SystemInit()
   ---------------------------------------------------------------------------- */

void SystemInit (void) {
     540:	b580      	push	{r7, lr}
     542:	af00      	add	r7, sp, #0

#if (ACK_ISOLATION)
  if(PMC->REGSC &  PMC_REGSC_ACKISO_MASK) {
     544:	4b0c      	ldr	r3, [pc, #48]	; (578 <SystemInit+0x38>)
     546:	789b      	ldrb	r3, [r3, #2]
     548:	b2db      	uxtb	r3, r3
     54a:	001a      	movs	r2, r3
     54c:	2308      	movs	r3, #8
     54e:	4013      	ands	r3, r2
     550:	d007      	beq.n	562 <SystemInit+0x22>
    PMC->REGSC |= PMC_REGSC_ACKISO_MASK; /* VLLSx recovery */
     552:	4b09      	ldr	r3, [pc, #36]	; (578 <SystemInit+0x38>)
     554:	789b      	ldrb	r3, [r3, #2]
     556:	b2db      	uxtb	r3, r3
     558:	4a07      	ldr	r2, [pc, #28]	; (578 <SystemInit+0x38>)
     55a:	2108      	movs	r1, #8
     55c:	430b      	orrs	r3, r1
     55e:	b2db      	uxtb	r3, r3
     560:	7093      	strb	r3, [r2, #2]
#endif

  /* Watchdog disable */
#if (DISABLE_WDOG)
  /* SIM_COPC: COPT=0,COPCLKS=0,COPW=0 */
  SIM->COPC = (uint32_t)0x00u;
     562:	4a06      	ldr	r2, [pc, #24]	; (57c <SystemInit+0x3c>)
     564:	2388      	movs	r3, #136	; 0x88
     566:	015b      	lsls	r3, r3, #5
     568:	2100      	movs	r1, #0
     56a:	50d1      	str	r1, [r2, r3]
#endif /* (DISABLE_WDOG) */

  SystemInitHook();
     56c:	f000 f92e 	bl	7cc <SystemInitHook>
}
     570:	46c0      	nop			; (mov r8, r8)
     572:	46bd      	mov	sp, r7
     574:	bd80      	pop	{r7, pc}
     576:	46c0      	nop			; (mov r8, r8)
     578:	4007d000 	.word	0x4007d000
     57c:	40047000 	.word	0x40047000

00000580 <SystemCoreClockUpdate>:

/* ----------------------------------------------------------------------------
   -- SystemCoreClockUpdate()
   ---------------------------------------------------------------------------- */

void SystemCoreClockUpdate (void) {
     580:	b580      	push	{r7, lr}
     582:	b082      	sub	sp, #8
     584:	af00      	add	r7, sp, #0

    uint32_t MCGOUTClock;                /* Variable to store output clock frequency of the MCG module */
  uint16_t Divider;

  if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x00U) {
     586:	4b89      	ldr	r3, [pc, #548]	; (7ac <SystemCoreClockUpdate+0x22c>)
     588:	781b      	ldrb	r3, [r3, #0]
     58a:	b2db      	uxtb	r3, r3
     58c:	001a      	movs	r2, r3
     58e:	23c0      	movs	r3, #192	; 0xc0
     590:	4013      	ands	r3, r2
     592:	d000      	beq.n	596 <SystemCoreClockUpdate+0x16>
     594:	e0c3      	b.n	71e <SystemCoreClockUpdate+0x19e>
    /* Output of FLL or PLL is selected */
    if ((MCG->C6 & MCG_C6_PLLS_MASK) == 0x00U) {
     596:	4b85      	ldr	r3, [pc, #532]	; (7ac <SystemCoreClockUpdate+0x22c>)
     598:	795b      	ldrb	r3, [r3, #5]
     59a:	b2db      	uxtb	r3, r3
     59c:	001a      	movs	r2, r3
     59e:	2340      	movs	r3, #64	; 0x40
     5a0:	4013      	ands	r3, r2
     5a2:	d000      	beq.n	5a6 <SystemCoreClockUpdate+0x26>
     5a4:	e099      	b.n	6da <SystemCoreClockUpdate+0x15a>
      /* FLL is selected */
      if ((MCG->C1 & MCG_C1_IREFS_MASK) == 0x00U) {
     5a6:	4b81      	ldr	r3, [pc, #516]	; (7ac <SystemCoreClockUpdate+0x22c>)
     5a8:	781b      	ldrb	r3, [r3, #0]
     5aa:	b2db      	uxtb	r3, r3
     5ac:	001a      	movs	r2, r3
     5ae:	2304      	movs	r3, #4
     5b0:	4013      	ands	r3, r2
     5b2:	d13a      	bne.n	62a <SystemCoreClockUpdate+0xaa>
        /* External reference clock is selected */
        MCGOUTClock = CPU_XTAL_CLK_HZ; /* System oscillator drives MCG clock */
     5b4:	4b7e      	ldr	r3, [pc, #504]	; (7b0 <SystemCoreClockUpdate+0x230>)
     5b6:	607b      	str	r3, [r7, #4]
        if ((MCG->C2 & MCG_C2_RANGE0_MASK) != 0x00U) {
     5b8:	4b7c      	ldr	r3, [pc, #496]	; (7ac <SystemCoreClockUpdate+0x22c>)
     5ba:	785b      	ldrb	r3, [r3, #1]
     5bc:	b2db      	uxtb	r3, r3
     5be:	001a      	movs	r2, r3
     5c0:	2330      	movs	r3, #48	; 0x30
     5c2:	4013      	ands	r3, r2
     5c4:	d01e      	beq.n	604 <SystemCoreClockUpdate+0x84>
          switch (MCG->C1 & MCG_C1_FRDIV_MASK) {
     5c6:	4b79      	ldr	r3, [pc, #484]	; (7ac <SystemCoreClockUpdate+0x22c>)
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	b2db      	uxtb	r3, r3
     5cc:	001a      	movs	r2, r3
     5ce:	2338      	movs	r3, #56	; 0x38
     5d0:	4013      	ands	r3, r2
     5d2:	2b30      	cmp	r3, #48	; 0x30
     5d4:	d006      	beq.n	5e4 <SystemCoreClockUpdate+0x64>
     5d6:	2b38      	cmp	r3, #56	; 0x38
     5d8:	d109      	bne.n	5ee <SystemCoreClockUpdate+0x6e>
          case 0x38U:
            Divider = 1536U;
     5da:	1cbb      	adds	r3, r7, #2
     5dc:	22c0      	movs	r2, #192	; 0xc0
     5de:	00d2      	lsls	r2, r2, #3
     5e0:	801a      	strh	r2, [r3, #0]
            break;
     5e2:	e019      	b.n	618 <SystemCoreClockUpdate+0x98>
          case 0x30U:
            Divider = 1280U;
     5e4:	1cbb      	adds	r3, r7, #2
     5e6:	22a0      	movs	r2, #160	; 0xa0
     5e8:	00d2      	lsls	r2, r2, #3
     5ea:	801a      	strh	r2, [r3, #0]
            break;
     5ec:	e014      	b.n	618 <SystemCoreClockUpdate+0x98>
          default:
            Divider = (uint16_t)(32LU << ((MCG->C1 & MCG_C1_FRDIV_MASK) >> MCG_C1_FRDIV_SHIFT));
     5ee:	4b6f      	ldr	r3, [pc, #444]	; (7ac <SystemCoreClockUpdate+0x22c>)
     5f0:	781b      	ldrb	r3, [r3, #0]
     5f2:	b2db      	uxtb	r3, r3
     5f4:	08db      	lsrs	r3, r3, #3
     5f6:	2207      	movs	r2, #7
     5f8:	4013      	ands	r3, r2
     5fa:	2220      	movs	r2, #32
     5fc:	409a      	lsls	r2, r3
     5fe:	1cbb      	adds	r3, r7, #2
     600:	801a      	strh	r2, [r3, #0]
            break;
     602:	e009      	b.n	618 <SystemCoreClockUpdate+0x98>
          }
        } else {/* ((MCG->C2 & MCG_C2_RANGE_MASK) != 0x00U) */
          Divider = (uint16_t)(1LU << ((MCG->C1 & MCG_C1_FRDIV_MASK) >> MCG_C1_FRDIV_SHIFT));
     604:	4b69      	ldr	r3, [pc, #420]	; (7ac <SystemCoreClockUpdate+0x22c>)
     606:	781b      	ldrb	r3, [r3, #0]
     608:	b2db      	uxtb	r3, r3
     60a:	08db      	lsrs	r3, r3, #3
     60c:	2207      	movs	r2, #7
     60e:	4013      	ands	r3, r2
     610:	2201      	movs	r2, #1
     612:	409a      	lsls	r2, r3
     614:	1cbb      	adds	r3, r7, #2
     616:	801a      	strh	r2, [r3, #0]
        }
        MCGOUTClock = (MCGOUTClock / Divider); /* Calculate the divided FLL reference clock */
     618:	1cbb      	adds	r3, r7, #2
     61a:	881b      	ldrh	r3, [r3, #0]
     61c:	0019      	movs	r1, r3
     61e:	6878      	ldr	r0, [r7, #4]
     620:	f00a fc3e 	bl	aea0 <__udivsi3>
     624:	0003      	movs	r3, r0
     626:	607b      	str	r3, [r7, #4]
     628:	e002      	b.n	630 <SystemCoreClockUpdate+0xb0>
      } else { /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x00U)) */
        MCGOUTClock = CPU_INT_SLOW_CLK_HZ; /* The slow internal reference clock is selected */
     62a:	2380      	movs	r3, #128	; 0x80
     62c:	021b      	lsls	r3, r3, #8
     62e:	607b      	str	r3, [r7, #4]
      } /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x00U)) */
      /* Select correct multiplier to calculate the MCG output clock  */
      switch (MCG->C4 & (MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS_MASK)) {
     630:	4b5e      	ldr	r3, [pc, #376]	; (7ac <SystemCoreClockUpdate+0x22c>)
     632:	78db      	ldrb	r3, [r3, #3]
     634:	b2db      	uxtb	r3, r3
     636:	001a      	movs	r2, r3
     638:	23e0      	movs	r3, #224	; 0xe0
     63a:	4013      	ands	r3, r2
     63c:	2be0      	cmp	r3, #224	; 0xe0
     63e:	d047      	beq.n	6d0 <SystemCoreClockUpdate+0x150>
     640:	d900      	bls.n	644 <SystemCoreClockUpdate+0xc4>
     642:	e09d      	b.n	780 <SystemCoreClockUpdate+0x200>
     644:	2bc0      	cmp	r3, #192	; 0xc0
     646:	d03e      	beq.n	6c6 <SystemCoreClockUpdate+0x146>
     648:	d900      	bls.n	64c <SystemCoreClockUpdate+0xcc>
     64a:	e099      	b.n	780 <SystemCoreClockUpdate+0x200>
     64c:	2ba0      	cmp	r3, #160	; 0xa0
     64e:	d034      	beq.n	6ba <SystemCoreClockUpdate+0x13a>
     650:	d900      	bls.n	654 <SystemCoreClockUpdate+0xd4>
     652:	e095      	b.n	780 <SystemCoreClockUpdate+0x200>
     654:	2b80      	cmp	r3, #128	; 0x80
     656:	d02a      	beq.n	6ae <SystemCoreClockUpdate+0x12e>
     658:	d900      	bls.n	65c <SystemCoreClockUpdate+0xdc>
     65a:	e091      	b.n	780 <SystemCoreClockUpdate+0x200>
     65c:	2b60      	cmp	r3, #96	; 0x60
     65e:	d01f      	beq.n	6a0 <SystemCoreClockUpdate+0x120>
     660:	d900      	bls.n	664 <SystemCoreClockUpdate+0xe4>
     662:	e08d      	b.n	780 <SystemCoreClockUpdate+0x200>
     664:	2b40      	cmp	r3, #64	; 0x40
     666:	d014      	beq.n	692 <SystemCoreClockUpdate+0x112>
     668:	d900      	bls.n	66c <SystemCoreClockUpdate+0xec>
     66a:	e089      	b.n	780 <SystemCoreClockUpdate+0x200>
     66c:	2b00      	cmp	r3, #0
     66e:	d002      	beq.n	676 <SystemCoreClockUpdate+0xf6>
     670:	2b20      	cmp	r3, #32
     672:	d007      	beq.n	684 <SystemCoreClockUpdate+0x104>
          break;
        case 0xE0U:
          MCGOUTClock *= 2929U;
          break;
        default:
          break;
     674:	e084      	b.n	780 <SystemCoreClockUpdate+0x200>
          MCGOUTClock *= 640U;
     676:	687a      	ldr	r2, [r7, #4]
     678:	0013      	movs	r3, r2
     67a:	009b      	lsls	r3, r3, #2
     67c:	189b      	adds	r3, r3, r2
     67e:	01db      	lsls	r3, r3, #7
     680:	607b      	str	r3, [r7, #4]
          break;
     682:	e07e      	b.n	782 <SystemCoreClockUpdate+0x202>
          MCGOUTClock *= 1280U;
     684:	687a      	ldr	r2, [r7, #4]
     686:	0013      	movs	r3, r2
     688:	009b      	lsls	r3, r3, #2
     68a:	189b      	adds	r3, r3, r2
     68c:	021b      	lsls	r3, r3, #8
     68e:	607b      	str	r3, [r7, #4]
          break;
     690:	e077      	b.n	782 <SystemCoreClockUpdate+0x202>
          MCGOUTClock *= 1920U;
     692:	687a      	ldr	r2, [r7, #4]
     694:	0013      	movs	r3, r2
     696:	011b      	lsls	r3, r3, #4
     698:	1a9b      	subs	r3, r3, r2
     69a:	01db      	lsls	r3, r3, #7
     69c:	607b      	str	r3, [r7, #4]
          break;
     69e:	e070      	b.n	782 <SystemCoreClockUpdate+0x202>
          MCGOUTClock *= 2560U;
     6a0:	687a      	ldr	r2, [r7, #4]
     6a2:	0013      	movs	r3, r2
     6a4:	009b      	lsls	r3, r3, #2
     6a6:	189b      	adds	r3, r3, r2
     6a8:	025b      	lsls	r3, r3, #9
     6aa:	607b      	str	r3, [r7, #4]
          break;
     6ac:	e069      	b.n	782 <SystemCoreClockUpdate+0x202>
          MCGOUTClock *= 732U;
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	22b7      	movs	r2, #183	; 0xb7
     6b2:	0092      	lsls	r2, r2, #2
     6b4:	4353      	muls	r3, r2
     6b6:	607b      	str	r3, [r7, #4]
          break;
     6b8:	e063      	b.n	782 <SystemCoreClockUpdate+0x202>
          MCGOUTClock *= 1464U;
     6ba:	687b      	ldr	r3, [r7, #4]
     6bc:	22b7      	movs	r2, #183	; 0xb7
     6be:	00d2      	lsls	r2, r2, #3
     6c0:	4353      	muls	r3, r2
     6c2:	607b      	str	r3, [r7, #4]
          break;
     6c4:	e05d      	b.n	782 <SystemCoreClockUpdate+0x202>
          MCGOUTClock *= 2197U;
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	4a3a      	ldr	r2, [pc, #232]	; (7b4 <SystemCoreClockUpdate+0x234>)
     6ca:	4353      	muls	r3, r2
     6cc:	607b      	str	r3, [r7, #4]
          break;
     6ce:	e058      	b.n	782 <SystemCoreClockUpdate+0x202>
          MCGOUTClock *= 2929U;
     6d0:	687b      	ldr	r3, [r7, #4]
     6d2:	4a39      	ldr	r2, [pc, #228]	; (7b8 <SystemCoreClockUpdate+0x238>)
     6d4:	4353      	muls	r3, r2
     6d6:	607b      	str	r3, [r7, #4]
          break;
     6d8:	e053      	b.n	782 <SystemCoreClockUpdate+0x202>
      }
    } else { /* (!((MCG->C6 & MCG_C6_PLLS_MASK) == 0x00U)) */
      /* PLL is selected */
      Divider = (((uint16_t)MCG->C5 & MCG_C5_PRDIV0_MASK) + 0x01U);
     6da:	4b34      	ldr	r3, [pc, #208]	; (7ac <SystemCoreClockUpdate+0x22c>)
     6dc:	791b      	ldrb	r3, [r3, #4]
     6de:	b2db      	uxtb	r3, r3
     6e0:	b29b      	uxth	r3, r3
     6e2:	221f      	movs	r2, #31
     6e4:	4013      	ands	r3, r2
     6e6:	b29a      	uxth	r2, r3
     6e8:	1cbb      	adds	r3, r7, #2
     6ea:	3201      	adds	r2, #1
     6ec:	801a      	strh	r2, [r3, #0]
      MCGOUTClock = (uint32_t)(CPU_XTAL_CLK_HZ / Divider); /* Calculate the PLL reference clock */
     6ee:	1cbb      	adds	r3, r7, #2
     6f0:	881b      	ldrh	r3, [r3, #0]
     6f2:	0019      	movs	r1, r3
     6f4:	482e      	ldr	r0, [pc, #184]	; (7b0 <SystemCoreClockUpdate+0x230>)
     6f6:	f00a fbd3 	bl	aea0 <__udivsi3>
     6fa:	0003      	movs	r3, r0
     6fc:	607b      	str	r3, [r7, #4]
      Divider = (((uint16_t)MCG->C6 & MCG_C6_VDIV0_MASK) + 24U);
     6fe:	4b2b      	ldr	r3, [pc, #172]	; (7ac <SystemCoreClockUpdate+0x22c>)
     700:	795b      	ldrb	r3, [r3, #5]
     702:	b2db      	uxtb	r3, r3
     704:	b29b      	uxth	r3, r3
     706:	221f      	movs	r2, #31
     708:	4013      	ands	r3, r2
     70a:	b29a      	uxth	r2, r3
     70c:	1cbb      	adds	r3, r7, #2
     70e:	3218      	adds	r2, #24
     710:	801a      	strh	r2, [r3, #0]
      MCGOUTClock *= Divider;          /* Calculate the MCG output clock */
     712:	1cbb      	adds	r3, r7, #2
     714:	881a      	ldrh	r2, [r3, #0]
     716:	687b      	ldr	r3, [r7, #4]
     718:	4353      	muls	r3, r2
     71a:	607b      	str	r3, [r7, #4]
     71c:	e031      	b.n	782 <SystemCoreClockUpdate+0x202>
    } /* (!((MCG->C6 & MCG_C6_PLLS_MASK) == 0x00U)) */
  } else if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x40U) {
     71e:	4b23      	ldr	r3, [pc, #140]	; (7ac <SystemCoreClockUpdate+0x22c>)
     720:	781b      	ldrb	r3, [r3, #0]
     722:	b2db      	uxtb	r3, r3
     724:	001a      	movs	r2, r3
     726:	23c0      	movs	r3, #192	; 0xc0
     728:	4013      	ands	r3, r2
     72a:	2b40      	cmp	r3, #64	; 0x40
     72c:	d11d      	bne.n	76a <SystemCoreClockUpdate+0x1ea>
    /* Internal reference clock is selected */
    if ((MCG->C2 & MCG_C2_IRCS_MASK) == 0x00U) {
     72e:	4b1f      	ldr	r3, [pc, #124]	; (7ac <SystemCoreClockUpdate+0x22c>)
     730:	785b      	ldrb	r3, [r3, #1]
     732:	b2db      	uxtb	r3, r3
     734:	001a      	movs	r2, r3
     736:	2301      	movs	r3, #1
     738:	4013      	ands	r3, r2
     73a:	d103      	bne.n	744 <SystemCoreClockUpdate+0x1c4>
      MCGOUTClock = CPU_INT_SLOW_CLK_HZ; /* Slow internal reference clock selected */
     73c:	2380      	movs	r3, #128	; 0x80
     73e:	021b      	lsls	r3, r3, #8
     740:	607b      	str	r3, [r7, #4]
     742:	e01e      	b.n	782 <SystemCoreClockUpdate+0x202>
    } else { /* (!((MCG->C2 & MCG_C2_IRCS_MASK) == 0x00U)) */
      Divider = (uint16_t)(0x01LU << ((MCG->SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT));
     744:	4b19      	ldr	r3, [pc, #100]	; (7ac <SystemCoreClockUpdate+0x22c>)
     746:	7a1b      	ldrb	r3, [r3, #8]
     748:	b2db      	uxtb	r3, r3
     74a:	085b      	lsrs	r3, r3, #1
     74c:	2207      	movs	r2, #7
     74e:	4013      	ands	r3, r2
     750:	2201      	movs	r2, #1
     752:	409a      	lsls	r2, r3
     754:	1cbb      	adds	r3, r7, #2
     756:	801a      	strh	r2, [r3, #0]
      MCGOUTClock = (uint32_t) (CPU_INT_FAST_CLK_HZ / Divider); /* Fast internal reference clock selected */
     758:	1cbb      	adds	r3, r7, #2
     75a:	881b      	ldrh	r3, [r3, #0]
     75c:	0019      	movs	r1, r3
     75e:	4817      	ldr	r0, [pc, #92]	; (7bc <SystemCoreClockUpdate+0x23c>)
     760:	f00a fb9e 	bl	aea0 <__udivsi3>
     764:	0003      	movs	r3, r0
     766:	607b      	str	r3, [r7, #4]
     768:	e00b      	b.n	782 <SystemCoreClockUpdate+0x202>
    } /* (!((MCG->C2 & MCG_C2_IRCS_MASK) == 0x00U)) */
  } else if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80U) {
     76a:	4b10      	ldr	r3, [pc, #64]	; (7ac <SystemCoreClockUpdate+0x22c>)
     76c:	781b      	ldrb	r3, [r3, #0]
     76e:	b2db      	uxtb	r3, r3
     770:	001a      	movs	r2, r3
     772:	23c0      	movs	r3, #192	; 0xc0
     774:	4013      	ands	r3, r2
     776:	2b80      	cmp	r3, #128	; 0x80
     778:	d113      	bne.n	7a2 <SystemCoreClockUpdate+0x222>
    /* External reference clock is selected */
    MCGOUTClock = CPU_XTAL_CLK_HZ;   /* System oscillator drives MCG clock */
     77a:	4b0d      	ldr	r3, [pc, #52]	; (7b0 <SystemCoreClockUpdate+0x230>)
     77c:	607b      	str	r3, [r7, #4]
     77e:	e000      	b.n	782 <SystemCoreClockUpdate+0x202>
          break;
     780:	46c0      	nop			; (mov r8, r8)
  } else { /* (!((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80U)) */
    /* Reserved value */
    return;
  } /* (!((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80U)) */
  SystemCoreClock = (MCGOUTClock / (0x01U + ((SIM->CLKDIV1 & SIM_CLKDIV1_OUTDIV1_MASK) >> SIM_CLKDIV1_OUTDIV1_SHIFT)));
     782:	4a0f      	ldr	r2, [pc, #60]	; (7c0 <SystemCoreClockUpdate+0x240>)
     784:	4b0f      	ldr	r3, [pc, #60]	; (7c4 <SystemCoreClockUpdate+0x244>)
     786:	58d3      	ldr	r3, [r2, r3]
     788:	0f1b      	lsrs	r3, r3, #28
     78a:	220f      	movs	r2, #15
     78c:	4013      	ands	r3, r2
     78e:	3301      	adds	r3, #1
     790:	0019      	movs	r1, r3
     792:	6878      	ldr	r0, [r7, #4]
     794:	f00a fb84 	bl	aea0 <__udivsi3>
     798:	0003      	movs	r3, r0
     79a:	001a      	movs	r2, r3
     79c:	4b0a      	ldr	r3, [pc, #40]	; (7c8 <SystemCoreClockUpdate+0x248>)
     79e:	601a      	str	r2, [r3, #0]
     7a0:	e000      	b.n	7a4 <SystemCoreClockUpdate+0x224>
    return;
     7a2:	46c0      	nop			; (mov r8, r8)

}
     7a4:	46bd      	mov	sp, r7
     7a6:	b002      	add	sp, #8
     7a8:	bd80      	pop	{r7, pc}
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	40064000 	.word	0x40064000
     7b0:	007a1200 	.word	0x007a1200
     7b4:	00000895 	.word	0x00000895
     7b8:	00000b71 	.word	0x00000b71
     7bc:	003d0900 	.word	0x003d0900
     7c0:	40047000 	.word	0x40047000
     7c4:	00001044 	.word	0x00001044
     7c8:	1ffff0c0 	.word	0x1ffff0c0

000007cc <SystemInitHook>:

/* ----------------------------------------------------------------------------
   -- SystemInitHook()
   ---------------------------------------------------------------------------- */

__attribute__ ((weak)) void SystemInitHook (void) {
     7cc:	b580      	push	{r7, lr}
     7ce:	af00      	add	r7, sp, #0
  /* Void implementation of the weak function. */
}
     7d0:	46c0      	nop			; (mov r8, r8)
     7d2:	46bd      	mov	sp, r7
     7d4:	bd80      	pop	{r7, pc}
	...

000007d8 <CLOCK_SetEr32kClock>:
    (*(volatile uint32_t *)regAddr) &= ~(1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
}

/*! @brief Set ERCLK32K source. */
static inline void CLOCK_SetEr32kClock(uint32_t src)
{
     7d8:	b580      	push	{r7, lr}
     7da:	b082      	sub	sp, #8
     7dc:	af00      	add	r7, sp, #0
     7de:	6078      	str	r0, [r7, #4]
    SIM->SOPT1 = ((SIM->SOPT1 & ~SIM_SOPT1_OSC32KSEL_MASK) | SIM_SOPT1_OSC32KSEL(src));
     7e0:	4b08      	ldr	r3, [pc, #32]	; (804 <CLOCK_SetEr32kClock+0x2c>)
     7e2:	681b      	ldr	r3, [r3, #0]
     7e4:	4a08      	ldr	r2, [pc, #32]	; (808 <CLOCK_SetEr32kClock+0x30>)
     7e6:	4013      	ands	r3, r2
     7e8:	0019      	movs	r1, r3
     7ea:	687b      	ldr	r3, [r7, #4]
     7ec:	049a      	lsls	r2, r3, #18
     7ee:	23c0      	movs	r3, #192	; 0xc0
     7f0:	031b      	lsls	r3, r3, #12
     7f2:	401a      	ands	r2, r3
     7f4:	4b03      	ldr	r3, [pc, #12]	; (804 <CLOCK_SetEr32kClock+0x2c>)
     7f6:	430a      	orrs	r2, r1
     7f8:	601a      	str	r2, [r3, #0]
}
     7fa:	46c0      	nop			; (mov r8, r8)
     7fc:	46bd      	mov	sp, r7
     7fe:	b002      	add	sp, #8
     800:	bd80      	pop	{r7, pc}
     802:	46c0      	nop			; (mov r8, r8)
     804:	40047000 	.word	0x40047000
     808:	fff3ffff 	.word	0xfff3ffff

0000080c <CLOCK_SetPllFllSelClock>:

/*! @brief Set PLLFLLSEL clock source. */
static inline void CLOCK_SetPllFllSelClock(uint32_t src)
{
     80c:	b580      	push	{r7, lr}
     80e:	b082      	sub	sp, #8
     810:	af00      	add	r7, sp, #0
     812:	6078      	str	r0, [r7, #4]
    SIM->SOPT2 = ((SIM->SOPT2 & ~SIM_SOPT2_PLLFLLSEL_MASK) | SIM_SOPT2_PLLFLLSEL(src));
     814:	4a08      	ldr	r2, [pc, #32]	; (838 <CLOCK_SetPllFllSelClock+0x2c>)
     816:	4b09      	ldr	r3, [pc, #36]	; (83c <CLOCK_SetPllFllSelClock+0x30>)
     818:	58d3      	ldr	r3, [r2, r3]
     81a:	4a09      	ldr	r2, [pc, #36]	; (840 <CLOCK_SetPllFllSelClock+0x34>)
     81c:	401a      	ands	r2, r3
     81e:	687b      	ldr	r3, [r7, #4]
     820:	0419      	lsls	r1, r3, #16
     822:	2380      	movs	r3, #128	; 0x80
     824:	025b      	lsls	r3, r3, #9
     826:	400b      	ands	r3, r1
     828:	4903      	ldr	r1, [pc, #12]	; (838 <CLOCK_SetPllFllSelClock+0x2c>)
     82a:	4313      	orrs	r3, r2
     82c:	4a03      	ldr	r2, [pc, #12]	; (83c <CLOCK_SetPllFllSelClock+0x30>)
     82e:	508b      	str	r3, [r1, r2]
}
     830:	46c0      	nop			; (mov r8, r8)
     832:	46bd      	mov	sp, r7
     834:	b002      	add	sp, #8
     836:	bd80      	pop	{r7, pc}
     838:	40047000 	.word	0x40047000
     83c:	00001004 	.word	0x00001004
     840:	fffeffff 	.word	0xfffeffff

00000844 <OSC_SetExtRefClkConfig>:
 *
 * @param base   OSC peripheral address.
 * @param config Pointer to the configuration structure.
 */
static inline void OSC_SetExtRefClkConfig(OSC_Type *base, oscer_config_t const *config)
{
     844:	b580      	push	{r7, lr}
     846:	b084      	sub	sp, #16
     848:	af00      	add	r7, sp, #0
     84a:	6078      	str	r0, [r7, #4]
     84c:	6039      	str	r1, [r7, #0]
    uint8_t reg = base->CR;
     84e:	200f      	movs	r0, #15
     850:	183b      	adds	r3, r7, r0
     852:	687a      	ldr	r2, [r7, #4]
     854:	7812      	ldrb	r2, [r2, #0]
     856:	701a      	strb	r2, [r3, #0]

    reg &= ~(OSC_CR_ERCLKEN_MASK | OSC_CR_EREFSTEN_MASK);
     858:	183b      	adds	r3, r7, r0
     85a:	183a      	adds	r2, r7, r0
     85c:	7812      	ldrb	r2, [r2, #0]
     85e:	215f      	movs	r1, #95	; 0x5f
     860:	400a      	ands	r2, r1
     862:	701a      	strb	r2, [r3, #0]
    reg |= config->enableMode;
     864:	683b      	ldr	r3, [r7, #0]
     866:	7819      	ldrb	r1, [r3, #0]
     868:	183b      	adds	r3, r7, r0
     86a:	183a      	adds	r2, r7, r0
     86c:	7812      	ldrb	r2, [r2, #0]
     86e:	430a      	orrs	r2, r1
     870:	701a      	strb	r2, [r3, #0]

    base->CR = reg;
     872:	687b      	ldr	r3, [r7, #4]
     874:	183a      	adds	r2, r7, r0
     876:	7812      	ldrb	r2, [r2, #0]
     878:	701a      	strb	r2, [r3, #0]
}
     87a:	46c0      	nop			; (mov r8, r8)
     87c:	46bd      	mov	sp, r7
     87e:	b004      	add	sp, #16
     880:	bd80      	pop	{r7, pc}

00000882 <OSC_SetCapLoad>:
   // To enable only 2 pF and 8 pF capacitor load, please use like this.
   OSC_SetCapLoad(OSC, kOSC_Cap2P | kOSC_Cap8P);
   @endcode
 */
static inline void OSC_SetCapLoad(OSC_Type *base, uint8_t capLoad)
{
     882:	b580      	push	{r7, lr}
     884:	b084      	sub	sp, #16
     886:	af00      	add	r7, sp, #0
     888:	6078      	str	r0, [r7, #4]
     88a:	000a      	movs	r2, r1
     88c:	1cfb      	adds	r3, r7, #3
     88e:	701a      	strb	r2, [r3, #0]
    uint8_t reg = base->CR;
     890:	200f      	movs	r0, #15
     892:	183b      	adds	r3, r7, r0
     894:	687a      	ldr	r2, [r7, #4]
     896:	7812      	ldrb	r2, [r2, #0]
     898:	701a      	strb	r2, [r3, #0]

    reg &= ~(OSC_CR_SC2P_MASK | OSC_CR_SC4P_MASK | OSC_CR_SC8P_MASK | OSC_CR_SC16P_MASK);
     89a:	183b      	adds	r3, r7, r0
     89c:	183a      	adds	r2, r7, r0
     89e:	7812      	ldrb	r2, [r2, #0]
     8a0:	210f      	movs	r1, #15
     8a2:	438a      	bics	r2, r1
     8a4:	701a      	strb	r2, [r3, #0]
    reg |= capLoad;
     8a6:	183b      	adds	r3, r7, r0
     8a8:	1839      	adds	r1, r7, r0
     8aa:	1cfa      	adds	r2, r7, #3
     8ac:	7809      	ldrb	r1, [r1, #0]
     8ae:	7812      	ldrb	r2, [r2, #0]
     8b0:	430a      	orrs	r2, r1
     8b2:	701a      	strb	r2, [r3, #0]

    base->CR = reg;
     8b4:	687b      	ldr	r3, [r7, #4]
     8b6:	183a      	adds	r2, r7, r0
     8b8:	7812      	ldrb	r2, [r2, #0]
     8ba:	701a      	strb	r2, [r3, #0]
}
     8bc:	46c0      	nop			; (mov r8, r8)
     8be:	46bd      	mov	sp, r7
     8c0:	b004      	add	sp, #16
     8c2:	bd80      	pop	{r7, pc}

000008c4 <CLOCK_GetOscRangeFromFreq>:
    /* MCG external reference clock. */
    return CLOCK_GetMcgExtClkFreq();
}

static uint8_t CLOCK_GetOscRangeFromFreq(uint32_t freq)
{
     8c4:	b580      	push	{r7, lr}
     8c6:	b084      	sub	sp, #16
     8c8:	af00      	add	r7, sp, #0
     8ca:	6078      	str	r0, [r7, #4]
    uint8_t range;

    if (freq <= 39063U)
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	4a0e      	ldr	r2, [pc, #56]	; (908 <CLOCK_GetOscRangeFromFreq+0x44>)
     8d0:	4293      	cmp	r3, r2
     8d2:	d804      	bhi.n	8de <CLOCK_GetOscRangeFromFreq+0x1a>
    {
        range = 0U;
     8d4:	230f      	movs	r3, #15
     8d6:	18fb      	adds	r3, r7, r3
     8d8:	2200      	movs	r2, #0
     8da:	701a      	strb	r2, [r3, #0]
     8dc:	e00c      	b.n	8f8 <CLOCK_GetOscRangeFromFreq+0x34>
    }
    else if (freq <= 8000000U)
     8de:	687b      	ldr	r3, [r7, #4]
     8e0:	4a0a      	ldr	r2, [pc, #40]	; (90c <CLOCK_GetOscRangeFromFreq+0x48>)
     8e2:	4293      	cmp	r3, r2
     8e4:	d804      	bhi.n	8f0 <CLOCK_GetOscRangeFromFreq+0x2c>
    {
        range = 1U;
     8e6:	230f      	movs	r3, #15
     8e8:	18fb      	adds	r3, r7, r3
     8ea:	2201      	movs	r2, #1
     8ec:	701a      	strb	r2, [r3, #0]
     8ee:	e003      	b.n	8f8 <CLOCK_GetOscRangeFromFreq+0x34>
    }
    else
    {
        range = 2U;
     8f0:	230f      	movs	r3, #15
     8f2:	18fb      	adds	r3, r7, r3
     8f4:	2202      	movs	r2, #2
     8f6:	701a      	strb	r2, [r3, #0]
    }

    return range;
     8f8:	230f      	movs	r3, #15
     8fa:	18fb      	adds	r3, r7, r3
     8fc:	781b      	ldrb	r3, [r3, #0]
}
     8fe:	0018      	movs	r0, r3
     900:	46bd      	mov	sp, r7
     902:	b004      	add	sp, #16
     904:	bd80      	pop	{r7, pc}
     906:	46c0      	nop			; (mov r8, r8)
     908:	00009897 	.word	0x00009897
     90c:	007a1200 	.word	0x007a1200

00000910 <CLOCK_SetSimConfig>:

    return freq;
}

void CLOCK_SetSimConfig(sim_clock_config_t const *config)
{
     910:	b580      	push	{r7, lr}
     912:	b082      	sub	sp, #8
     914:	af00      	add	r7, sp, #0
     916:	6078      	str	r0, [r7, #4]
    SIM->CLKDIV1 = config->clkdiv1;
     918:	4909      	ldr	r1, [pc, #36]	; (940 <CLOCK_SetSimConfig+0x30>)
     91a:	687b      	ldr	r3, [r7, #4]
     91c:	685b      	ldr	r3, [r3, #4]
     91e:	4a09      	ldr	r2, [pc, #36]	; (944 <CLOCK_SetSimConfig+0x34>)
     920:	508b      	str	r3, [r1, r2]
    CLOCK_SetPllFllSelClock(config->pllFllSel);
     922:	687b      	ldr	r3, [r7, #4]
     924:	781b      	ldrb	r3, [r3, #0]
     926:	0018      	movs	r0, r3
     928:	f7ff ff70 	bl	80c <CLOCK_SetPllFllSelClock>
    CLOCK_SetEr32kClock(config->er32kSrc);
     92c:	687b      	ldr	r3, [r7, #4]
     92e:	785b      	ldrb	r3, [r3, #1]
     930:	0018      	movs	r0, r3
     932:	f7ff ff51 	bl	7d8 <CLOCK_SetEr32kClock>
}
     936:	46c0      	nop			; (mov r8, r8)
     938:	46bd      	mov	sp, r7
     93a:	b002      	add	sp, #8
     93c:	bd80      	pop	{r7, pc}
     93e:	46c0      	nop			; (mov r8, r8)
     940:	40047000 	.word	0x40047000
     944:	00001044 	.word	0x00001044

00000948 <CLOCK_SetExternalRefClkConfig>:

    return mcgpll0clk;
}

status_t CLOCK_SetExternalRefClkConfig(mcg_oscsel_t oscsel)
{
     948:	b580      	push	{r7, lr}
     94a:	b082      	sub	sp, #8
     94c:	af00      	add	r7, sp, #0
     94e:	0002      	movs	r2, r0
     950:	1dfb      	adds	r3, r7, #7
     952:	701a      	strb	r2, [r3, #0]
#if (defined(MCG_CONFIG_CHECK_PARAM) && MCG_CONFIG_CHECK_PARAM)
#endif /* MCG_CONFIG_CHECK_PARAM */

    return kStatus_Success;
     954:	2300      	movs	r3, #0
}
     956:	0018      	movs	r0, r3
     958:	46bd      	mov	sp, r7
     95a:	b002      	add	sp, #8
     95c:	bd80      	pop	{r7, pc}
	...

00000960 <CLOCK_SetInternalRefClkConfig>:

status_t CLOCK_SetInternalRefClkConfig(uint8_t enableMode, mcg_irc_mode_t ircs, uint8_t fcrdiv)
{
     960:	b590      	push	{r4, r7, lr}
     962:	b085      	sub	sp, #20
     964:	af00      	add	r7, sp, #0
     966:	0004      	movs	r4, r0
     968:	0008      	movs	r0, r1
     96a:	0011      	movs	r1, r2
     96c:	1dfb      	adds	r3, r7, #7
     96e:	1c22      	adds	r2, r4, #0
     970:	701a      	strb	r2, [r3, #0]
     972:	1dbb      	adds	r3, r7, #6
     974:	1c02      	adds	r2, r0, #0
     976:	701a      	strb	r2, [r3, #0]
     978:	1d7b      	adds	r3, r7, #5
     97a:	1c0a      	adds	r2, r1, #0
     97c:	701a      	strb	r2, [r3, #0]
    uint32_t mcgOutClkState = MCG_S_CLKST_VAL;
     97e:	4b40      	ldr	r3, [pc, #256]	; (a80 <CLOCK_SetInternalRefClkConfig+0x120>)
     980:	799b      	ldrb	r3, [r3, #6]
     982:	b2db      	uxtb	r3, r3
     984:	089b      	lsrs	r3, r3, #2
     986:	2203      	movs	r2, #3
     988:	4013      	ands	r3, r2
     98a:	60fb      	str	r3, [r7, #12]
    mcg_irc_mode_t curIrcs = (mcg_irc_mode_t)MCG_S_IRCST_VAL;
     98c:	4b3c      	ldr	r3, [pc, #240]	; (a80 <CLOCK_SetInternalRefClkConfig+0x120>)
     98e:	799b      	ldrb	r3, [r3, #6]
     990:	b2da      	uxtb	r2, r3
     992:	200b      	movs	r0, #11
     994:	183b      	adds	r3, r7, r0
     996:	2101      	movs	r1, #1
     998:	400a      	ands	r2, r1
     99a:	701a      	strb	r2, [r3, #0]
    uint8_t curFcrdiv = MCG_SC_FCRDIV_VAL;
     99c:	4b38      	ldr	r3, [pc, #224]	; (a80 <CLOCK_SetInternalRefClkConfig+0x120>)
     99e:	7a1b      	ldrb	r3, [r3, #8]
     9a0:	b2db      	uxtb	r3, r3
     9a2:	085b      	lsrs	r3, r3, #1
     9a4:	b2da      	uxtb	r2, r3
     9a6:	240a      	movs	r4, #10
     9a8:	193b      	adds	r3, r7, r4
     9aa:	2107      	movs	r1, #7
     9ac:	400a      	ands	r2, r1
     9ae:	701a      	strb	r2, [r3, #0]
        }
    }
#endif

    /* If need to update the FCRDIV. */
    if (fcrdiv != curFcrdiv)
     9b0:	1d7a      	adds	r2, r7, #5
     9b2:	193b      	adds	r3, r7, r4
     9b4:	7812      	ldrb	r2, [r2, #0]
     9b6:	781b      	ldrb	r3, [r3, #0]
     9b8:	429a      	cmp	r2, r3
     9ba:	d02e      	beq.n	a1a <CLOCK_SetInternalRefClkConfig+0xba>
    {
        /* If fast IRC is in use currently, change to slow IRC. */
        if ((kMCG_IrcFast == curIrcs) && ((mcgOutClkState == kMCG_ClkOutStatInt) || (MCG->C1 & MCG_C1_IRCLKEN_MASK)))
     9bc:	183b      	adds	r3, r7, r0
     9be:	781b      	ldrb	r3, [r3, #0]
     9c0:	2b01      	cmp	r3, #1
     9c2:	d119      	bne.n	9f8 <CLOCK_SetInternalRefClkConfig+0x98>
     9c4:	68fb      	ldr	r3, [r7, #12]
     9c6:	2b01      	cmp	r3, #1
     9c8:	d006      	beq.n	9d8 <CLOCK_SetInternalRefClkConfig+0x78>
     9ca:	4b2d      	ldr	r3, [pc, #180]	; (a80 <CLOCK_SetInternalRefClkConfig+0x120>)
     9cc:	781b      	ldrb	r3, [r3, #0]
     9ce:	b2db      	uxtb	r3, r3
     9d0:	001a      	movs	r2, r3
     9d2:	2302      	movs	r3, #2
     9d4:	4013      	ands	r3, r2
     9d6:	d00f      	beq.n	9f8 <CLOCK_SetInternalRefClkConfig+0x98>
        {
            MCG->C2 = ((MCG->C2 & ~MCG_C2_IRCS_MASK) | (MCG_C2_IRCS(kMCG_IrcSlow)));
     9d8:	4b29      	ldr	r3, [pc, #164]	; (a80 <CLOCK_SetInternalRefClkConfig+0x120>)
     9da:	785b      	ldrb	r3, [r3, #1]
     9dc:	b2db      	uxtb	r3, r3
     9de:	4a28      	ldr	r2, [pc, #160]	; (a80 <CLOCK_SetInternalRefClkConfig+0x120>)
     9e0:	2101      	movs	r1, #1
     9e2:	438b      	bics	r3, r1
     9e4:	b2db      	uxtb	r3, r3
     9e6:	7053      	strb	r3, [r2, #1]
            while (MCG_S_IRCST_VAL != kMCG_IrcSlow)
     9e8:	46c0      	nop			; (mov r8, r8)
     9ea:	4b25      	ldr	r3, [pc, #148]	; (a80 <CLOCK_SetInternalRefClkConfig+0x120>)
     9ec:	799b      	ldrb	r3, [r3, #6]
     9ee:	b2db      	uxtb	r3, r3
     9f0:	001a      	movs	r2, r3
     9f2:	2301      	movs	r3, #1
     9f4:	4013      	ands	r3, r2
     9f6:	d1f8      	bne.n	9ea <CLOCK_SetInternalRefClkConfig+0x8a>
            {
            }
        }
        /* Update FCRDIV. */
        MCG->SC = (MCG->SC & ~(MCG_SC_FCRDIV_MASK | MCG_SC_ATMF_MASK | MCG_SC_LOCS0_MASK)) | MCG_SC_FCRDIV(fcrdiv);
     9f8:	4b21      	ldr	r3, [pc, #132]	; (a80 <CLOCK_SetInternalRefClkConfig+0x120>)
     9fa:	7a1b      	ldrb	r3, [r3, #8]
     9fc:	b2db      	uxtb	r3, r3
     9fe:	222f      	movs	r2, #47	; 0x2f
     a00:	4393      	bics	r3, r2
     a02:	b2da      	uxtb	r2, r3
     a04:	1d7b      	adds	r3, r7, #5
     a06:	781b      	ldrb	r3, [r3, #0]
     a08:	18db      	adds	r3, r3, r3
     a0a:	b2db      	uxtb	r3, r3
     a0c:	210e      	movs	r1, #14
     a0e:	400b      	ands	r3, r1
     a10:	b2db      	uxtb	r3, r3
     a12:	491b      	ldr	r1, [pc, #108]	; (a80 <CLOCK_SetInternalRefClkConfig+0x120>)
     a14:	4313      	orrs	r3, r2
     a16:	b2db      	uxtb	r3, r3
     a18:	720b      	strb	r3, [r1, #8]
    }

    /* Set internal reference clock selection. */
    MCG->C2 = (MCG->C2 & ~MCG_C2_IRCS_MASK) | (MCG_C2_IRCS(ircs));
     a1a:	4b19      	ldr	r3, [pc, #100]	; (a80 <CLOCK_SetInternalRefClkConfig+0x120>)
     a1c:	785b      	ldrb	r3, [r3, #1]
     a1e:	b2db      	uxtb	r3, r3
     a20:	2201      	movs	r2, #1
     a22:	4393      	bics	r3, r2
     a24:	b2da      	uxtb	r2, r3
     a26:	1dbb      	adds	r3, r7, #6
     a28:	781b      	ldrb	r3, [r3, #0]
     a2a:	2101      	movs	r1, #1
     a2c:	400b      	ands	r3, r1
     a2e:	b2db      	uxtb	r3, r3
     a30:	4913      	ldr	r1, [pc, #76]	; (a80 <CLOCK_SetInternalRefClkConfig+0x120>)
     a32:	4313      	orrs	r3, r2
     a34:	b2db      	uxtb	r3, r3
     a36:	704b      	strb	r3, [r1, #1]
    MCG->C1 = (MCG->C1 & ~(MCG_C1_IRCLKEN_MASK | MCG_C1_IREFSTEN_MASK)) | (uint8_t)enableMode;
     a38:	4b11      	ldr	r3, [pc, #68]	; (a80 <CLOCK_SetInternalRefClkConfig+0x120>)
     a3a:	781b      	ldrb	r3, [r3, #0]
     a3c:	b2db      	uxtb	r3, r3
     a3e:	2203      	movs	r2, #3
     a40:	4393      	bics	r3, r2
     a42:	b2da      	uxtb	r2, r3
     a44:	490e      	ldr	r1, [pc, #56]	; (a80 <CLOCK_SetInternalRefClkConfig+0x120>)
     a46:	1dfb      	adds	r3, r7, #7
     a48:	781b      	ldrb	r3, [r3, #0]
     a4a:	4313      	orrs	r3, r2
     a4c:	b2db      	uxtb	r3, r3
     a4e:	700b      	strb	r3, [r1, #0]

    /* If MCGIRCLK is used, need to wait for MCG_S_IRCST. */
    if ((mcgOutClkState == kMCG_ClkOutStatInt) || (enableMode & kMCG_IrclkEnable))
     a50:	68fb      	ldr	r3, [r7, #12]
     a52:	2b01      	cmp	r3, #1
     a54:	d004      	beq.n	a60 <CLOCK_SetInternalRefClkConfig+0x100>
     a56:	1dfb      	adds	r3, r7, #7
     a58:	781b      	ldrb	r3, [r3, #0]
     a5a:	2202      	movs	r2, #2
     a5c:	4013      	ands	r3, r2
     a5e:	d00a      	beq.n	a76 <CLOCK_SetInternalRefClkConfig+0x116>
    {
        while (MCG_S_IRCST_VAL != ircs)
     a60:	46c0      	nop			; (mov r8, r8)
     a62:	4b07      	ldr	r3, [pc, #28]	; (a80 <CLOCK_SetInternalRefClkConfig+0x120>)
     a64:	799b      	ldrb	r3, [r3, #6]
     a66:	b2db      	uxtb	r3, r3
     a68:	001a      	movs	r2, r3
     a6a:	2301      	movs	r3, #1
     a6c:	401a      	ands	r2, r3
     a6e:	1dbb      	adds	r3, r7, #6
     a70:	781b      	ldrb	r3, [r3, #0]
     a72:	429a      	cmp	r2, r3
     a74:	d1f5      	bne.n	a62 <CLOCK_SetInternalRefClkConfig+0x102>
        {
        }
    }

    return kStatus_Success;
     a76:	2300      	movs	r3, #0
}
     a78:	0018      	movs	r0, r3
     a7a:	46bd      	mov	sp, r7
     a7c:	b005      	add	sp, #20
     a7e:	bd90      	pop	{r4, r7, pc}
     a80:	40064000 	.word	0x40064000

00000a84 <CLOCK_EnablePll0>:
        return 0U;
    }
}

void CLOCK_EnablePll0(mcg_pll_config_t const *config)
{
     a84:	b580      	push	{r7, lr}
     a86:	b084      	sub	sp, #16
     a88:	af00      	add	r7, sp, #0
     a8a:	6078      	str	r0, [r7, #4]
    assert(config);
     a8c:	687b      	ldr	r3, [r7, #4]
     a8e:	2b00      	cmp	r3, #0
     a90:	d106      	bne.n	aa0 <CLOCK_EnablePll0+0x1c>
     a92:	4b20      	ldr	r3, [pc, #128]	; (b14 <CLOCK_EnablePll0+0x90>)
     a94:	4a20      	ldr	r2, [pc, #128]	; (b18 <CLOCK_EnablePll0+0x94>)
     a96:	21c1      	movs	r1, #193	; 0xc1
     a98:	0089      	lsls	r1, r1, #2
     a9a:	4820      	ldr	r0, [pc, #128]	; (b1c <CLOCK_EnablePll0+0x98>)
     a9c:	f008 f990 	bl	8dc0 <__assert_func>

    uint8_t mcg_c5 = 0U;
     aa0:	200f      	movs	r0, #15
     aa2:	183b      	adds	r3, r7, r0
     aa4:	2200      	movs	r2, #0
     aa6:	701a      	strb	r2, [r3, #0]

    mcg_c5 |= MCG_C5_PRDIV0(config->prdiv);
     aa8:	687b      	ldr	r3, [r7, #4]
     aaa:	785b      	ldrb	r3, [r3, #1]
     aac:	221f      	movs	r2, #31
     aae:	4013      	ands	r3, r2
     ab0:	b2d9      	uxtb	r1, r3
     ab2:	183b      	adds	r3, r7, r0
     ab4:	183a      	adds	r2, r7, r0
     ab6:	7812      	ldrb	r2, [r2, #0]
     ab8:	430a      	orrs	r2, r1
     aba:	701a      	strb	r2, [r3, #0]
    MCG->C5 = mcg_c5; /* Disable the PLL first. */
     abc:	4a18      	ldr	r2, [pc, #96]	; (b20 <CLOCK_EnablePll0+0x9c>)
     abe:	183b      	adds	r3, r7, r0
     ac0:	781b      	ldrb	r3, [r3, #0]
     ac2:	7113      	strb	r3, [r2, #4]

    MCG->C6 = (MCG->C6 & ~MCG_C6_VDIV0_MASK) | MCG_C6_VDIV0(config->vdiv);
     ac4:	4b16      	ldr	r3, [pc, #88]	; (b20 <CLOCK_EnablePll0+0x9c>)
     ac6:	795b      	ldrb	r3, [r3, #5]
     ac8:	b2db      	uxtb	r3, r3
     aca:	221f      	movs	r2, #31
     acc:	4393      	bics	r3, r2
     ace:	b2da      	uxtb	r2, r3
     ad0:	687b      	ldr	r3, [r7, #4]
     ad2:	789b      	ldrb	r3, [r3, #2]
     ad4:	211f      	movs	r1, #31
     ad6:	400b      	ands	r3, r1
     ad8:	b2db      	uxtb	r3, r3
     ada:	4911      	ldr	r1, [pc, #68]	; (b20 <CLOCK_EnablePll0+0x9c>)
     adc:	4313      	orrs	r3, r2
     ade:	b2db      	uxtb	r3, r3
     ae0:	714b      	strb	r3, [r1, #5]

    /* Set enable mode. */
    MCG->C5 |= ((uint32_t)kMCG_PllEnableIndependent | (uint32_t)config->enableMode);
     ae2:	4b0f      	ldr	r3, [pc, #60]	; (b20 <CLOCK_EnablePll0+0x9c>)
     ae4:	791b      	ldrb	r3, [r3, #4]
     ae6:	b2da      	uxtb	r2, r3
     ae8:	687b      	ldr	r3, [r7, #4]
     aea:	781b      	ldrb	r3, [r3, #0]
     aec:	4313      	orrs	r3, r2
     aee:	b2db      	uxtb	r3, r3
     af0:	4a0b      	ldr	r2, [pc, #44]	; (b20 <CLOCK_EnablePll0+0x9c>)
     af2:	2140      	movs	r1, #64	; 0x40
     af4:	430b      	orrs	r3, r1
     af6:	b2db      	uxtb	r3, r3
     af8:	7113      	strb	r3, [r2, #4]

    /* Wait for PLL lock. */
    while (!(MCG->S & MCG_S_LOCK0_MASK))
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	4b08      	ldr	r3, [pc, #32]	; (b20 <CLOCK_EnablePll0+0x9c>)
     afe:	799b      	ldrb	r3, [r3, #6]
     b00:	b2db      	uxtb	r3, r3
     b02:	001a      	movs	r2, r3
     b04:	2340      	movs	r3, #64	; 0x40
     b06:	4013      	ands	r3, r2
     b08:	d0f8      	beq.n	afc <CLOCK_EnablePll0+0x78>
    {
    }
}
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	46c0      	nop			; (mov r8, r8)
     b0e:	46bd      	mov	sp, r7
     b10:	b004      	add	sp, #16
     b12:	bd80      	pop	{r7, pc}
     b14:	0000b468 	.word	0x0000b468
     b18:	0000b470 	.word	0x0000b470
     b1c:	0000b430 	.word	0x0000b430
     b20:	40064000 	.word	0x40064000

00000b24 <CLOCK_InitOsc0>:
        MCG->S = MCG_S_LOLS0_MASK;
    }
}

void CLOCK_InitOsc0(osc_config_t const *config)
{
     b24:	b5b0      	push	{r4, r5, r7, lr}
     b26:	b084      	sub	sp, #16
     b28:	af00      	add	r7, sp, #0
     b2a:	6078      	str	r0, [r7, #4]
    uint8_t range = CLOCK_GetOscRangeFromFreq(config->freq);
     b2c:	687b      	ldr	r3, [r7, #4]
     b2e:	681b      	ldr	r3, [r3, #0]
     b30:	250f      	movs	r5, #15
     b32:	197c      	adds	r4, r7, r5
     b34:	0018      	movs	r0, r3
     b36:	f7ff fec5 	bl	8c4 <CLOCK_GetOscRangeFromFreq>
     b3a:	0003      	movs	r3, r0
     b3c:	7023      	strb	r3, [r4, #0]

    OSC_SetCapLoad(OSC0, config->capLoad);
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	791b      	ldrb	r3, [r3, #4]
     b42:	4a1b      	ldr	r2, [pc, #108]	; (bb0 <CLOCK_InitOsc0+0x8c>)
     b44:	0019      	movs	r1, r3
     b46:	0010      	movs	r0, r2
     b48:	f7ff fe9b 	bl	882 <OSC_SetCapLoad>
    OSC_SetExtRefClkConfig(OSC0, &config->oscerConfig);
     b4c:	687b      	ldr	r3, [r7, #4]
     b4e:	3306      	adds	r3, #6
     b50:	4a17      	ldr	r2, [pc, #92]	; (bb0 <CLOCK_InitOsc0+0x8c>)
     b52:	0019      	movs	r1, r3
     b54:	0010      	movs	r0, r2
     b56:	f7ff fe75 	bl	844 <OSC_SetExtRefClkConfig>

    MCG->C2 = ((MCG->C2 & ~OSC_MODE_MASK) | MCG_C2_RANGE(range) | (uint8_t)config->workMode);
     b5a:	4b16      	ldr	r3, [pc, #88]	; (bb4 <CLOCK_InitOsc0+0x90>)
     b5c:	785b      	ldrb	r3, [r3, #1]
     b5e:	b2db      	uxtb	r3, r3
     b60:	223c      	movs	r2, #60	; 0x3c
     b62:	4393      	bics	r3, r2
     b64:	b2da      	uxtb	r2, r3
     b66:	197b      	adds	r3, r7, r5
     b68:	781b      	ldrb	r3, [r3, #0]
     b6a:	011b      	lsls	r3, r3, #4
     b6c:	b2db      	uxtb	r3, r3
     b6e:	2130      	movs	r1, #48	; 0x30
     b70:	400b      	ands	r3, r1
     b72:	b2db      	uxtb	r3, r3
     b74:	4313      	orrs	r3, r2
     b76:	b2da      	uxtb	r2, r3
     b78:	687b      	ldr	r3, [r7, #4]
     b7a:	795b      	ldrb	r3, [r3, #5]
     b7c:	490d      	ldr	r1, [pc, #52]	; (bb4 <CLOCK_InitOsc0+0x90>)
     b7e:	4313      	orrs	r3, r2
     b80:	b2db      	uxtb	r3, r3
     b82:	704b      	strb	r3, [r1, #1]

    if ((kOSC_ModeExt != config->workMode) && (OSC0->CR & OSC_CR_ERCLKEN_MASK))
     b84:	687b      	ldr	r3, [r7, #4]
     b86:	795b      	ldrb	r3, [r3, #5]
     b88:	2b00      	cmp	r3, #0
     b8a:	d00d      	beq.n	ba8 <CLOCK_InitOsc0+0x84>
     b8c:	4b08      	ldr	r3, [pc, #32]	; (bb0 <CLOCK_InitOsc0+0x8c>)
     b8e:	781b      	ldrb	r3, [r3, #0]
     b90:	b2db      	uxtb	r3, r3
     b92:	b25b      	sxtb	r3, r3
     b94:	2b00      	cmp	r3, #0
     b96:	da07      	bge.n	ba8 <CLOCK_InitOsc0+0x84>
    {
        /* Wait for stable. */
        while (!(MCG->S & MCG_S_OSCINIT0_MASK))
     b98:	46c0      	nop			; (mov r8, r8)
     b9a:	4b06      	ldr	r3, [pc, #24]	; (bb4 <CLOCK_InitOsc0+0x90>)
     b9c:	799b      	ldrb	r3, [r3, #6]
     b9e:	b2db      	uxtb	r3, r3
     ba0:	001a      	movs	r2, r3
     ba2:	2302      	movs	r3, #2
     ba4:	4013      	ands	r3, r2
     ba6:	d0f8      	beq.n	b9a <CLOCK_InitOsc0+0x76>
        {
        }
    }
}
     ba8:	46c0      	nop			; (mov r8, r8)
     baa:	46bd      	mov	sp, r7
     bac:	b004      	add	sp, #16
     bae:	bdb0      	pop	{r4, r5, r7, pc}
     bb0:	40065000 	.word	0x40065000
     bb4:	40064000 	.word	0x40064000

00000bb8 <CLOCK_SetPbeMode>:

    return kStatus_Success;
}

status_t CLOCK_SetPbeMode(mcg_pll_clk_select_t pllcs, mcg_pll_config_t const *config)
{
     bb8:	b580      	push	{r7, lr}
     bba:	b082      	sub	sp, #8
     bbc:	af00      	add	r7, sp, #0
     bbe:	0002      	movs	r2, r0
     bc0:	6039      	str	r1, [r7, #0]
     bc2:	1dfb      	adds	r3, r7, #7
     bc4:	701a      	strb	r2, [r3, #0]
    assert(config);
     bc6:	683b      	ldr	r3, [r7, #0]
     bc8:	2b00      	cmp	r3, #0
     bca:	d106      	bne.n	bda <CLOCK_SetPbeMode+0x22>
     bcc:	4b26      	ldr	r3, [pc, #152]	; (c68 <CLOCK_SetPbeMode+0xb0>)
     bce:	4a27      	ldr	r2, [pc, #156]	; (c6c <CLOCK_SetPbeMode+0xb4>)
     bd0:	21ae      	movs	r1, #174	; 0xae
     bd2:	00c9      	lsls	r1, r1, #3
     bd4:	4826      	ldr	r0, [pc, #152]	; (c70 <CLOCK_SetPbeMode+0xb8>)
     bd6:	f008 f8f3 	bl	8dc0 <__assert_func>

    /*
       This function is designed to change MCG to PBE mode from PEE/BLPE/FBE,
       but with this workflow, the source mode could be all modes except PEI/PBI.
     */
    MCG->C2 &= ~MCG_C2_LP_MASK; /* Disable lowpower. */
     bda:	4b26      	ldr	r3, [pc, #152]	; (c74 <CLOCK_SetPbeMode+0xbc>)
     bdc:	785b      	ldrb	r3, [r3, #1]
     bde:	b2db      	uxtb	r3, r3
     be0:	4a24      	ldr	r2, [pc, #144]	; (c74 <CLOCK_SetPbeMode+0xbc>)
     be2:	2102      	movs	r1, #2
     be4:	438b      	bics	r3, r1
     be6:	b2db      	uxtb	r3, r3
     be8:	7053      	strb	r3, [r2, #1]

    /* Change to use external clock first. */
    MCG->C1 = ((MCG->C1 & ~(MCG_C1_CLKS_MASK | MCG_C1_IREFS_MASK)) | MCG_C1_CLKS(kMCG_ClkOutSrcExternal));
     bea:	4b22      	ldr	r3, [pc, #136]	; (c74 <CLOCK_SetPbeMode+0xbc>)
     bec:	781b      	ldrb	r3, [r3, #0]
     bee:	b2db      	uxtb	r3, r3
     bf0:	223b      	movs	r2, #59	; 0x3b
     bf2:	4013      	ands	r3, r2
     bf4:	b2db      	uxtb	r3, r3
     bf6:	491f      	ldr	r1, [pc, #124]	; (c74 <CLOCK_SetPbeMode+0xbc>)
     bf8:	2280      	movs	r2, #128	; 0x80
     bfa:	4252      	negs	r2, r2
     bfc:	4313      	orrs	r3, r2
     bfe:	b2db      	uxtb	r3, r3
     c00:	700b      	strb	r3, [r1, #0]

    /* Wait for CLKST clock status bits to show clock source is ext ref clk */
    while ((MCG->S & (MCG_S_IREFST_MASK | MCG_S_CLKST_MASK)) !=
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	4b1b      	ldr	r3, [pc, #108]	; (c74 <CLOCK_SetPbeMode+0xbc>)
     c06:	799b      	ldrb	r3, [r3, #6]
     c08:	b2db      	uxtb	r3, r3
     c0a:	001a      	movs	r2, r3
     c0c:	231c      	movs	r3, #28
     c0e:	4013      	ands	r3, r2
     c10:	2b08      	cmp	r3, #8
     c12:	d1f7      	bne.n	c04 <CLOCK_SetPbeMode+0x4c>
           (MCG_S_IREFST(kMCG_FllSrcExternal) | MCG_S_CLKST(kMCG_ClkOutStatExt)))
    {
    }

    /* Disable PLL first, then configure PLL. */
    MCG->C6 &= ~MCG_C6_PLLS_MASK;
     c14:	4b17      	ldr	r3, [pc, #92]	; (c74 <CLOCK_SetPbeMode+0xbc>)
     c16:	795b      	ldrb	r3, [r3, #5]
     c18:	b2db      	uxtb	r3, r3
     c1a:	4a16      	ldr	r2, [pc, #88]	; (c74 <CLOCK_SetPbeMode+0xbc>)
     c1c:	2140      	movs	r1, #64	; 0x40
     c1e:	438b      	bics	r3, r1
     c20:	b2db      	uxtb	r3, r3
     c22:	7153      	strb	r3, [r2, #5]
    while (MCG->S & MCG_S_PLLST_MASK)
     c24:	46c0      	nop			; (mov r8, r8)
     c26:	4b13      	ldr	r3, [pc, #76]	; (c74 <CLOCK_SetPbeMode+0xbc>)
     c28:	799b      	ldrb	r3, [r3, #6]
     c2a:	b2db      	uxtb	r3, r3
     c2c:	001a      	movs	r2, r3
     c2e:	2320      	movs	r3, #32
     c30:	4013      	ands	r3, r2
     c32:	d1f8      	bne.n	c26 <CLOCK_SetPbeMode+0x6e>
    {
    }

    /* Configure the PLL. */
    {
        CLOCK_EnablePll0(config);
     c34:	683b      	ldr	r3, [r7, #0]
     c36:	0018      	movs	r0, r3
     c38:	f7ff ff24 	bl	a84 <CLOCK_EnablePll0>
    }

    /* Change to PLL mode. */
    MCG->C6 |= MCG_C6_PLLS_MASK;
     c3c:	4b0d      	ldr	r3, [pc, #52]	; (c74 <CLOCK_SetPbeMode+0xbc>)
     c3e:	795b      	ldrb	r3, [r3, #5]
     c40:	b2db      	uxtb	r3, r3
     c42:	4a0c      	ldr	r2, [pc, #48]	; (c74 <CLOCK_SetPbeMode+0xbc>)
     c44:	2140      	movs	r1, #64	; 0x40
     c46:	430b      	orrs	r3, r1
     c48:	b2db      	uxtb	r3, r3
     c4a:	7153      	strb	r3, [r2, #5]

    /* Wait for PLL mode changed. */
    while (!(MCG->S & MCG_S_PLLST_MASK))
     c4c:	46c0      	nop			; (mov r8, r8)
     c4e:	4b09      	ldr	r3, [pc, #36]	; (c74 <CLOCK_SetPbeMode+0xbc>)
     c50:	799b      	ldrb	r3, [r3, #6]
     c52:	b2db      	uxtb	r3, r3
     c54:	001a      	movs	r2, r3
     c56:	2320      	movs	r3, #32
     c58:	4013      	ands	r3, r2
     c5a:	d0f8      	beq.n	c4e <CLOCK_SetPbeMode+0x96>
    {
    }

    return kStatus_Success;
     c5c:	2300      	movs	r3, #0
}
     c5e:	0018      	movs	r0, r3
     c60:	46bd      	mov	sp, r7
     c62:	b002      	add	sp, #8
     c64:	bd80      	pop	{r7, pc}
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	0000b468 	.word	0x0000b468
     c6c:	0000b484 	.word	0x0000b484
     c70:	0000b430 	.word	0x0000b430
     c74:	40064000 	.word	0x40064000

00000c78 <CLOCK_BootToPeeMode>:

    return kStatus_Success;
}

status_t CLOCK_BootToPeeMode(mcg_oscsel_t oscsel, mcg_pll_clk_select_t pllcs, mcg_pll_config_t const *config)
{
     c78:	b580      	push	{r7, lr}
     c7a:	b082      	sub	sp, #8
     c7c:	af00      	add	r7, sp, #0
     c7e:	603a      	str	r2, [r7, #0]
     c80:	1dfb      	adds	r3, r7, #7
     c82:	1c02      	adds	r2, r0, #0
     c84:	701a      	strb	r2, [r3, #0]
     c86:	1dbb      	adds	r3, r7, #6
     c88:	1c0a      	adds	r2, r1, #0
     c8a:	701a      	strb	r2, [r3, #0]
    assert(config);
     c8c:	683b      	ldr	r3, [r7, #0]
     c8e:	2b00      	cmp	r3, #0
     c90:	d105      	bne.n	c9e <CLOCK_BootToPeeMode+0x26>
     c92:	4b14      	ldr	r3, [pc, #80]	; (ce4 <CLOCK_BootToPeeMode+0x6c>)
     c94:	4a14      	ldr	r2, [pc, #80]	; (ce8 <CLOCK_BootToPeeMode+0x70>)
     c96:	4915      	ldr	r1, [pc, #84]	; (cec <CLOCK_BootToPeeMode+0x74>)
     c98:	4815      	ldr	r0, [pc, #84]	; (cf0 <CLOCK_BootToPeeMode+0x78>)
     c9a:	f008 f891 	bl	8dc0 <__assert_func>

    CLOCK_SetExternalRefClkConfig(oscsel);
     c9e:	1dfb      	adds	r3, r7, #7
     ca0:	781b      	ldrb	r3, [r3, #0]
     ca2:	0018      	movs	r0, r3
     ca4:	f7ff fe50 	bl	948 <CLOCK_SetExternalRefClkConfig>

    CLOCK_SetPbeMode(pllcs, config);
     ca8:	683a      	ldr	r2, [r7, #0]
     caa:	1dbb      	adds	r3, r7, #6
     cac:	781b      	ldrb	r3, [r3, #0]
     cae:	0011      	movs	r1, r2
     cb0:	0018      	movs	r0, r3
     cb2:	f7ff ff81 	bl	bb8 <CLOCK_SetPbeMode>

    /* Change to use PLL output clock. */
    MCG->C1 = (MCG->C1 & ~MCG_C1_CLKS_MASK) | MCG_C1_CLKS(kMCG_ClkOutSrcOut);
     cb6:	4b0f      	ldr	r3, [pc, #60]	; (cf4 <CLOCK_BootToPeeMode+0x7c>)
     cb8:	781b      	ldrb	r3, [r3, #0]
     cba:	b2db      	uxtb	r3, r3
     cbc:	4a0d      	ldr	r2, [pc, #52]	; (cf4 <CLOCK_BootToPeeMode+0x7c>)
     cbe:	213f      	movs	r1, #63	; 0x3f
     cc0:	400b      	ands	r3, r1
     cc2:	b2db      	uxtb	r3, r3
     cc4:	7013      	strb	r3, [r2, #0]
    while (MCG_S_CLKST_VAL != kMCG_ClkOutStatPll)
     cc6:	46c0      	nop			; (mov r8, r8)
     cc8:	4b0a      	ldr	r3, [pc, #40]	; (cf4 <CLOCK_BootToPeeMode+0x7c>)
     cca:	799b      	ldrb	r3, [r3, #6]
     ccc:	b2db      	uxtb	r3, r3
     cce:	089b      	lsrs	r3, r3, #2
     cd0:	2203      	movs	r2, #3
     cd2:	4013      	ands	r3, r2
     cd4:	2b03      	cmp	r3, #3
     cd6:	d1f7      	bne.n	cc8 <CLOCK_BootToPeeMode+0x50>
    {
    }

    return kStatus_Success;
     cd8:	2300      	movs	r3, #0
}
     cda:	0018      	movs	r0, r3
     cdc:	46bd      	mov	sp, r7
     cde:	b002      	add	sp, #8
     ce0:	bd80      	pop	{r7, pc}
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	0000b468 	.word	0x0000b468
     ce8:	0000b498 	.word	0x0000b498
     cec:	00000619 	.word	0x00000619
     cf0:	0000b430 	.word	0x0000b430
     cf4:	40064000 	.word	0x40064000

00000cf8 <Reset_Handler>:
    .align 2
    .globl   Reset_Handler
    .weak    Reset_Handler
    .type    Reset_Handler, %function
Reset_Handler:
    cpsid   i               /* Mask interrupts */
     cf8:	b672      	cpsid	i
#ifndef __NO_SYSTEM_INIT
    bl SystemInit
     cfa:	f7ff fc21 	bl	540 <SystemInit>
#endif
    bl init_data_bss
     cfe:	f000 f807 	bl	d10 <init_data_bss>
    cpsie   i               /* Unmask interrupts */
     d02:	b662      	cpsie	i
#ifndef __START
#define __START main
#endif
#ifndef __ATOLLIC__
    bl    __START
     d04:	f7ff fc12 	bl	52c <main>

00000d08 <ADC0_IRQHandler>:
    .align	1
    .thumb_func
    .weak DefaultISR
    .type DefaultISR, %function
DefaultISR:
    ldr	r0, =DefaultISR
     d08:	4800      	ldr	r0, [pc, #0]	; (d0c <ADC0_IRQHandler+0x4>)
    bx r0
     d0a:	4700      	bx	r0
    ldr	r0, =DefaultISR
     d0c:	00000d09 	.word	0x00000d09

00000d10 <init_data_bss>:
/*******************************************************************************
 * Code
 ******************************************************************************/

void init_data_bss(void)
{
     d10:	b580      	push	{r7, lr}
     d12:	b084      	sub	sp, #16
     d14:	af00      	add	r7, sp, #0
    /* Declare a counter we'll use in all of the copy loops */
    uint32_t n;

    uint8_t * bss_start, * bss_end;

	bss_start = (uint8_t *)__bss_start__;
     d16:	4b0c      	ldr	r3, [pc, #48]	; (d48 <init_data_bss+0x38>)
     d18:	60bb      	str	r3, [r7, #8]
	bss_end = (uint8_t *)__bss_end__;
     d1a:	4b0c      	ldr	r3, [pc, #48]	; (d4c <init_data_bss+0x3c>)
     d1c:	607b      	str	r3, [r7, #4]

    /* Clear the zero-initialized data section */
    n = bss_end - bss_start;
     d1e:	687a      	ldr	r2, [r7, #4]
     d20:	68bb      	ldr	r3, [r7, #8]
     d22:	1ad3      	subs	r3, r2, r3
     d24:	60fb      	str	r3, [r7, #12]
    while(n--)
     d26:	e004      	b.n	d32 <init_data_bss+0x22>
    {
        *bss_start++ = 0;
     d28:	68bb      	ldr	r3, [r7, #8]
     d2a:	1c5a      	adds	r2, r3, #1
     d2c:	60ba      	str	r2, [r7, #8]
     d2e:	2200      	movs	r2, #0
     d30:	701a      	strb	r2, [r3, #0]
    while(n--)
     d32:	68fb      	ldr	r3, [r7, #12]
     d34:	1e5a      	subs	r2, r3, #1
     d36:	60fa      	str	r2, [r7, #12]
     d38:	2b00      	cmp	r3, #0
     d3a:	d1f5      	bne.n	d28 <init_data_bss+0x18>
    }
}
     d3c:	46c0      	nop			; (mov r8, r8)
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	46bd      	mov	sp, r7
     d42:	b004      	add	sp, #16
     d44:	bd80      	pop	{r7, pc}
     d46:	46c0      	nop			; (mov r8, r8)
     d48:	1ffff718 	.word	0x1ffff718
     d4c:	20000325 	.word	0x20000325

00000d50 <CLOCK_SetSimSafeDivs>:
{
     d50:	b580      	push	{r7, lr}
     d52:	af00      	add	r7, sp, #0
    SIM->CLKDIV1 = 0x10030000U;
     d54:	4a03      	ldr	r2, [pc, #12]	; (d64 <CLOCK_SetSimSafeDivs+0x14>)
     d56:	4b04      	ldr	r3, [pc, #16]	; (d68 <CLOCK_SetSimSafeDivs+0x18>)
     d58:	4904      	ldr	r1, [pc, #16]	; (d6c <CLOCK_SetSimSafeDivs+0x1c>)
     d5a:	50d1      	str	r1, [r2, r3]
}
     d5c:	46c0      	nop			; (mov r8, r8)
     d5e:	46bd      	mov	sp, r7
     d60:	bd80      	pop	{r7, pc}
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	40047000 	.word	0x40047000
     d68:	00001044 	.word	0x00001044
     d6c:	10030000 	.word	0x10030000

00000d70 <CLOCK_SetXtal0Freq>:
 * @brief Sets the XTAL0 frequency based on board settings.
 *
 * @param freq The XTAL0/EXTAL0 input clock frequency in Hz.
 */
static inline void CLOCK_SetXtal0Freq(uint32_t freq)
{
     d70:	b580      	push	{r7, lr}
     d72:	b082      	sub	sp, #8
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
    g_xtal0Freq = freq;
     d78:	4b03      	ldr	r3, [pc, #12]	; (d88 <CLOCK_SetXtal0Freq+0x18>)
     d7a:	687a      	ldr	r2, [r7, #4]
     d7c:	601a      	str	r2, [r3, #0]
}
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	46bd      	mov	sp, r7
     d82:	b002      	add	sp, #8
     d84:	bd80      	pop	{r7, pc}
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	1ffffb98 	.word	0x1ffffb98

00000d8c <CLOCK_CONFIG_SetFllExtRefDiv>:
 * Description   : Configure FLL external reference divider (FRDIV).
 * Param frdiv   : The value to set FRDIV.
 *
 *END**************************************************************************/
static void CLOCK_CONFIG_SetFllExtRefDiv(uint8_t frdiv)
{
     d8c:	b580      	push	{r7, lr}
     d8e:	b082      	sub	sp, #8
     d90:	af00      	add	r7, sp, #0
     d92:	0002      	movs	r2, r0
     d94:	1dfb      	adds	r3, r7, #7
     d96:	701a      	strb	r2, [r3, #0]
    MCG->C1 = ((MCG->C1 & ~MCG_C1_FRDIV_MASK) | MCG_C1_FRDIV(frdiv));
     d98:	4b0a      	ldr	r3, [pc, #40]	; (dc4 <CLOCK_CONFIG_SetFllExtRefDiv+0x38>)
     d9a:	781b      	ldrb	r3, [r3, #0]
     d9c:	b2db      	uxtb	r3, r3
     d9e:	2238      	movs	r2, #56	; 0x38
     da0:	4393      	bics	r3, r2
     da2:	b2da      	uxtb	r2, r3
     da4:	1dfb      	adds	r3, r7, #7
     da6:	781b      	ldrb	r3, [r3, #0]
     da8:	00db      	lsls	r3, r3, #3
     daa:	b2db      	uxtb	r3, r3
     dac:	2138      	movs	r1, #56	; 0x38
     dae:	400b      	ands	r3, r1
     db0:	b2db      	uxtb	r3, r3
     db2:	4904      	ldr	r1, [pc, #16]	; (dc4 <CLOCK_CONFIG_SetFllExtRefDiv+0x38>)
     db4:	4313      	orrs	r3, r2
     db6:	b2db      	uxtb	r3, r3
     db8:	700b      	strb	r3, [r1, #0]
}
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	46bd      	mov	sp, r7
     dbe:	b002      	add	sp, #8
     dc0:	bd80      	pop	{r7, pc}
     dc2:	46c0      	nop			; (mov r8, r8)
     dc4:	40064000 	.word	0x40064000

00000dc8 <BOARD_BootClockRUN>:

/*******************************************************************************
 * Code for BOARD_BootClockRUN configuration
 ******************************************************************************/
void BOARD_BootClockRUN(void)
{
     dc8:	b580      	push	{r7, lr}
     dca:	af00      	add	r7, sp, #0
    /* Set the system clock dividers in SIM to safe value. */
    CLOCK_SetSimSafeDivs();
     dcc:	f7ff ffc0 	bl	d50 <CLOCK_SetSimSafeDivs>
    /* Initializes OSC0 according to board configuration. */
    CLOCK_InitOsc0(&oscConfig_BOARD_BootClockRUN);
     dd0:	4b10      	ldr	r3, [pc, #64]	; (e14 <BOARD_BootClockRUN+0x4c>)
     dd2:	0018      	movs	r0, r3
     dd4:	f7ff fea6 	bl	b24 <CLOCK_InitOsc0>
    CLOCK_SetXtal0Freq(oscConfig_BOARD_BootClockRUN.freq);
     dd8:	4b0f      	ldr	r3, [pc, #60]	; (e18 <BOARD_BootClockRUN+0x50>)
     dda:	0018      	movs	r0, r3
     ddc:	f7ff ffc8 	bl	d70 <CLOCK_SetXtal0Freq>
    /* Configure FLL external reference divider (FRDIV). */
    CLOCK_CONFIG_SetFllExtRefDiv(mcgConfig_BOARD_BootClockRUN.frdiv);
     de0:	2300      	movs	r3, #0
     de2:	0018      	movs	r0, r3
     de4:	f7ff ffd2 	bl	d8c <CLOCK_CONFIG_SetFllExtRefDiv>
    /* Set MCG to PEE mode. */
    CLOCK_BootToPeeMode(kMCG_OscselOsc,
     de8:	4b0c      	ldr	r3, [pc, #48]	; (e1c <BOARD_BootClockRUN+0x54>)
     dea:	001a      	movs	r2, r3
     dec:	2100      	movs	r1, #0
     dee:	2000      	movs	r0, #0
     df0:	f7ff ff42 	bl	c78 <CLOCK_BootToPeeMode>
                        kMCG_PllClkSelPll0,
                        &mcgConfig_BOARD_BootClockRUN.pll0Config);
    /* Configure the Internal Reference clock (MCGIRCLK). */
    CLOCK_SetInternalRefClkConfig(mcgConfig_BOARD_BootClockRUN.irclkEnableMode,
     df4:	2302      	movs	r3, #2
                                  mcgConfig_BOARD_BootClockRUN.ircs, 
     df6:	2100      	movs	r1, #0
                                  mcgConfig_BOARD_BootClockRUN.fcrdiv);
     df8:	2200      	movs	r2, #0
    CLOCK_SetInternalRefClkConfig(mcgConfig_BOARD_BootClockRUN.irclkEnableMode,
     dfa:	0018      	movs	r0, r3
     dfc:	f7ff fdb0 	bl	960 <CLOCK_SetInternalRefClkConfig>
    /* Set the clock configuration in SIM module. */
    CLOCK_SetSimConfig(&simConfig_BOARD_BootClockRUN);
     e00:	4b07      	ldr	r3, [pc, #28]	; (e20 <BOARD_BootClockRUN+0x58>)
     e02:	0018      	movs	r0, r3
     e04:	f7ff fd84 	bl	910 <CLOCK_SetSimConfig>
    /* Set SystemCoreClock variable. */
    SystemCoreClock = BOARD_BOOTCLOCKRUN_CORE_CLOCK;
     e08:	4b06      	ldr	r3, [pc, #24]	; (e24 <BOARD_BootClockRUN+0x5c>)
     e0a:	4a07      	ldr	r2, [pc, #28]	; (e28 <BOARD_BootClockRUN+0x60>)
     e0c:	601a      	str	r2, [r3, #0]
}
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	46bd      	mov	sp, r7
     e12:	bd80      	pop	{r7, pc}
     e14:	0000b4c0 	.word	0x0000b4c0
     e18:	007a1200 	.word	0x007a1200
     e1c:	0000b4b3 	.word	0x0000b4b3
     e20:	0000b4b8 	.word	0x0000b4b8
     e24:	1ffff0c0 	.word	0x1ffff0c0
     e28:	02dc6c00 	.word	0x02dc6c00

00000e2c <rt_hw_led_init>:
#include "led.h"

const rt_uint32_t led_mask[] = {1 << 21, 1 << 22, 1 << 26};

void rt_hw_led_init(void)
{
     e2c:	b580      	push	{r7, lr}
     e2e:	af00      	add	r7, sp, #0
    SIM->SCGC5 |= (1 << SIM_SCGC5_PORTB_SHIFT);
     e30:	4a2a      	ldr	r2, [pc, #168]	; (edc <rt_hw_led_init+0xb0>)
     e32:	4b2b      	ldr	r3, [pc, #172]	; (ee0 <rt_hw_led_init+0xb4>)
     e34:	58d3      	ldr	r3, [r2, r3]
     e36:	4929      	ldr	r1, [pc, #164]	; (edc <rt_hw_led_init+0xb0>)
     e38:	2280      	movs	r2, #128	; 0x80
     e3a:	00d2      	lsls	r2, r2, #3
     e3c:	4313      	orrs	r3, r2
     e3e:	4a28      	ldr	r2, [pc, #160]	; (ee0 <rt_hw_led_init+0xb4>)
     e40:	508b      	str	r3, [r1, r2]
    SIM->SCGC5 |= (1 << SIM_SCGC5_PORTE_SHIFT);
     e42:	4a26      	ldr	r2, [pc, #152]	; (edc <rt_hw_led_init+0xb0>)
     e44:	4b26      	ldr	r3, [pc, #152]	; (ee0 <rt_hw_led_init+0xb4>)
     e46:	58d3      	ldr	r3, [r2, r3]
     e48:	4924      	ldr	r1, [pc, #144]	; (edc <rt_hw_led_init+0xb0>)
     e4a:	2280      	movs	r2, #128	; 0x80
     e4c:	0192      	lsls	r2, r2, #6
     e4e:	4313      	orrs	r3, r2
     e50:	4a23      	ldr	r2, [pc, #140]	; (ee0 <rt_hw_led_init+0xb4>)
     e52:	508b      	str	r3, [r1, r2]

    PORTB->PCR[21] &= ~PORT_PCR_MUX_MASK;
     e54:	4b23      	ldr	r3, [pc, #140]	; (ee4 <rt_hw_led_init+0xb8>)
     e56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     e58:	4b22      	ldr	r3, [pc, #136]	; (ee4 <rt_hw_led_init+0xb8>)
     e5a:	4923      	ldr	r1, [pc, #140]	; (ee8 <rt_hw_led_init+0xbc>)
     e5c:	400a      	ands	r2, r1
     e5e:	655a      	str	r2, [r3, #84]	; 0x54
    PORTB->PCR[21] |= PORT_PCR_MUX(1);   //PTB21 is GPIO pin
     e60:	4b20      	ldr	r3, [pc, #128]	; (ee4 <rt_hw_led_init+0xb8>)
     e62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     e64:	4b1f      	ldr	r3, [pc, #124]	; (ee4 <rt_hw_led_init+0xb8>)
     e66:	2180      	movs	r1, #128	; 0x80
     e68:	0049      	lsls	r1, r1, #1
     e6a:	430a      	orrs	r2, r1
     e6c:	655a      	str	r2, [r3, #84]	; 0x54

    PORTB->PCR[22] &= ~PORT_PCR_MUX_MASK;
     e6e:	4b1d      	ldr	r3, [pc, #116]	; (ee4 <rt_hw_led_init+0xb8>)
     e70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
     e72:	4b1c      	ldr	r3, [pc, #112]	; (ee4 <rt_hw_led_init+0xb8>)
     e74:	491c      	ldr	r1, [pc, #112]	; (ee8 <rt_hw_led_init+0xbc>)
     e76:	400a      	ands	r2, r1
     e78:	659a      	str	r2, [r3, #88]	; 0x58
    PORTB->PCR[22] |= PORT_PCR_MUX(1);  //PTB22 is GPIO pin
     e7a:	4b1a      	ldr	r3, [pc, #104]	; (ee4 <rt_hw_led_init+0xb8>)
     e7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
     e7e:	4b19      	ldr	r3, [pc, #100]	; (ee4 <rt_hw_led_init+0xb8>)
     e80:	2180      	movs	r1, #128	; 0x80
     e82:	0049      	lsls	r1, r1, #1
     e84:	430a      	orrs	r2, r1
     e86:	659a      	str	r2, [r3, #88]	; 0x58

    PORTE->PCR[26] &= ~PORT_PCR_MUX_MASK;
     e88:	4b18      	ldr	r3, [pc, #96]	; (eec <rt_hw_led_init+0xc0>)
     e8a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
     e8c:	4b17      	ldr	r3, [pc, #92]	; (eec <rt_hw_led_init+0xc0>)
     e8e:	4916      	ldr	r1, [pc, #88]	; (ee8 <rt_hw_led_init+0xbc>)
     e90:	400a      	ands	r2, r1
     e92:	669a      	str	r2, [r3, #104]	; 0x68
    PORTE->PCR[26] |= PORT_PCR_MUX(1);  //PTE26 is GPIO pin
     e94:	4b15      	ldr	r3, [pc, #84]	; (eec <rt_hw_led_init+0xc0>)
     e96:	6e9a      	ldr	r2, [r3, #104]	; 0x68
     e98:	4b14      	ldr	r3, [pc, #80]	; (eec <rt_hw_led_init+0xc0>)
     e9a:	2180      	movs	r1, #128	; 0x80
     e9c:	0049      	lsls	r1, r1, #1
     e9e:	430a      	orrs	r2, r1
     ea0:	669a      	str	r2, [r3, #104]	; 0x68

    /* Switch LEDs off and enable output*/
    PTB->PDDR |= GPIO_PDDR_PDD(led_mask[1] | led_mask[0]);
     ea2:	4b13      	ldr	r3, [pc, #76]	; (ef0 <rt_hw_led_init+0xc4>)
     ea4:	6959      	ldr	r1, [r3, #20]
     ea6:	2380      	movs	r3, #128	; 0x80
     ea8:	03da      	lsls	r2, r3, #15
     eaa:	2380      	movs	r3, #128	; 0x80
     eac:	039b      	lsls	r3, r3, #14
     eae:	431a      	orrs	r2, r3
     eb0:	4b0f      	ldr	r3, [pc, #60]	; (ef0 <rt_hw_led_init+0xc4>)
     eb2:	430a      	orrs	r2, r1
     eb4:	615a      	str	r2, [r3, #20]
    PTE->PDDR |= GPIO_PDDR_PDD(led_mask[2]);
     eb6:	4b0f      	ldr	r3, [pc, #60]	; (ef4 <rt_hw_led_init+0xc8>)
     eb8:	6959      	ldr	r1, [r3, #20]
     eba:	2380      	movs	r3, #128	; 0x80
     ebc:	04da      	lsls	r2, r3, #19
     ebe:	4b0d      	ldr	r3, [pc, #52]	; (ef4 <rt_hw_led_init+0xc8>)
     ec0:	430a      	orrs	r2, r1
     ec2:	615a      	str	r2, [r3, #20]

    rt_hw_led_off(LED_RED);
     ec4:	2001      	movs	r0, #1
     ec6:	f000 f83b 	bl	f40 <rt_hw_led_off>
    rt_hw_led_off(LED_GREEN);
     eca:	2002      	movs	r0, #2
     ecc:	f000 f838 	bl	f40 <rt_hw_led_off>
    rt_hw_led_off(LED_BLUE);
     ed0:	2000      	movs	r0, #0
     ed2:	f000 f835 	bl	f40 <rt_hw_led_off>
}
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	46bd      	mov	sp, r7
     eda:	bd80      	pop	{r7, pc}
     edc:	40047000 	.word	0x40047000
     ee0:	00001038 	.word	0x00001038
     ee4:	4004a000 	.word	0x4004a000
     ee8:	fffff8ff 	.word	0xfffff8ff
     eec:	4004d000 	.word	0x4004d000
     ef0:	400ff040 	.word	0x400ff040
     ef4:	400ff100 	.word	0x400ff100

00000ef8 <rt_hw_led_on>:

    PORTE->PCR[26] &= ~PORT_PCR_MUX_MASK;
}

void rt_hw_led_on(rt_uint32_t n)
{
     ef8:	b580      	push	{r7, lr}
     efa:	b082      	sub	sp, #8
     efc:	af00      	add	r7, sp, #0
     efe:	6078      	str	r0, [r7, #4]
    if (n != LED_GREEN)
     f00:	687b      	ldr	r3, [r7, #4]
     f02:	2b02      	cmp	r3, #2
     f04:	d009      	beq.n	f1a <rt_hw_led_on+0x22>
    {
        PTB->PCOR |= led_mask[n];
     f06:	4b0b      	ldr	r3, [pc, #44]	; (f34 <rt_hw_led_on+0x3c>)
     f08:	6899      	ldr	r1, [r3, #8]
     f0a:	4b0b      	ldr	r3, [pc, #44]	; (f38 <rt_hw_led_on+0x40>)
     f0c:	687a      	ldr	r2, [r7, #4]
     f0e:	0092      	lsls	r2, r2, #2
     f10:	58d2      	ldr	r2, [r2, r3]
     f12:	4b08      	ldr	r3, [pc, #32]	; (f34 <rt_hw_led_on+0x3c>)
     f14:	430a      	orrs	r2, r1
     f16:	609a      	str	r2, [r3, #8]
    }
    else
    {
        PTE->PCOR |= led_mask[n];
    }
}
     f18:	e008      	b.n	f2c <rt_hw_led_on+0x34>
        PTE->PCOR |= led_mask[n];
     f1a:	4b08      	ldr	r3, [pc, #32]	; (f3c <rt_hw_led_on+0x44>)
     f1c:	6899      	ldr	r1, [r3, #8]
     f1e:	4b06      	ldr	r3, [pc, #24]	; (f38 <rt_hw_led_on+0x40>)
     f20:	687a      	ldr	r2, [r7, #4]
     f22:	0092      	lsls	r2, r2, #2
     f24:	58d2      	ldr	r2, [r2, r3]
     f26:	4b05      	ldr	r3, [pc, #20]	; (f3c <rt_hw_led_on+0x44>)
     f28:	430a      	orrs	r2, r1
     f2a:	609a      	str	r2, [r3, #8]
}
     f2c:	46c0      	nop			; (mov r8, r8)
     f2e:	46bd      	mov	sp, r7
     f30:	b002      	add	sp, #8
     f32:	bd80      	pop	{r7, pc}
     f34:	400ff040 	.word	0x400ff040
     f38:	0000b4c8 	.word	0x0000b4c8
     f3c:	400ff100 	.word	0x400ff100

00000f40 <rt_hw_led_off>:

void rt_hw_led_off(rt_uint32_t n)
{
     f40:	b580      	push	{r7, lr}
     f42:	b082      	sub	sp, #8
     f44:	af00      	add	r7, sp, #0
     f46:	6078      	str	r0, [r7, #4]
    if (n != LED_GREEN)
     f48:	687b      	ldr	r3, [r7, #4]
     f4a:	2b02      	cmp	r3, #2
     f4c:	d009      	beq.n	f62 <rt_hw_led_off+0x22>
    {
        PTB->PSOR |= led_mask[n];
     f4e:	4b0b      	ldr	r3, [pc, #44]	; (f7c <rt_hw_led_off+0x3c>)
     f50:	6859      	ldr	r1, [r3, #4]
     f52:	4b0b      	ldr	r3, [pc, #44]	; (f80 <rt_hw_led_off+0x40>)
     f54:	687a      	ldr	r2, [r7, #4]
     f56:	0092      	lsls	r2, r2, #2
     f58:	58d2      	ldr	r2, [r2, r3]
     f5a:	4b08      	ldr	r3, [pc, #32]	; (f7c <rt_hw_led_off+0x3c>)
     f5c:	430a      	orrs	r2, r1
     f5e:	605a      	str	r2, [r3, #4]
    }
    else
    {
        PTE->PSOR |= led_mask[n];
    }
}
     f60:	e008      	b.n	f74 <rt_hw_led_off+0x34>
        PTE->PSOR |= led_mask[n];
     f62:	4b08      	ldr	r3, [pc, #32]	; (f84 <rt_hw_led_off+0x44>)
     f64:	6859      	ldr	r1, [r3, #4]
     f66:	4b06      	ldr	r3, [pc, #24]	; (f80 <rt_hw_led_off+0x40>)
     f68:	687a      	ldr	r2, [r7, #4]
     f6a:	0092      	lsls	r2, r2, #2
     f6c:	58d2      	ldr	r2, [r2, r3]
     f6e:	4b05      	ldr	r3, [pc, #20]	; (f84 <rt_hw_led_off+0x44>)
     f70:	430a      	orrs	r2, r1
     f72:	605a      	str	r2, [r3, #4]
}
     f74:	46c0      	nop			; (mov r8, r8)
     f76:	46bd      	mov	sp, r7
     f78:	b002      	add	sp, #8
     f7a:	bd80      	pop	{r7, pc}
     f7c:	400ff040 	.word	0x400ff040
     f80:	0000b4c8 	.word	0x0000b4c8
     f84:	400ff100 	.word	0x400ff100

00000f88 <CLOCK_EnableClock>:
{
     f88:	b580      	push	{r7, lr}
     f8a:	b084      	sub	sp, #16
     f8c:	af00      	add	r7, sp, #0
     f8e:	6078      	str	r0, [r7, #4]
    uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
     f90:	687b      	ldr	r3, [r7, #4]
     f92:	0c1b      	lsrs	r3, r3, #16
     f94:	4a08      	ldr	r2, [pc, #32]	; (fb8 <CLOCK_EnableClock+0x30>)
     f96:	4694      	mov	ip, r2
     f98:	4463      	add	r3, ip
     f9a:	60fb      	str	r3, [r7, #12]
    (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
     f9c:	68fb      	ldr	r3, [r7, #12]
     f9e:	6819      	ldr	r1, [r3, #0]
     fa0:	687b      	ldr	r3, [r7, #4]
     fa2:	041b      	lsls	r3, r3, #16
     fa4:	0c1b      	lsrs	r3, r3, #16
     fa6:	2201      	movs	r2, #1
     fa8:	409a      	lsls	r2, r3
     faa:	68fb      	ldr	r3, [r7, #12]
     fac:	430a      	orrs	r2, r1
     fae:	601a      	str	r2, [r3, #0]
}
     fb0:	46c0      	nop			; (mov r8, r8)
     fb2:	46bd      	mov	sp, r7
     fb4:	b004      	add	sp, #16
     fb6:	bd80      	pop	{r7, pc}
     fb8:	40047000 	.word	0x40047000

00000fbc <_configure>:
    (UART_Type *)UART0,
    UART0_IRQn,
};

static rt_err_t _configure(struct rt_serial_device *serial, struct serial_configure *cfg)
{
     fbc:	b580      	push	{r7, lr}
     fbe:	b08c      	sub	sp, #48	; 0x30
     fc0:	af00      	add	r7, sp, #0
     fc2:	6078      	str	r0, [r7, #4]
     fc4:	6039      	str	r1, [r7, #0]
    unsigned int reg_C1 = 0,reg_C3 = 0,reg_C4 = 0,reg_BDH = 0,reg_BDL = 0,reg_S2 = 0,reg_BRFA=0;
     fc6:	2300      	movs	r3, #0
     fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
     fca:	2300      	movs	r3, #0
     fcc:	627b      	str	r3, [r7, #36]	; 0x24
     fce:	2300      	movs	r3, #0
     fd0:	623b      	str	r3, [r7, #32]
     fd2:	2300      	movs	r3, #0
     fd4:	61fb      	str	r3, [r7, #28]
     fd6:	2300      	movs	r3, #0
     fd8:	61bb      	str	r3, [r7, #24]
     fda:	2300      	movs	r3, #0
     fdc:	62bb      	str	r3, [r7, #40]	; 0x28
     fde:	2300      	movs	r3, #0
     fe0:	617b      	str	r3, [r7, #20]
    unsigned int cal_SBR = 0;
     fe2:	2300      	movs	r3, #0
     fe4:	613b      	str	r3, [r7, #16]
    UART_Type *uart_reg;

    /* ref : drivers\system_MK60F12.c Line 64 ,BusClock = 60MHz
     * calculate baud_rate
     */
    uart_reg = ((struct kl26z_serial_device *)serial->parent.user_data)->baseAddress;
     fe6:	687b      	ldr	r3, [r7, #4]
     fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     fea:	681b      	ldr	r3, [r3, #0]
     fec:	60fb      	str	r3, [r7, #12]

    /*
     * set bit order
     */
    if (cfg->bit_order == BIT_ORDER_LSB)
     fee:	683b      	ldr	r3, [r7, #0]
     ff0:	795b      	ldrb	r3, [r3, #5]
     ff2:	2201      	movs	r2, #1
     ff4:	4013      	ands	r3, r2
     ff6:	b2db      	uxtb	r3, r3
     ff8:	2b00      	cmp	r3, #0
     ffa:	d104      	bne.n	1006 <_configure+0x4a>
        reg_S2 &= ~(UART0_S2_MSBF_MASK<<UART0_S2_MSBF_SHIFT);
     ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ffe:	4a79      	ldr	r2, [pc, #484]	; (11e4 <_configure+0x228>)
    1000:	4013      	ands	r3, r2
    1002:	62bb      	str	r3, [r7, #40]	; 0x28
    1004:	e00b      	b.n	101e <_configure+0x62>
    else if (cfg->bit_order == BIT_ORDER_MSB)
    1006:	683b      	ldr	r3, [r7, #0]
    1008:	795b      	ldrb	r3, [r3, #5]
    100a:	2201      	movs	r2, #1
    100c:	4013      	ands	r3, r2
    100e:	b2db      	uxtb	r3, r3
    1010:	2b00      	cmp	r3, #0
    1012:	d004      	beq.n	101e <_configure+0x62>
        reg_S2 |= UART0_S2_MSBF_MASK<<UART0_S2_MSBF_SHIFT;
    1014:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1016:	2280      	movs	r2, #128	; 0x80
    1018:	00d2      	lsls	r2, r2, #3
    101a:	4313      	orrs	r3, r2
    101c:	62bb      	str	r3, [r7, #40]	; 0x28

    /*
     * set data_bits
     */
    if (cfg->data_bits == DATA_BITS_8)
    101e:	683b      	ldr	r3, [r7, #0]
    1020:	791b      	ldrb	r3, [r3, #4]
    1022:	220f      	movs	r2, #15
    1024:	4013      	ands	r3, r2
    1026:	b2db      	uxtb	r3, r3
    1028:	2b08      	cmp	r3, #8
    102a:	d104      	bne.n	1036 <_configure+0x7a>
        reg_C1 &= ~(UART0_C1_M_MASK<<UART0_C1_M_SHIFT);
    102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    102e:	4a6e      	ldr	r2, [pc, #440]	; (11e8 <_configure+0x22c>)
    1030:	4013      	ands	r3, r2
    1032:	62fb      	str	r3, [r7, #44]	; 0x2c
    1034:	e00b      	b.n	104e <_configure+0x92>
    else if (cfg->data_bits == DATA_BITS_9)
    1036:	683b      	ldr	r3, [r7, #0]
    1038:	791b      	ldrb	r3, [r3, #4]
    103a:	220f      	movs	r2, #15
    103c:	4013      	ands	r3, r2
    103e:	b2db      	uxtb	r3, r3
    1040:	2b09      	cmp	r3, #9
    1042:	d104      	bne.n	104e <_configure+0x92>
        reg_C1 |= UART0_C1_M_MASK<<UART0_C1_M_SHIFT;
    1044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1046:	2280      	movs	r2, #128	; 0x80
    1048:	0052      	lsls	r2, r2, #1
    104a:	4313      	orrs	r3, r2
    104c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * set parity
     */
    if (cfg->parity == PARITY_NONE)
    104e:	683b      	ldr	r3, [r7, #0]
    1050:	791b      	ldrb	r3, [r3, #4]
    1052:	223f      	movs	r2, #63	; 0x3f
    1054:	4393      	bics	r3, r2
    1056:	b2db      	uxtb	r3, r3
    1058:	2b00      	cmp	r3, #0
    105a:	d104      	bne.n	1066 <_configure+0xaa>
    {
        reg_C1 &= ~(UART0_C1_PE_MASK);
    105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    105e:	2202      	movs	r2, #2
    1060:	4393      	bics	r3, r2
    1062:	62fb      	str	r3, [r7, #44]	; 0x2c
    1064:	e019      	b.n	109a <_configure+0xde>
    }
    else
    {
        /* first ,set parity enable bit */
        reg_C1 |= (UART0_C1_PE_MASK);
    1066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1068:	2202      	movs	r2, #2
    106a:	4313      	orrs	r3, r2
    106c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* second ,determine parity odd or even*/
        if (cfg->parity == PARITY_ODD)
    106e:	683b      	ldr	r3, [r7, #0]
    1070:	791b      	ldrb	r3, [r3, #4]
    1072:	223f      	movs	r2, #63	; 0x3f
    1074:	4393      	bics	r3, r2
    1076:	b2db      	uxtb	r3, r3
    1078:	2b40      	cmp	r3, #64	; 0x40
    107a:	d103      	bne.n	1084 <_configure+0xc8>
            reg_C1 |= UART0_C1_PT_MASK;
    107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    107e:	2201      	movs	r2, #1
    1080:	4313      	orrs	r3, r2
    1082:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (cfg->parity == PARITY_EVEN)
    1084:	683b      	ldr	r3, [r7, #0]
    1086:	791b      	ldrb	r3, [r3, #4]
    1088:	223f      	movs	r2, #63	; 0x3f
    108a:	4393      	bics	r3, r2
    108c:	b2db      	uxtb	r3, r3
    108e:	2b80      	cmp	r3, #128	; 0x80
    1090:	d103      	bne.n	109a <_configure+0xde>
            reg_C1 &= ~(UART0_C1_PT_MASK);
    1092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1094:	2201      	movs	r2, #1
    1096:	4393      	bics	r3, r2
    1098:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * set NZR mode
     * not tested
     */
    if (cfg->invert != NRZ_NORMAL)
    109a:	683b      	ldr	r3, [r7, #0]
    109c:	795b      	ldrb	r3, [r3, #5]
    109e:	2202      	movs	r2, #2
    10a0:	4013      	ands	r3, r2
    10a2:	b2db      	uxtb	r3, r3
    10a4:	2b00      	cmp	r3, #0
    10a6:	d003      	beq.n	10b0 <_configure+0xf4>
    {
        /* not in normal mode ,set inverted polarity */
        reg_C3 |= UART0_C3_TXINV_MASK;
    10a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10aa:	2210      	movs	r2, #16
    10ac:	4313      	orrs	r3, r2
    10ae:	627b      	str	r3, [r7, #36]	; 0x24
    }

    switch ((unsigned int)uart_reg)
    10b0:	68fb      	ldr	r3, [r7, #12]
    10b2:	4a4e      	ldr	r2, [pc, #312]	; (11ec <_configure+0x230>)
    10b4:	4293      	cmp	r3, r2
    10b6:	d000      	beq.n	10ba <_configure+0xfe>
    10b8:	e08e      	b.n	11d8 <_configure+0x21c>
     * if you're using other board
     * set clock and pin map for UARTx
     */
    case UART0_BASE:
            /* calc SBR */
        cal_SBR = SystemCoreClock / (16 * cfg->baud_rate);
    10ba:	4b4d      	ldr	r3, [pc, #308]	; (11f0 <_configure+0x234>)
    10bc:	681a      	ldr	r2, [r3, #0]
    10be:	683b      	ldr	r3, [r7, #0]
    10c0:	681b      	ldr	r3, [r3, #0]
    10c2:	011b      	lsls	r3, r3, #4
    10c4:	0019      	movs	r1, r3
    10c6:	0010      	movs	r0, r2
    10c8:	f009 feea 	bl	aea0 <__udivsi3>
    10cc:	0003      	movs	r3, r0
    10ce:	613b      	str	r3, [r7, #16]

        /* check to see if sbr is out of range of register bits */
        if ((cal_SBR > 0x1FFF) || (cal_SBR < 1))
    10d0:	693a      	ldr	r2, [r7, #16]
    10d2:	2380      	movs	r3, #128	; 0x80
    10d4:	019b      	lsls	r3, r3, #6
    10d6:	429a      	cmp	r2, r3
    10d8:	d202      	bcs.n	10e0 <_configure+0x124>
    10da:	693b      	ldr	r3, [r7, #16]
    10dc:	2b00      	cmp	r3, #0
    10de:	d102      	bne.n	10e6 <_configure+0x12a>
        {
            /* unsupported baud rate for given source clock input*/
            return -RT_ERROR;
    10e0:	2301      	movs	r3, #1
    10e2:	425b      	negs	r3, r3
    10e4:	e07a      	b.n	11dc <_configure+0x220>
        }

        /* calc baud_rate */
        reg_BDH = (cal_SBR & 0x1FFF) >> 8 & 0x00FF;
    10e6:	693b      	ldr	r3, [r7, #16]
    10e8:	0a1b      	lsrs	r3, r3, #8
    10ea:	221f      	movs	r2, #31
    10ec:	4013      	ands	r3, r2
    10ee:	61fb      	str	r3, [r7, #28]
        reg_BDL = cal_SBR & 0x00FF;
    10f0:	693b      	ldr	r3, [r7, #16]
    10f2:	22ff      	movs	r2, #255	; 0xff
    10f4:	4013      	ands	r3, r2
    10f6:	61bb      	str	r3, [r7, #24]

        /* fractional divider */
        reg_BRFA = ((SystemCoreClock * 32) / (cfg->baud_rate * 16)) - (cal_SBR * 32);
    10f8:	4b3d      	ldr	r3, [pc, #244]	; (11f0 <_configure+0x234>)
    10fa:	681b      	ldr	r3, [r3, #0]
    10fc:	015a      	lsls	r2, r3, #5
    10fe:	683b      	ldr	r3, [r7, #0]
    1100:	681b      	ldr	r3, [r3, #0]
    1102:	011b      	lsls	r3, r3, #4
    1104:	0019      	movs	r1, r3
    1106:	0010      	movs	r0, r2
    1108:	f009 feca 	bl	aea0 <__udivsi3>
    110c:	0003      	movs	r3, r0
    110e:	001a      	movs	r2, r3
    1110:	693b      	ldr	r3, [r7, #16]
    1112:	015b      	lsls	r3, r3, #5
    1114:	1ad3      	subs	r3, r2, r3
    1116:	617b      	str	r3, [r7, #20]

        reg_C4 = (unsigned char)(reg_BRFA & 0x001F);
    1118:	697b      	ldr	r3, [r7, #20]
    111a:	b2db      	uxtb	r3, r3
    111c:	001a      	movs	r2, r3
    111e:	231f      	movs	r3, #31
    1120:	4013      	ands	r3, r2
    1122:	623b      	str	r3, [r7, #32]

        SIM->SOPT5 &= ~ SIM_SOPT5_UART0RXSRC(0);
    1124:	4a33      	ldr	r2, [pc, #204]	; (11f4 <_configure+0x238>)
    1126:	4933      	ldr	r1, [pc, #204]	; (11f4 <_configure+0x238>)
    1128:	4b33      	ldr	r3, [pc, #204]	; (11f8 <_configure+0x23c>)
    112a:	58d3      	ldr	r3, [r2, r3]
    112c:	4a32      	ldr	r2, [pc, #200]	; (11f8 <_configure+0x23c>)
    112e:	508b      	str	r3, [r1, r2]
        SIM->SOPT5 |= SIM_SOPT5_UART0RXSRC(0);
    1130:	4a30      	ldr	r2, [pc, #192]	; (11f4 <_configure+0x238>)
    1132:	4930      	ldr	r1, [pc, #192]	; (11f4 <_configure+0x238>)
    1134:	4b30      	ldr	r3, [pc, #192]	; (11f8 <_configure+0x23c>)
    1136:	58d3      	ldr	r3, [r2, r3]
    1138:	4a2f      	ldr	r2, [pc, #188]	; (11f8 <_configure+0x23c>)
    113a:	508b      	str	r3, [r1, r2]
        SIM->SOPT5 &= ~ SIM_SOPT5_UART0TXSRC(0);
    113c:	4a2d      	ldr	r2, [pc, #180]	; (11f4 <_configure+0x238>)
    113e:	492d      	ldr	r1, [pc, #180]	; (11f4 <_configure+0x238>)
    1140:	4b2d      	ldr	r3, [pc, #180]	; (11f8 <_configure+0x23c>)
    1142:	58d3      	ldr	r3, [r2, r3]
    1144:	4a2c      	ldr	r2, [pc, #176]	; (11f8 <_configure+0x23c>)
    1146:	508b      	str	r3, [r1, r2]
        SIM->SOPT5 |= SIM_SOPT5_UART0TXSRC(0);
    1148:	4a2a      	ldr	r2, [pc, #168]	; (11f4 <_configure+0x238>)
    114a:	492a      	ldr	r1, [pc, #168]	; (11f4 <_configure+0x238>)
    114c:	4b2a      	ldr	r3, [pc, #168]	; (11f8 <_configure+0x23c>)
    114e:	58d3      	ldr	r3, [r2, r3]
    1150:	4a29      	ldr	r2, [pc, #164]	; (11f8 <_configure+0x23c>)
    1152:	508b      	str	r3, [r1, r2]

        // set UART0 clock
        // Enable UART gate clocking
        // Enable PORTE gate clocking
        CLOCK_EnableClock(kCLOCK_Uart0);
    1154:	4b29      	ldr	r3, [pc, #164]	; (11fc <_configure+0x240>)
    1156:	0018      	movs	r0, r3
    1158:	f7ff ff16 	bl	f88 <CLOCK_EnableClock>
        CLOCK_EnableClock(kCLOCK_PortA);
    115c:	4b28      	ldr	r3, [pc, #160]	; (1200 <_configure+0x244>)
    115e:	0018      	movs	r0, r3
    1160:	f7ff ff12 	bl	f88 <CLOCK_EnableClock>

        // set UART0 pin
        PORTA->PCR[1] &= ~(3UL <<  8);
    1164:	4b27      	ldr	r3, [pc, #156]	; (1204 <_configure+0x248>)
    1166:	685a      	ldr	r2, [r3, #4]
    1168:	4b26      	ldr	r3, [pc, #152]	; (1204 <_configure+0x248>)
    116a:	4927      	ldr	r1, [pc, #156]	; (1208 <_configure+0x24c>)
    116c:	400a      	ands	r2, r1
    116e:	605a      	str	r2, [r3, #4]
        PORTA->PCR[1] |= (3UL <<  8);      // Pin mux configured as ALT3
    1170:	4b24      	ldr	r3, [pc, #144]	; (1204 <_configure+0x248>)
    1172:	685a      	ldr	r2, [r3, #4]
    1174:	4b23      	ldr	r3, [pc, #140]	; (1204 <_configure+0x248>)
    1176:	21c0      	movs	r1, #192	; 0xc0
    1178:	0089      	lsls	r1, r1, #2
    117a:	430a      	orrs	r2, r1
    117c:	605a      	str	r2, [r3, #4]

        PORTA->PCR[2] &= ~(3UL <<  8);
    117e:	4b21      	ldr	r3, [pc, #132]	; (1204 <_configure+0x248>)
    1180:	689a      	ldr	r2, [r3, #8]
    1182:	4b20      	ldr	r3, [pc, #128]	; (1204 <_configure+0x248>)
    1184:	4920      	ldr	r1, [pc, #128]	; (1208 <_configure+0x24c>)
    1186:	400a      	ands	r2, r1
    1188:	609a      	str	r2, [r3, #8]
        PORTA->PCR[2] |= (3UL <<  8);      // Pin mux configured as ALT3
    118a:	4b1e      	ldr	r3, [pc, #120]	; (1204 <_configure+0x248>)
    118c:	689a      	ldr	r2, [r3, #8]
    118e:	4b1d      	ldr	r3, [pc, #116]	; (1204 <_configure+0x248>)
    1190:	21c0      	movs	r1, #192	; 0xc0
    1192:	0089      	lsls	r1, r1, #2
    1194:	430a      	orrs	r2, r1
    1196:	609a      	str	r2, [r3, #8]
        break;
    1198:	46c0      	nop			; (mov r8, r8)

    default:
        return -RT_ERROR;
    }

    uart_reg->BDH = reg_BDH;
    119a:	69fb      	ldr	r3, [r7, #28]
    119c:	b2da      	uxtb	r2, r3
    119e:	68fb      	ldr	r3, [r7, #12]
    11a0:	701a      	strb	r2, [r3, #0]
    uart_reg->BDL = reg_BDL;
    11a2:	69bb      	ldr	r3, [r7, #24]
    11a4:	b2da      	uxtb	r2, r3
    11a6:	68fb      	ldr	r3, [r7, #12]
    11a8:	705a      	strb	r2, [r3, #1]
    uart_reg->C1 = reg_C1;
    11aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11ac:	b2da      	uxtb	r2, r3
    11ae:	68fb      	ldr	r3, [r7, #12]
    11b0:	709a      	strb	r2, [r3, #2]
    uart_reg->C4 = reg_C4;
    11b2:	6a3b      	ldr	r3, [r7, #32]
    11b4:	b2da      	uxtb	r2, r3
    11b6:	68fb      	ldr	r3, [r7, #12]
    11b8:	721a      	strb	r2, [r3, #8]
    uart_reg->S2 = reg_S2;
    11ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    11bc:	b2da      	uxtb	r2, r3
    11be:	68fb      	ldr	r3, [r7, #12]
    11c0:	715a      	strb	r2, [r3, #5]

    uart_reg->S2  =  0;
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	2200      	movs	r2, #0
    11c6:	715a      	strb	r2, [r3, #5]
    uart_reg->C3  =  0;
    11c8:	68fb      	ldr	r3, [r7, #12]
    11ca:	2200      	movs	r2, #0
    11cc:	719a      	strb	r2, [r3, #6]

    // uart_reg->RWFIFO = UART_RWFIFO_RXWATER(1);
    // uart_reg->TWFIFO = UART_TWFIFO_TXWATER(0);

    uart_reg->C2  =  UART_C2_RE_MASK |    //Receiver enable
    11ce:	68fb      	ldr	r3, [r7, #12]
    11d0:	220c      	movs	r2, #12
    11d2:	70da      	strb	r2, [r3, #3]
                     UART_C2_TE_MASK;     //Transmitter enable

    return RT_EOK;
    11d4:	2300      	movs	r3, #0
    11d6:	e001      	b.n	11dc <_configure+0x220>
        return -RT_ERROR;
    11d8:	2301      	movs	r3, #1
    11da:	425b      	negs	r3, r3
}
    11dc:	0018      	movs	r0, r3
    11de:	46bd      	mov	sp, r7
    11e0:	b00c      	add	sp, #48	; 0x30
    11e2:	bd80      	pop	{r7, pc}
    11e4:	fffffbff 	.word	0xfffffbff
    11e8:	fffffeff 	.word	0xfffffeff
    11ec:	4006a000 	.word	0x4006a000
    11f0:	1ffff0c0 	.word	0x1ffff0c0
    11f4:	40047000 	.word	0x40047000
    11f8:	00001010 	.word	0x00001010
    11fc:	1034000a 	.word	0x1034000a
    1200:	10380009 	.word	0x10380009
    1204:	40049000 	.word	0x40049000
    1208:	fffffcff 	.word	0xfffffcff

0000120c <_control>:

static rt_err_t _control(struct rt_serial_device *serial, int cmd, void *arg)
{
    120c:	b580      	push	{r7, lr}
    120e:	b086      	sub	sp, #24
    1210:	af00      	add	r7, sp, #0
    1212:	60f8      	str	r0, [r7, #12]
    1214:	60b9      	str	r1, [r7, #8]
    1216:	607a      	str	r2, [r7, #4]
    UART_Type *uart_reg;
    int uart_irq_num = 0;
    1218:	2300      	movs	r3, #0
    121a:	617b      	str	r3, [r7, #20]

    uart_reg = ((struct kl26z_serial_device *)serial->parent.user_data)->baseAddress;
    121c:	68fb      	ldr	r3, [r7, #12]
    121e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1220:	681b      	ldr	r3, [r3, #0]
    1222:	613b      	str	r3, [r7, #16]
    uart_irq_num = ((struct kl26z_serial_device *)serial->parent.user_data)->irq_num;
    1224:	68fb      	ldr	r3, [r7, #12]
    1226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1228:	685b      	ldr	r3, [r3, #4]
    122a:	617b      	str	r3, [r7, #20]

    switch (cmd)
    122c:	68bb      	ldr	r3, [r7, #8]
    122e:	2b11      	cmp	r3, #17
    1230:	d00f      	beq.n	1252 <_control+0x46>
    1232:	68bb      	ldr	r3, [r7, #8]
    1234:	2b11      	cmp	r3, #17
    1236:	dc57      	bgt.n	12e8 <_control+0xdc>
    1238:	68bb      	ldr	r3, [r7, #8]
    123a:	2b10      	cmp	r3, #16
    123c:	d021      	beq.n	1282 <_control+0x76>
    123e:	68bb      	ldr	r3, [r7, #8]
    1240:	2b10      	cmp	r3, #16
    1242:	dc51      	bgt.n	12e8 <_control+0xdc>
    1244:	68bb      	ldr	r3, [r7, #8]
    1246:	2b01      	cmp	r3, #1
    1248:	d04a      	beq.n	12e0 <_control+0xd4>
    124a:	68bb      	ldr	r3, [r7, #8]
    124c:	2b02      	cmp	r3, #2
    124e:	d03e      	beq.n	12ce <_control+0xc2>
    1250:	e04a      	b.n	12e8 <_control+0xdc>
    {
    case RT_DEVICE_CTRL_CLR_INT:
        /* disable rx irq */
        uart_reg->C2 &= ~UART_C2_RIE_MASK;
    1252:	693b      	ldr	r3, [r7, #16]
    1254:	78db      	ldrb	r3, [r3, #3]
    1256:	b2db      	uxtb	r3, r3
    1258:	2220      	movs	r2, #32
    125a:	4393      	bics	r3, r2
    125c:	b2da      	uxtb	r2, r3
    125e:	693b      	ldr	r3, [r7, #16]
    1260:	70da      	strb	r2, [r3, #3]
        //disable NVIC
        NVIC->ICER[uart_irq_num / 32] = 1 << (uart_irq_num % 32);
    1262:	697b      	ldr	r3, [r7, #20]
    1264:	221f      	movs	r2, #31
    1266:	4013      	ands	r3, r2
    1268:	2201      	movs	r2, #1
    126a:	409a      	lsls	r2, r3
    126c:	0011      	movs	r1, r2
    126e:	4a21      	ldr	r2, [pc, #132]	; (12f4 <_control+0xe8>)
    1270:	697b      	ldr	r3, [r7, #20]
    1272:	2b00      	cmp	r3, #0
    1274:	da00      	bge.n	1278 <_control+0x6c>
    1276:	331f      	adds	r3, #31
    1278:	115b      	asrs	r3, r3, #5
    127a:	3320      	adds	r3, #32
    127c:	009b      	lsls	r3, r3, #2
    127e:	5099      	str	r1, [r3, r2]
        break;
    1280:	e032      	b.n	12e8 <_control+0xdc>
    case RT_DEVICE_CTRL_SET_INT:
        /* enable rx irq */
        uart_reg->C2 |= UART_C2_RIE_MASK;
    1282:	693b      	ldr	r3, [r7, #16]
    1284:	78db      	ldrb	r3, [r3, #3]
    1286:	b2db      	uxtb	r3, r3
    1288:	2220      	movs	r2, #32
    128a:	4313      	orrs	r3, r2
    128c:	b2da      	uxtb	r2, r3
    128e:	693b      	ldr	r3, [r7, #16]
    1290:	70da      	strb	r2, [r3, #3]
        //enable NVIC,we are sure uart's NVIC vector is in NVICICPR1
        NVIC->ICPR[uart_irq_num / 32] = 1 << (uart_irq_num % 32);
    1292:	697b      	ldr	r3, [r7, #20]
    1294:	221f      	movs	r2, #31
    1296:	4013      	ands	r3, r2
    1298:	2201      	movs	r2, #1
    129a:	409a      	lsls	r2, r3
    129c:	0011      	movs	r1, r2
    129e:	4a15      	ldr	r2, [pc, #84]	; (12f4 <_control+0xe8>)
    12a0:	697b      	ldr	r3, [r7, #20]
    12a2:	2b00      	cmp	r3, #0
    12a4:	da00      	bge.n	12a8 <_control+0x9c>
    12a6:	331f      	adds	r3, #31
    12a8:	115b      	asrs	r3, r3, #5
    12aa:	3360      	adds	r3, #96	; 0x60
    12ac:	009b      	lsls	r3, r3, #2
    12ae:	5099      	str	r1, [r3, r2]
        NVIC->ISER[uart_irq_num / 32] = 1 << (uart_irq_num % 32);
    12b0:	697b      	ldr	r3, [r7, #20]
    12b2:	221f      	movs	r2, #31
    12b4:	4013      	ands	r3, r2
    12b6:	2201      	movs	r2, #1
    12b8:	409a      	lsls	r2, r3
    12ba:	0011      	movs	r1, r2
    12bc:	4a0d      	ldr	r2, [pc, #52]	; (12f4 <_control+0xe8>)
    12be:	697b      	ldr	r3, [r7, #20]
    12c0:	2b00      	cmp	r3, #0
    12c2:	da00      	bge.n	12c6 <_control+0xba>
    12c4:	331f      	adds	r3, #31
    12c6:	115b      	asrs	r3, r3, #5
    12c8:	009b      	lsls	r3, r3, #2
    12ca:	5099      	str	r1, [r3, r2]
        break;
    12cc:	e00c      	b.n	12e8 <_control+0xdc>
    case RT_DEVICE_CTRL_SUSPEND:
        /* suspend device */
        uart_reg->C2  &=  ~(UART_C2_RE_MASK |    //Receiver enable
    12ce:	693b      	ldr	r3, [r7, #16]
    12d0:	78db      	ldrb	r3, [r3, #3]
    12d2:	b2db      	uxtb	r3, r3
    12d4:	220c      	movs	r2, #12
    12d6:	4393      	bics	r3, r2
    12d8:	b2da      	uxtb	r2, r3
    12da:	693b      	ldr	r3, [r7, #16]
    12dc:	70da      	strb	r2, [r3, #3]
                            UART_C2_TE_MASK);     //Transmitter enable
        break;
    12de:	e003      	b.n	12e8 <_control+0xdc>
    case RT_DEVICE_CTRL_RESUME:
        /* resume device */
        uart_reg->C2  =  UART_C2_RE_MASK |    //Receiver enable
    12e0:	693b      	ldr	r3, [r7, #16]
    12e2:	220c      	movs	r2, #12
    12e4:	70da      	strb	r2, [r3, #3]
                         UART_C2_TE_MASK;     //Transmitter enable
        break;
    12e6:	46c0      	nop			; (mov r8, r8)
    }

    return RT_EOK;
    12e8:	2300      	movs	r3, #0
}
    12ea:	0018      	movs	r0, r3
    12ec:	46bd      	mov	sp, r7
    12ee:	b006      	add	sp, #24
    12f0:	bd80      	pop	{r7, pc}
    12f2:	46c0      	nop			; (mov r8, r8)
    12f4:	e000e100 	.word	0xe000e100

000012f8 <_putc>:

static int _putc(struct rt_serial_device *serial, char c)
{
    12f8:	b580      	push	{r7, lr}
    12fa:	b084      	sub	sp, #16
    12fc:	af00      	add	r7, sp, #0
    12fe:	6078      	str	r0, [r7, #4]
    1300:	000a      	movs	r2, r1
    1302:	1cfb      	adds	r3, r7, #3
    1304:	701a      	strb	r2, [r3, #0]
    UART_Type *uart_reg;
    uart_reg = ((struct kl26z_serial_device *)serial->parent.user_data)->baseAddress;
    1306:	687b      	ldr	r3, [r7, #4]
    1308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    130a:	681b      	ldr	r3, [r3, #0]
    130c:	60fb      	str	r3, [r7, #12]

    while (!(uart_reg->S1 & UART_S1_TDRE_MASK));
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	68fb      	ldr	r3, [r7, #12]
    1312:	791b      	ldrb	r3, [r3, #4]
    1314:	b2db      	uxtb	r3, r3
    1316:	b25b      	sxtb	r3, r3
    1318:	2b00      	cmp	r3, #0
    131a:	daf9      	bge.n	1310 <_putc+0x18>
    uart_reg->D = (c & 0xFF);
    131c:	68fb      	ldr	r3, [r7, #12]
    131e:	1cfa      	adds	r2, r7, #3
    1320:	7812      	ldrb	r2, [r2, #0]
    1322:	71da      	strb	r2, [r3, #7]
    return 1;
    1324:	2301      	movs	r3, #1
}
    1326:	0018      	movs	r0, r3
    1328:	46bd      	mov	sp, r7
    132a:	b004      	add	sp, #16
    132c:	bd80      	pop	{r7, pc}

0000132e <_getc>:

static int _getc(struct rt_serial_device *serial)
{
    132e:	b580      	push	{r7, lr}
    1330:	b084      	sub	sp, #16
    1332:	af00      	add	r7, sp, #0
    1334:	6078      	str	r0, [r7, #4]
    UART_Type *uart_reg;
    uart_reg = ((struct kl26z_serial_device *)serial->parent.user_data)->baseAddress;
    1336:	687b      	ldr	r3, [r7, #4]
    1338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    133a:	681b      	ldr	r3, [r3, #0]
    133c:	60fb      	str	r3, [r7, #12]

    if (uart_reg->S1 & UART_S1_RDRF_MASK)
    133e:	68fb      	ldr	r3, [r7, #12]
    1340:	791b      	ldrb	r3, [r3, #4]
    1342:	b2db      	uxtb	r3, r3
    1344:	001a      	movs	r2, r3
    1346:	2320      	movs	r3, #32
    1348:	4013      	ands	r3, r2
    134a:	d003      	beq.n	1354 <_getc+0x26>
        return (uart_reg->D);
    134c:	68fb      	ldr	r3, [r7, #12]
    134e:	79db      	ldrb	r3, [r3, #7]
    1350:	b2db      	uxtb	r3, r3
    1352:	e001      	b.n	1358 <_getc+0x2a>
    else
        return -1;
    1354:	2301      	movs	r3, #1
    1356:	425b      	negs	r3, r3
}
    1358:	0018      	movs	r0, r3
    135a:	46bd      	mov	sp, r7
    135c:	b004      	add	sp, #16
    135e:	bd80      	pop	{r7, pc}

00001360 <rt_hw_uart_init>:
    rt_interrupt_leave();
}


void rt_hw_uart_init(void)
{
    1360:	b580      	push	{r7, lr}
    1362:	b082      	sub	sp, #8
    1364:	af00      	add	r7, sp, #0
    struct serial_configure config;

    /* fake configuration */
    config.baud_rate = BAUD_RATE_115200;
    1366:	003b      	movs	r3, r7
    1368:	22e1      	movs	r2, #225	; 0xe1
    136a:	0252      	lsls	r2, r2, #9
    136c:	601a      	str	r2, [r3, #0]
    config.bit_order = BIT_ORDER_LSB;
    136e:	003b      	movs	r3, r7
    1370:	795a      	ldrb	r2, [r3, #5]
    1372:	2101      	movs	r1, #1
    1374:	438a      	bics	r2, r1
    1376:	715a      	strb	r2, [r3, #5]
    config.data_bits = DATA_BITS_8;
    1378:	003b      	movs	r3, r7
    137a:	791a      	ldrb	r2, [r3, #4]
    137c:	210f      	movs	r1, #15
    137e:	438a      	bics	r2, r1
    1380:	1c11      	adds	r1, r2, #0
    1382:	2208      	movs	r2, #8
    1384:	430a      	orrs	r2, r1
    1386:	711a      	strb	r2, [r3, #4]
    config.parity    = PARITY_NONE;
    1388:	003b      	movs	r3, r7
    138a:	791a      	ldrb	r2, [r3, #4]
    138c:	213f      	movs	r1, #63	; 0x3f
    138e:	400a      	ands	r2, r1
    1390:	711a      	strb	r2, [r3, #4]
    config.stop_bits = STOP_BITS_1;
    1392:	003b      	movs	r3, r7
    1394:	791a      	ldrb	r2, [r3, #4]
    1396:	2130      	movs	r1, #48	; 0x30
    1398:	438a      	bics	r2, r1
    139a:	711a      	strb	r2, [r3, #4]
    config.invert    = NRZ_NORMAL;
    139c:	003b      	movs	r3, r7
    139e:	795a      	ldrb	r2, [r3, #5]
    13a0:	2102      	movs	r1, #2
    13a2:	438a      	bics	r2, r1
    13a4:	715a      	strb	r2, [r3, #5]
    config.bufsz     = RT_SERIAL_RB_BUFSZ;
    13a6:	003b      	movs	r3, r7
    13a8:	685a      	ldr	r2, [r3, #4]
    13aa:	490c      	ldr	r1, [pc, #48]	; (13dc <rt_hw_uart_init+0x7c>)
    13ac:	400a      	ands	r2, r1
    13ae:	2180      	movs	r1, #128	; 0x80
    13b0:	0249      	lsls	r1, r1, #9
    13b2:	430a      	orrs	r2, r1
    13b4:	605a      	str	r2, [r3, #4]

    _kl26z_serial.ops    = &_kl26z4_ops;
    13b6:	4b0a      	ldr	r3, [pc, #40]	; (13e0 <rt_hw_uart_init+0x80>)
    13b8:	4a0a      	ldr	r2, [pc, #40]	; (13e4 <rt_hw_uart_init+0x84>)
    13ba:	641a      	str	r2, [r3, #64]	; 0x40
    _kl26z_serial.config = config;
    13bc:	4b08      	ldr	r3, [pc, #32]	; (13e0 <rt_hw_uart_init+0x80>)
    13be:	003a      	movs	r2, r7
    13c0:	3344      	adds	r3, #68	; 0x44
    13c2:	ca03      	ldmia	r2!, {r0, r1}
    13c4:	c303      	stmia	r3!, {r0, r1}

    rt_hw_serial_register(&_kl26z_serial, "uart0",
    13c6:	4b08      	ldr	r3, [pc, #32]	; (13e8 <rt_hw_uart_init+0x88>)
    13c8:	2244      	movs	r2, #68	; 0x44
    13ca:	32ff      	adds	r2, #255	; 0xff
    13cc:	4907      	ldr	r1, [pc, #28]	; (13ec <rt_hw_uart_init+0x8c>)
    13ce:	4804      	ldr	r0, [pc, #16]	; (13e0 <rt_hw_uart_init+0x80>)
    13d0:	f005 fbec 	bl	6bac <rt_hw_serial_register>
                          RT_DEVICE_FLAG_RDWR | RT_DEVICE_FLAG_INT_RX | RT_DEVICE_FLAG_STREAM,
                          (void*)&_kl26z4_node);
}
    13d4:	46c0      	nop			; (mov r8, r8)
    13d6:	46bd      	mov	sp, r7
    13d8:	b002      	add	sp, #8
    13da:	bd80      	pop	{r7, pc}
    13dc:	fc0003ff 	.word	0xfc0003ff
    13e0:	1ffffb9c 	.word	0x1ffffb9c
    13e4:	0000b4d4 	.word	0x0000b4d4
    13e8:	1ffff0c4 	.word	0x1ffff0c4
    13ec:	0000b4e8 	.word	0x0000b4e8

000013f0 <rt_hw_console_output>:

void rt_hw_console_output(const char *str)
{
    13f0:	b580      	push	{r7, lr}
    13f2:	b082      	sub	sp, #8
    13f4:	af00      	add	r7, sp, #0
    13f6:	6078      	str	r0, [r7, #4]
    while(*str != '\0')
    13f8:	e012      	b.n	1420 <rt_hw_console_output+0x30>
    {
        if (*str == '\n')
    13fa:	687b      	ldr	r3, [r7, #4]
    13fc:	781b      	ldrb	r3, [r3, #0]
    13fe:	2b0a      	cmp	r3, #10
    1400:	d104      	bne.n	140c <rt_hw_console_output+0x1c>
            _putc(&_kl26z_serial,'\r');
    1402:	4b0c      	ldr	r3, [pc, #48]	; (1434 <rt_hw_console_output+0x44>)
    1404:	210d      	movs	r1, #13
    1406:	0018      	movs	r0, r3
    1408:	f7ff ff76 	bl	12f8 <_putc>
        _putc(&_kl26z_serial,*str);
    140c:	687b      	ldr	r3, [r7, #4]
    140e:	781a      	ldrb	r2, [r3, #0]
    1410:	4b08      	ldr	r3, [pc, #32]	; (1434 <rt_hw_console_output+0x44>)
    1412:	0011      	movs	r1, r2
    1414:	0018      	movs	r0, r3
    1416:	f7ff ff6f 	bl	12f8 <_putc>
        str++;
    141a:	687b      	ldr	r3, [r7, #4]
    141c:	3301      	adds	r3, #1
    141e:	607b      	str	r3, [r7, #4]
    while(*str != '\0')
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	781b      	ldrb	r3, [r3, #0]
    1424:	2b00      	cmp	r3, #0
    1426:	d1e8      	bne.n	13fa <rt_hw_console_output+0xa>
    }
}
    1428:	46c0      	nop			; (mov r8, r8)
    142a:	46c0      	nop			; (mov r8, r8)
    142c:	46bd      	mov	sp, r7
    142e:	b002      	add	sp, #8
    1430:	bd80      	pop	{r7, pc}
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	1ffffb9c 	.word	0x1ffffb9c

00001438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1438:	b590      	push	{r4, r7, lr}
    143a:	b083      	sub	sp, #12
    143c:	af00      	add	r7, sp, #0
    143e:	0002      	movs	r2, r0
    1440:	6039      	str	r1, [r7, #0]
    1442:	1dfb      	adds	r3, r7, #7
    1444:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    1446:	1dfb      	adds	r3, r7, #7
    1448:	781b      	ldrb	r3, [r3, #0]
    144a:	2b7f      	cmp	r3, #127	; 0x7f
    144c:	d828      	bhi.n	14a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    144e:	4a2f      	ldr	r2, [pc, #188]	; (150c <__NVIC_SetPriority+0xd4>)
    1450:	1dfb      	adds	r3, r7, #7
    1452:	781b      	ldrb	r3, [r3, #0]
    1454:	b25b      	sxtb	r3, r3
    1456:	089b      	lsrs	r3, r3, #2
    1458:	33c0      	adds	r3, #192	; 0xc0
    145a:	009b      	lsls	r3, r3, #2
    145c:	589b      	ldr	r3, [r3, r2]
    145e:	1dfa      	adds	r2, r7, #7
    1460:	7812      	ldrb	r2, [r2, #0]
    1462:	0011      	movs	r1, r2
    1464:	2203      	movs	r2, #3
    1466:	400a      	ands	r2, r1
    1468:	00d2      	lsls	r2, r2, #3
    146a:	21ff      	movs	r1, #255	; 0xff
    146c:	4091      	lsls	r1, r2
    146e:	000a      	movs	r2, r1
    1470:	43d2      	mvns	r2, r2
    1472:	401a      	ands	r2, r3
    1474:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    1476:	683b      	ldr	r3, [r7, #0]
    1478:	019b      	lsls	r3, r3, #6
    147a:	22ff      	movs	r2, #255	; 0xff
    147c:	401a      	ands	r2, r3
    147e:	1dfb      	adds	r3, r7, #7
    1480:	781b      	ldrb	r3, [r3, #0]
    1482:	0018      	movs	r0, r3
    1484:	2303      	movs	r3, #3
    1486:	4003      	ands	r3, r0
    1488:	00db      	lsls	r3, r3, #3
    148a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    148c:	481f      	ldr	r0, [pc, #124]	; (150c <__NVIC_SetPriority+0xd4>)
    148e:	1dfb      	adds	r3, r7, #7
    1490:	781b      	ldrb	r3, [r3, #0]
    1492:	b25b      	sxtb	r3, r3
    1494:	089b      	lsrs	r3, r3, #2
    1496:	430a      	orrs	r2, r1
    1498:	33c0      	adds	r3, #192	; 0xc0
    149a:	009b      	lsls	r3, r3, #2
    149c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
    149e:	e031      	b.n	1504 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    14a0:	4a1b      	ldr	r2, [pc, #108]	; (1510 <__NVIC_SetPriority+0xd8>)
    14a2:	1dfb      	adds	r3, r7, #7
    14a4:	781b      	ldrb	r3, [r3, #0]
    14a6:	0019      	movs	r1, r3
    14a8:	230f      	movs	r3, #15
    14aa:	400b      	ands	r3, r1
    14ac:	3b08      	subs	r3, #8
    14ae:	089b      	lsrs	r3, r3, #2
    14b0:	3306      	adds	r3, #6
    14b2:	009b      	lsls	r3, r3, #2
    14b4:	18d3      	adds	r3, r2, r3
    14b6:	3304      	adds	r3, #4
    14b8:	681b      	ldr	r3, [r3, #0]
    14ba:	1dfa      	adds	r2, r7, #7
    14bc:	7812      	ldrb	r2, [r2, #0]
    14be:	0011      	movs	r1, r2
    14c0:	2203      	movs	r2, #3
    14c2:	400a      	ands	r2, r1
    14c4:	00d2      	lsls	r2, r2, #3
    14c6:	21ff      	movs	r1, #255	; 0xff
    14c8:	4091      	lsls	r1, r2
    14ca:	000a      	movs	r2, r1
    14cc:	43d2      	mvns	r2, r2
    14ce:	401a      	ands	r2, r3
    14d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    14d2:	683b      	ldr	r3, [r7, #0]
    14d4:	019b      	lsls	r3, r3, #6
    14d6:	22ff      	movs	r2, #255	; 0xff
    14d8:	401a      	ands	r2, r3
    14da:	1dfb      	adds	r3, r7, #7
    14dc:	781b      	ldrb	r3, [r3, #0]
    14de:	0018      	movs	r0, r3
    14e0:	2303      	movs	r3, #3
    14e2:	4003      	ands	r3, r0
    14e4:	00db      	lsls	r3, r3, #3
    14e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    14e8:	4809      	ldr	r0, [pc, #36]	; (1510 <__NVIC_SetPriority+0xd8>)
    14ea:	1dfb      	adds	r3, r7, #7
    14ec:	781b      	ldrb	r3, [r3, #0]
    14ee:	001c      	movs	r4, r3
    14f0:	230f      	movs	r3, #15
    14f2:	4023      	ands	r3, r4
    14f4:	3b08      	subs	r3, #8
    14f6:	089b      	lsrs	r3, r3, #2
    14f8:	430a      	orrs	r2, r1
    14fa:	3306      	adds	r3, #6
    14fc:	009b      	lsls	r3, r3, #2
    14fe:	18c3      	adds	r3, r0, r3
    1500:	3304      	adds	r3, #4
    1502:	601a      	str	r2, [r3, #0]
}
    1504:	46c0      	nop			; (mov r8, r8)
    1506:	46bd      	mov	sp, r7
    1508:	b003      	add	sp, #12
    150a:	bd90      	pop	{r4, r7, pc}
    150c:	e000e100 	.word	0xe000e100
    1510:	e000ed00 	.word	0xe000ed00

00001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    1514:	b580      	push	{r7, lr}
    1516:	b082      	sub	sp, #8
    1518:	af00      	add	r7, sp, #0
    151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    151c:	687b      	ldr	r3, [r7, #4]
    151e:	1e5a      	subs	r2, r3, #1
    1520:	2380      	movs	r3, #128	; 0x80
    1522:	045b      	lsls	r3, r3, #17
    1524:	429a      	cmp	r2, r3
    1526:	d301      	bcc.n	152c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
    1528:	2301      	movs	r3, #1
    152a:	e010      	b.n	154e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    152c:	4b0a      	ldr	r3, [pc, #40]	; (1558 <SysTick_Config+0x44>)
    152e:	687a      	ldr	r2, [r7, #4]
    1530:	3a01      	subs	r2, #1
    1532:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
    1534:	2301      	movs	r3, #1
    1536:	425b      	negs	r3, r3
    1538:	2103      	movs	r1, #3
    153a:	0018      	movs	r0, r3
    153c:	f7ff ff7c 	bl	1438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1540:	4b05      	ldr	r3, [pc, #20]	; (1558 <SysTick_Config+0x44>)
    1542:	2200      	movs	r2, #0
    1544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1546:	4b04      	ldr	r3, [pc, #16]	; (1558 <SysTick_Config+0x44>)
    1548:	2207      	movs	r2, #7
    154a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    154c:	2300      	movs	r3, #0
}
    154e:	0018      	movs	r0, r3
    1550:	46bd      	mov	sp, r7
    1552:	b002      	add	sp, #8
    1554:	bd80      	pop	{r7, pc}
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	e000e010 	.word	0xe000e010

0000155c <NVIC_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Configuration(void)
{
    155c:	b580      	push	{r7, lr}
    155e:	af00      	add	r7, sp, #0

}
    1560:	46c0      	nop			; (mov r8, r8)
    1562:	46bd      	mov	sp, r7
    1564:	bd80      	pop	{r7, pc}
	...

00001568 <SysTick_Configuration>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void  SysTick_Configuration(void)
{
    1568:	b580      	push	{r7, lr}
    156a:	af00      	add	r7, sp, #0
    SystemCoreClockUpdate();              /* Update Core Clock Frequency        */
    156c:	f7ff f808 	bl	580 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock/RT_TICK_PER_SECOND); /* Generate interrupt each 1 ms       */
    1570:	4b06      	ldr	r3, [pc, #24]	; (158c <SysTick_Configuration+0x24>)
    1572:	681b      	ldr	r3, [r3, #0]
    1574:	2164      	movs	r1, #100	; 0x64
    1576:	0018      	movs	r0, r3
    1578:	f009 fc92 	bl	aea0 <__udivsi3>
    157c:	0003      	movs	r3, r0
    157e:	0018      	movs	r0, r3
    1580:	f7ff ffc8 	bl	1514 <SysTick_Config>
}
    1584:	46c0      	nop			; (mov r8, r8)
    1586:	46bd      	mov	sp, r7
    1588:	bd80      	pop	{r7, pc}
    158a:	46c0      	nop			; (mov r8, r8)
    158c:	1ffff0c0 	.word	0x1ffff0c0

00001590 <rt_hw_board_init>:

/**
 * This function will initial Tower board.
 */
void rt_hw_board_init()
{
    1590:	b580      	push	{r7, lr}
    1592:	af00      	add	r7, sp, #0
    /* NVIC Configuration */
    NVIC_Configuration();
    1594:	f7ff ffe2 	bl	155c <NVIC_Configuration>

    BOARD_BootClockRUN();
    1598:	f7ff fc16 	bl	dc8 <BOARD_BootClockRUN>

    /* Configure the SysTick */
    SysTick_Configuration();
    159c:	f7ff ffe4 	bl	1568 <SysTick_Configuration>

    rt_hw_uart_init();
    15a0:	f7ff fede 	bl	1360 <rt_hw_uart_init>

#if defined(RT_USING_CONSOLE) && defined(RT_USING_DEVICE)
    rt_console_set_device(CONSOLE_DEVICE);
    15a4:	4b03      	ldr	r3, [pc, #12]	; (15b4 <rt_hw_board_init+0x24>)
    15a6:	0018      	movs	r0, r3
    15a8:	f002 fb3e 	bl	3c28 <rt_console_set_device>
#endif
}
    15ac:	46c0      	nop			; (mov r8, r8)
    15ae:	46bd      	mov	sp, r7
    15b0:	bd80      	pop	{r7, pc}
    15b2:	46c0      	nop			; (mov r8, r8)
    15b4:	0000b4f0 	.word	0x0000b4f0

000015b8 <rt_interrupt_get_nest>:
 * context is interrupt context.
 *
 * @return the number of nested interrupts.
 */
RT_WEAK rt_uint8_t rt_interrupt_get_nest(void)
{
    15b8:	b580      	push	{r7, lr}
    15ba:	b082      	sub	sp, #8
    15bc:	af00      	add	r7, sp, #0
    rt_uint8_t ret;
    rt_base_t level;

    level = rt_hw_interrupt_disable();
    15be:	f003 ff87 	bl	54d0 <rt_hw_interrupt_disable>
    15c2:	0003      	movs	r3, r0
    15c4:	607b      	str	r3, [r7, #4]
    ret = rt_interrupt_nest;
    15c6:	1cfb      	adds	r3, r7, #3
    15c8:	4a06      	ldr	r2, [pc, #24]	; (15e4 <rt_interrupt_get_nest+0x2c>)
    15ca:	7812      	ldrb	r2, [r2, #0]
    15cc:	701a      	strb	r2, [r3, #0]
    rt_hw_interrupt_enable(level);
    15ce:	687b      	ldr	r3, [r7, #4]
    15d0:	0018      	movs	r0, r3
    15d2:	f003 ff81 	bl	54d8 <rt_hw_interrupt_enable>
    return ret;
    15d6:	1cfb      	adds	r3, r7, #3
    15d8:	781b      	ldrb	r3, [r3, #0]
}
    15da:	0018      	movs	r0, r3
    15dc:	46bd      	mov	sp, r7
    15de:	b002      	add	sp, #8
    15e0:	bd80      	pop	{r7, pc}
    15e2:	46c0      	nop			; (mov r8, r8)
    15e4:	1ffffbf0 	.word	0x1ffffbf0

000015e8 <rt_list_init>:
 * @brief initialize a list
 *
 * @param l list to be initialized
 */
rt_inline void rt_list_init(rt_list_t *l)
{
    15e8:	b580      	push	{r7, lr}
    15ea:	b082      	sub	sp, #8
    15ec:	af00      	add	r7, sp, #0
    15ee:	6078      	str	r0, [r7, #4]
    l->next = l->prev = l;
    15f0:	687b      	ldr	r3, [r7, #4]
    15f2:	687a      	ldr	r2, [r7, #4]
    15f4:	605a      	str	r2, [r3, #4]
    15f6:	687b      	ldr	r3, [r7, #4]
    15f8:	685a      	ldr	r2, [r3, #4]
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	601a      	str	r2, [r3, #0]
}
    15fe:	46c0      	nop			; (mov r8, r8)
    1600:	46bd      	mov	sp, r7
    1602:	b002      	add	sp, #8
    1604:	bd80      	pop	{r7, pc}

00001606 <rt_list_insert_before>:
 *
 * @param n new node to be inserted
 * @param l list to insert it
 */
rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
{
    1606:	b580      	push	{r7, lr}
    1608:	b082      	sub	sp, #8
    160a:	af00      	add	r7, sp, #0
    160c:	6078      	str	r0, [r7, #4]
    160e:	6039      	str	r1, [r7, #0]
    l->prev->next = n;
    1610:	687b      	ldr	r3, [r7, #4]
    1612:	685b      	ldr	r3, [r3, #4]
    1614:	683a      	ldr	r2, [r7, #0]
    1616:	601a      	str	r2, [r3, #0]
    n->prev = l->prev;
    1618:	687b      	ldr	r3, [r7, #4]
    161a:	685a      	ldr	r2, [r3, #4]
    161c:	683b      	ldr	r3, [r7, #0]
    161e:	605a      	str	r2, [r3, #4]

    l->prev = n;
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	683a      	ldr	r2, [r7, #0]
    1624:	605a      	str	r2, [r3, #4]
    n->next = l;
    1626:	683b      	ldr	r3, [r7, #0]
    1628:	687a      	ldr	r2, [r7, #4]
    162a:	601a      	str	r2, [r3, #0]
}
    162c:	46c0      	nop			; (mov r8, r8)
    162e:	46bd      	mov	sp, r7
    1630:	b002      	add	sp, #8
    1632:	bd80      	pop	{r7, pc}

00001634 <rt_list_remove>:
/**
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
    1634:	b580      	push	{r7, lr}
    1636:	b082      	sub	sp, #8
    1638:	af00      	add	r7, sp, #0
    163a:	6078      	str	r0, [r7, #4]
    n->next->prev = n->prev;
    163c:	687b      	ldr	r3, [r7, #4]
    163e:	681b      	ldr	r3, [r3, #0]
    1640:	687a      	ldr	r2, [r7, #4]
    1642:	6852      	ldr	r2, [r2, #4]
    1644:	605a      	str	r2, [r3, #4]
    n->prev->next = n->next;
    1646:	687b      	ldr	r3, [r7, #4]
    1648:	685b      	ldr	r3, [r3, #4]
    164a:	687a      	ldr	r2, [r7, #4]
    164c:	6812      	ldr	r2, [r2, #0]
    164e:	601a      	str	r2, [r3, #0]

    n->next = n->prev = n;
    1650:	687b      	ldr	r3, [r7, #4]
    1652:	687a      	ldr	r2, [r7, #4]
    1654:	605a      	str	r2, [r3, #4]
    1656:	687b      	ldr	r3, [r7, #4]
    1658:	685a      	ldr	r2, [r3, #4]
    165a:	687b      	ldr	r3, [r7, #4]
    165c:	601a      	str	r2, [r3, #0]
}
    165e:	46c0      	nop			; (mov r8, r8)
    1660:	46bd      	mov	sp, r7
    1662:	b002      	add	sp, #8
    1664:	bd80      	pop	{r7, pc}

00001666 <rt_list_isempty>:
/**
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
    1666:	b580      	push	{r7, lr}
    1668:	b082      	sub	sp, #8
    166a:	af00      	add	r7, sp, #0
    166c:	6078      	str	r0, [r7, #4]
    return l->next == l;
    166e:	687b      	ldr	r3, [r7, #4]
    1670:	681b      	ldr	r3, [r3, #0]
    1672:	687a      	ldr	r2, [r7, #4]
    1674:	1ad3      	subs	r3, r2, r3
    1676:	425a      	negs	r2, r3
    1678:	4153      	adcs	r3, r2
    167a:	b2db      	uxtb	r3, r3
}
    167c:	0018      	movs	r0, r3
    167e:	46bd      	mov	sp, r7
    1680:	b002      	add	sp, #8
    1682:	bd80      	pop	{r7, pc}

00001684 <_rt_scheduler_stack_check>:
/**@}*/
#endif /* RT_USING_HOOK */

#ifdef RT_USING_OVERFLOW_CHECK
static void _rt_scheduler_stack_check(struct rt_thread *thread)
{
    1684:	b580      	push	{r7, lr}
    1686:	b084      	sub	sp, #16
    1688:	af00      	add	r7, sp, #0
    168a:	6078      	str	r0, [r7, #4]
    RT_ASSERT(thread != RT_NULL);
    168c:	687b      	ldr	r3, [r7, #4]
    168e:	2b00      	cmp	r3, #0
    1690:	d105      	bne.n	169e <_rt_scheduler_stack_check+0x1a>
    1692:	491f      	ldr	r1, [pc, #124]	; (1710 <_rt_scheduler_stack_check+0x8c>)
    1694:	4b1f      	ldr	r3, [pc, #124]	; (1714 <_rt_scheduler_stack_check+0x90>)
    1696:	225f      	movs	r2, #95	; 0x5f
    1698:	0018      	movs	r0, r3
    169a:	f002 fc99 	bl	3fd0 <rt_assert_handler>

#ifdef ARCH_CPU_STACK_GROWS_UPWARD
    if (*((rt_uint8_t *)((rt_ubase_t)thread->stack_addr + thread->stack_size - 1)) != '#' ||
#else
    if (*((rt_uint8_t *)thread->stack_addr) != '#' ||
    169e:	687b      	ldr	r3, [r7, #4]
    16a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16a2:	781b      	ldrb	r3, [r3, #0]
    16a4:	2b23      	cmp	r3, #35	; 0x23
    16a6:	d111      	bne.n	16cc <_rt_scheduler_stack_check+0x48>
#endif /* ARCH_CPU_STACK_GROWS_UPWARD */
        (rt_ubase_t)thread->sp <= (rt_ubase_t)thread->stack_addr ||
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	69db      	ldr	r3, [r3, #28]
    16ac:	001a      	movs	r2, r3
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if (*((rt_uint8_t *)thread->stack_addr) != '#' ||
    16b2:	429a      	cmp	r2, r3
    16b4:	d90a      	bls.n	16cc <_rt_scheduler_stack_check+0x48>
        (rt_ubase_t)thread->sp >
    16b6:	687b      	ldr	r3, [r7, #4]
    16b8:	69db      	ldr	r3, [r3, #28]
    16ba:	001a      	movs	r2, r3
        (rt_ubase_t)thread->stack_addr + (rt_ubase_t)thread->stack_size)
    16bc:	687b      	ldr	r3, [r7, #4]
    16be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16c0:	0019      	movs	r1, r3
    16c2:	687b      	ldr	r3, [r7, #4]
    16c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    16c6:	18cb      	adds	r3, r1, r3
        (rt_ubase_t)thread->sp <= (rt_ubase_t)thread->stack_addr ||
    16c8:	429a      	cmp	r2, r3
    16ca:	d90e      	bls.n	16ea <_rt_scheduler_stack_check+0x66>
    {
        rt_ubase_t level;

        rt_kprintf("thread:%s stack overflow\n", thread->name);
    16cc:	687a      	ldr	r2, [r7, #4]
    16ce:	4b12      	ldr	r3, [pc, #72]	; (1718 <_rt_scheduler_stack_check+0x94>)
    16d0:	0011      	movs	r1, r2
    16d2:	0018      	movs	r0, r3
    16d4:	f002 fad6 	bl	3c84 <rt_kprintf>

        level = rt_hw_interrupt_disable();
    16d8:	f003 fefa 	bl	54d0 <rt_hw_interrupt_disable>
    16dc:	0003      	movs	r3, r0
    16de:	60fb      	str	r3, [r7, #12]
        while (level);
    16e0:	46c0      	nop			; (mov r8, r8)
    16e2:	68fb      	ldr	r3, [r7, #12]
    16e4:	2b00      	cmp	r3, #0
    16e6:	d1fc      	bne.n	16e2 <_rt_scheduler_stack_check+0x5e>
    {
    16e8:	e00e      	b.n	1708 <_rt_scheduler_stack_check+0x84>
    {
        rt_kprintf("warning: %s stack is close to the top of stack address.\n",
                   thread->name);
    }
#else
    else if ((rt_ubase_t)thread->sp <= ((rt_ubase_t)thread->stack_addr + 32))
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	69db      	ldr	r3, [r3, #28]
    16ee:	001a      	movs	r2, r3
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16f4:	3320      	adds	r3, #32
    16f6:	429a      	cmp	r2, r3
    16f8:	d806      	bhi.n	1708 <_rt_scheduler_stack_check+0x84>
    {
        rt_kprintf("warning: %s stack is close to end of stack address.\n",
                   thread->name);
    16fa:	687a      	ldr	r2, [r7, #4]
        rt_kprintf("warning: %s stack is close to end of stack address.\n",
    16fc:	4b07      	ldr	r3, [pc, #28]	; (171c <_rt_scheduler_stack_check+0x98>)
    16fe:	0011      	movs	r1, r2
    1700:	0018      	movs	r0, r3
    1702:	f002 fabf 	bl	3c84 <rt_kprintf>
    }
#endif /* ARCH_CPU_STACK_GROWS_UPWARD */
}
    1706:	e7ff      	b.n	1708 <_rt_scheduler_stack_check+0x84>
    1708:	46c0      	nop			; (mov r8, r8)
    170a:	46bd      	mov	sp, r7
    170c:	b004      	add	sp, #16
    170e:	bd80      	pop	{r7, pc}
    1710:	0000b560 	.word	0x0000b560
    1714:	0000b4f8 	.word	0x0000b4f8
    1718:	0000b50c 	.word	0x0000b50c
    171c:	0000b528 	.word	0x0000b528

00001720 <_scheduler_get_highest_priority_thread>:

    return highest_priority_thread;
}
#else
static struct rt_thread* _scheduler_get_highest_priority_thread(rt_ubase_t *highest_prio)
{
    1720:	b5b0      	push	{r4, r5, r7, lr}
    1722:	b082      	sub	sp, #8
    1724:	af00      	add	r7, sp, #0
    1726:	6078      	str	r0, [r7, #4]
    register rt_ubase_t number;

    number = __rt_ffs(rt_thread_ready_priority_group) - 1;
    highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
#else
    highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
    1728:	4b09      	ldr	r3, [pc, #36]	; (1750 <_scheduler_get_highest_priority_thread+0x30>)
    172a:	681b      	ldr	r3, [r3, #0]
    172c:	0018      	movs	r0, r3
    172e:	f002 fc15 	bl	3f5c <__rt_ffs>
    1732:	0003      	movs	r3, r0
    1734:	3b01      	subs	r3, #1
    1736:	001c      	movs	r4, r3
#endif /* RT_THREAD_PRIORITY_MAX > 32 */

    /* get highest ready priority thread */
    highest_priority_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
    1738:	4b06      	ldr	r3, [pc, #24]	; (1754 <_scheduler_get_highest_priority_thread+0x34>)
    173a:	00e2      	lsls	r2, r4, #3
    173c:	58d3      	ldr	r3, [r2, r3]
    173e:	3b14      	subs	r3, #20
    1740:	001d      	movs	r5, r3
                              struct rt_thread,
                              tlist);

    *highest_prio = highest_ready_priority;
    1742:	687b      	ldr	r3, [r7, #4]
    1744:	601c      	str	r4, [r3, #0]

    return highest_priority_thread;
    1746:	002b      	movs	r3, r5
}
    1748:	0018      	movs	r0, r3
    174a:	46bd      	mov	sp, r7
    174c:	b002      	add	sp, #8
    174e:	bdb0      	pop	{r4, r5, r7, pc}
    1750:	1ffffcf4 	.word	0x1ffffcf4
    1754:	1ffffbf4 	.word	0x1ffffbf4

00001758 <rt_system_scheduler_init>:

/**
 * @brief This function will initialize the system scheduler.
 */
void rt_system_scheduler_init(void)
{
    1758:	b5b0      	push	{r4, r5, r7, lr}
    175a:	af00      	add	r7, sp, #0
    int cpu;
#endif /* RT_USING_SMP */
    register rt_base_t offset;

#ifndef RT_USING_SMP
    rt_scheduler_lock_nest = 0;
    175c:	4b09      	ldr	r3, [pc, #36]	; (1784 <rt_system_scheduler_init+0x2c>)
    175e:	2200      	movs	r2, #0
    1760:	801a      	strh	r2, [r3, #0]
#endif /* RT_USING_SMP */

    RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("start scheduler: max priority 0x%02x\n",
                                      RT_THREAD_PRIORITY_MAX));

    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
    1762:	2400      	movs	r4, #0
    1764:	e006      	b.n	1774 <rt_system_scheduler_init+0x1c>
    {
        rt_list_init(&rt_thread_priority_table[offset]);
    1766:	00e2      	lsls	r2, r4, #3
    1768:	4b07      	ldr	r3, [pc, #28]	; (1788 <rt_system_scheduler_init+0x30>)
    176a:	18d3      	adds	r3, r2, r3
    176c:	0018      	movs	r0, r3
    176e:	f7ff ff3b 	bl	15e8 <rt_list_init>
    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
    1772:	3401      	adds	r4, #1
    1774:	2c1f      	cmp	r4, #31
    1776:	ddf6      	ble.n	1766 <rt_system_scheduler_init+0xe>
#endif /* RT_THREAD_PRIORITY_MAX > 32 */
    }
#endif /* RT_USING_SMP */

    /* initialize ready priority group */
    rt_thread_ready_priority_group = 0;
    1778:	4b04      	ldr	r3, [pc, #16]	; (178c <rt_system_scheduler_init+0x34>)
    177a:	2200      	movs	r2, #0
    177c:	601a      	str	r2, [r3, #0]

#if RT_THREAD_PRIORITY_MAX > 32
    /* initialize ready table */
    rt_memset(rt_thread_ready_table, 0, sizeof(rt_thread_ready_table));
#endif /* RT_THREAD_PRIORITY_MAX > 32 */
}
    177e:	46c0      	nop			; (mov r8, r8)
    1780:	46bd      	mov	sp, r7
    1782:	bdb0      	pop	{r4, r5, r7, pc}
    1784:	1ffffcf8 	.word	0x1ffffcf8
    1788:	1ffffbf4 	.word	0x1ffffbf4
    178c:	1ffffcf4 	.word	0x1ffffcf4

00001790 <rt_system_scheduler_start>:
/**
 * @brief This function will startup the scheduler. It will select one thread
 *        with the highest priority level, then switch to it.
 */
void rt_system_scheduler_start(void)
{
    1790:	b590      	push	{r4, r7, lr}
    1792:	b083      	sub	sp, #12
    1794:	af00      	add	r7, sp, #0
    register struct rt_thread *to_thread;
    rt_ubase_t highest_ready_priority;

    to_thread = _scheduler_get_highest_priority_thread(&highest_ready_priority);
    1796:	1d3b      	adds	r3, r7, #4
    1798:	0018      	movs	r0, r3
    179a:	f7ff ffc1 	bl	1720 <_scheduler_get_highest_priority_thread>
    179e:	0004      	movs	r4, r0

#ifdef RT_USING_SMP
    to_thread->oncpu = rt_hw_cpu_id();
#else
    rt_current_thread = to_thread;
    17a0:	4b08      	ldr	r3, [pc, #32]	; (17c4 <rt_system_scheduler_start+0x34>)
    17a2:	601c      	str	r4, [r3, #0]
#endif /* RT_USING_SMP */

    rt_schedule_remove_thread(to_thread);
    17a4:	0020      	movs	r0, r4
    17a6:	f000 f93f 	bl	1a28 <rt_schedule_remove_thread>
    to_thread->stat = RT_THREAD_RUNNING;
    17aa:	2334      	movs	r3, #52	; 0x34
    17ac:	2203      	movs	r2, #3
    17ae:	54e2      	strb	r2, [r4, r3]

    /* switch to new thread */
#ifdef RT_USING_SMP
    rt_hw_context_switch_to((rt_ubase_t)&to_thread->sp, to_thread);
#else
    rt_hw_context_switch_to((rt_ubase_t)&to_thread->sp);
    17b0:	0023      	movs	r3, r4
    17b2:	331c      	adds	r3, #28
    17b4:	0018      	movs	r0, r3
    17b6:	f003 feca 	bl	554e <rt_hw_context_switch_to>
#endif /* RT_USING_SMP */

    /* never come back */
}
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	46bd      	mov	sp, r7
    17be:	b003      	add	sp, #12
    17c0:	bd90      	pop	{r4, r7, pc}
    17c2:	46c0      	nop			; (mov r8, r8)
    17c4:	1ffffcfc 	.word	0x1ffffcfc

000017c8 <rt_schedule>:
/**
 * @brief This function will perform scheduling once. It will select one thread
 *        with the highest priority, and switch to it immediately.
 */
void rt_schedule(void)
{
    17c8:	b580      	push	{r7, lr}
    17ca:	b086      	sub	sp, #24
    17cc:	af00      	add	r7, sp, #0
    rt_base_t level;
    struct rt_thread *to_thread;
    struct rt_thread *from_thread;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    17ce:	f003 fe7f 	bl	54d0 <rt_hw_interrupt_disable>
    17d2:	0003      	movs	r3, r0
    17d4:	60fb      	str	r3, [r7, #12]

    /* check the scheduler is enabled or not */
    if (rt_scheduler_lock_nest == 0)
    17d6:	4b61      	ldr	r3, [pc, #388]	; (195c <rt_schedule+0x194>)
    17d8:	2200      	movs	r2, #0
    17da:	5e9b      	ldrsh	r3, [r3, r2]
    17dc:	2b00      	cmp	r3, #0
    17de:	d000      	beq.n	17e2 <rt_schedule+0x1a>
    17e0:	e0b3      	b.n	194a <rt_schedule+0x182>
    {
        rt_ubase_t highest_ready_priority;

        if (rt_thread_ready_priority_group != 0)
    17e2:	4b5f      	ldr	r3, [pc, #380]	; (1960 <rt_schedule+0x198>)
    17e4:	681b      	ldr	r3, [r3, #0]
    17e6:	2b00      	cmp	r3, #0
    17e8:	d100      	bne.n	17ec <rt_schedule+0x24>
    17ea:	e0ae      	b.n	194a <rt_schedule+0x182>
        {
            /* need_insert_from_thread: need to insert from_thread to ready queue */
            int need_insert_from_thread = 0;
    17ec:	2300      	movs	r3, #0
    17ee:	613b      	str	r3, [r7, #16]

            to_thread = _scheduler_get_highest_priority_thread(&highest_ready_priority);
    17f0:	1d3b      	adds	r3, r7, #4
    17f2:	0018      	movs	r0, r3
    17f4:	f7ff ff94 	bl	1720 <_scheduler_get_highest_priority_thread>
    17f8:	0003      	movs	r3, r0
    17fa:	617b      	str	r3, [r7, #20]

            if ((rt_current_thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_RUNNING)
    17fc:	4b59      	ldr	r3, [pc, #356]	; (1964 <rt_schedule+0x19c>)
    17fe:	681b      	ldr	r3, [r3, #0]
    1800:	2234      	movs	r2, #52	; 0x34
    1802:	5c9b      	ldrb	r3, [r3, r2]
    1804:	001a      	movs	r2, r3
    1806:	2307      	movs	r3, #7
    1808:	4013      	ands	r3, r2
    180a:	2b03      	cmp	r3, #3
    180c:	d12c      	bne.n	1868 <rt_schedule+0xa0>
            {
                if (rt_current_thread->current_priority < highest_ready_priority)
    180e:	4b55      	ldr	r3, [pc, #340]	; (1964 <rt_schedule+0x19c>)
    1810:	681b      	ldr	r3, [r3, #0]
    1812:	2235      	movs	r2, #53	; 0x35
    1814:	5c9b      	ldrb	r3, [r3, r2]
    1816:	001a      	movs	r2, r3
    1818:	687b      	ldr	r3, [r7, #4]
    181a:	429a      	cmp	r2, r3
    181c:	d203      	bcs.n	1826 <rt_schedule+0x5e>
                {
                    to_thread = rt_current_thread;
    181e:	4b51      	ldr	r3, [pc, #324]	; (1964 <rt_schedule+0x19c>)
    1820:	681b      	ldr	r3, [r3, #0]
    1822:	617b      	str	r3, [r7, #20]
    1824:	e015      	b.n	1852 <rt_schedule+0x8a>
                }
                else if (rt_current_thread->current_priority == highest_ready_priority && (rt_current_thread->stat & RT_THREAD_STAT_YIELD_MASK) == 0)
    1826:	4b4f      	ldr	r3, [pc, #316]	; (1964 <rt_schedule+0x19c>)
    1828:	681b      	ldr	r3, [r3, #0]
    182a:	2235      	movs	r2, #53	; 0x35
    182c:	5c9b      	ldrb	r3, [r3, r2]
    182e:	001a      	movs	r2, r3
    1830:	687b      	ldr	r3, [r7, #4]
    1832:	429a      	cmp	r2, r3
    1834:	d10b      	bne.n	184e <rt_schedule+0x86>
    1836:	4b4b      	ldr	r3, [pc, #300]	; (1964 <rt_schedule+0x19c>)
    1838:	681b      	ldr	r3, [r3, #0]
    183a:	2234      	movs	r2, #52	; 0x34
    183c:	5c9b      	ldrb	r3, [r3, r2]
    183e:	001a      	movs	r2, r3
    1840:	2308      	movs	r3, #8
    1842:	4013      	ands	r3, r2
    1844:	d103      	bne.n	184e <rt_schedule+0x86>
                {
                    to_thread = rt_current_thread;
    1846:	4b47      	ldr	r3, [pc, #284]	; (1964 <rt_schedule+0x19c>)
    1848:	681b      	ldr	r3, [r3, #0]
    184a:	617b      	str	r3, [r7, #20]
    184c:	e001      	b.n	1852 <rt_schedule+0x8a>
                }
                else
                {
                    need_insert_from_thread = 1;
    184e:	2301      	movs	r3, #1
    1850:	613b      	str	r3, [r7, #16]
                }
                rt_current_thread->stat &= ~RT_THREAD_STAT_YIELD_MASK;
    1852:	4b44      	ldr	r3, [pc, #272]	; (1964 <rt_schedule+0x19c>)
    1854:	681b      	ldr	r3, [r3, #0]
    1856:	2234      	movs	r2, #52	; 0x34
    1858:	5c9a      	ldrb	r2, [r3, r2]
    185a:	4b42      	ldr	r3, [pc, #264]	; (1964 <rt_schedule+0x19c>)
    185c:	681b      	ldr	r3, [r3, #0]
    185e:	2108      	movs	r1, #8
    1860:	438a      	bics	r2, r1
    1862:	b2d1      	uxtb	r1, r2
    1864:	2234      	movs	r2, #52	; 0x34
    1866:	5499      	strb	r1, [r3, r2]
            }

            if (to_thread != rt_current_thread)
    1868:	4b3e      	ldr	r3, [pc, #248]	; (1964 <rt_schedule+0x19c>)
    186a:	681b      	ldr	r3, [r3, #0]
    186c:	697a      	ldr	r2, [r7, #20]
    186e:	429a      	cmp	r2, r3
    1870:	d056      	beq.n	1920 <rt_schedule+0x158>
            {
                /* if the destination thread is not the same as current thread */
                rt_current_priority = (rt_uint8_t)highest_ready_priority;
    1872:	687b      	ldr	r3, [r7, #4]
    1874:	b2da      	uxtb	r2, r3
    1876:	4b3c      	ldr	r3, [pc, #240]	; (1968 <rt_schedule+0x1a0>)
    1878:	701a      	strb	r2, [r3, #0]
                from_thread         = rt_current_thread;
    187a:	4b3a      	ldr	r3, [pc, #232]	; (1964 <rt_schedule+0x19c>)
    187c:	681b      	ldr	r3, [r3, #0]
    187e:	60bb      	str	r3, [r7, #8]
                rt_current_thread   = to_thread;
    1880:	4b38      	ldr	r3, [pc, #224]	; (1964 <rt_schedule+0x19c>)
    1882:	697a      	ldr	r2, [r7, #20]
    1884:	601a      	str	r2, [r3, #0]

                RT_OBJECT_HOOK_CALL(rt_scheduler_hook, (from_thread, to_thread));
    1886:	4b39      	ldr	r3, [pc, #228]	; (196c <rt_schedule+0x1a4>)
    1888:	681b      	ldr	r3, [r3, #0]
    188a:	2b00      	cmp	r3, #0
    188c:	d005      	beq.n	189a <rt_schedule+0xd2>
    188e:	4b37      	ldr	r3, [pc, #220]	; (196c <rt_schedule+0x1a4>)
    1890:	681b      	ldr	r3, [r3, #0]
    1892:	6979      	ldr	r1, [r7, #20]
    1894:	68ba      	ldr	r2, [r7, #8]
    1896:	0010      	movs	r0, r2
    1898:	4798      	blx	r3

                if (need_insert_from_thread)
    189a:	693b      	ldr	r3, [r7, #16]
    189c:	2b00      	cmp	r3, #0
    189e:	d003      	beq.n	18a8 <rt_schedule+0xe0>
                {
                    rt_schedule_insert_thread(from_thread);
    18a0:	68bb      	ldr	r3, [r7, #8]
    18a2:	0018      	movs	r0, r3
    18a4:	f000 f868 	bl	1978 <rt_schedule_insert_thread>
                }

                rt_schedule_remove_thread(to_thread);
    18a8:	697b      	ldr	r3, [r7, #20]
    18aa:	0018      	movs	r0, r3
    18ac:	f000 f8bc 	bl	1a28 <rt_schedule_remove_thread>
                to_thread->stat = RT_THREAD_RUNNING | (to_thread->stat & ~RT_THREAD_STAT_MASK);
    18b0:	697b      	ldr	r3, [r7, #20]
    18b2:	2234      	movs	r2, #52	; 0x34
    18b4:	5c9b      	ldrb	r3, [r3, r2]
    18b6:	b25b      	sxtb	r3, r3
    18b8:	2207      	movs	r2, #7
    18ba:	4393      	bics	r3, r2
    18bc:	b25b      	sxtb	r3, r3
    18be:	2203      	movs	r2, #3
    18c0:	4313      	orrs	r3, r2
    18c2:	b25b      	sxtb	r3, r3
    18c4:	b2d9      	uxtb	r1, r3
    18c6:	697b      	ldr	r3, [r7, #20]
    18c8:	2234      	movs	r2, #52	; 0x34
    18ca:	5499      	strb	r1, [r3, r2]
                         rt_interrupt_nest, highest_ready_priority,
                         RT_NAME_MAX, to_thread->name, to_thread->sp,
                         RT_NAME_MAX, from_thread->name, from_thread->sp));

#ifdef RT_USING_OVERFLOW_CHECK
                _rt_scheduler_stack_check(to_thread);
    18cc:	697b      	ldr	r3, [r7, #20]
    18ce:	0018      	movs	r0, r3
    18d0:	f7ff fed8 	bl	1684 <_rt_scheduler_stack_check>
#endif /* RT_USING_OVERFLOW_CHECK */

                if (rt_interrupt_nest == 0)
    18d4:	4b26      	ldr	r3, [pc, #152]	; (1970 <rt_schedule+0x1a8>)
    18d6:	781b      	ldrb	r3, [r3, #0]
    18d8:	b2db      	uxtb	r3, r3
    18da:	2b00      	cmp	r3, #0
    18dc:	d116      	bne.n	190c <rt_schedule+0x144>
                {
                    extern void rt_thread_handle_sig(rt_bool_t clean_state);

                    RT_OBJECT_HOOK_CALL(rt_scheduler_switch_hook, (from_thread));
    18de:	4b25      	ldr	r3, [pc, #148]	; (1974 <rt_schedule+0x1ac>)
    18e0:	681b      	ldr	r3, [r3, #0]
    18e2:	2b00      	cmp	r3, #0
    18e4:	d004      	beq.n	18f0 <rt_schedule+0x128>
    18e6:	4b23      	ldr	r3, [pc, #140]	; (1974 <rt_schedule+0x1ac>)
    18e8:	681b      	ldr	r3, [r3, #0]
    18ea:	68ba      	ldr	r2, [r7, #8]
    18ec:	0010      	movs	r0, r2
    18ee:	4798      	blx	r3

                    rt_hw_context_switch((rt_ubase_t)&from_thread->sp,
    18f0:	68bb      	ldr	r3, [r7, #8]
    18f2:	331c      	adds	r3, #28
    18f4:	001a      	movs	r2, r3
                            (rt_ubase_t)&to_thread->sp);
    18f6:	697b      	ldr	r3, [r7, #20]
    18f8:	331c      	adds	r3, #28
                    rt_hw_context_switch((rt_ubase_t)&from_thread->sp,
    18fa:	0019      	movs	r1, r3
    18fc:	0010      	movs	r0, r2
    18fe:	f003 fdee 	bl	54de <rt_hw_context_switch>

                    /* enable interrupt */
                    rt_hw_interrupt_enable(level);
    1902:	68fb      	ldr	r3, [r7, #12]
    1904:	0018      	movs	r0, r3
    1906:	f003 fde7 	bl	54d8 <rt_hw_interrupt_enable>

    /* enable interrupt */
    rt_hw_interrupt_enable(level);

__exit:
    return;
    190a:	e023      	b.n	1954 <rt_schedule+0x18c>
                    rt_hw_context_switch_interrupt((rt_ubase_t)&from_thread->sp,
    190c:	68bb      	ldr	r3, [r7, #8]
    190e:	331c      	adds	r3, #28
    1910:	001a      	movs	r2, r3
                            (rt_ubase_t)&to_thread->sp);
    1912:	697b      	ldr	r3, [r7, #20]
    1914:	331c      	adds	r3, #28
                    rt_hw_context_switch_interrupt((rt_ubase_t)&from_thread->sp,
    1916:	0019      	movs	r1, r3
    1918:	0010      	movs	r0, r2
    191a:	f003 fde0 	bl	54de <rt_hw_context_switch>
    191e:	e014      	b.n	194a <rt_schedule+0x182>
                rt_schedule_remove_thread(rt_current_thread);
    1920:	4b10      	ldr	r3, [pc, #64]	; (1964 <rt_schedule+0x19c>)
    1922:	681b      	ldr	r3, [r3, #0]
    1924:	0018      	movs	r0, r3
    1926:	f000 f87f 	bl	1a28 <rt_schedule_remove_thread>
                rt_current_thread->stat = RT_THREAD_RUNNING | (rt_current_thread->stat & ~RT_THREAD_STAT_MASK);
    192a:	4b0e      	ldr	r3, [pc, #56]	; (1964 <rt_schedule+0x19c>)
    192c:	681b      	ldr	r3, [r3, #0]
    192e:	2234      	movs	r2, #52	; 0x34
    1930:	5c9b      	ldrb	r3, [r3, r2]
    1932:	b25b      	sxtb	r3, r3
    1934:	2207      	movs	r2, #7
    1936:	4393      	bics	r3, r2
    1938:	b25b      	sxtb	r3, r3
    193a:	2203      	movs	r2, #3
    193c:	4313      	orrs	r3, r2
    193e:	b25a      	sxtb	r2, r3
    1940:	4b08      	ldr	r3, [pc, #32]	; (1964 <rt_schedule+0x19c>)
    1942:	681b      	ldr	r3, [r3, #0]
    1944:	b2d1      	uxtb	r1, r2
    1946:	2234      	movs	r2, #52	; 0x34
    1948:	5499      	strb	r1, [r3, r2]
    rt_hw_interrupt_enable(level);
    194a:	68fb      	ldr	r3, [r7, #12]
    194c:	0018      	movs	r0, r3
    194e:	f003 fdc3 	bl	54d8 <rt_hw_interrupt_enable>
    return;
    1952:	46c0      	nop			; (mov r8, r8)
}
    1954:	46bd      	mov	sp, r7
    1956:	b006      	add	sp, #24
    1958:	bd80      	pop	{r7, pc}
    195a:	46c0      	nop			; (mov r8, r8)
    195c:	1ffffcf8 	.word	0x1ffffcf8
    1960:	1ffffcf4 	.word	0x1ffffcf4
    1964:	1ffffcfc 	.word	0x1ffffcfc
    1968:	1ffffd00 	.word	0x1ffffd00
    196c:	1ffffd04 	.word	0x1ffffd04
    1970:	1ffffbf0 	.word	0x1ffffbf0
    1974:	1ffffd08 	.word	0x1ffffd08

00001978 <rt_schedule_insert_thread>:
    /* enable interrupt */
    rt_hw_interrupt_enable(level);
}
#else
void rt_schedule_insert_thread(struct rt_thread *thread)
{
    1978:	b590      	push	{r4, r7, lr}
    197a:	b083      	sub	sp, #12
    197c:	af00      	add	r7, sp, #0
    197e:	6078      	str	r0, [r7, #4]
    register rt_base_t temp;

    RT_ASSERT(thread != RT_NULL);
    1980:	687b      	ldr	r3, [r7, #4]
    1982:	2b00      	cmp	r3, #0
    1984:	d105      	bne.n	1992 <rt_schedule_insert_thread+0x1a>
    1986:	4a22      	ldr	r2, [pc, #136]	; (1a10 <rt_schedule_insert_thread+0x98>)
    1988:	4922      	ldr	r1, [pc, #136]	; (1a14 <rt_schedule_insert_thread+0x9c>)
    198a:	4b23      	ldr	r3, [pc, #140]	; (1a18 <rt_schedule_insert_thread+0xa0>)
    198c:	0018      	movs	r0, r3
    198e:	f002 fb1f 	bl	3fd0 <rt_assert_handler>

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
    1992:	f003 fd9d 	bl	54d0 <rt_hw_interrupt_disable>
    1996:	0004      	movs	r4, r0

    /* it's current thread, it should be RUNNING thread */
    if (thread == rt_current_thread)
    1998:	4b20      	ldr	r3, [pc, #128]	; (1a1c <rt_schedule_insert_thread+0xa4>)
    199a:	681b      	ldr	r3, [r3, #0]
    199c:	687a      	ldr	r2, [r7, #4]
    199e:	429a      	cmp	r2, r3
    19a0:	d10e      	bne.n	19c0 <rt_schedule_insert_thread+0x48>
    {
        thread->stat = RT_THREAD_RUNNING | (thread->stat & ~RT_THREAD_STAT_MASK);
    19a2:	687b      	ldr	r3, [r7, #4]
    19a4:	2234      	movs	r2, #52	; 0x34
    19a6:	5c9b      	ldrb	r3, [r3, r2]
    19a8:	b25b      	sxtb	r3, r3
    19aa:	2207      	movs	r2, #7
    19ac:	4393      	bics	r3, r2
    19ae:	b25b      	sxtb	r3, r3
    19b0:	2203      	movs	r2, #3
    19b2:	4313      	orrs	r3, r2
    19b4:	b25b      	sxtb	r3, r3
    19b6:	b2d9      	uxtb	r1, r3
    19b8:	687b      	ldr	r3, [r7, #4]
    19ba:	2234      	movs	r2, #52	; 0x34
    19bc:	5499      	strb	r1, [r3, r2]
        goto __exit;
    19be:	e020      	b.n	1a02 <rt_schedule_insert_thread+0x8a>
    }

    /* READY thread, insert to ready queue */
    thread->stat = RT_THREAD_READY | (thread->stat & ~RT_THREAD_STAT_MASK);
    19c0:	687b      	ldr	r3, [r7, #4]
    19c2:	2234      	movs	r2, #52	; 0x34
    19c4:	5c9b      	ldrb	r3, [r3, r2]
    19c6:	b25b      	sxtb	r3, r3
    19c8:	2207      	movs	r2, #7
    19ca:	4393      	bics	r3, r2
    19cc:	b25b      	sxtb	r3, r3
    19ce:	2201      	movs	r2, #1
    19d0:	4313      	orrs	r3, r2
    19d2:	b25b      	sxtb	r3, r3
    19d4:	b2d9      	uxtb	r1, r3
    19d6:	687b      	ldr	r3, [r7, #4]
    19d8:	2234      	movs	r2, #52	; 0x34
    19da:	5499      	strb	r1, [r3, r2]
    /* insert thread to ready list */
    rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
    19dc:	687b      	ldr	r3, [r7, #4]
    19de:	2235      	movs	r2, #53	; 0x35
    19e0:	5c9b      	ldrb	r3, [r3, r2]
    19e2:	00da      	lsls	r2, r3, #3
    19e4:	4b0e      	ldr	r3, [pc, #56]	; (1a20 <rt_schedule_insert_thread+0xa8>)
    19e6:	18d2      	adds	r2, r2, r3
    19e8:	687b      	ldr	r3, [r7, #4]
    19ea:	3314      	adds	r3, #20
    19ec:	0019      	movs	r1, r3
    19ee:	0010      	movs	r0, r2
    19f0:	f7ff fe09 	bl	1606 <rt_list_insert_before>

    /* set priority mask */
#if RT_THREAD_PRIORITY_MAX > 32
    rt_thread_ready_table[thread->number] |= thread->high_mask;
#endif /* RT_THREAD_PRIORITY_MAX > 32 */
    rt_thread_ready_priority_group |= thread->number_mask;
    19f4:	687b      	ldr	r3, [r7, #4]
    19f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    19f8:	4b0a      	ldr	r3, [pc, #40]	; (1a24 <rt_schedule_insert_thread+0xac>)
    19fa:	681b      	ldr	r3, [r3, #0]
    19fc:	431a      	orrs	r2, r3
    19fe:	4b09      	ldr	r3, [pc, #36]	; (1a24 <rt_schedule_insert_thread+0xac>)
    1a00:	601a      	str	r2, [r3, #0]

__exit:
    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
    1a02:	0020      	movs	r0, r4
    1a04:	f003 fd68 	bl	54d8 <rt_hw_interrupt_enable>
}
    1a08:	46c0      	nop			; (mov r8, r8)
    1a0a:	46bd      	mov	sp, r7
    1a0c:	b003      	add	sp, #12
    1a0e:	bd90      	pop	{r4, r7, pc}
    1a10:	000002d2 	.word	0x000002d2
    1a14:	0000b57c 	.word	0x0000b57c
    1a18:	0000b4f8 	.word	0x0000b4f8
    1a1c:	1ffffcfc 	.word	0x1ffffcfc
    1a20:	1ffffbf4 	.word	0x1ffffbf4
    1a24:	1ffffcf4 	.word	0x1ffffcf4

00001a28 <rt_schedule_remove_thread>:
    /* enable interrupt */
    rt_hw_interrupt_enable(level);
}
#else
void rt_schedule_remove_thread(struct rt_thread *thread)
{
    1a28:	b590      	push	{r4, r7, lr}
    1a2a:	b083      	sub	sp, #12
    1a2c:	af00      	add	r7, sp, #0
    1a2e:	6078      	str	r0, [r7, #4]
    register rt_base_t level;

    RT_ASSERT(thread != RT_NULL);
    1a30:	687b      	ldr	r3, [r7, #4]
    1a32:	2b00      	cmp	r3, #0
    1a34:	d105      	bne.n	1a42 <rt_schedule_remove_thread+0x1a>
    1a36:	4a14      	ldr	r2, [pc, #80]	; (1a88 <rt_schedule_remove_thread+0x60>)
    1a38:	4914      	ldr	r1, [pc, #80]	; (1a8c <rt_schedule_remove_thread+0x64>)
    1a3a:	4b15      	ldr	r3, [pc, #84]	; (1a90 <rt_schedule_remove_thread+0x68>)
    1a3c:	0018      	movs	r0, r3
    1a3e:	f002 fac7 	bl	3fd0 <rt_assert_handler>

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    1a42:	f003 fd45 	bl	54d0 <rt_hw_interrupt_disable>
    1a46:	0004      	movs	r4, r0
    RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("remove thread[%.*s], the priority: %d\n",
                                      RT_NAME_MAX, thread->name,
                                      thread->current_priority));

    /* remove thread from ready list */
    rt_list_remove(&(thread->tlist));
    1a48:	687b      	ldr	r3, [r7, #4]
    1a4a:	3314      	adds	r3, #20
    1a4c:	0018      	movs	r0, r3
    1a4e:	f7ff fdf1 	bl	1634 <rt_list_remove>
    if (rt_list_isempty(&(rt_thread_priority_table[thread->current_priority])))
    1a52:	687b      	ldr	r3, [r7, #4]
    1a54:	2235      	movs	r2, #53	; 0x35
    1a56:	5c9b      	ldrb	r3, [r3, r2]
    1a58:	00da      	lsls	r2, r3, #3
    1a5a:	4b0e      	ldr	r3, [pc, #56]	; (1a94 <rt_schedule_remove_thread+0x6c>)
    1a5c:	18d3      	adds	r3, r2, r3
    1a5e:	0018      	movs	r0, r3
    1a60:	f7ff fe01 	bl	1666 <rt_list_isempty>
    1a64:	1e03      	subs	r3, r0, #0
    1a66:	d007      	beq.n	1a78 <rt_schedule_remove_thread+0x50>
        if (rt_thread_ready_table[thread->number] == 0)
        {
            rt_thread_ready_priority_group &= ~thread->number_mask;
        }
#else
        rt_thread_ready_priority_group &= ~thread->number_mask;
    1a68:	687b      	ldr	r3, [r7, #4]
    1a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1a6c:	43da      	mvns	r2, r3
    1a6e:	4b0a      	ldr	r3, [pc, #40]	; (1a98 <rt_schedule_remove_thread+0x70>)
    1a70:	681b      	ldr	r3, [r3, #0]
    1a72:	401a      	ands	r2, r3
    1a74:	4b08      	ldr	r3, [pc, #32]	; (1a98 <rt_schedule_remove_thread+0x70>)
    1a76:	601a      	str	r2, [r3, #0]
#endif /* RT_THREAD_PRIORITY_MAX > 32 */
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
    1a78:	0020      	movs	r0, r4
    1a7a:	f003 fd2d 	bl	54d8 <rt_hw_interrupt_enable>
}
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	46bd      	mov	sp, r7
    1a82:	b003      	add	sp, #12
    1a84:	bd90      	pop	{r4, r7, pc}
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	00000333 	.word	0x00000333
    1a8c:	0000b598 	.word	0x0000b598
    1a90:	0000b4f8 	.word	0x0000b4f8
    1a94:	1ffffbf4 	.word	0x1ffffbf4
    1a98:	1ffffcf4 	.word	0x1ffffcf4

00001a9c <rt_enter_critical>:
    /* enable interrupt */
    rt_hw_local_irq_enable(level);
}
#else
void rt_enter_critical(void)
{
    1a9c:	b5b0      	push	{r4, r5, r7, lr}
    1a9e:	af00      	add	r7, sp, #0
    register rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    1aa0:	f003 fd16 	bl	54d0 <rt_hw_interrupt_disable>
    1aa4:	0004      	movs	r4, r0

    /*
     * the maximal number of nest is RT_UINT16_MAX, which is big
     * enough and does not check here
     */
    rt_scheduler_lock_nest ++;
    1aa6:	4b07      	ldr	r3, [pc, #28]	; (1ac4 <rt_enter_critical+0x28>)
    1aa8:	2200      	movs	r2, #0
    1aaa:	5e9b      	ldrsh	r3, [r3, r2]
    1aac:	b29b      	uxth	r3, r3
    1aae:	3301      	adds	r3, #1
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	b21a      	sxth	r2, r3
    1ab4:	4b03      	ldr	r3, [pc, #12]	; (1ac4 <rt_enter_critical+0x28>)
    1ab6:	801a      	strh	r2, [r3, #0]

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
    1ab8:	0020      	movs	r0, r4
    1aba:	f003 fd0d 	bl	54d8 <rt_hw_interrupt_enable>
}
    1abe:	46c0      	nop			; (mov r8, r8)
    1ac0:	46bd      	mov	sp, r7
    1ac2:	bdb0      	pop	{r4, r5, r7, pc}
    1ac4:	1ffffcf8 	.word	0x1ffffcf8

00001ac8 <rt_exit_critical>:
        rt_hw_local_irq_enable(level);
    }
}
#else
void rt_exit_critical(void)
{
    1ac8:	b5b0      	push	{r4, r5, r7, lr}
    1aca:	af00      	add	r7, sp, #0
    register rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    1acc:	f003 fd00 	bl	54d0 <rt_hw_interrupt_disable>
    1ad0:	0004      	movs	r4, r0

    rt_scheduler_lock_nest --;
    1ad2:	4b10      	ldr	r3, [pc, #64]	; (1b14 <rt_exit_critical+0x4c>)
    1ad4:	2200      	movs	r2, #0
    1ad6:	5e9b      	ldrsh	r3, [r3, r2]
    1ad8:	b29b      	uxth	r3, r3
    1ada:	3b01      	subs	r3, #1
    1adc:	b29b      	uxth	r3, r3
    1ade:	b21a      	sxth	r2, r3
    1ae0:	4b0c      	ldr	r3, [pc, #48]	; (1b14 <rt_exit_critical+0x4c>)
    1ae2:	801a      	strh	r2, [r3, #0]
    if (rt_scheduler_lock_nest <= 0)
    1ae4:	4b0b      	ldr	r3, [pc, #44]	; (1b14 <rt_exit_critical+0x4c>)
    1ae6:	2200      	movs	r2, #0
    1ae8:	5e9b      	ldrsh	r3, [r3, r2]
    1aea:	2b00      	cmp	r3, #0
    1aec:	dc0c      	bgt.n	1b08 <rt_exit_critical+0x40>
    {
        rt_scheduler_lock_nest = 0;
    1aee:	4b09      	ldr	r3, [pc, #36]	; (1b14 <rt_exit_critical+0x4c>)
    1af0:	2200      	movs	r2, #0
    1af2:	801a      	strh	r2, [r3, #0]
        /* enable interrupt */
        rt_hw_interrupt_enable(level);
    1af4:	0020      	movs	r0, r4
    1af6:	f003 fcef 	bl	54d8 <rt_hw_interrupt_enable>

        if (rt_current_thread)
    1afa:	4b07      	ldr	r3, [pc, #28]	; (1b18 <rt_exit_critical+0x50>)
    1afc:	681b      	ldr	r3, [r3, #0]
    1afe:	2b00      	cmp	r3, #0
    1b00:	d005      	beq.n	1b0e <rt_exit_critical+0x46>
        {
            /* if scheduler is started, do a schedule */
            rt_schedule();
    1b02:	f7ff fe61 	bl	17c8 <rt_schedule>
    else
    {
        /* enable interrupt */
        rt_hw_interrupt_enable(level);
    }
}
    1b06:	e002      	b.n	1b0e <rt_exit_critical+0x46>
        rt_hw_interrupt_enable(level);
    1b08:	0020      	movs	r0, r4
    1b0a:	f003 fce5 	bl	54d8 <rt_hw_interrupt_enable>
}
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	46bd      	mov	sp, r7
    1b12:	bdb0      	pop	{r4, r5, r7, pc}
    1b14:	1ffffcf8 	.word	0x1ffffcf8
    1b18:	1ffffcfc 	.word	0x1ffffcfc

00001b1c <rt_critical_level>:
 * @brief Get the scheduler lock level.
 *
 * @return the level of the scheduler lock. 0 means unlocked.
 */
rt_uint16_t rt_critical_level(void)
{
    1b1c:	b580      	push	{r7, lr}
    1b1e:	af00      	add	r7, sp, #0
#ifdef RT_USING_SMP
    struct rt_thread *current_thread = rt_cpu_self()->current_thread;

    return current_thread->critical_lock_nest;
#else
    return rt_scheduler_lock_nest;
    1b20:	4b03      	ldr	r3, [pc, #12]	; (1b30 <rt_critical_level+0x14>)
    1b22:	2200      	movs	r2, #0
    1b24:	5e9b      	ldrsh	r3, [r3, r2]
    1b26:	b29b      	uxth	r3, r3
#endif /* RT_USING_SMP */
}
    1b28:	0018      	movs	r0, r3
    1b2a:	46bd      	mov	sp, r7
    1b2c:	bd80      	pop	{r7, pc}
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	1ffffcf8 	.word	0x1ffffcf8

00001b34 <rt_list_init>:
{
    1b34:	b580      	push	{r7, lr}
    1b36:	b082      	sub	sp, #8
    1b38:	af00      	add	r7, sp, #0
    1b3a:	6078      	str	r0, [r7, #4]
    l->next = l->prev = l;
    1b3c:	687b      	ldr	r3, [r7, #4]
    1b3e:	687a      	ldr	r2, [r7, #4]
    1b40:	605a      	str	r2, [r3, #4]
    1b42:	687b      	ldr	r3, [r7, #4]
    1b44:	685a      	ldr	r2, [r3, #4]
    1b46:	687b      	ldr	r3, [r7, #4]
    1b48:	601a      	str	r2, [r3, #0]
}
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	46bd      	mov	sp, r7
    1b4e:	b002      	add	sp, #8
    1b50:	bd80      	pop	{r7, pc}

00001b52 <rt_list_insert_after>:
{
    1b52:	b580      	push	{r7, lr}
    1b54:	b082      	sub	sp, #8
    1b56:	af00      	add	r7, sp, #0
    1b58:	6078      	str	r0, [r7, #4]
    1b5a:	6039      	str	r1, [r7, #0]
    l->next->prev = n;
    1b5c:	687b      	ldr	r3, [r7, #4]
    1b5e:	681b      	ldr	r3, [r3, #0]
    1b60:	683a      	ldr	r2, [r7, #0]
    1b62:	605a      	str	r2, [r3, #4]
    n->next = l->next;
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	681a      	ldr	r2, [r3, #0]
    1b68:	683b      	ldr	r3, [r7, #0]
    1b6a:	601a      	str	r2, [r3, #0]
    l->next = n;
    1b6c:	687b      	ldr	r3, [r7, #4]
    1b6e:	683a      	ldr	r2, [r7, #0]
    1b70:	601a      	str	r2, [r3, #0]
    n->prev = l;
    1b72:	683b      	ldr	r3, [r7, #0]
    1b74:	687a      	ldr	r2, [r7, #4]
    1b76:	605a      	str	r2, [r3, #4]
}
    1b78:	46c0      	nop			; (mov r8, r8)
    1b7a:	46bd      	mov	sp, r7
    1b7c:	b002      	add	sp, #8
    1b7e:	bd80      	pop	{r7, pc}

00001b80 <rt_list_remove>:
{
    1b80:	b580      	push	{r7, lr}
    1b82:	b082      	sub	sp, #8
    1b84:	af00      	add	r7, sp, #0
    1b86:	6078      	str	r0, [r7, #4]
    n->next->prev = n->prev;
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	681b      	ldr	r3, [r3, #0]
    1b8c:	687a      	ldr	r2, [r7, #4]
    1b8e:	6852      	ldr	r2, [r2, #4]
    1b90:	605a      	str	r2, [r3, #4]
    n->prev->next = n->next;
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	685b      	ldr	r3, [r3, #4]
    1b96:	687a      	ldr	r2, [r7, #4]
    1b98:	6812      	ldr	r2, [r2, #0]
    1b9a:	601a      	str	r2, [r3, #0]
    n->next = n->prev = n;
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	687a      	ldr	r2, [r7, #4]
    1ba0:	605a      	str	r2, [r3, #4]
    1ba2:	687b      	ldr	r3, [r7, #4]
    1ba4:	685a      	ldr	r2, [r3, #4]
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	601a      	str	r2, [r3, #0]
}
    1baa:	46c0      	nop			; (mov r8, r8)
    1bac:	46bd      	mov	sp, r7
    1bae:	b002      	add	sp, #8
    1bb0:	bd80      	pop	{r7, pc}

00001bb2 <_timer_init>:
static void _timer_init(rt_timer_t timer,
                           void (*timeout)(void *parameter),
                           void      *parameter,
                           rt_tick_t  time,
                           rt_uint8_t flag)
{
    1bb2:	b580      	push	{r7, lr}
    1bb4:	b086      	sub	sp, #24
    1bb6:	af00      	add	r7, sp, #0
    1bb8:	60f8      	str	r0, [r7, #12]
    1bba:	60b9      	str	r1, [r7, #8]
    1bbc:	607a      	str	r2, [r7, #4]
    1bbe:	603b      	str	r3, [r7, #0]
    int i;

    /* set flag */
    timer->parent.flag  = flag;
    1bc0:	68fa      	ldr	r2, [r7, #12]
    1bc2:	2320      	movs	r3, #32
    1bc4:	18fb      	adds	r3, r7, r3
    1bc6:	781b      	ldrb	r3, [r3, #0]
    1bc8:	7253      	strb	r3, [r2, #9]

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
    1bca:	68fb      	ldr	r3, [r7, #12]
    1bcc:	7a5b      	ldrb	r3, [r3, #9]
    1bce:	2201      	movs	r2, #1
    1bd0:	4393      	bics	r3, r2
    1bd2:	b2da      	uxtb	r2, r3
    1bd4:	68fb      	ldr	r3, [r7, #12]
    1bd6:	725a      	strb	r2, [r3, #9]

    timer->timeout_func = timeout;
    1bd8:	68fb      	ldr	r3, [r7, #12]
    1bda:	68ba      	ldr	r2, [r7, #8]
    1bdc:	61da      	str	r2, [r3, #28]
    timer->parameter    = parameter;
    1bde:	68fb      	ldr	r3, [r7, #12]
    1be0:	687a      	ldr	r2, [r7, #4]
    1be2:	621a      	str	r2, [r3, #32]

    timer->timeout_tick = 0;
    1be4:	68fb      	ldr	r3, [r7, #12]
    1be6:	2200      	movs	r2, #0
    1be8:	629a      	str	r2, [r3, #40]	; 0x28
    timer->init_tick    = time;
    1bea:	68fb      	ldr	r3, [r7, #12]
    1bec:	683a      	ldr	r2, [r7, #0]
    1bee:	625a      	str	r2, [r3, #36]	; 0x24

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
    1bf0:	2300      	movs	r3, #0
    1bf2:	617b      	str	r3, [r7, #20]
    1bf4:	e00b      	b.n	1c0e <_timer_init+0x5c>
    {
        rt_list_init(&(timer->row[i]));
    1bf6:	697b      	ldr	r3, [r7, #20]
    1bf8:	3302      	adds	r3, #2
    1bfa:	00db      	lsls	r3, r3, #3
    1bfc:	68fa      	ldr	r2, [r7, #12]
    1bfe:	18d3      	adds	r3, r2, r3
    1c00:	3304      	adds	r3, #4
    1c02:	0018      	movs	r0, r3
    1c04:	f7ff ff96 	bl	1b34 <rt_list_init>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
    1c08:	697b      	ldr	r3, [r7, #20]
    1c0a:	3301      	adds	r3, #1
    1c0c:	617b      	str	r3, [r7, #20]
    1c0e:	697b      	ldr	r3, [r7, #20]
    1c10:	2b00      	cmp	r3, #0
    1c12:	ddf0      	ble.n	1bf6 <_timer_init+0x44>
    }
}
    1c14:	46c0      	nop			; (mov r8, r8)
    1c16:	46c0      	nop			; (mov r8, r8)
    1c18:	46bd      	mov	sp, r7
    1c1a:	b006      	add	sp, #24
    1c1c:	bd80      	pop	{r7, pc}

00001c1e <_timer_remove>:
 * @brief Remove the timer
 *
 * @param timer the point of the timer
 */
rt_inline void _timer_remove(rt_timer_t timer)
{
    1c1e:	b580      	push	{r7, lr}
    1c20:	b084      	sub	sp, #16
    1c22:	af00      	add	r7, sp, #0
    1c24:	6078      	str	r0, [r7, #4]
    int i;

    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
    1c26:	2300      	movs	r3, #0
    1c28:	60fb      	str	r3, [r7, #12]
    1c2a:	e00b      	b.n	1c44 <_timer_remove+0x26>
    {
        rt_list_remove(&timer->row[i]);
    1c2c:	68fb      	ldr	r3, [r7, #12]
    1c2e:	3302      	adds	r3, #2
    1c30:	00db      	lsls	r3, r3, #3
    1c32:	687a      	ldr	r2, [r7, #4]
    1c34:	18d3      	adds	r3, r2, r3
    1c36:	3304      	adds	r3, #4
    1c38:	0018      	movs	r0, r3
    1c3a:	f7ff ffa1 	bl	1b80 <rt_list_remove>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
    1c3e:	68fb      	ldr	r3, [r7, #12]
    1c40:	3301      	adds	r3, #1
    1c42:	60fb      	str	r3, [r7, #12]
    1c44:	68fb      	ldr	r3, [r7, #12]
    1c46:	2b00      	cmp	r3, #0
    1c48:	ddf0      	ble.n	1c2c <_timer_remove+0xe>
    }
}
    1c4a:	46c0      	nop			; (mov r8, r8)
    1c4c:	46c0      	nop			; (mov r8, r8)
    1c4e:	46bd      	mov	sp, r7
    1c50:	b004      	add	sp, #16
    1c52:	bd80      	pop	{r7, pc}

00001c54 <rt_timer_init>:
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
    1c54:	b590      	push	{r4, r7, lr}
    1c56:	b087      	sub	sp, #28
    1c58:	af02      	add	r7, sp, #8
    1c5a:	60f8      	str	r0, [r7, #12]
    1c5c:	60b9      	str	r1, [r7, #8]
    1c5e:	607a      	str	r2, [r7, #4]
    1c60:	603b      	str	r3, [r7, #0]
    /* parameter check */
    RT_ASSERT(timer != RT_NULL);
    1c62:	68fb      	ldr	r3, [r7, #12]
    1c64:	2b00      	cmp	r3, #0
    1c66:	d107      	bne.n	1c78 <rt_timer_init+0x24>
    1c68:	2310      	movs	r3, #16
    1c6a:	33ff      	adds	r3, #255	; 0xff
    1c6c:	001a      	movs	r2, r3
    1c6e:	4918      	ldr	r1, [pc, #96]	; (1cd0 <rt_timer_init+0x7c>)
    1c70:	4b18      	ldr	r3, [pc, #96]	; (1cd4 <rt_timer_init+0x80>)
    1c72:	0018      	movs	r0, r3
    1c74:	f002 f9ac 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(timeout != RT_NULL);
    1c78:	687b      	ldr	r3, [r7, #4]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d106      	bne.n	1c8c <rt_timer_init+0x38>
    1c7e:	2388      	movs	r3, #136	; 0x88
    1c80:	005a      	lsls	r2, r3, #1
    1c82:	4913      	ldr	r1, [pc, #76]	; (1cd0 <rt_timer_init+0x7c>)
    1c84:	4b14      	ldr	r3, [pc, #80]	; (1cd8 <rt_timer_init+0x84>)
    1c86:	0018      	movs	r0, r3
    1c88:	f002 f9a2 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(time < RT_TICK_MAX / 2);
    1c8c:	6a3b      	ldr	r3, [r7, #32]
    1c8e:	4a13      	ldr	r2, [pc, #76]	; (1cdc <rt_timer_init+0x88>)
    1c90:	4293      	cmp	r3, r2
    1c92:	d907      	bls.n	1ca4 <rt_timer_init+0x50>
    1c94:	2312      	movs	r3, #18
    1c96:	33ff      	adds	r3, #255	; 0xff
    1c98:	001a      	movs	r2, r3
    1c9a:	490d      	ldr	r1, [pc, #52]	; (1cd0 <rt_timer_init+0x7c>)
    1c9c:	4b10      	ldr	r3, [pc, #64]	; (1ce0 <rt_timer_init+0x8c>)
    1c9e:	0018      	movs	r0, r3
    1ca0:	f002 f996 	bl	3fd0 <rt_assert_handler>

    /* timer object initialization */
    rt_object_init(&(timer->parent), RT_Object_Class_Timer, name);
    1ca4:	68fb      	ldr	r3, [r7, #12]
    1ca6:	68ba      	ldr	r2, [r7, #8]
    1ca8:	210a      	movs	r1, #10
    1caa:	0018      	movs	r0, r3
    1cac:	f001 f87e 	bl	2dac <rt_object_init>

    _timer_init(timer, timeout, parameter, time, flag);
    1cb0:	6a3c      	ldr	r4, [r7, #32]
    1cb2:	683a      	ldr	r2, [r7, #0]
    1cb4:	6879      	ldr	r1, [r7, #4]
    1cb6:	68f8      	ldr	r0, [r7, #12]
    1cb8:	2324      	movs	r3, #36	; 0x24
    1cba:	18fb      	adds	r3, r7, r3
    1cbc:	781b      	ldrb	r3, [r3, #0]
    1cbe:	9300      	str	r3, [sp, #0]
    1cc0:	0023      	movs	r3, r4
    1cc2:	f7ff ff76 	bl	1bb2 <_timer_init>
}
    1cc6:	46c0      	nop			; (mov r8, r8)
    1cc8:	46bd      	mov	sp, r7
    1cca:	b005      	add	sp, #20
    1ccc:	bd90      	pop	{r4, r7, pc}
    1cce:	46c0      	nop			; (mov r8, r8)
    1cd0:	0000b6d4 	.word	0x0000b6d4
    1cd4:	0000b5b4 	.word	0x0000b5b4
    1cd8:	0000b5c8 	.word	0x0000b5c8
    1cdc:	7ffffffe 	.word	0x7ffffffe
    1ce0:	0000b5dc 	.word	0x0000b5dc

00001ce4 <rt_timer_detach>:
 * @param timer is the timer to be detached
 *
 * @return the status of detach
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
    1ce4:	b590      	push	{r4, r7, lr}
    1ce6:	b083      	sub	sp, #12
    1ce8:	af00      	add	r7, sp, #0
    1cea:	6078      	str	r0, [r7, #4]
    register rt_base_t level;

    /* parameter check */
    RT_ASSERT(timer != RT_NULL);
    1cec:	687b      	ldr	r3, [r7, #4]
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d106      	bne.n	1d00 <rt_timer_detach+0x1c>
    1cf2:	2393      	movs	r3, #147	; 0x93
    1cf4:	005a      	lsls	r2, r3, #1
    1cf6:	491d      	ldr	r1, [pc, #116]	; (1d6c <rt_timer_detach+0x88>)
    1cf8:	4b1d      	ldr	r3, [pc, #116]	; (1d70 <rt_timer_detach+0x8c>)
    1cfa:	0018      	movs	r0, r3
    1cfc:	f002 f968 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	0018      	movs	r0, r3
    1d04:	f001 f9cc 	bl	30a0 <rt_object_get_type>
    1d08:	0003      	movs	r3, r0
    1d0a:	2b0a      	cmp	r3, #10
    1d0c:	d007      	beq.n	1d1e <rt_timer_detach+0x3a>
    1d0e:	2328      	movs	r3, #40	; 0x28
    1d10:	33ff      	adds	r3, #255	; 0xff
    1d12:	001a      	movs	r2, r3
    1d14:	4915      	ldr	r1, [pc, #84]	; (1d6c <rt_timer_detach+0x88>)
    1d16:	4b17      	ldr	r3, [pc, #92]	; (1d74 <rt_timer_detach+0x90>)
    1d18:	0018      	movs	r0, r3
    1d1a:	f002 f959 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&timer->parent));
    1d1e:	687b      	ldr	r3, [r7, #4]
    1d20:	0018      	movs	r0, r3
    1d22:	f001 f99f 	bl	3064 <rt_object_is_systemobject>
    1d26:	1e03      	subs	r3, r0, #0
    1d28:	d106      	bne.n	1d38 <rt_timer_detach+0x54>
    1d2a:	2394      	movs	r3, #148	; 0x94
    1d2c:	005a      	lsls	r2, r3, #1
    1d2e:	490f      	ldr	r1, [pc, #60]	; (1d6c <rt_timer_detach+0x88>)
    1d30:	4b11      	ldr	r3, [pc, #68]	; (1d78 <rt_timer_detach+0x94>)
    1d32:	0018      	movs	r0, r3
    1d34:	f002 f94c 	bl	3fd0 <rt_assert_handler>

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    1d38:	f003 fbca 	bl	54d0 <rt_hw_interrupt_disable>
    1d3c:	0004      	movs	r4, r0

    _timer_remove(timer);
    1d3e:	687b      	ldr	r3, [r7, #4]
    1d40:	0018      	movs	r0, r3
    1d42:	f7ff ff6c 	bl	1c1e <_timer_remove>
    /* stop timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
    1d46:	687b      	ldr	r3, [r7, #4]
    1d48:	7a5b      	ldrb	r3, [r3, #9]
    1d4a:	2201      	movs	r2, #1
    1d4c:	4393      	bics	r3, r2
    1d4e:	b2da      	uxtb	r2, r3
    1d50:	687b      	ldr	r3, [r7, #4]
    1d52:	725a      	strb	r2, [r3, #9]

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
    1d54:	0020      	movs	r0, r4
    1d56:	f003 fbbf 	bl	54d8 <rt_hw_interrupt_enable>

    rt_object_detach(&(timer->parent));
    1d5a:	687b      	ldr	r3, [r7, #4]
    1d5c:	0018      	movs	r0, r3
    1d5e:	f001 f895 	bl	2e8c <rt_object_detach>

    return RT_EOK;
    1d62:	2300      	movs	r3, #0
}
    1d64:	0018      	movs	r0, r3
    1d66:	46bd      	mov	sp, r7
    1d68:	b003      	add	sp, #12
    1d6a:	bd90      	pop	{r4, r7, pc}
    1d6c:	0000b6e4 	.word	0x0000b6e4
    1d70:	0000b5b4 	.word	0x0000b5b4
    1d74:	0000b5f4 	.word	0x0000b5f4
    1d78:	0000b630 	.word	0x0000b630

00001d7c <rt_timer_start>:
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
    1d7c:	b5b0      	push	{r4, r5, r7, lr}
    1d7e:	b088      	sub	sp, #32
    1d80:	af00      	add	r7, sp, #0
    1d82:	6078      	str	r0, [r7, #4]
    rt_list_t *row_head[RT_TIMER_SKIP_LIST_LEVEL];
    unsigned int tst_nr;
    static unsigned int random_nr;

    /* parameter check */
    RT_ASSERT(timer != RT_NULL);
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	2b00      	cmp	r3, #0
    1d88:	d106      	bne.n	1d98 <rt_timer_start+0x1c>
    1d8a:	23cc      	movs	r3, #204	; 0xcc
    1d8c:	005a      	lsls	r2, r3, #1
    1d8e:	496c      	ldr	r1, [pc, #432]	; (1f40 <rt_timer_start+0x1c4>)
    1d90:	4b6c      	ldr	r3, [pc, #432]	; (1f44 <rt_timer_start+0x1c8>)
    1d92:	0018      	movs	r0, r3
    1d94:	f002 f91c 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
    1d98:	687b      	ldr	r3, [r7, #4]
    1d9a:	0018      	movs	r0, r3
    1d9c:	f001 f980 	bl	30a0 <rt_object_get_type>
    1da0:	0003      	movs	r3, r0
    1da2:	2b0a      	cmp	r3, #10
    1da4:	d007      	beq.n	1db6 <rt_timer_start+0x3a>
    1da6:	239a      	movs	r3, #154	; 0x9a
    1da8:	33ff      	adds	r3, #255	; 0xff
    1daa:	001a      	movs	r2, r3
    1dac:	4964      	ldr	r1, [pc, #400]	; (1f40 <rt_timer_start+0x1c4>)
    1dae:	4b66      	ldr	r3, [pc, #408]	; (1f48 <rt_timer_start+0x1cc>)
    1db0:	0018      	movs	r0, r3
    1db2:	f002 f90d 	bl	3fd0 <rt_assert_handler>

    need_schedule = RT_FALSE;
    1db6:	2400      	movs	r4, #0

    /* stop timer firstly */
    level = rt_hw_interrupt_disable();
    1db8:	f003 fb8a 	bl	54d0 <rt_hw_interrupt_disable>
    1dbc:	0005      	movs	r5, r0
    /* remove timer from list */
    _timer_remove(timer);
    1dbe:	687b      	ldr	r3, [r7, #4]
    1dc0:	0018      	movs	r0, r3
    1dc2:	f7ff ff2c 	bl	1c1e <_timer_remove>
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
    1dc6:	687b      	ldr	r3, [r7, #4]
    1dc8:	7a5b      	ldrb	r3, [r3, #9]
    1dca:	2201      	movs	r2, #1
    1dcc:	4393      	bics	r3, r2
    1dce:	b2da      	uxtb	r2, r3
    1dd0:	687b      	ldr	r3, [r7, #4]
    1dd2:	725a      	strb	r2, [r3, #9]

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(timer->parent)));
    1dd4:	4b5d      	ldr	r3, [pc, #372]	; (1f4c <rt_timer_start+0x1d0>)
    1dd6:	681b      	ldr	r3, [r3, #0]
    1dd8:	2b00      	cmp	r3, #0
    1dda:	d004      	beq.n	1de6 <rt_timer_start+0x6a>
    1ddc:	4b5b      	ldr	r3, [pc, #364]	; (1f4c <rt_timer_start+0x1d0>)
    1dde:	681b      	ldr	r3, [r3, #0]
    1de0:	687a      	ldr	r2, [r7, #4]
    1de2:	0010      	movs	r0, r2
    1de4:	4798      	blx	r3

    timer->timeout_tick = rt_tick_get() + timer->init_tick;
    1de6:	f000 ff83 	bl	2cf0 <rt_tick_get>
    1dea:	0002      	movs	r2, r0
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1df0:	18d2      	adds	r2, r2, r3
    1df2:	687b      	ldr	r3, [r7, #4]
    1df4:	629a      	str	r2, [r3, #40]	; 0x28
    }
    else
#endif /* RT_USING_TIMER_SOFT */
    {
        /* insert timer to system timer list */
        timer_list = _timer_list;
    1df6:	4b56      	ldr	r3, [pc, #344]	; (1f50 <rt_timer_start+0x1d4>)
    1df8:	617b      	str	r3, [r7, #20]
    }

    row_head[0]  = &timer_list[0];
    1dfa:	697b      	ldr	r3, [r7, #20]
    1dfc:	60bb      	str	r3, [r7, #8]
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
    1dfe:	2300      	movs	r3, #0
    1e00:	61fb      	str	r3, [r7, #28]
    1e02:	e052      	b.n	1eaa <rt_timer_start+0x12e>
    {
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
             row_head[row_lvl]  = row_head[row_lvl]->next)
        {
            struct rt_timer *t;
            rt_list_t *p = row_head[row_lvl]->next;
    1e04:	69fb      	ldr	r3, [r7, #28]
    1e06:	009b      	lsls	r3, r3, #2
    1e08:	2220      	movs	r2, #32
    1e0a:	189b      	adds	r3, r3, r2
    1e0c:	19db      	adds	r3, r3, r7
    1e0e:	3b18      	subs	r3, #24
    1e10:	681b      	ldr	r3, [r3, #0]
    1e12:	681b      	ldr	r3, [r3, #0]
    1e14:	613b      	str	r3, [r7, #16]

            /* fix up the entry pointer */
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
    1e16:	69fb      	ldr	r3, [r7, #28]
    1e18:	00db      	lsls	r3, r3, #3
    1e1a:	3314      	adds	r3, #20
    1e1c:	425b      	negs	r3, r3
    1e1e:	693a      	ldr	r2, [r7, #16]
    1e20:	18d3      	adds	r3, r2, r3
    1e22:	60fb      	str	r3, [r7, #12]
            /* If we have two timers that timeout at the same time, it's
             * preferred that the timer inserted early get called early.
             * So insert the new timer to the end the the some-timeout timer
             * list.
             */
            if ((t->timeout_tick - timer->timeout_tick) == 0)
    1e24:	68fb      	ldr	r3, [r7, #12]
    1e26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e28:	687b      	ldr	r3, [r7, #4]
    1e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e2c:	429a      	cmp	r2, r3
    1e2e:	d008      	beq.n	1e42 <rt_timer_start+0xc6>
            {
                continue;
            }
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
    1e30:	68fb      	ldr	r3, [r7, #12]
    1e32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e34:	687b      	ldr	r3, [r7, #4]
    1e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e38:	1ad3      	subs	r3, r2, r3
    1e3a:	4a46      	ldr	r2, [pc, #280]	; (1f54 <rt_timer_start+0x1d8>)
    1e3c:	4293      	cmp	r3, r2
    1e3e:	d91e      	bls.n	1e7e <rt_timer_start+0x102>
    1e40:	e000      	b.n	1e44 <rt_timer_start+0xc8>
                continue;
    1e42:	46c0      	nop			; (mov r8, r8)
             row_head[row_lvl]  = row_head[row_lvl]->next)
    1e44:	69fb      	ldr	r3, [r7, #28]
    1e46:	009b      	lsls	r3, r3, #2
    1e48:	2120      	movs	r1, #32
    1e4a:	185b      	adds	r3, r3, r1
    1e4c:	19db      	adds	r3, r3, r7
    1e4e:	3b18      	subs	r3, #24
    1e50:	681b      	ldr	r3, [r3, #0]
    1e52:	681a      	ldr	r2, [r3, #0]
    1e54:	69fb      	ldr	r3, [r7, #28]
    1e56:	009b      	lsls	r3, r3, #2
    1e58:	185b      	adds	r3, r3, r1
    1e5a:	19db      	adds	r3, r3, r7
    1e5c:	3b18      	subs	r3, #24
    1e5e:	601a      	str	r2, [r3, #0]
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
    1e60:	69fb      	ldr	r3, [r7, #28]
    1e62:	009b      	lsls	r3, r3, #2
    1e64:	2220      	movs	r2, #32
    1e66:	189b      	adds	r3, r3, r2
    1e68:	19db      	adds	r3, r3, r7
    1e6a:	3b18      	subs	r3, #24
    1e6c:	681a      	ldr	r2, [r3, #0]
    1e6e:	69fb      	ldr	r3, [r7, #28]
    1e70:	00db      	lsls	r3, r3, #3
    1e72:	6979      	ldr	r1, [r7, #20]
    1e74:	18cb      	adds	r3, r1, r3
    1e76:	685b      	ldr	r3, [r3, #4]
    1e78:	429a      	cmp	r2, r3
    1e7a:	d1c3      	bne.n	1e04 <rt_timer_start+0x88>
    1e7c:	e000      	b.n	1e80 <rt_timer_start+0x104>
            {
                break;
    1e7e:	46c0      	nop			; (mov r8, r8)
            }
        }
        if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
    1e80:	69fb      	ldr	r3, [r7, #28]
    1e82:	2b00      	cmp	r3, #0
    1e84:	d00e      	beq.n	1ea4 <rt_timer_start+0x128>
            row_head[row_lvl + 1] = row_head[row_lvl] + 1;
    1e86:	69fb      	ldr	r3, [r7, #28]
    1e88:	009b      	lsls	r3, r3, #2
    1e8a:	2120      	movs	r1, #32
    1e8c:	185b      	adds	r3, r3, r1
    1e8e:	19db      	adds	r3, r3, r7
    1e90:	3b18      	subs	r3, #24
    1e92:	681a      	ldr	r2, [r3, #0]
    1e94:	69fb      	ldr	r3, [r7, #28]
    1e96:	3301      	adds	r3, #1
    1e98:	3208      	adds	r2, #8
    1e9a:	009b      	lsls	r3, r3, #2
    1e9c:	185b      	adds	r3, r3, r1
    1e9e:	19db      	adds	r3, r3, r7
    1ea0:	3b18      	subs	r3, #24
    1ea2:	601a      	str	r2, [r3, #0]
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
    1ea4:	69fb      	ldr	r3, [r7, #28]
    1ea6:	3301      	adds	r3, #1
    1ea8:	61fb      	str	r3, [r7, #28]
    1eaa:	69fb      	ldr	r3, [r7, #28]
    1eac:	2b00      	cmp	r3, #0
    1eae:	d0d7      	beq.n	1e60 <rt_timer_start+0xe4>

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
    1eb0:	4b29      	ldr	r3, [pc, #164]	; (1f58 <rt_timer_start+0x1dc>)
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	1c5a      	adds	r2, r3, #1
    1eb6:	4b28      	ldr	r3, [pc, #160]	; (1f58 <rt_timer_start+0x1dc>)
    1eb8:	601a      	str	r2, [r3, #0]
    tst_nr = random_nr;
    1eba:	4b27      	ldr	r3, [pc, #156]	; (1f58 <rt_timer_start+0x1dc>)
    1ebc:	681b      	ldr	r3, [r3, #0]
    1ebe:	61bb      	str	r3, [r7, #24]

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
    1ec0:	68ba      	ldr	r2, [r7, #8]
    1ec2:	687b      	ldr	r3, [r7, #4]
    1ec4:	3314      	adds	r3, #20
    1ec6:	0019      	movs	r1, r3
    1ec8:	0010      	movs	r0, r2
    1eca:	f7ff fe42 	bl	1b52 <rt_list_insert_after>
                         &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
    1ece:	2302      	movs	r3, #2
    1ed0:	61fb      	str	r3, [r7, #28]
    1ed2:	e01d      	b.n	1f10 <rt_timer_start+0x194>
    {
        if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
    1ed4:	69bb      	ldr	r3, [r7, #24]
    1ed6:	2203      	movs	r2, #3
    1ed8:	4013      	ands	r3, r2
    1eda:	d11d      	bne.n	1f18 <rt_timer_start+0x19c>
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
    1edc:	69fb      	ldr	r3, [r7, #28]
    1ede:	2201      	movs	r2, #1
    1ee0:	1ad3      	subs	r3, r2, r3
    1ee2:	009b      	lsls	r3, r3, #2
    1ee4:	2220      	movs	r2, #32
    1ee6:	189b      	adds	r3, r3, r2
    1ee8:	19db      	adds	r3, r3, r7
    1eea:	3b18      	subs	r3, #24
    1eec:	6818      	ldr	r0, [r3, #0]
                                 &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
    1eee:	69fb      	ldr	r3, [r7, #28]
    1ef0:	2201      	movs	r2, #1
    1ef2:	1ad3      	subs	r3, r2, r3
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
    1ef4:	3302      	adds	r3, #2
    1ef6:	00db      	lsls	r3, r3, #3
    1ef8:	687a      	ldr	r2, [r7, #4]
    1efa:	18d3      	adds	r3, r2, r3
    1efc:	3304      	adds	r3, #4
    1efe:	0019      	movs	r1, r3
    1f00:	f7ff fe27 	bl	1b52 <rt_list_insert_after>
        else
            break;
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
    1f04:	69bb      	ldr	r3, [r7, #24]
    1f06:	089b      	lsrs	r3, r3, #2
    1f08:	61bb      	str	r3, [r7, #24]
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
    1f0a:	69fb      	ldr	r3, [r7, #28]
    1f0c:	3301      	adds	r3, #1
    1f0e:	61fb      	str	r3, [r7, #28]
    1f10:	69fb      	ldr	r3, [r7, #28]
    1f12:	2b01      	cmp	r3, #1
    1f14:	d9de      	bls.n	1ed4 <rt_timer_start+0x158>
    1f16:	e000      	b.n	1f1a <rt_timer_start+0x19e>
            break;
    1f18:	46c0      	nop			; (mov r8, r8)
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
    1f1a:	687b      	ldr	r3, [r7, #4]
    1f1c:	7a5b      	ldrb	r3, [r3, #9]
    1f1e:	2201      	movs	r2, #1
    1f20:	4313      	orrs	r3, r2
    1f22:	b2da      	uxtb	r2, r3
    1f24:	687b      	ldr	r3, [r7, #4]
    1f26:	725a      	strb	r2, [r3, #9]
        }
    }
#endif /* RT_USING_TIMER_SOFT */

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
    1f28:	0028      	movs	r0, r5
    1f2a:	f003 fad5 	bl	54d8 <rt_hw_interrupt_enable>

    if (need_schedule)
    1f2e:	2c00      	cmp	r4, #0
    1f30:	d001      	beq.n	1f36 <rt_timer_start+0x1ba>
    {
        rt_schedule();
    1f32:	f7ff fc49 	bl	17c8 <rt_schedule>
    }

    return RT_EOK;
    1f36:	2300      	movs	r3, #0
}
    1f38:	0018      	movs	r0, r3
    1f3a:	46bd      	mov	sp, r7
    1f3c:	b008      	add	sp, #32
    1f3e:	bdb0      	pop	{r4, r5, r7, pc}
    1f40:	0000b6f4 	.word	0x0000b6f4
    1f44:	0000b5b4 	.word	0x0000b5b4
    1f48:	0000b5f4 	.word	0x0000b5f4
    1f4c:	1ffffd28 	.word	0x1ffffd28
    1f50:	1ffffd0c 	.word	0x1ffffd0c
    1f54:	7ffffffe 	.word	0x7ffffffe
    1f58:	1ffffd14 	.word	0x1ffffd14

00001f5c <rt_timer_stop>:
 * @param timer the timer to be stopped
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_stop(rt_timer_t timer)
{
    1f5c:	b590      	push	{r4, r7, lr}
    1f5e:	b083      	sub	sp, #12
    1f60:	af00      	add	r7, sp, #0
    1f62:	6078      	str	r0, [r7, #4]
    register rt_base_t level;

    /* parameter check */
    RT_ASSERT(timer != RT_NULL);
    1f64:	687b      	ldr	r3, [r7, #4]
    1f66:	2b00      	cmp	r3, #0
    1f68:	d106      	bne.n	1f78 <rt_timer_stop+0x1c>
    1f6a:	2384      	movs	r3, #132	; 0x84
    1f6c:	009a      	lsls	r2, r3, #2
    1f6e:	491d      	ldr	r1, [pc, #116]	; (1fe4 <rt_timer_stop+0x88>)
    1f70:	4b1d      	ldr	r3, [pc, #116]	; (1fe8 <rt_timer_stop+0x8c>)
    1f72:	0018      	movs	r0, r3
    1f74:	f002 f82c 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	0018      	movs	r0, r3
    1f7c:	f001 f890 	bl	30a0 <rt_object_get_type>
    1f80:	0003      	movs	r3, r0
    1f82:	2b0a      	cmp	r3, #10
    1f84:	d005      	beq.n	1f92 <rt_timer_stop+0x36>
    1f86:	4a19      	ldr	r2, [pc, #100]	; (1fec <rt_timer_stop+0x90>)
    1f88:	4916      	ldr	r1, [pc, #88]	; (1fe4 <rt_timer_stop+0x88>)
    1f8a:	4b19      	ldr	r3, [pc, #100]	; (1ff0 <rt_timer_stop+0x94>)
    1f8c:	0018      	movs	r0, r3
    1f8e:	f002 f81f 	bl	3fd0 <rt_assert_handler>

    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
    1f92:	687b      	ldr	r3, [r7, #4]
    1f94:	7a5b      	ldrb	r3, [r3, #9]
    1f96:	001a      	movs	r2, r3
    1f98:	2301      	movs	r3, #1
    1f9a:	4013      	ands	r3, r2
    1f9c:	d102      	bne.n	1fa4 <rt_timer_stop+0x48>
        return -RT_ERROR;
    1f9e:	2301      	movs	r3, #1
    1fa0:	425b      	negs	r3, r3
    1fa2:	e01a      	b.n	1fda <rt_timer_stop+0x7e>

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(timer->parent)));
    1fa4:	4b13      	ldr	r3, [pc, #76]	; (1ff4 <rt_timer_stop+0x98>)
    1fa6:	681b      	ldr	r3, [r3, #0]
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d004      	beq.n	1fb6 <rt_timer_stop+0x5a>
    1fac:	4b11      	ldr	r3, [pc, #68]	; (1ff4 <rt_timer_stop+0x98>)
    1fae:	681b      	ldr	r3, [r3, #0]
    1fb0:	687a      	ldr	r2, [r7, #4]
    1fb2:	0010      	movs	r0, r2
    1fb4:	4798      	blx	r3

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    1fb6:	f003 fa8b 	bl	54d0 <rt_hw_interrupt_disable>
    1fba:	0004      	movs	r4, r0

    _timer_remove(timer);
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	0018      	movs	r0, r3
    1fc0:	f7ff fe2d 	bl	1c1e <_timer_remove>
    /* change status */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
    1fc4:	687b      	ldr	r3, [r7, #4]
    1fc6:	7a5b      	ldrb	r3, [r3, #9]
    1fc8:	2201      	movs	r2, #1
    1fca:	4393      	bics	r3, r2
    1fcc:	b2da      	uxtb	r2, r3
    1fce:	687b      	ldr	r3, [r7, #4]
    1fd0:	725a      	strb	r2, [r3, #9]

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
    1fd2:	0020      	movs	r0, r4
    1fd4:	f003 fa80 	bl	54d8 <rt_hw_interrupt_enable>

    return RT_EOK;
    1fd8:	2300      	movs	r3, #0
}
    1fda:	0018      	movs	r0, r3
    1fdc:	46bd      	mov	sp, r7
    1fde:	b003      	add	sp, #12
    1fe0:	bd90      	pop	{r4, r7, pc}
    1fe2:	46c0      	nop			; (mov r8, r8)
    1fe4:	0000b704 	.word	0x0000b704
    1fe8:	0000b5b4 	.word	0x0000b5b4
    1fec:	00000211 	.word	0x00000211
    1ff0:	0000b5f4 	.word	0x0000b5f4
    1ff4:	1ffffd2c 	.word	0x1ffffd2c

00001ff8 <rt_timer_control>:
 * @param arg the argument
 *
 * @return the statu of control
 */
rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
{
    1ff8:	b590      	push	{r4, r7, lr}
    1ffa:	b085      	sub	sp, #20
    1ffc:	af00      	add	r7, sp, #0
    1ffe:	60f8      	str	r0, [r7, #12]
    2000:	60b9      	str	r1, [r7, #8]
    2002:	607a      	str	r2, [r7, #4]
    register rt_base_t level;

    /* parameter check */
    RT_ASSERT(timer != RT_NULL);
    2004:	68fb      	ldr	r3, [r7, #12]
    2006:	2b00      	cmp	r3, #0
    2008:	d106      	bne.n	2018 <rt_timer_control+0x20>
    200a:	238d      	movs	r3, #141	; 0x8d
    200c:	009a      	lsls	r2, r3, #2
    200e:	492f      	ldr	r1, [pc, #188]	; (20cc <rt_timer_control+0xd4>)
    2010:	4b2f      	ldr	r3, [pc, #188]	; (20d0 <rt_timer_control+0xd8>)
    2012:	0018      	movs	r0, r3
    2014:	f001 ffdc 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
    2018:	68fb      	ldr	r3, [r7, #12]
    201a:	0018      	movs	r0, r3
    201c:	f001 f840 	bl	30a0 <rt_object_get_type>
    2020:	0003      	movs	r3, r0
    2022:	2b0a      	cmp	r3, #10
    2024:	d005      	beq.n	2032 <rt_timer_control+0x3a>
    2026:	4a2b      	ldr	r2, [pc, #172]	; (20d4 <rt_timer_control+0xdc>)
    2028:	4928      	ldr	r1, [pc, #160]	; (20cc <rt_timer_control+0xd4>)
    202a:	4b2b      	ldr	r3, [pc, #172]	; (20d8 <rt_timer_control+0xe0>)
    202c:	0018      	movs	r0, r3
    202e:	f001 ffcf 	bl	3fd0 <rt_assert_handler>

    level = rt_hw_interrupt_disable();
    2032:	f003 fa4d 	bl	54d0 <rt_hw_interrupt_disable>
    2036:	0004      	movs	r4, r0
    switch (cmd)
    2038:	68bb      	ldr	r3, [r7, #8]
    203a:	2b05      	cmp	r3, #5
    203c:	d83c      	bhi.n	20b8 <rt_timer_control+0xc0>
    203e:	68bb      	ldr	r3, [r7, #8]
    2040:	009a      	lsls	r2, r3, #2
    2042:	4b26      	ldr	r3, [pc, #152]	; (20dc <rt_timer_control+0xe4>)
    2044:	18d3      	adds	r3, r2, r3
    2046:	681b      	ldr	r3, [r3, #0]
    2048:	469f      	mov	pc, r3
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
    204a:	68fb      	ldr	r3, [r7, #12]
    204c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    204e:	687b      	ldr	r3, [r7, #4]
    2050:	601a      	str	r2, [r3, #0]
        break;
    2052:	e032      	b.n	20ba <rt_timer_control+0xc2>

    case RT_TIMER_CTRL_SET_TIME:
        RT_ASSERT((*(rt_tick_t *)arg) < RT_TICK_MAX / 2);
    2054:	687b      	ldr	r3, [r7, #4]
    2056:	681b      	ldr	r3, [r3, #0]
    2058:	4a21      	ldr	r2, [pc, #132]	; (20e0 <rt_timer_control+0xe8>)
    205a:	4293      	cmp	r3, r2
    205c:	d905      	bls.n	206a <rt_timer_control+0x72>
    205e:	4a21      	ldr	r2, [pc, #132]	; (20e4 <rt_timer_control+0xec>)
    2060:	491a      	ldr	r1, [pc, #104]	; (20cc <rt_timer_control+0xd4>)
    2062:	4b21      	ldr	r3, [pc, #132]	; (20e8 <rt_timer_control+0xf0>)
    2064:	0018      	movs	r0, r3
    2066:	f001 ffb3 	bl	3fd0 <rt_assert_handler>
        timer->init_tick = *(rt_tick_t *)arg;
    206a:	687b      	ldr	r3, [r7, #4]
    206c:	681a      	ldr	r2, [r3, #0]
    206e:	68fb      	ldr	r3, [r7, #12]
    2070:	625a      	str	r2, [r3, #36]	; 0x24
        break;
    2072:	e022      	b.n	20ba <rt_timer_control+0xc2>

    case RT_TIMER_CTRL_SET_ONESHOT:
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
    2074:	68fb      	ldr	r3, [r7, #12]
    2076:	7a5b      	ldrb	r3, [r3, #9]
    2078:	2202      	movs	r2, #2
    207a:	4393      	bics	r3, r2
    207c:	b2da      	uxtb	r2, r3
    207e:	68fb      	ldr	r3, [r7, #12]
    2080:	725a      	strb	r2, [r3, #9]
        break;
    2082:	e01a      	b.n	20ba <rt_timer_control+0xc2>

    case RT_TIMER_CTRL_SET_PERIODIC:
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
    2084:	68fb      	ldr	r3, [r7, #12]
    2086:	7a5b      	ldrb	r3, [r3, #9]
    2088:	2202      	movs	r2, #2
    208a:	4313      	orrs	r3, r2
    208c:	b2da      	uxtb	r2, r3
    208e:	68fb      	ldr	r3, [r7, #12]
    2090:	725a      	strb	r2, [r3, #9]
        break;
    2092:	e012      	b.n	20ba <rt_timer_control+0xc2>

    case RT_TIMER_CTRL_GET_STATE:
        if(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED)
    2094:	68fb      	ldr	r3, [r7, #12]
    2096:	7a5b      	ldrb	r3, [r3, #9]
    2098:	001a      	movs	r2, r3
    209a:	2301      	movs	r3, #1
    209c:	4013      	ands	r3, r2
    209e:	d003      	beq.n	20a8 <rt_timer_control+0xb0>
        {
            /*timer is start and run*/
            *(rt_uint32_t *)arg = RT_TIMER_FLAG_ACTIVATED;
    20a0:	687b      	ldr	r3, [r7, #4]
    20a2:	2201      	movs	r2, #1
    20a4:	601a      	str	r2, [r3, #0]
    20a6:	e002      	b.n	20ae <rt_timer_control+0xb6>
        }
        else
        {
            /*timer is stop*/
            *(rt_uint32_t *)arg = RT_TIMER_FLAG_DEACTIVATED;
    20a8:	687b      	ldr	r3, [r7, #4]
    20aa:	2200      	movs	r2, #0
    20ac:	601a      	str	r2, [r3, #0]
        }
    case RT_TIMER_CTRL_GET_REMAIN_TIME:
        *(rt_tick_t *)arg =  timer->timeout_tick;
    20ae:	68fb      	ldr	r3, [r7, #12]
    20b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    20b2:	687b      	ldr	r3, [r7, #4]
    20b4:	601a      	str	r2, [r3, #0]
        break;
    20b6:	e000      	b.n	20ba <rt_timer_control+0xc2>

    default:
        break;
    20b8:	46c0      	nop			; (mov r8, r8)
    }
    rt_hw_interrupt_enable(level);
    20ba:	0020      	movs	r0, r4
    20bc:	f003 fa0c 	bl	54d8 <rt_hw_interrupt_enable>

    return RT_EOK;
    20c0:	2300      	movs	r3, #0
}
    20c2:	0018      	movs	r0, r3
    20c4:	46bd      	mov	sp, r7
    20c6:	b005      	add	sp, #20
    20c8:	bd90      	pop	{r4, r7, pc}
    20ca:	46c0      	nop			; (mov r8, r8)
    20cc:	0000b714 	.word	0x0000b714
    20d0:	0000b5b4 	.word	0x0000b5b4
    20d4:	00000235 	.word	0x00000235
    20d8:	0000b5f4 	.word	0x0000b5f4
    20dc:	0000b6bc 	.word	0x0000b6bc
    20e0:	7ffffffe 	.word	0x7ffffffe
    20e4:	0000023f 	.word	0x0000023f
    20e8:	0000b694 	.word	0x0000b694

000020ec <rt_system_timer_init>:
 * @ingroup SystemInit
 *
 * @brief This function will initialize system timer
 */
void rt_system_timer_init(void)
{
    20ec:	b580      	push	{r7, lr}
    20ee:	b082      	sub	sp, #8
    20f0:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < sizeof(_timer_list) / sizeof(_timer_list[0]); i++)
    20f2:	2300      	movs	r3, #0
    20f4:	607b      	str	r3, [r7, #4]
    20f6:	e009      	b.n	210c <rt_system_timer_init+0x20>
    {
        rt_list_init(_timer_list + i);
    20f8:	687b      	ldr	r3, [r7, #4]
    20fa:	00da      	lsls	r2, r3, #3
    20fc:	4b07      	ldr	r3, [pc, #28]	; (211c <rt_system_timer_init+0x30>)
    20fe:	18d3      	adds	r3, r2, r3
    2100:	0018      	movs	r0, r3
    2102:	f7ff fd17 	bl	1b34 <rt_list_init>
    for (i = 0; i < sizeof(_timer_list) / sizeof(_timer_list[0]); i++)
    2106:	687b      	ldr	r3, [r7, #4]
    2108:	3301      	adds	r3, #1
    210a:	607b      	str	r3, [r7, #4]
    210c:	687b      	ldr	r3, [r7, #4]
    210e:	2b00      	cmp	r3, #0
    2110:	d0f2      	beq.n	20f8 <rt_system_timer_init+0xc>
    }
}
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	46c0      	nop			; (mov r8, r8)
    2116:	46bd      	mov	sp, r7
    2118:	b002      	add	sp, #8
    211a:	bd80      	pop	{r7, pc}
    211c:	1ffffd0c 	.word	0x1ffffd0c

00002120 <rt_system_timer_thread_init>:
 * @ingroup SystemInit
 *
 * @brief This function will initialize system timer thread
 */
void rt_system_timer_thread_init(void)
{
    2120:	b580      	push	{r7, lr}
    2122:	af00      	add	r7, sp, #0
                   10);

    /* startup */
    rt_thread_startup(&_timer_thread);
#endif /* RT_USING_TIMER_SOFT */
}
    2124:	46c0      	nop			; (mov r8, r8)
    2126:	46bd      	mov	sp, r7
    2128:	bd80      	pop	{r7, pc}

0000212a <rt_device_register>:
 * @return the error code, RT_EOK on initialization successfully.
 */
rt_err_t rt_device_register(rt_device_t dev,
                            const char *name,
                            rt_uint16_t flags)
{
    212a:	b580      	push	{r7, lr}
    212c:	b084      	sub	sp, #16
    212e:	af00      	add	r7, sp, #0
    2130:	60f8      	str	r0, [r7, #12]
    2132:	60b9      	str	r1, [r7, #8]
    2134:	1dbb      	adds	r3, r7, #6
    2136:	801a      	strh	r2, [r3, #0]
    if (dev == RT_NULL)
    2138:	68fb      	ldr	r3, [r7, #12]
    213a:	2b00      	cmp	r3, #0
    213c:	d102      	bne.n	2144 <rt_device_register+0x1a>
        return -RT_ERROR;
    213e:	2301      	movs	r3, #1
    2140:	425b      	negs	r3, r3
    2142:	e019      	b.n	2178 <rt_device_register+0x4e>

    if (rt_device_find(name) != RT_NULL)
    2144:	68bb      	ldr	r3, [r7, #8]
    2146:	0018      	movs	r0, r3
    2148:	f000 f81a 	bl	2180 <rt_device_find>
    214c:	1e03      	subs	r3, r0, #0
    214e:	d002      	beq.n	2156 <rt_device_register+0x2c>
        return -RT_ERROR;
    2150:	2301      	movs	r3, #1
    2152:	425b      	negs	r3, r3
    2154:	e010      	b.n	2178 <rt_device_register+0x4e>

    rt_object_init(&(dev->parent), RT_Object_Class_Device, name);
    2156:	68fb      	ldr	r3, [r7, #12]
    2158:	68ba      	ldr	r2, [r7, #8]
    215a:	2109      	movs	r1, #9
    215c:	0018      	movs	r0, r3
    215e:	f000 fe25 	bl	2dac <rt_object_init>
    dev->flag = flags;
    2162:	68fb      	ldr	r3, [r7, #12]
    2164:	1dba      	adds	r2, r7, #6
    2166:	8812      	ldrh	r2, [r2, #0]
    2168:	82da      	strh	r2, [r3, #22]
    dev->ref_count = 0;
    216a:	68fb      	ldr	r3, [r7, #12]
    216c:	2200      	movs	r2, #0
    216e:	769a      	strb	r2, [r3, #26]
    dev->open_flag = 0;
    2170:	68fb      	ldr	r3, [r7, #12]
    2172:	2200      	movs	r2, #0
    2174:	831a      	strh	r2, [r3, #24]
#ifdef RT_USING_POSIX_DEVIO
    dev->fops = RT_NULL;
    rt_wqueue_init(&(dev->wait_queue));
#endif /* RT_USING_POSIX_DEVIO */

    return RT_EOK;
    2176:	2300      	movs	r3, #0
}
    2178:	0018      	movs	r0, r3
    217a:	46bd      	mov	sp, r7
    217c:	b004      	add	sp, #16
    217e:	bd80      	pop	{r7, pc}

00002180 <rt_device_find>:
 * @param name is the device driver's name.
 *
 * @return the registered device driver on successful, or RT_NULL on failure.
 */
rt_device_t rt_device_find(const char *name)
{
    2180:	b580      	push	{r7, lr}
    2182:	b082      	sub	sp, #8
    2184:	af00      	add	r7, sp, #0
    2186:	6078      	str	r0, [r7, #4]
    return (rt_device_t)rt_object_find(name, RT_Object_Class_Device);
    2188:	687b      	ldr	r3, [r7, #4]
    218a:	2109      	movs	r1, #9
    218c:	0018      	movs	r0, r3
    218e:	f000 ffa3 	bl	30d8 <rt_object_find>
    2192:	0003      	movs	r3, r0
}
    2194:	0018      	movs	r0, r3
    2196:	46bd      	mov	sp, r7
    2198:	b002      	add	sp, #8
    219a:	bd80      	pop	{r7, pc}

0000219c <rt_device_open>:
 * @param oflag is the flags for device open.
 *
 * @return the result, RT_EOK on successfully.
 */
rt_err_t rt_device_open(rt_device_t dev, rt_uint16_t oflag)
{
    219c:	b580      	push	{r7, lr}
    219e:	b084      	sub	sp, #16
    21a0:	af00      	add	r7, sp, #0
    21a2:	6078      	str	r0, [r7, #4]
    21a4:	000a      	movs	r2, r1
    21a6:	1cbb      	adds	r3, r7, #2
    21a8:	801a      	strh	r2, [r3, #0]
    rt_err_t result = RT_EOK;
    21aa:	2300      	movs	r3, #0
    21ac:	60fb      	str	r3, [r7, #12]

    /* parameter check */
    RT_ASSERT(dev != RT_NULL);
    21ae:	687b      	ldr	r3, [r7, #4]
    21b0:	2b00      	cmp	r3, #0
    21b2:	d105      	bne.n	21c0 <rt_device_open+0x24>
    21b4:	493a      	ldr	r1, [pc, #232]	; (22a0 <rt_device_open+0x104>)
    21b6:	4b3b      	ldr	r3, [pc, #236]	; (22a4 <rt_device_open+0x108>)
    21b8:	22d0      	movs	r2, #208	; 0xd0
    21ba:	0018      	movs	r0, r3
    21bc:	f001 ff08 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
    21c0:	687b      	ldr	r3, [r7, #4]
    21c2:	0018      	movs	r0, r3
    21c4:	f000 ff6c 	bl	30a0 <rt_object_get_type>
    21c8:	0003      	movs	r3, r0
    21ca:	2b09      	cmp	r3, #9
    21cc:	d005      	beq.n	21da <rt_device_open+0x3e>
    21ce:	4934      	ldr	r1, [pc, #208]	; (22a0 <rt_device_open+0x104>)
    21d0:	4b35      	ldr	r3, [pc, #212]	; (22a8 <rt_device_open+0x10c>)
    21d2:	22d1      	movs	r2, #209	; 0xd1
    21d4:	0018      	movs	r0, r3
    21d6:	f001 fefb 	bl	3fd0 <rt_assert_handler>

    /* if device is not initialized, initialize it. */
    if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	8adb      	ldrh	r3, [r3, #22]
    21de:	001a      	movs	r2, r3
    21e0:	2310      	movs	r3, #16
    21e2:	4013      	ands	r3, r2
    21e4:	d116      	bne.n	2214 <rt_device_open+0x78>
    {
        if (device_init != RT_NULL)
    21e6:	687b      	ldr	r3, [r7, #4]
    21e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    21ea:	2b00      	cmp	r3, #0
    21ec:	d00b      	beq.n	2206 <rt_device_open+0x6a>
        {
            result = device_init(dev);
    21ee:	687b      	ldr	r3, [r7, #4]
    21f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    21f2:	687a      	ldr	r2, [r7, #4]
    21f4:	0010      	movs	r0, r2
    21f6:	4798      	blx	r3
    21f8:	0003      	movs	r3, r0
    21fa:	60fb      	str	r3, [r7, #12]
            if (result != RT_EOK)
    21fc:	68fb      	ldr	r3, [r7, #12]
    21fe:	2b00      	cmp	r3, #0
    2200:	d001      	beq.n	2206 <rt_device_open+0x6a>
            {
                RT_DEBUG_LOG(RT_DEBUG_DEVICE, ("To initialize device:%s failed. The error code is %d\n",
                           dev->parent.name, result));

                return result;
    2202:	68fb      	ldr	r3, [r7, #12]
    2204:	e048      	b.n	2298 <rt_device_open+0xfc>
            }
        }

        dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
    2206:	687b      	ldr	r3, [r7, #4]
    2208:	8adb      	ldrh	r3, [r3, #22]
    220a:	2210      	movs	r2, #16
    220c:	4313      	orrs	r3, r2
    220e:	b29a      	uxth	r2, r3
    2210:	687b      	ldr	r3, [r7, #4]
    2212:	82da      	strh	r2, [r3, #22]
    }

    /* device is a stand alone device and opened */
    if ((dev->flag & RT_DEVICE_FLAG_STANDALONE) &&
    2214:	687b      	ldr	r3, [r7, #4]
    2216:	8adb      	ldrh	r3, [r3, #22]
    2218:	001a      	movs	r2, r3
    221a:	2308      	movs	r3, #8
    221c:	4013      	ands	r3, r2
    221e:	d008      	beq.n	2232 <rt_device_open+0x96>
        (dev->open_flag & RT_DEVICE_OFLAG_OPEN))
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	8b1b      	ldrh	r3, [r3, #24]
    2224:	001a      	movs	r2, r3
    2226:	2308      	movs	r3, #8
    2228:	4013      	ands	r3, r2
    if ((dev->flag & RT_DEVICE_FLAG_STANDALONE) &&
    222a:	d002      	beq.n	2232 <rt_device_open+0x96>
    {
        return -RT_EBUSY;
    222c:	2307      	movs	r3, #7
    222e:	425b      	negs	r3, r3
    2230:	e032      	b.n	2298 <rt_device_open+0xfc>
    }

    /* call device_open interface */
    if (device_open != RT_NULL)
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2236:	2b00      	cmp	r3, #0
    2238:	d009      	beq.n	224e <rt_device_open+0xb2>
    {
        result = device_open(dev, oflag);
    223a:	687b      	ldr	r3, [r7, #4]
    223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    223e:	1cba      	adds	r2, r7, #2
    2240:	8811      	ldrh	r1, [r2, #0]
    2242:	687a      	ldr	r2, [r7, #4]
    2244:	0010      	movs	r0, r2
    2246:	4798      	blx	r3
    2248:	0003      	movs	r3, r0
    224a:	60fb      	str	r3, [r7, #12]
    224c:	e006      	b.n	225c <rt_device_open+0xc0>
    }
    else
    {
        /* set open flag */
        dev->open_flag = (oflag & RT_DEVICE_OFLAG_MASK);
    224e:	1cbb      	adds	r3, r7, #2
    2250:	881b      	ldrh	r3, [r3, #0]
    2252:	4a16      	ldr	r2, [pc, #88]	; (22ac <rt_device_open+0x110>)
    2254:	4013      	ands	r3, r2
    2256:	b29a      	uxth	r2, r3
    2258:	687b      	ldr	r3, [r7, #4]
    225a:	831a      	strh	r2, [r3, #24]
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
    225c:	68fb      	ldr	r3, [r7, #12]
    225e:	2b00      	cmp	r3, #0
    2260:	d002      	beq.n	2268 <rt_device_open+0xcc>
    2262:	68fb      	ldr	r3, [r7, #12]
    2264:	3306      	adds	r3, #6
    2266:	d116      	bne.n	2296 <rt_device_open+0xfa>
    {
        dev->open_flag |= RT_DEVICE_OFLAG_OPEN;
    2268:	687b      	ldr	r3, [r7, #4]
    226a:	8b1b      	ldrh	r3, [r3, #24]
    226c:	2208      	movs	r2, #8
    226e:	4313      	orrs	r3, r2
    2270:	b29a      	uxth	r2, r3
    2272:	687b      	ldr	r3, [r7, #4]
    2274:	831a      	strh	r2, [r3, #24]

        dev->ref_count++;
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	7e9b      	ldrb	r3, [r3, #26]
    227a:	3301      	adds	r3, #1
    227c:	b2da      	uxtb	r2, r3
    227e:	687b      	ldr	r3, [r7, #4]
    2280:	769a      	strb	r2, [r3, #26]
        /* don't let bad things happen silently. If you are bitten by this assert,
         * please set the ref_count to a bigger type. */
        RT_ASSERT(dev->ref_count != 0);
    2282:	687b      	ldr	r3, [r7, #4]
    2284:	7e9b      	ldrb	r3, [r3, #26]
    2286:	2b00      	cmp	r3, #0
    2288:	d105      	bne.n	2296 <rt_device_open+0xfa>
    228a:	4905      	ldr	r1, [pc, #20]	; (22a0 <rt_device_open+0x104>)
    228c:	4b08      	ldr	r3, [pc, #32]	; (22b0 <rt_device_open+0x114>)
    228e:	22ff      	movs	r2, #255	; 0xff
    2290:	0018      	movs	r0, r3
    2292:	f001 fe9d 	bl	3fd0 <rt_assert_handler>
    }

    return result;
    2296:	68fb      	ldr	r3, [r7, #12]
}
    2298:	0018      	movs	r0, r3
    229a:	46bd      	mov	sp, r7
    229c:	b004      	add	sp, #16
    229e:	bd80      	pop	{r7, pc}
    22a0:	0000b7e4 	.word	0x0000b7e4
    22a4:	0000b728 	.word	0x0000b728
    22a8:	0000b738 	.word	0x0000b738
    22ac:	00000f0f 	.word	0x00000f0f
    22b0:	0000b7d0 	.word	0x0000b7d0

000022b4 <rt_device_close>:
 * @param dev is the pointer of device driver structure.
 *
 * @return the result, RT_EOK on successfully.
 */
rt_err_t rt_device_close(rt_device_t dev)
{
    22b4:	b580      	push	{r7, lr}
    22b6:	b084      	sub	sp, #16
    22b8:	af00      	add	r7, sp, #0
    22ba:	6078      	str	r0, [r7, #4]
    rt_err_t result = RT_EOK;
    22bc:	2300      	movs	r3, #0
    22be:	60fb      	str	r3, [r7, #12]

    /* parameter check */
    RT_ASSERT(dev != RT_NULL);
    22c0:	687b      	ldr	r3, [r7, #4]
    22c2:	2b00      	cmp	r3, #0
    22c4:	d106      	bne.n	22d4 <rt_device_close+0x20>
    22c6:	2389      	movs	r3, #137	; 0x89
    22c8:	005a      	lsls	r2, r3, #1
    22ca:	4920      	ldr	r1, [pc, #128]	; (234c <rt_device_close+0x98>)
    22cc:	4b20      	ldr	r3, [pc, #128]	; (2350 <rt_device_close+0x9c>)
    22ce:	0018      	movs	r0, r3
    22d0:	f001 fe7e 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
    22d4:	687b      	ldr	r3, [r7, #4]
    22d6:	0018      	movs	r0, r3
    22d8:	f000 fee2 	bl	30a0 <rt_object_get_type>
    22dc:	0003      	movs	r3, r0
    22de:	2b09      	cmp	r3, #9
    22e0:	d007      	beq.n	22f2 <rt_device_close+0x3e>
    22e2:	2314      	movs	r3, #20
    22e4:	33ff      	adds	r3, #255	; 0xff
    22e6:	001a      	movs	r2, r3
    22e8:	4918      	ldr	r1, [pc, #96]	; (234c <rt_device_close+0x98>)
    22ea:	4b1a      	ldr	r3, [pc, #104]	; (2354 <rt_device_close+0xa0>)
    22ec:	0018      	movs	r0, r3
    22ee:	f001 fe6f 	bl	3fd0 <rt_assert_handler>

    if (dev->ref_count == 0)
    22f2:	687b      	ldr	r3, [r7, #4]
    22f4:	7e9b      	ldrb	r3, [r3, #26]
    22f6:	2b00      	cmp	r3, #0
    22f8:	d102      	bne.n	2300 <rt_device_close+0x4c>
        return -RT_ERROR;
    22fa:	2301      	movs	r3, #1
    22fc:	425b      	negs	r3, r3
    22fe:	e020      	b.n	2342 <rt_device_close+0x8e>

    dev->ref_count--;
    2300:	687b      	ldr	r3, [r7, #4]
    2302:	7e9b      	ldrb	r3, [r3, #26]
    2304:	3b01      	subs	r3, #1
    2306:	b2da      	uxtb	r2, r3
    2308:	687b      	ldr	r3, [r7, #4]
    230a:	769a      	strb	r2, [r3, #26]

    if (dev->ref_count != 0)
    230c:	687b      	ldr	r3, [r7, #4]
    230e:	7e9b      	ldrb	r3, [r3, #26]
    2310:	2b00      	cmp	r3, #0
    2312:	d001      	beq.n	2318 <rt_device_close+0x64>
        return RT_EOK;
    2314:	2300      	movs	r3, #0
    2316:	e014      	b.n	2342 <rt_device_close+0x8e>

    /* call device_close interface */
    if (device_close != RT_NULL)
    2318:	687b      	ldr	r3, [r7, #4]
    231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    231c:	2b00      	cmp	r3, #0
    231e:	d006      	beq.n	232e <rt_device_close+0x7a>
    {
        result = device_close(dev);
    2320:	687b      	ldr	r3, [r7, #4]
    2322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2324:	687a      	ldr	r2, [r7, #4]
    2326:	0010      	movs	r0, r2
    2328:	4798      	blx	r3
    232a:	0003      	movs	r3, r0
    232c:	60fb      	str	r3, [r7, #12]
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
    232e:	68fb      	ldr	r3, [r7, #12]
    2330:	2b00      	cmp	r3, #0
    2332:	d002      	beq.n	233a <rt_device_close+0x86>
    2334:	68fb      	ldr	r3, [r7, #12]
    2336:	3306      	adds	r3, #6
    2338:	d102      	bne.n	2340 <rt_device_close+0x8c>
        dev->open_flag = RT_DEVICE_OFLAG_CLOSE;
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	2200      	movs	r2, #0
    233e:	831a      	strh	r2, [r3, #24]

    return result;
    2340:	68fb      	ldr	r3, [r7, #12]
}
    2342:	0018      	movs	r0, r3
    2344:	46bd      	mov	sp, r7
    2346:	b004      	add	sp, #16
    2348:	bd80      	pop	{r7, pc}
    234a:	46c0      	nop			; (mov r8, r8)
    234c:	0000b7f4 	.word	0x0000b7f4
    2350:	0000b728 	.word	0x0000b728
    2354:	0000b738 	.word	0x0000b738

00002358 <rt_device_read>:
 */
rt_size_t rt_device_read(rt_device_t dev,
                         rt_off_t    pos,
                         void       *buffer,
                         rt_size_t   size)
{
    2358:	b590      	push	{r4, r7, lr}
    235a:	b085      	sub	sp, #20
    235c:	af00      	add	r7, sp, #0
    235e:	60f8      	str	r0, [r7, #12]
    2360:	60b9      	str	r1, [r7, #8]
    2362:	607a      	str	r2, [r7, #4]
    2364:	603b      	str	r3, [r7, #0]
    /* parameter check */
    RT_ASSERT(dev != RT_NULL);
    2366:	68fb      	ldr	r3, [r7, #12]
    2368:	2b00      	cmp	r3, #0
    236a:	d106      	bne.n	237a <rt_device_read+0x22>
    236c:	23a0      	movs	r3, #160	; 0xa0
    236e:	005a      	lsls	r2, r3, #1
    2370:	491a      	ldr	r1, [pc, #104]	; (23dc <rt_device_read+0x84>)
    2372:	4b1b      	ldr	r3, [pc, #108]	; (23e0 <rt_device_read+0x88>)
    2374:	0018      	movs	r0, r3
    2376:	f001 fe2b 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
    237a:	68fb      	ldr	r3, [r7, #12]
    237c:	0018      	movs	r0, r3
    237e:	f000 fe8f 	bl	30a0 <rt_object_get_type>
    2382:	0003      	movs	r3, r0
    2384:	2b09      	cmp	r3, #9
    2386:	d007      	beq.n	2398 <rt_device_read+0x40>
    2388:	2342      	movs	r3, #66	; 0x42
    238a:	33ff      	adds	r3, #255	; 0xff
    238c:	001a      	movs	r2, r3
    238e:	4913      	ldr	r1, [pc, #76]	; (23dc <rt_device_read+0x84>)
    2390:	4b14      	ldr	r3, [pc, #80]	; (23e4 <rt_device_read+0x8c>)
    2392:	0018      	movs	r0, r3
    2394:	f001 fe1c 	bl	3fd0 <rt_assert_handler>

    if (dev->ref_count == 0)
    2398:	68fb      	ldr	r3, [r7, #12]
    239a:	7e9b      	ldrb	r3, [r3, #26]
    239c:	2b00      	cmp	r3, #0
    239e:	d106      	bne.n	23ae <rt_device_read+0x56>
    {
        rt_set_errno(-RT_ERROR);
    23a0:	2301      	movs	r3, #1
    23a2:	425b      	negs	r3, r3
    23a4:	0018      	movs	r0, r3
    23a6:	f000 fef7 	bl	3198 <rt_set_errno>
        return 0;
    23aa:	2300      	movs	r3, #0
    23ac:	e012      	b.n	23d4 <rt_device_read+0x7c>
    }

    /* call device_read interface */
    if (device_read != RT_NULL)
    23ae:	68fb      	ldr	r3, [r7, #12]
    23b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    23b2:	2b00      	cmp	r3, #0
    23b4:	d008      	beq.n	23c8 <rt_device_read+0x70>
    {
        return device_read(dev, pos, buffer, size);
    23b6:	68fb      	ldr	r3, [r7, #12]
    23b8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    23ba:	683b      	ldr	r3, [r7, #0]
    23bc:	687a      	ldr	r2, [r7, #4]
    23be:	68b9      	ldr	r1, [r7, #8]
    23c0:	68f8      	ldr	r0, [r7, #12]
    23c2:	47a0      	blx	r4
    23c4:	0003      	movs	r3, r0
    23c6:	e005      	b.n	23d4 <rt_device_read+0x7c>
    }

    /* set error code */
    rt_set_errno(-RT_ENOSYS);
    23c8:	2306      	movs	r3, #6
    23ca:	425b      	negs	r3, r3
    23cc:	0018      	movs	r0, r3
    23ce:	f000 fee3 	bl	3198 <rt_set_errno>

    return 0;
    23d2:	2300      	movs	r3, #0
}
    23d4:	0018      	movs	r0, r3
    23d6:	46bd      	mov	sp, r7
    23d8:	b005      	add	sp, #20
    23da:	bd90      	pop	{r4, r7, pc}
    23dc:	0000b804 	.word	0x0000b804
    23e0:	0000b728 	.word	0x0000b728
    23e4:	0000b738 	.word	0x0000b738

000023e8 <rt_device_write>:
 */
rt_size_t rt_device_write(rt_device_t dev,
                          rt_off_t    pos,
                          const void *buffer,
                          rt_size_t   size)
{
    23e8:	b590      	push	{r4, r7, lr}
    23ea:	b085      	sub	sp, #20
    23ec:	af00      	add	r7, sp, #0
    23ee:	60f8      	str	r0, [r7, #12]
    23f0:	60b9      	str	r1, [r7, #8]
    23f2:	607a      	str	r2, [r7, #4]
    23f4:	603b      	str	r3, [r7, #0]
    /* parameter check */
    RT_ASSERT(dev != RT_NULL);
    23f6:	68fb      	ldr	r3, [r7, #12]
    23f8:	2b00      	cmp	r3, #0
    23fa:	d107      	bne.n	240c <rt_device_write+0x24>
    23fc:	236c      	movs	r3, #108	; 0x6c
    23fe:	33ff      	adds	r3, #255	; 0xff
    2400:	001a      	movs	r2, r3
    2402:	491a      	ldr	r1, [pc, #104]	; (246c <rt_device_write+0x84>)
    2404:	4b1a      	ldr	r3, [pc, #104]	; (2470 <rt_device_write+0x88>)
    2406:	0018      	movs	r0, r3
    2408:	f001 fde2 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
    240c:	68fb      	ldr	r3, [r7, #12]
    240e:	0018      	movs	r0, r3
    2410:	f000 fe46 	bl	30a0 <rt_object_get_type>
    2414:	0003      	movs	r3, r0
    2416:	2b09      	cmp	r3, #9
    2418:	d006      	beq.n	2428 <rt_device_write+0x40>
    241a:	23b6      	movs	r3, #182	; 0xb6
    241c:	005a      	lsls	r2, r3, #1
    241e:	4913      	ldr	r1, [pc, #76]	; (246c <rt_device_write+0x84>)
    2420:	4b14      	ldr	r3, [pc, #80]	; (2474 <rt_device_write+0x8c>)
    2422:	0018      	movs	r0, r3
    2424:	f001 fdd4 	bl	3fd0 <rt_assert_handler>

    if (dev->ref_count == 0)
    2428:	68fb      	ldr	r3, [r7, #12]
    242a:	7e9b      	ldrb	r3, [r3, #26]
    242c:	2b00      	cmp	r3, #0
    242e:	d106      	bne.n	243e <rt_device_write+0x56>
    {
        rt_set_errno(-RT_ERROR);
    2430:	2301      	movs	r3, #1
    2432:	425b      	negs	r3, r3
    2434:	0018      	movs	r0, r3
    2436:	f000 feaf 	bl	3198 <rt_set_errno>
        return 0;
    243a:	2300      	movs	r3, #0
    243c:	e012      	b.n	2464 <rt_device_write+0x7c>
    }

    /* call device_write interface */
    if (device_write != RT_NULL)
    243e:	68fb      	ldr	r3, [r7, #12]
    2440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2442:	2b00      	cmp	r3, #0
    2444:	d008      	beq.n	2458 <rt_device_write+0x70>
    {
        return device_write(dev, pos, buffer, size);
    2446:	68fb      	ldr	r3, [r7, #12]
    2448:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    244a:	683b      	ldr	r3, [r7, #0]
    244c:	687a      	ldr	r2, [r7, #4]
    244e:	68b9      	ldr	r1, [r7, #8]
    2450:	68f8      	ldr	r0, [r7, #12]
    2452:	47a0      	blx	r4
    2454:	0003      	movs	r3, r0
    2456:	e005      	b.n	2464 <rt_device_write+0x7c>
    }

    /* set error code */
    rt_set_errno(-RT_ENOSYS);
    2458:	2306      	movs	r3, #6
    245a:	425b      	negs	r3, r3
    245c:	0018      	movs	r0, r3
    245e:	f000 fe9b 	bl	3198 <rt_set_errno>

    return 0;
    2462:	2300      	movs	r3, #0
}
    2464:	0018      	movs	r0, r3
    2466:	46bd      	mov	sp, r7
    2468:	b005      	add	sp, #20
    246a:	bd90      	pop	{r4, r7, pc}
    246c:	0000b814 	.word	0x0000b814
    2470:	0000b728 	.word	0x0000b728
    2474:	0000b738 	.word	0x0000b738

00002478 <rt_device_set_rx_indicate>:
 * @return RT_EOK
 */
rt_err_t rt_device_set_rx_indicate(rt_device_t dev,
                                   rt_err_t (*rx_ind)(rt_device_t dev,
                                   rt_size_t size))
{
    2478:	b580      	push	{r7, lr}
    247a:	b082      	sub	sp, #8
    247c:	af00      	add	r7, sp, #0
    247e:	6078      	str	r0, [r7, #4]
    2480:	6039      	str	r1, [r7, #0]
    /* parameter check */
    RT_ASSERT(dev != RT_NULL);
    2482:	687b      	ldr	r3, [r7, #4]
    2484:	2b00      	cmp	r3, #0
    2486:	d107      	bne.n	2498 <rt_device_set_rx_indicate+0x20>
    2488:	23ac      	movs	r3, #172	; 0xac
    248a:	33ff      	adds	r3, #255	; 0xff
    248c:	001a      	movs	r2, r3
    248e:	490d      	ldr	r1, [pc, #52]	; (24c4 <rt_device_set_rx_indicate+0x4c>)
    2490:	4b0d      	ldr	r3, [pc, #52]	; (24c8 <rt_device_set_rx_indicate+0x50>)
    2492:	0018      	movs	r0, r3
    2494:	f001 fd9c 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
    2498:	687b      	ldr	r3, [r7, #4]
    249a:	0018      	movs	r0, r3
    249c:	f000 fe00 	bl	30a0 <rt_object_get_type>
    24a0:	0003      	movs	r3, r0
    24a2:	2b09      	cmp	r3, #9
    24a4:	d006      	beq.n	24b4 <rt_device_set_rx_indicate+0x3c>
    24a6:	23d6      	movs	r3, #214	; 0xd6
    24a8:	005a      	lsls	r2, r3, #1
    24aa:	4906      	ldr	r1, [pc, #24]	; (24c4 <rt_device_set_rx_indicate+0x4c>)
    24ac:	4b07      	ldr	r3, [pc, #28]	; (24cc <rt_device_set_rx_indicate+0x54>)
    24ae:	0018      	movs	r0, r3
    24b0:	f001 fd8e 	bl	3fd0 <rt_assert_handler>

    dev->rx_indicate = rx_ind;
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	683a      	ldr	r2, [r7, #0]
    24b8:	61da      	str	r2, [r3, #28]

    return RT_EOK;
    24ba:	2300      	movs	r3, #0
}
    24bc:	0018      	movs	r0, r3
    24be:	46bd      	mov	sp, r7
    24c0:	b002      	add	sp, #8
    24c2:	bd80      	pop	{r7, pc}
    24c4:	0000b824 	.word	0x0000b824
    24c8:	0000b728 	.word	0x0000b728
    24cc:	0000b738 	.word	0x0000b738

000024d0 <rti_start>:
 * ...
 * INIT_APP_EXPORT(fn);
 * etc.
 */
static int rti_start(void)
{
    24d0:	b580      	push	{r7, lr}
    24d2:	af00      	add	r7, sp, #0
    return 0;
    24d4:	2300      	movs	r3, #0
}
    24d6:	0018      	movs	r0, r3
    24d8:	46bd      	mov	sp, r7
    24da:	bd80      	pop	{r7, pc}

000024dc <rti_board_start>:
INIT_EXPORT(rti_start, "0");

static int rti_board_start(void)
{
    24dc:	b580      	push	{r7, lr}
    24de:	af00      	add	r7, sp, #0
    return 0;
    24e0:	2300      	movs	r3, #0
}
    24e2:	0018      	movs	r0, r3
    24e4:	46bd      	mov	sp, r7
    24e6:	bd80      	pop	{r7, pc}

000024e8 <rti_board_end>:
INIT_EXPORT(rti_board_start, "0.end");

static int rti_board_end(void)
{
    24e8:	b580      	push	{r7, lr}
    24ea:	af00      	add	r7, sp, #0
    return 0;
    24ec:	2300      	movs	r3, #0
}
    24ee:	0018      	movs	r0, r3
    24f0:	46bd      	mov	sp, r7
    24f2:	bd80      	pop	{r7, pc}

000024f4 <rti_end>:
INIT_EXPORT(rti_board_end, "1.end");

static int rti_end(void)
{
    24f4:	b580      	push	{r7, lr}
    24f6:	af00      	add	r7, sp, #0
    return 0;
    24f8:	2300      	movs	r3, #0
}
    24fa:	0018      	movs	r0, r3
    24fc:	46bd      	mov	sp, r7
    24fe:	bd80      	pop	{r7, pc}

00002500 <rt_components_init>:

/**
 * @brief  RT-Thread Components Initialization.
 */
void rt_components_init(void)
{
    2500:	b580      	push	{r7, lr}
    2502:	b082      	sub	sp, #8
    2504:	af00      	add	r7, sp, #0
        rt_kprintf(":%d done\n", result);
    }
#else
    volatile const init_fn_t *fn_ptr;

    for (fn_ptr = &__rt_init_rti_board_end; fn_ptr < &__rt_init_rti_end; fn_ptr ++)
    2506:	4b09      	ldr	r3, [pc, #36]	; (252c <rt_components_init+0x2c>)
    2508:	607b      	str	r3, [r7, #4]
    250a:	e005      	b.n	2518 <rt_components_init+0x18>
    {
        (*fn_ptr)();
    250c:	687b      	ldr	r3, [r7, #4]
    250e:	681b      	ldr	r3, [r3, #0]
    2510:	4798      	blx	r3
    for (fn_ptr = &__rt_init_rti_board_end; fn_ptr < &__rt_init_rti_end; fn_ptr ++)
    2512:	687b      	ldr	r3, [r7, #4]
    2514:	3304      	adds	r3, #4
    2516:	607b      	str	r3, [r7, #4]
    2518:	687a      	ldr	r2, [r7, #4]
    251a:	4b05      	ldr	r3, [pc, #20]	; (2530 <rt_components_init+0x30>)
    251c:	429a      	cmp	r2, r3
    251e:	d3f5      	bcc.n	250c <rt_components_init+0xc>
    }
#endif /* RT_DEBUG_INIT */
}
    2520:	46c0      	nop			; (mov r8, r8)
    2522:	46c0      	nop			; (mov r8, r8)
    2524:	46bd      	mov	sp, r7
    2526:	b002      	add	sp, #8
    2528:	bd80      	pop	{r7, pc}
    252a:	46c0      	nop			; (mov r8, r8)
    252c:	0000dd28 	.word	0x0000dd28
    2530:	0000dd30 	.word	0x0000dd30

00002534 <plug_holes>:
    }
}
#endif /* RT_USING_MEMTRACE */

static void plug_holes(struct rt_small_mem *m, struct rt_small_mem_item *mem)
{
    2534:	b580      	push	{r7, lr}
    2536:	b084      	sub	sp, #16
    2538:	af00      	add	r7, sp, #0
    253a:	6078      	str	r0, [r7, #4]
    253c:	6039      	str	r1, [r7, #0]
    struct rt_small_mem_item *nmem;
    struct rt_small_mem_item *pmem;

    RT_ASSERT((rt_uint8_t *)mem >= m->heap_ptr);
    253e:	687b      	ldr	r3, [r7, #4]
    2540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2542:	683a      	ldr	r2, [r7, #0]
    2544:	429a      	cmp	r2, r3
    2546:	d205      	bcs.n	2554 <plug_holes+0x20>
    2548:	4935      	ldr	r1, [pc, #212]	; (2620 <plug_holes+0xec>)
    254a:	4b36      	ldr	r3, [pc, #216]	; (2624 <plug_holes+0xf0>)
    254c:	2282      	movs	r2, #130	; 0x82
    254e:	0018      	movs	r0, r3
    2550:	f001 fd3e 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT((rt_uint8_t *)mem < (rt_uint8_t *)m->heap_end);
    2554:	687b      	ldr	r3, [r7, #4]
    2556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2558:	683a      	ldr	r2, [r7, #0]
    255a:	429a      	cmp	r2, r3
    255c:	d305      	bcc.n	256a <plug_holes+0x36>
    255e:	4930      	ldr	r1, [pc, #192]	; (2620 <plug_holes+0xec>)
    2560:	4b31      	ldr	r3, [pc, #196]	; (2628 <plug_holes+0xf4>)
    2562:	2283      	movs	r2, #131	; 0x83
    2564:	0018      	movs	r0, r3
    2566:	f001 fd33 	bl	3fd0 <rt_assert_handler>

    /* plug hole forward */
    nmem = (struct rt_small_mem_item *)&m->heap_ptr[mem->next];
    256a:	687b      	ldr	r3, [r7, #4]
    256c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    256e:	683b      	ldr	r3, [r7, #0]
    2570:	685b      	ldr	r3, [r3, #4]
    2572:	18d3      	adds	r3, r2, r3
    2574:	60fb      	str	r3, [r7, #12]
    if (mem != nmem && !MEM_ISUSED(nmem) &&
    2576:	683a      	ldr	r2, [r7, #0]
    2578:	68fb      	ldr	r3, [r7, #12]
    257a:	429a      	cmp	r2, r3
    257c:	d023      	beq.n	25c6 <plug_holes+0x92>
    257e:	68fb      	ldr	r3, [r7, #12]
    2580:	681b      	ldr	r3, [r3, #0]
    2582:	2201      	movs	r2, #1
    2584:	4013      	ands	r3, r2
    2586:	d11e      	bne.n	25c6 <plug_holes+0x92>
        (rt_uint8_t *)nmem != (rt_uint8_t *)m->heap_end)
    2588:	687b      	ldr	r3, [r7, #4]
    258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if (mem != nmem && !MEM_ISUSED(nmem) &&
    258c:	68fa      	ldr	r2, [r7, #12]
    258e:	429a      	cmp	r2, r3
    2590:	d019      	beq.n	25c6 <plug_holes+0x92>
    {
        /* if mem->next is unused and not end of m->heap_ptr,
         * combine mem and mem->next
         */
        if (m->lfree == nmem)
    2592:	687b      	ldr	r3, [r7, #4]
    2594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2596:	68fa      	ldr	r2, [r7, #12]
    2598:	429a      	cmp	r2, r3
    259a:	d102      	bne.n	25a2 <plug_holes+0x6e>
        {
            m->lfree = mem;
    259c:	687b      	ldr	r3, [r7, #4]
    259e:	683a      	ldr	r2, [r7, #0]
    25a0:	631a      	str	r2, [r3, #48]	; 0x30
        }
        nmem->pool_ptr = 0;
    25a2:	68fb      	ldr	r3, [r7, #12]
    25a4:	2200      	movs	r2, #0
    25a6:	601a      	str	r2, [r3, #0]
        mem->next = nmem->next;
    25a8:	68fb      	ldr	r3, [r7, #12]
    25aa:	685a      	ldr	r2, [r3, #4]
    25ac:	683b      	ldr	r3, [r7, #0]
    25ae:	605a      	str	r2, [r3, #4]
        ((struct rt_small_mem_item *)&m->heap_ptr[nmem->next])->prev = (rt_uint8_t *)mem - m->heap_ptr;
    25b0:	687b      	ldr	r3, [r7, #4]
    25b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    25b4:	683a      	ldr	r2, [r7, #0]
    25b6:	1ad1      	subs	r1, r2, r3
    25b8:	687b      	ldr	r3, [r7, #4]
    25ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25bc:	68fb      	ldr	r3, [r7, #12]
    25be:	685b      	ldr	r3, [r3, #4]
    25c0:	18d3      	adds	r3, r2, r3
    25c2:	000a      	movs	r2, r1
    25c4:	609a      	str	r2, [r3, #8]
    }

    /* plug hole backward */
    pmem = (struct rt_small_mem_item *)&m->heap_ptr[mem->prev];
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25ca:	683b      	ldr	r3, [r7, #0]
    25cc:	689b      	ldr	r3, [r3, #8]
    25ce:	18d3      	adds	r3, r2, r3
    25d0:	60bb      	str	r3, [r7, #8]
    if (pmem != mem && !MEM_ISUSED(pmem))
    25d2:	68ba      	ldr	r2, [r7, #8]
    25d4:	683b      	ldr	r3, [r7, #0]
    25d6:	429a      	cmp	r2, r3
    25d8:	d01e      	beq.n	2618 <plug_holes+0xe4>
    25da:	68bb      	ldr	r3, [r7, #8]
    25dc:	681b      	ldr	r3, [r3, #0]
    25de:	2201      	movs	r2, #1
    25e0:	4013      	ands	r3, r2
    25e2:	d119      	bne.n	2618 <plug_holes+0xe4>
    {
        /* if mem->prev is unused, combine mem and mem->prev */
        if (m->lfree == mem)
    25e4:	687b      	ldr	r3, [r7, #4]
    25e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    25e8:	683a      	ldr	r2, [r7, #0]
    25ea:	429a      	cmp	r2, r3
    25ec:	d102      	bne.n	25f4 <plug_holes+0xc0>
        {
            m->lfree = pmem;
    25ee:	687b      	ldr	r3, [r7, #4]
    25f0:	68ba      	ldr	r2, [r7, #8]
    25f2:	631a      	str	r2, [r3, #48]	; 0x30
        }
        mem->pool_ptr = 0;
    25f4:	683b      	ldr	r3, [r7, #0]
    25f6:	2200      	movs	r2, #0
    25f8:	601a      	str	r2, [r3, #0]
        pmem->next = mem->next;
    25fa:	683b      	ldr	r3, [r7, #0]
    25fc:	685a      	ldr	r2, [r3, #4]
    25fe:	68bb      	ldr	r3, [r7, #8]
    2600:	605a      	str	r2, [r3, #4]
        ((struct rt_small_mem_item *)&m->heap_ptr[mem->next])->prev = (rt_uint8_t *)pmem - m->heap_ptr;
    2602:	687b      	ldr	r3, [r7, #4]
    2604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2606:	68ba      	ldr	r2, [r7, #8]
    2608:	1ad1      	subs	r1, r2, r3
    260a:	687b      	ldr	r3, [r7, #4]
    260c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    260e:	683b      	ldr	r3, [r7, #0]
    2610:	685b      	ldr	r3, [r3, #4]
    2612:	18d3      	adds	r3, r2, r3
    2614:	000a      	movs	r2, r1
    2616:	609a      	str	r2, [r3, #8]
    }
}
    2618:	46c0      	nop			; (mov r8, r8)
    261a:	46bd      	mov	sp, r7
    261c:	b004      	add	sp, #16
    261e:	bd80      	pop	{r7, pc}
    2620:	0000bc5c 	.word	0x0000bc5c
    2624:	0000b840 	.word	0x0000b840
    2628:	0000b864 	.word	0x0000b864

0000262c <rt_smem_init>:
 * @return Return a pointer to the memory object. When the return value is RT_NULL, it means the init failed.
 */
rt_smem_t rt_smem_init(const char    *name,
                     void          *begin_addr,
                     rt_size_t      size)
{
    262c:	b580      	push	{r7, lr}
    262e:	b08a      	sub	sp, #40	; 0x28
    2630:	af00      	add	r7, sp, #0
    2632:	60f8      	str	r0, [r7, #12]
    2634:	60b9      	str	r1, [r7, #8]
    2636:	607a      	str	r2, [r7, #4]
    struct rt_small_mem_item *mem;
    struct rt_small_mem *small_mem;
    rt_ubase_t start_addr, begin_align, end_align, mem_size;

    small_mem = (struct rt_small_mem *)RT_ALIGN((rt_ubase_t)begin_addr, RT_ALIGN_SIZE);
    2638:	68bb      	ldr	r3, [r7, #8]
    263a:	3303      	adds	r3, #3
    263c:	2203      	movs	r2, #3
    263e:	4393      	bics	r3, r2
    2640:	627b      	str	r3, [r7, #36]	; 0x24
    start_addr = (rt_ubase_t)small_mem + sizeof(*small_mem);
    2642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2644:	3338      	adds	r3, #56	; 0x38
    2646:	623b      	str	r3, [r7, #32]
    begin_align = RT_ALIGN((rt_ubase_t)start_addr, RT_ALIGN_SIZE);
    2648:	6a3b      	ldr	r3, [r7, #32]
    264a:	3303      	adds	r3, #3
    264c:	2203      	movs	r2, #3
    264e:	4393      	bics	r3, r2
    2650:	61fb      	str	r3, [r7, #28]
    end_align   = RT_ALIGN_DOWN((rt_ubase_t)begin_addr + size, RT_ALIGN_SIZE);
    2652:	68ba      	ldr	r2, [r7, #8]
    2654:	687b      	ldr	r3, [r7, #4]
    2656:	18d3      	adds	r3, r2, r3
    2658:	2203      	movs	r2, #3
    265a:	4393      	bics	r3, r2
    265c:	61bb      	str	r3, [r7, #24]

    /* alignment addr */
    if ((end_align > (2 * SIZEOF_STRUCT_MEM)) &&
    265e:	69bb      	ldr	r3, [r7, #24]
    2660:	2b18      	cmp	r3, #24
    2662:	d955      	bls.n	2710 <rt_smem_init+0xe4>
        ((end_align - 2 * SIZEOF_STRUCT_MEM) >= start_addr))
    2664:	69bb      	ldr	r3, [r7, #24]
    2666:	3b18      	subs	r3, #24
    if ((end_align > (2 * SIZEOF_STRUCT_MEM)) &&
    2668:	6a3a      	ldr	r2, [r7, #32]
    266a:	429a      	cmp	r2, r3
    266c:	d850      	bhi.n	2710 <rt_smem_init+0xe4>
    {
        /* calculate the aligned memory size */
        mem_size = end_align - begin_align - 2 * SIZEOF_STRUCT_MEM;
    266e:	69ba      	ldr	r2, [r7, #24]
    2670:	69fb      	ldr	r3, [r7, #28]
    2672:	1ad3      	subs	r3, r2, r3
    2674:	3b18      	subs	r3, #24
    2676:	617b      	str	r3, [r7, #20]
                   (rt_ubase_t)begin_addr, (rt_ubase_t)begin_addr + size);

        return RT_NULL;
    }

    rt_memset(small_mem, 0, sizeof(*small_mem));
    2678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    267a:	2238      	movs	r2, #56	; 0x38
    267c:	2100      	movs	r1, #0
    267e:	0018      	movs	r0, r3
    2680:	f000 fdaa 	bl	31d8 <rt_memset>
    /* initialize small memory object */
    rt_object_init(&(small_mem->parent.parent), RT_Object_Class_Memory, name);
    2684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2686:	68fa      	ldr	r2, [r7, #12]
    2688:	210c      	movs	r1, #12
    268a:	0018      	movs	r0, r3
    268c:	f000 fb8e 	bl	2dac <rt_object_init>
    small_mem->parent.algorithm = "small";
    2690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2692:	4a26      	ldr	r2, [pc, #152]	; (272c <rt_smem_init+0x100>)
    2694:	615a      	str	r2, [r3, #20]
    small_mem->parent.address = begin_align;
    2696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2698:	69fa      	ldr	r2, [r7, #28]
    269a:	619a      	str	r2, [r3, #24]
    small_mem->parent.total = mem_size;
    269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    269e:	697a      	ldr	r2, [r7, #20]
    26a0:	61da      	str	r2, [r3, #28]
    small_mem->mem_size_aligned = mem_size;
    26a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26a4:	697a      	ldr	r2, [r7, #20]
    26a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* point to begin address of heap */
    small_mem->heap_ptr = (rt_uint8_t *)begin_align;
    26a8:	69fa      	ldr	r2, [r7, #28]
    26aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26ac:	629a      	str	r2, [r3, #40]	; 0x28

    RT_DEBUG_LOG(RT_DEBUG_MEM, ("mem init, heap begin address 0x%x, size %d\n",
                                (rt_ubase_t)small_mem->heap_ptr, small_mem->mem_size_aligned));

    /* initialize the start of the heap */
    mem        = (struct rt_small_mem_item *)small_mem->heap_ptr;
    26ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26b2:	613b      	str	r3, [r7, #16]
    mem->pool_ptr = MEM_FREED();
    26b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26b6:	2201      	movs	r2, #1
    26b8:	4393      	bics	r3, r2
    26ba:	001a      	movs	r2, r3
    26bc:	693b      	ldr	r3, [r7, #16]
    26be:	601a      	str	r2, [r3, #0]
    mem->next  = small_mem->mem_size_aligned + SIZEOF_STRUCT_MEM;
    26c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    26c4:	330c      	adds	r3, #12
    26c6:	001a      	movs	r2, r3
    26c8:	693b      	ldr	r3, [r7, #16]
    26ca:	605a      	str	r2, [r3, #4]
    mem->prev  = 0;
    26cc:	693b      	ldr	r3, [r7, #16]
    26ce:	2200      	movs	r2, #0
    26d0:	609a      	str	r2, [r3, #8]
#ifdef RT_USING_MEMTRACE
    rt_smem_setname(mem, "INIT");
#endif /* RT_USING_MEMTRACE */

    /* initialize the end of the heap */
    small_mem->heap_end        = (struct rt_small_mem_item *)&small_mem->heap_ptr[mem->next];
    26d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    26d6:	693b      	ldr	r3, [r7, #16]
    26d8:	685b      	ldr	r3, [r3, #4]
    26da:	18d2      	adds	r2, r2, r3
    26dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26de:	62da      	str	r2, [r3, #44]	; 0x2c
    small_mem->heap_end->pool_ptr = MEM_USED();
    26e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    26e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    26e6:	2101      	movs	r1, #1
    26e8:	430a      	orrs	r2, r1
    26ea:	601a      	str	r2, [r3, #0]
    small_mem->heap_end->next  = small_mem->mem_size_aligned + SIZEOF_STRUCT_MEM;
    26ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    26f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    26f4:	320c      	adds	r2, #12
    26f6:	605a      	str	r2, [r3, #4]
    small_mem->heap_end->prev  = small_mem->mem_size_aligned + SIZEOF_STRUCT_MEM;
    26f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    26fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2700:	320c      	adds	r2, #12
    2702:	609a      	str	r2, [r3, #8]
#ifdef RT_USING_MEMTRACE
    rt_smem_setname(small_mem->heap_end, "INIT");
#endif /* RT_USING_MEMTRACE */

    /* initialize the lowest-free pointer to the start of the heap */
    small_mem->lfree = (struct rt_small_mem_item *)small_mem->heap_ptr;
    2704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    270a:	631a      	str	r2, [r3, #48]	; 0x30

    return &small_mem->parent;
    270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    270e:	e008      	b.n	2722 <rt_smem_init+0xf6>
        rt_kprintf("mem init, error begin address 0x%x, and end address 0x%x\n",
    2710:	68b9      	ldr	r1, [r7, #8]
                   (rt_ubase_t)begin_addr, (rt_ubase_t)begin_addr + size);
    2712:	68ba      	ldr	r2, [r7, #8]
        rt_kprintf("mem init, error begin address 0x%x, and end address 0x%x\n",
    2714:	687b      	ldr	r3, [r7, #4]
    2716:	18d2      	adds	r2, r2, r3
    2718:	4b05      	ldr	r3, [pc, #20]	; (2730 <rt_smem_init+0x104>)
    271a:	0018      	movs	r0, r3
    271c:	f001 fab2 	bl	3c84 <rt_kprintf>
        return RT_NULL;
    2720:	2300      	movs	r3, #0
}
    2722:	0018      	movs	r0, r3
    2724:	46bd      	mov	sp, r7
    2726:	b00a      	add	sp, #40	; 0x28
    2728:	bd80      	pop	{r7, pc}
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	0000b894 	.word	0x0000b894
    2730:	0000b89c 	.word	0x0000b89c

00002734 <rt_smem_alloc>:
 * @param size is the minimum size of the requested block in bytes.
 *
 * @return the pointer to allocated memory or NULL if no free memory was found.
 */
void *rt_smem_alloc(rt_smem_t m, rt_size_t size)
{
    2734:	b580      	push	{r7, lr}
    2736:	b088      	sub	sp, #32
    2738:	af00      	add	r7, sp, #0
    273a:	6078      	str	r0, [r7, #4]
    273c:	6039      	str	r1, [r7, #0]
    rt_size_t ptr, ptr2;
    struct rt_small_mem_item *mem, *mem2;
    struct rt_small_mem *small_mem;

    if (size == 0)
    273e:	683b      	ldr	r3, [r7, #0]
    2740:	2b00      	cmp	r3, #0
    2742:	d101      	bne.n	2748 <rt_smem_alloc+0x14>
        return RT_NULL;
    2744:	2300      	movs	r3, #0
    2746:	e11d      	b.n	2984 <rt_smem_alloc+0x250>

    RT_ASSERT(m != RT_NULL);
    2748:	687b      	ldr	r3, [r7, #4]
    274a:	2b00      	cmp	r3, #0
    274c:	d106      	bne.n	275c <rt_smem_alloc+0x28>
    274e:	2390      	movs	r3, #144	; 0x90
    2750:	005a      	lsls	r2, r3, #1
    2752:	498e      	ldr	r1, [pc, #568]	; (298c <rt_smem_alloc+0x258>)
    2754:	4b8e      	ldr	r3, [pc, #568]	; (2990 <rt_smem_alloc+0x25c>)
    2756:	0018      	movs	r0, r3
    2758:	f001 fc3a 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&m->parent) == RT_Object_Class_Memory);
    275c:	687b      	ldr	r3, [r7, #4]
    275e:	0018      	movs	r0, r3
    2760:	f000 fc9e 	bl	30a0 <rt_object_get_type>
    2764:	0003      	movs	r3, r0
    2766:	2b0c      	cmp	r3, #12
    2768:	d007      	beq.n	277a <rt_smem_alloc+0x46>
    276a:	2322      	movs	r3, #34	; 0x22
    276c:	33ff      	adds	r3, #255	; 0xff
    276e:	001a      	movs	r2, r3
    2770:	4986      	ldr	r1, [pc, #536]	; (298c <rt_smem_alloc+0x258>)
    2772:	4b88      	ldr	r3, [pc, #544]	; (2994 <rt_smem_alloc+0x260>)
    2774:	0018      	movs	r0, r3
    2776:	f001 fc2b 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&m->parent));
    277a:	687b      	ldr	r3, [r7, #4]
    277c:	0018      	movs	r0, r3
    277e:	f000 fc71 	bl	3064 <rt_object_is_systemobject>
    2782:	1e03      	subs	r3, r0, #0
    2784:	d106      	bne.n	2794 <rt_smem_alloc+0x60>
    2786:	2391      	movs	r3, #145	; 0x91
    2788:	005a      	lsls	r2, r3, #1
    278a:	4980      	ldr	r1, [pc, #512]	; (298c <rt_smem_alloc+0x258>)
    278c:	4b82      	ldr	r3, [pc, #520]	; (2998 <rt_smem_alloc+0x264>)
    278e:	0018      	movs	r0, r3
    2790:	f001 fc1e 	bl	3fd0 <rt_assert_handler>
        RT_DEBUG_LOG(RT_DEBUG_MEM, ("malloc size %d, but align to %d\n",
                                    size, RT_ALIGN(size, RT_ALIGN_SIZE)));
    else
        RT_DEBUG_LOG(RT_DEBUG_MEM, ("malloc size %d\n", size));

    small_mem = (struct rt_small_mem *)m;
    2794:	687b      	ldr	r3, [r7, #4]
    2796:	61bb      	str	r3, [r7, #24]
    /* alignment size */
    size = RT_ALIGN(size, RT_ALIGN_SIZE);
    2798:	683b      	ldr	r3, [r7, #0]
    279a:	3303      	adds	r3, #3
    279c:	2203      	movs	r2, #3
    279e:	4393      	bics	r3, r2
    27a0:	603b      	str	r3, [r7, #0]

    if (size > small_mem->mem_size_aligned)
    27a2:	69bb      	ldr	r3, [r7, #24]
    27a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    27a6:	683a      	ldr	r2, [r7, #0]
    27a8:	429a      	cmp	r2, r3
    27aa:	d901      	bls.n	27b0 <rt_smem_alloc+0x7c>
    {
        RT_DEBUG_LOG(RT_DEBUG_MEM, ("no memory\n"));

        return RT_NULL;
    27ac:	2300      	movs	r3, #0
    27ae:	e0e9      	b.n	2984 <rt_smem_alloc+0x250>
    }

    /* every data block must be at least MIN_SIZE_ALIGNED long */
    if (size < MIN_SIZE_ALIGNED)
    27b0:	683b      	ldr	r3, [r7, #0]
    27b2:	2b0b      	cmp	r3, #11
    27b4:	d801      	bhi.n	27ba <rt_smem_alloc+0x86>
        size = MIN_SIZE_ALIGNED;
    27b6:	230c      	movs	r3, #12
    27b8:	603b      	str	r3, [r7, #0]

    for (ptr = (rt_uint8_t *)small_mem->lfree - small_mem->heap_ptr;
    27ba:	69bb      	ldr	r3, [r7, #24]
    27bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    27be:	69bb      	ldr	r3, [r7, #24]
    27c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    27c2:	1ad3      	subs	r3, r2, r3
    27c4:	61fb      	str	r3, [r7, #28]
    27c6:	e0d4      	b.n	2972 <rt_smem_alloc+0x23e>
         ptr <= small_mem->mem_size_aligned - size;
         ptr = ((struct rt_small_mem_item *)&small_mem->heap_ptr[ptr])->next)
    {
        mem = (struct rt_small_mem_item *)&small_mem->heap_ptr[ptr];
    27c8:	69bb      	ldr	r3, [r7, #24]
    27ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    27cc:	69fb      	ldr	r3, [r7, #28]
    27ce:	18d3      	adds	r3, r2, r3
    27d0:	617b      	str	r3, [r7, #20]

        if ((!MEM_ISUSED(mem)) && (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size)
    27d2:	697b      	ldr	r3, [r7, #20]
    27d4:	681b      	ldr	r3, [r3, #0]
    27d6:	2201      	movs	r2, #1
    27d8:	4013      	ands	r3, r2
    27da:	d000      	beq.n	27de <rt_smem_alloc+0xaa>
    27dc:	e0c3      	b.n	2966 <rt_smem_alloc+0x232>
    27de:	697b      	ldr	r3, [r7, #20]
    27e0:	685a      	ldr	r2, [r3, #4]
    27e2:	69fb      	ldr	r3, [r7, #28]
    27e4:	1ad3      	subs	r3, r2, r3
    27e6:	3b0c      	subs	r3, #12
    27e8:	683a      	ldr	r2, [r7, #0]
    27ea:	429a      	cmp	r2, r3
    27ec:	d900      	bls.n	27f0 <rt_smem_alloc+0xbc>
    27ee:	e0ba      	b.n	2966 <rt_smem_alloc+0x232>
        {
            /* mem is not used and at least perfect fit is possible:
             * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

            if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >=
    27f0:	697b      	ldr	r3, [r7, #20]
    27f2:	685a      	ldr	r2, [r3, #4]
    27f4:	69fb      	ldr	r3, [r7, #28]
    27f6:	1ad3      	subs	r3, r2, r3
    27f8:	3b0c      	subs	r3, #12
    27fa:	001a      	movs	r2, r3
                (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED))
    27fc:	683b      	ldr	r3, [r7, #0]
    27fe:	3318      	adds	r3, #24
            if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >=
    2800:	429a      	cmp	r2, r3
    2802:	d33a      	bcc.n	287a <rt_smem_alloc+0x146>
                 * struct rt_small_mem_item would fit in but no data between mem2 and mem2->next
                 * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
                 *       region that couldn't hold data, but when mem->next gets freed,
                 *       the 2 regions would be combined, resulting in more free memory
                 */
                ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
    2804:	69fa      	ldr	r2, [r7, #28]
    2806:	683b      	ldr	r3, [r7, #0]
    2808:	18d3      	adds	r3, r2, r3
    280a:	330c      	adds	r3, #12
    280c:	613b      	str	r3, [r7, #16]

                /* create mem2 struct */
                mem2       = (struct rt_small_mem_item *)&small_mem->heap_ptr[ptr2];
    280e:	69bb      	ldr	r3, [r7, #24]
    2810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2812:	693b      	ldr	r3, [r7, #16]
    2814:	18d3      	adds	r3, r2, r3
    2816:	60fb      	str	r3, [r7, #12]
                mem2->pool_ptr = MEM_FREED();
    2818:	69bb      	ldr	r3, [r7, #24]
    281a:	2201      	movs	r2, #1
    281c:	4393      	bics	r3, r2
    281e:	001a      	movs	r2, r3
    2820:	68fb      	ldr	r3, [r7, #12]
    2822:	601a      	str	r2, [r3, #0]
                mem2->next = mem->next;
    2824:	697b      	ldr	r3, [r7, #20]
    2826:	685a      	ldr	r2, [r3, #4]
    2828:	68fb      	ldr	r3, [r7, #12]
    282a:	605a      	str	r2, [r3, #4]
                mem2->prev = ptr;
    282c:	68fb      	ldr	r3, [r7, #12]
    282e:	69fa      	ldr	r2, [r7, #28]
    2830:	609a      	str	r2, [r3, #8]
#ifdef RT_USING_MEMTRACE
                rt_smem_setname(mem2, "    ");
#endif /* RT_USING_MEMTRACE */

                /* and insert it between mem and mem->next */
                mem->next = ptr2;
    2832:	697b      	ldr	r3, [r7, #20]
    2834:	693a      	ldr	r2, [r7, #16]
    2836:	605a      	str	r2, [r3, #4]

                if (mem2->next != small_mem->mem_size_aligned + SIZEOF_STRUCT_MEM)
    2838:	68fb      	ldr	r3, [r7, #12]
    283a:	685a      	ldr	r2, [r3, #4]
    283c:	69bb      	ldr	r3, [r7, #24]
    283e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2840:	330c      	adds	r3, #12
    2842:	429a      	cmp	r2, r3
    2844:	d006      	beq.n	2854 <rt_smem_alloc+0x120>
                {
                    ((struct rt_small_mem_item *)&small_mem->heap_ptr[mem2->next])->prev = ptr2;
    2846:	69bb      	ldr	r3, [r7, #24]
    2848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    284a:	68fb      	ldr	r3, [r7, #12]
    284c:	685b      	ldr	r3, [r3, #4]
    284e:	18d3      	adds	r3, r2, r3
    2850:	693a      	ldr	r2, [r7, #16]
    2852:	609a      	str	r2, [r3, #8]
                }
                small_mem->parent.used += (size + SIZEOF_STRUCT_MEM);
    2854:	69bb      	ldr	r3, [r7, #24]
    2856:	6a1a      	ldr	r2, [r3, #32]
    2858:	683b      	ldr	r3, [r7, #0]
    285a:	18d3      	adds	r3, r2, r3
    285c:	330c      	adds	r3, #12
    285e:	001a      	movs	r2, r3
    2860:	69bb      	ldr	r3, [r7, #24]
    2862:	621a      	str	r2, [r3, #32]
                if (small_mem->parent.max < small_mem->parent.used)
    2864:	69bb      	ldr	r3, [r7, #24]
    2866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2868:	69bb      	ldr	r3, [r7, #24]
    286a:	6a1b      	ldr	r3, [r3, #32]
    286c:	429a      	cmp	r2, r3
    286e:	d21a      	bcs.n	28a6 <rt_smem_alloc+0x172>
                    small_mem->parent.max = small_mem->parent.used;
    2870:	69bb      	ldr	r3, [r7, #24]
    2872:	6a1a      	ldr	r2, [r3, #32]
    2874:	69bb      	ldr	r3, [r7, #24]
    2876:	625a      	str	r2, [r3, #36]	; 0x24
    2878:	e015      	b.n	28a6 <rt_smem_alloc+0x172>
                 * take care of this).
                 * -> near fit or excact fit: do not split, no mem2 creation
                 * also can't move mem->next directly behind mem, since mem->next
                 * will always be used at this point!
                 */
                small_mem->parent.used += mem->next - ((rt_uint8_t *)mem - small_mem->heap_ptr);
    287a:	69bb      	ldr	r3, [r7, #24]
    287c:	6a1a      	ldr	r2, [r3, #32]
    287e:	697b      	ldr	r3, [r7, #20]
    2880:	6859      	ldr	r1, [r3, #4]
    2882:	69bb      	ldr	r3, [r7, #24]
    2884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2886:	6978      	ldr	r0, [r7, #20]
    2888:	1ac3      	subs	r3, r0, r3
    288a:	1acb      	subs	r3, r1, r3
    288c:	18d2      	adds	r2, r2, r3
    288e:	69bb      	ldr	r3, [r7, #24]
    2890:	621a      	str	r2, [r3, #32]
                if (small_mem->parent.max < small_mem->parent.used)
    2892:	69bb      	ldr	r3, [r7, #24]
    2894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2896:	69bb      	ldr	r3, [r7, #24]
    2898:	6a1b      	ldr	r3, [r3, #32]
    289a:	429a      	cmp	r2, r3
    289c:	d203      	bcs.n	28a6 <rt_smem_alloc+0x172>
                    small_mem->parent.max = small_mem->parent.used;
    289e:	69bb      	ldr	r3, [r7, #24]
    28a0:	6a1a      	ldr	r2, [r3, #32]
    28a2:	69bb      	ldr	r3, [r7, #24]
    28a4:	625a      	str	r2, [r3, #36]	; 0x24
            }
            /* set small memory object */
            mem->pool_ptr = MEM_USED();
    28a6:	69bb      	ldr	r3, [r7, #24]
    28a8:	2201      	movs	r2, #1
    28aa:	431a      	orrs	r2, r3
    28ac:	697b      	ldr	r3, [r7, #20]
    28ae:	601a      	str	r2, [r3, #0]
                rt_smem_setname(mem, rt_thread_self()->name);
            else
                rt_smem_setname(mem, "NONE");
#endif /* RT_USING_MEMTRACE */

            if (mem == small_mem->lfree)
    28b0:	69bb      	ldr	r3, [r7, #24]
    28b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    28b4:	697a      	ldr	r2, [r7, #20]
    28b6:	429a      	cmp	r2, r3
    28b8:	d128      	bne.n	290c <rt_smem_alloc+0x1d8>
            {
                /* Find next free block after mem and update lowest free pointer */
                while (MEM_ISUSED(small_mem->lfree) && small_mem->lfree != small_mem->heap_end)
    28ba:	e007      	b.n	28cc <rt_smem_alloc+0x198>
                    small_mem->lfree = (struct rt_small_mem_item *)&small_mem->heap_ptr[small_mem->lfree->next];
    28bc:	69bb      	ldr	r3, [r7, #24]
    28be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    28c0:	69bb      	ldr	r3, [r7, #24]
    28c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    28c4:	685b      	ldr	r3, [r3, #4]
    28c6:	18d2      	adds	r2, r2, r3
    28c8:	69bb      	ldr	r3, [r7, #24]
    28ca:	631a      	str	r2, [r3, #48]	; 0x30
                while (MEM_ISUSED(small_mem->lfree) && small_mem->lfree != small_mem->heap_end)
    28cc:	69bb      	ldr	r3, [r7, #24]
    28ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    28d0:	681b      	ldr	r3, [r3, #0]
    28d2:	2201      	movs	r2, #1
    28d4:	4013      	ands	r3, r2
    28d6:	d005      	beq.n	28e4 <rt_smem_alloc+0x1b0>
    28d8:	69bb      	ldr	r3, [r7, #24]
    28da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    28dc:	69bb      	ldr	r3, [r7, #24]
    28de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28e0:	429a      	cmp	r2, r3
    28e2:	d1eb      	bne.n	28bc <rt_smem_alloc+0x188>

                RT_ASSERT(((small_mem->lfree == small_mem->heap_end) || (!MEM_ISUSED(small_mem->lfree))));
    28e4:	69bb      	ldr	r3, [r7, #24]
    28e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    28e8:	69bb      	ldr	r3, [r7, #24]
    28ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28ec:	429a      	cmp	r2, r3
    28ee:	d00d      	beq.n	290c <rt_smem_alloc+0x1d8>
    28f0:	69bb      	ldr	r3, [r7, #24]
    28f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    28f4:	681b      	ldr	r3, [r3, #0]
    28f6:	2201      	movs	r2, #1
    28f8:	4013      	ands	r3, r2
    28fa:	d007      	beq.n	290c <rt_smem_alloc+0x1d8>
    28fc:	2384      	movs	r3, #132	; 0x84
    28fe:	33ff      	adds	r3, #255	; 0xff
    2900:	001a      	movs	r2, r3
    2902:	4922      	ldr	r1, [pc, #136]	; (298c <rt_smem_alloc+0x258>)
    2904:	4b25      	ldr	r3, [pc, #148]	; (299c <rt_smem_alloc+0x268>)
    2906:	0018      	movs	r0, r3
    2908:	f001 fb62 	bl	3fd0 <rt_assert_handler>
            }
            RT_ASSERT((rt_ubase_t)mem + SIZEOF_STRUCT_MEM + size <= (rt_ubase_t)small_mem->heap_end);
    290c:	697a      	ldr	r2, [r7, #20]
    290e:	683b      	ldr	r3, [r7, #0]
    2910:	18d3      	adds	r3, r2, r3
    2912:	330c      	adds	r3, #12
    2914:	001a      	movs	r2, r3
    2916:	69bb      	ldr	r3, [r7, #24]
    2918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    291a:	429a      	cmp	r2, r3
    291c:	d907      	bls.n	292e <rt_smem_alloc+0x1fa>
    291e:	2386      	movs	r3, #134	; 0x86
    2920:	33ff      	adds	r3, #255	; 0xff
    2922:	001a      	movs	r2, r3
    2924:	4919      	ldr	r1, [pc, #100]	; (298c <rt_smem_alloc+0x258>)
    2926:	4b1e      	ldr	r3, [pc, #120]	; (29a0 <rt_smem_alloc+0x26c>)
    2928:	0018      	movs	r0, r3
    292a:	f001 fb51 	bl	3fd0 <rt_assert_handler>
            RT_ASSERT((rt_ubase_t)((rt_uint8_t *)mem + SIZEOF_STRUCT_MEM) % RT_ALIGN_SIZE == 0);
    292e:	697b      	ldr	r3, [r7, #20]
    2930:	330c      	adds	r3, #12
    2932:	001a      	movs	r2, r3
    2934:	2303      	movs	r3, #3
    2936:	4013      	ands	r3, r2
    2938:	d006      	beq.n	2948 <rt_smem_alloc+0x214>
    293a:	23c3      	movs	r3, #195	; 0xc3
    293c:	005a      	lsls	r2, r3, #1
    293e:	4913      	ldr	r1, [pc, #76]	; (298c <rt_smem_alloc+0x258>)
    2940:	4b18      	ldr	r3, [pc, #96]	; (29a4 <rt_smem_alloc+0x270>)
    2942:	0018      	movs	r0, r3
    2944:	f001 fb44 	bl	3fd0 <rt_assert_handler>
            RT_ASSERT((((rt_ubase_t)mem) & (RT_ALIGN_SIZE - 1)) == 0);
    2948:	697b      	ldr	r3, [r7, #20]
    294a:	2203      	movs	r2, #3
    294c:	4013      	ands	r3, r2
    294e:	d007      	beq.n	2960 <rt_smem_alloc+0x22c>
    2950:	2388      	movs	r3, #136	; 0x88
    2952:	33ff      	adds	r3, #255	; 0xff
    2954:	001a      	movs	r2, r3
    2956:	490d      	ldr	r1, [pc, #52]	; (298c <rt_smem_alloc+0x258>)
    2958:	4b13      	ldr	r3, [pc, #76]	; (29a8 <rt_smem_alloc+0x274>)
    295a:	0018      	movs	r0, r3
    295c:	f001 fb38 	bl	3fd0 <rt_assert_handler>
                         ("allocate memory at 0x%x, size: %d\n",
                          (rt_ubase_t)((rt_uint8_t *)mem + SIZEOF_STRUCT_MEM),
                          (rt_ubase_t)(mem->next - ((rt_uint8_t *)mem - small_mem->heap_ptr))));

            /* return the memory data except mem struct */
            return (rt_uint8_t *)mem + SIZEOF_STRUCT_MEM;
    2960:	697b      	ldr	r3, [r7, #20]
    2962:	330c      	adds	r3, #12
    2964:	e00e      	b.n	2984 <rt_smem_alloc+0x250>
         ptr = ((struct rt_small_mem_item *)&small_mem->heap_ptr[ptr])->next)
    2966:	69bb      	ldr	r3, [r7, #24]
    2968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    296a:	69fb      	ldr	r3, [r7, #28]
    296c:	18d3      	adds	r3, r2, r3
    296e:	685b      	ldr	r3, [r3, #4]
    2970:	61fb      	str	r3, [r7, #28]
         ptr <= small_mem->mem_size_aligned - size;
    2972:	69bb      	ldr	r3, [r7, #24]
    2974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2976:	683b      	ldr	r3, [r7, #0]
    2978:	1ad3      	subs	r3, r2, r3
    297a:	69fa      	ldr	r2, [r7, #28]
    297c:	429a      	cmp	r2, r3
    297e:	d800      	bhi.n	2982 <rt_smem_alloc+0x24e>
    2980:	e722      	b.n	27c8 <rt_smem_alloc+0x94>
        }
    }

    return RT_NULL;
    2982:	2300      	movs	r3, #0
}
    2984:	0018      	movs	r0, r3
    2986:	46bd      	mov	sp, r7
    2988:	b008      	add	sp, #32
    298a:	bd80      	pop	{r7, pc}
    298c:	0000bc68 	.word	0x0000bc68
    2990:	0000b8d8 	.word	0x0000b8d8
    2994:	0000b8e8 	.word	0x0000b8e8
    2998:	0000b924 	.word	0x0000b924
    299c:	0000b94c 	.word	0x0000b94c
    29a0:	0000b99c 	.word	0x0000b99c
    29a4:	0000b9ec 	.word	0x0000b9ec
    29a8:	0000ba38 	.word	0x0000ba38

000029ac <rt_smem_realloc>:
 * @param newsize is the required new size.
 *
 * @return the changed memory block address.
 */
void *rt_smem_realloc(rt_smem_t m, void *rmem, rt_size_t newsize)
{
    29ac:	b580      	push	{r7, lr}
    29ae:	b08c      	sub	sp, #48	; 0x30
    29b0:	af00      	add	r7, sp, #0
    29b2:	60f8      	str	r0, [r7, #12]
    29b4:	60b9      	str	r1, [r7, #8]
    29b6:	607a      	str	r2, [r7, #4]
    rt_size_t ptr, ptr2;
    struct rt_small_mem_item *mem, *mem2;
    struct rt_small_mem *small_mem;
    void *nmem;

    RT_ASSERT(m != RT_NULL);
    29b8:	68fb      	ldr	r3, [r7, #12]
    29ba:	2b00      	cmp	r3, #0
    29bc:	d106      	bne.n	29cc <rt_smem_realloc+0x20>
    29be:	23d5      	movs	r3, #213	; 0xd5
    29c0:	005a      	lsls	r2, r3, #1
    29c2:	496f      	ldr	r1, [pc, #444]	; (2b80 <rt_smem_realloc+0x1d4>)
    29c4:	4b6f      	ldr	r3, [pc, #444]	; (2b84 <rt_smem_realloc+0x1d8>)
    29c6:	0018      	movs	r0, r3
    29c8:	f001 fb02 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&m->parent) == RT_Object_Class_Memory);
    29cc:	68fb      	ldr	r3, [r7, #12]
    29ce:	0018      	movs	r0, r3
    29d0:	f000 fb66 	bl	30a0 <rt_object_get_type>
    29d4:	0003      	movs	r3, r0
    29d6:	2b0c      	cmp	r3, #12
    29d8:	d007      	beq.n	29ea <rt_smem_realloc+0x3e>
    29da:	23ac      	movs	r3, #172	; 0xac
    29dc:	33ff      	adds	r3, #255	; 0xff
    29de:	001a      	movs	r2, r3
    29e0:	4967      	ldr	r1, [pc, #412]	; (2b80 <rt_smem_realloc+0x1d4>)
    29e2:	4b69      	ldr	r3, [pc, #420]	; (2b88 <rt_smem_realloc+0x1dc>)
    29e4:	0018      	movs	r0, r3
    29e6:	f001 faf3 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&m->parent));
    29ea:	68fb      	ldr	r3, [r7, #12]
    29ec:	0018      	movs	r0, r3
    29ee:	f000 fb39 	bl	3064 <rt_object_is_systemobject>
    29f2:	1e03      	subs	r3, r0, #0
    29f4:	d106      	bne.n	2a04 <rt_smem_realloc+0x58>
    29f6:	23d6      	movs	r3, #214	; 0xd6
    29f8:	005a      	lsls	r2, r3, #1
    29fa:	4961      	ldr	r1, [pc, #388]	; (2b80 <rt_smem_realloc+0x1d4>)
    29fc:	4b63      	ldr	r3, [pc, #396]	; (2b8c <rt_smem_realloc+0x1e0>)
    29fe:	0018      	movs	r0, r3
    2a00:	f001 fae6 	bl	3fd0 <rt_assert_handler>

    small_mem = (struct rt_small_mem *)m;
    2a04:	68fb      	ldr	r3, [r7, #12]
    2a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* alignment size */
    newsize = RT_ALIGN(newsize, RT_ALIGN_SIZE);
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	3303      	adds	r3, #3
    2a0c:	2203      	movs	r2, #3
    2a0e:	4393      	bics	r3, r2
    2a10:	607b      	str	r3, [r7, #4]
    if (newsize > small_mem->mem_size_aligned)
    2a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2a16:	687a      	ldr	r2, [r7, #4]
    2a18:	429a      	cmp	r2, r3
    2a1a:	d901      	bls.n	2a20 <rt_smem_realloc+0x74>
    {
        RT_DEBUG_LOG(RT_DEBUG_MEM, ("realloc: out of memory\n"));

        return RT_NULL;
    2a1c:	2300      	movs	r3, #0
    2a1e:	e0ab      	b.n	2b78 <rt_smem_realloc+0x1cc>
    }
    else if (newsize == 0)
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	2b00      	cmp	r3, #0
    2a24:	d105      	bne.n	2a32 <rt_smem_realloc+0x86>
    {
        rt_smem_free(rmem);
    2a26:	68bb      	ldr	r3, [r7, #8]
    2a28:	0018      	movs	r0, r3
    2a2a:	f000 f8b7 	bl	2b9c <rt_smem_free>
        return RT_NULL;
    2a2e:	2300      	movs	r3, #0
    2a30:	e0a2      	b.n	2b78 <rt_smem_realloc+0x1cc>
    }

    /* allocate a new memory block */
    if (rmem == RT_NULL)
    2a32:	68bb      	ldr	r3, [r7, #8]
    2a34:	2b00      	cmp	r3, #0
    2a36:	d107      	bne.n	2a48 <rt_smem_realloc+0x9c>
        return rt_smem_alloc(&small_mem->parent, newsize);
    2a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2a3a:	687a      	ldr	r2, [r7, #4]
    2a3c:	0011      	movs	r1, r2
    2a3e:	0018      	movs	r0, r3
    2a40:	f7ff fe78 	bl	2734 <rt_smem_alloc>
    2a44:	0003      	movs	r3, r0
    2a46:	e097      	b.n	2b78 <rt_smem_realloc+0x1cc>

    RT_ASSERT((((rt_ubase_t)rmem) & (RT_ALIGN_SIZE - 1)) == 0);
    2a48:	68bb      	ldr	r3, [r7, #8]
    2a4a:	2203      	movs	r2, #3
    2a4c:	4013      	ands	r3, r2
    2a4e:	d007      	beq.n	2a60 <rt_smem_realloc+0xb4>
    2a50:	23c2      	movs	r3, #194	; 0xc2
    2a52:	33ff      	adds	r3, #255	; 0xff
    2a54:	001a      	movs	r2, r3
    2a56:	494a      	ldr	r1, [pc, #296]	; (2b80 <rt_smem_realloc+0x1d4>)
    2a58:	4b4d      	ldr	r3, [pc, #308]	; (2b90 <rt_smem_realloc+0x1e4>)
    2a5a:	0018      	movs	r0, r3
    2a5c:	f001 fab8 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT((rt_uint8_t *)rmem >= (rt_uint8_t *)small_mem->heap_ptr);
    2a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a64:	68ba      	ldr	r2, [r7, #8]
    2a66:	429a      	cmp	r2, r3
    2a68:	d206      	bcs.n	2a78 <rt_smem_realloc+0xcc>
    2a6a:	23e1      	movs	r3, #225	; 0xe1
    2a6c:	005a      	lsls	r2, r3, #1
    2a6e:	4944      	ldr	r1, [pc, #272]	; (2b80 <rt_smem_realloc+0x1d4>)
    2a70:	4b48      	ldr	r3, [pc, #288]	; (2b94 <rt_smem_realloc+0x1e8>)
    2a72:	0018      	movs	r0, r3
    2a74:	f001 faac 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT((rt_uint8_t *)rmem < (rt_uint8_t *)small_mem->heap_end);
    2a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2a7c:	68ba      	ldr	r2, [r7, #8]
    2a7e:	429a      	cmp	r2, r3
    2a80:	d307      	bcc.n	2a92 <rt_smem_realloc+0xe6>
    2a82:	23c4      	movs	r3, #196	; 0xc4
    2a84:	33ff      	adds	r3, #255	; 0xff
    2a86:	001a      	movs	r2, r3
    2a88:	493d      	ldr	r1, [pc, #244]	; (2b80 <rt_smem_realloc+0x1d4>)
    2a8a:	4b43      	ldr	r3, [pc, #268]	; (2b98 <rt_smem_realloc+0x1ec>)
    2a8c:	0018      	movs	r0, r3
    2a8e:	f001 fa9f 	bl	3fd0 <rt_assert_handler>

    mem = (struct rt_small_mem_item *)((rt_uint8_t *)rmem - SIZEOF_STRUCT_MEM);
    2a92:	68bb      	ldr	r3, [r7, #8]
    2a94:	3b0c      	subs	r3, #12
    2a96:	62bb      	str	r3, [r7, #40]	; 0x28

    /* current memory block size */
    ptr = (rt_uint8_t *)mem - small_mem->heap_ptr;
    2a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2a9e:	1ad3      	subs	r3, r2, r3
    2aa0:	627b      	str	r3, [r7, #36]	; 0x24
    size = mem->next - ptr - SIZEOF_STRUCT_MEM;
    2aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2aa4:	685a      	ldr	r2, [r3, #4]
    2aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2aa8:	1ad3      	subs	r3, r2, r3
    2aaa:	3b0c      	subs	r3, #12
    2aac:	623b      	str	r3, [r7, #32]
    if (size == newsize)
    2aae:	6a3a      	ldr	r2, [r7, #32]
    2ab0:	687b      	ldr	r3, [r7, #4]
    2ab2:	429a      	cmp	r2, r3
    2ab4:	d101      	bne.n	2aba <rt_smem_realloc+0x10e>
    {
        /* the size is the same as */
        return rmem;
    2ab6:	68bb      	ldr	r3, [r7, #8]
    2ab8:	e05e      	b.n	2b78 <rt_smem_realloc+0x1cc>
    }

    if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE < size)
    2aba:	687b      	ldr	r3, [r7, #4]
    2abc:	3318      	adds	r3, #24
    2abe:	6a3a      	ldr	r2, [r7, #32]
    2ac0:	429a      	cmp	r2, r3
    2ac2:	d93f      	bls.n	2b44 <rt_smem_realloc+0x198>
    {
        /* split memory block */
        small_mem->parent.used -= (size - newsize);
    2ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ac6:	6a1a      	ldr	r2, [r3, #32]
    2ac8:	6879      	ldr	r1, [r7, #4]
    2aca:	6a3b      	ldr	r3, [r7, #32]
    2acc:	1acb      	subs	r3, r1, r3
    2ace:	18d2      	adds	r2, r2, r3
    2ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ad2:	621a      	str	r2, [r3, #32]

        ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    2ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	18d3      	adds	r3, r2, r3
    2ada:	330c      	adds	r3, #12
    2adc:	61bb      	str	r3, [r7, #24]
        mem2 = (struct rt_small_mem_item *)&small_mem->heap_ptr[ptr2];
    2ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2ae2:	69bb      	ldr	r3, [r7, #24]
    2ae4:	18d3      	adds	r3, r2, r3
    2ae6:	617b      	str	r3, [r7, #20]
        mem2->pool_ptr = MEM_FREED();
    2ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2aea:	2201      	movs	r2, #1
    2aec:	4393      	bics	r3, r2
    2aee:	001a      	movs	r2, r3
    2af0:	697b      	ldr	r3, [r7, #20]
    2af2:	601a      	str	r2, [r3, #0]
        mem2->next = mem->next;
    2af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2af6:	685a      	ldr	r2, [r3, #4]
    2af8:	697b      	ldr	r3, [r7, #20]
    2afa:	605a      	str	r2, [r3, #4]
        mem2->prev = ptr;
    2afc:	697b      	ldr	r3, [r7, #20]
    2afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2b00:	609a      	str	r2, [r3, #8]
#ifdef RT_USING_MEMTRACE
        rt_smem_setname(mem2, "    ");
#endif /* RT_USING_MEMTRACE */
        mem->next = ptr2;
    2b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b04:	69ba      	ldr	r2, [r7, #24]
    2b06:	605a      	str	r2, [r3, #4]
        if (mem2->next != small_mem->mem_size_aligned + SIZEOF_STRUCT_MEM)
    2b08:	697b      	ldr	r3, [r7, #20]
    2b0a:	685a      	ldr	r2, [r3, #4]
    2b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2b10:	330c      	adds	r3, #12
    2b12:	429a      	cmp	r2, r3
    2b14:	d006      	beq.n	2b24 <rt_smem_realloc+0x178>
        {
            ((struct rt_small_mem_item *)&small_mem->heap_ptr[mem2->next])->prev = ptr2;
    2b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2b1a:	697b      	ldr	r3, [r7, #20]
    2b1c:	685b      	ldr	r3, [r3, #4]
    2b1e:	18d3      	adds	r3, r2, r3
    2b20:	69ba      	ldr	r2, [r7, #24]
    2b22:	609a      	str	r2, [r3, #8]
        }

        if (mem2 < small_mem->lfree)
    2b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b28:	697a      	ldr	r2, [r7, #20]
    2b2a:	429a      	cmp	r2, r3
    2b2c:	d202      	bcs.n	2b34 <rt_smem_realloc+0x188>
        {
            /* the splited struct is now the lowest */
            small_mem->lfree = mem2;
    2b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b30:	697a      	ldr	r2, [r7, #20]
    2b32:	631a      	str	r2, [r3, #48]	; 0x30
        }

        plug_holes(small_mem, mem2);
    2b34:	697a      	ldr	r2, [r7, #20]
    2b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b38:	0011      	movs	r1, r2
    2b3a:	0018      	movs	r0, r3
    2b3c:	f7ff fcfa 	bl	2534 <plug_holes>

        return rmem;
    2b40:	68bb      	ldr	r3, [r7, #8]
    2b42:	e019      	b.n	2b78 <rt_smem_realloc+0x1cc>
    }

    /* expand memory */
    nmem = rt_smem_alloc(&small_mem->parent, newsize);
    2b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b46:	687a      	ldr	r2, [r7, #4]
    2b48:	0011      	movs	r1, r2
    2b4a:	0018      	movs	r0, r3
    2b4c:	f7ff fdf2 	bl	2734 <rt_smem_alloc>
    2b50:	0003      	movs	r3, r0
    2b52:	61fb      	str	r3, [r7, #28]
    if (nmem != RT_NULL) /* check memory */
    2b54:	69fb      	ldr	r3, [r7, #28]
    2b56:	2b00      	cmp	r3, #0
    2b58:	d00d      	beq.n	2b76 <rt_smem_realloc+0x1ca>
    {
        rt_memcpy(nmem, rmem, size < newsize ? size : newsize);
    2b5a:	6a3a      	ldr	r2, [r7, #32]
    2b5c:	687b      	ldr	r3, [r7, #4]
    2b5e:	4293      	cmp	r3, r2
    2b60:	d900      	bls.n	2b64 <rt_smem_realloc+0x1b8>
    2b62:	0013      	movs	r3, r2
    2b64:	68b9      	ldr	r1, [r7, #8]
    2b66:	69f8      	ldr	r0, [r7, #28]
    2b68:	001a      	movs	r2, r3
    2b6a:	f000 fb8e 	bl	328a <rt_memcpy>
        rt_smem_free(rmem);
    2b6e:	68bb      	ldr	r3, [r7, #8]
    2b70:	0018      	movs	r0, r3
    2b72:	f000 f813 	bl	2b9c <rt_smem_free>
    }

    return nmem;
    2b76:	69fb      	ldr	r3, [r7, #28]
}
    2b78:	0018      	movs	r0, r3
    2b7a:	46bd      	mov	sp, r7
    2b7c:	b00c      	add	sp, #48	; 0x30
    2b7e:	bd80      	pop	{r7, pc}
    2b80:	0000bc78 	.word	0x0000bc78
    2b84:	0000b8d8 	.word	0x0000b8d8
    2b88:	0000b8e8 	.word	0x0000b8e8
    2b8c:	0000b924 	.word	0x0000b924
    2b90:	0000ba68 	.word	0x0000ba68
    2b94:	0000ba98 	.word	0x0000ba98
    2b98:	0000bad0 	.word	0x0000bad0

00002b9c <rt_smem_free>:
 *        rt_mem_alloc. The released memory block is taken back to system heap.
 *
 * @param rmem the address of memory which will be released.
 */
void rt_smem_free(void *rmem)
{
    2b9c:	b580      	push	{r7, lr}
    2b9e:	b084      	sub	sp, #16
    2ba0:	af00      	add	r7, sp, #0
    2ba2:	6078      	str	r0, [r7, #4]
    struct rt_small_mem_item *mem;
    struct rt_small_mem *small_mem;

    if (rmem == RT_NULL)
    2ba4:	687b      	ldr	r3, [r7, #4]
    2ba6:	2b00      	cmp	r3, #0
    2ba8:	d100      	bne.n	2bac <rt_smem_free+0x10>
    2baa:	e085      	b.n	2cb8 <rt_smem_free+0x11c>
        return;

    RT_ASSERT((((rt_ubase_t)rmem) & (RT_ALIGN_SIZE - 1)) == 0);
    2bac:	687b      	ldr	r3, [r7, #4]
    2bae:	2203      	movs	r2, #3
    2bb0:	4013      	ands	r3, r2
    2bb2:	d006      	beq.n	2bc2 <rt_smem_free+0x26>
    2bb4:	2382      	movs	r3, #130	; 0x82
    2bb6:	009a      	lsls	r2, r3, #2
    2bb8:	4941      	ldr	r1, [pc, #260]	; (2cc0 <rt_smem_free+0x124>)
    2bba:	4b42      	ldr	r3, [pc, #264]	; (2cc4 <rt_smem_free+0x128>)
    2bbc:	0018      	movs	r0, r3
    2bbe:	f001 fa07 	bl	3fd0 <rt_assert_handler>

    /* Get the corresponding struct rt_small_mem_item ... */
    mem = (struct rt_small_mem_item *)((rt_uint8_t *)rmem - SIZEOF_STRUCT_MEM);
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	3b0c      	subs	r3, #12
    2bc6:	60fb      	str	r3, [r7, #12]
                 ("release memory 0x%x, size: %d\n",
                  (rt_ubase_t)rmem,
                  (rt_ubase_t)(mem->next - ((rt_uint8_t *)mem - small_mem->heap_ptr))));

    /* ... which has to be in a used state ... */
    small_mem = MEM_POOL(mem);
    2bc8:	68fb      	ldr	r3, [r7, #12]
    2bca:	681b      	ldr	r3, [r3, #0]
    2bcc:	2201      	movs	r2, #1
    2bce:	4393      	bics	r3, r2
    2bd0:	60bb      	str	r3, [r7, #8]
    RT_ASSERT(small_mem != RT_NULL);
    2bd2:	68bb      	ldr	r3, [r7, #8]
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	d106      	bne.n	2be6 <rt_smem_free+0x4a>
    2bd8:	2385      	movs	r3, #133	; 0x85
    2bda:	009a      	lsls	r2, r3, #2
    2bdc:	4938      	ldr	r1, [pc, #224]	; (2cc0 <rt_smem_free+0x124>)
    2bde:	4b3a      	ldr	r3, [pc, #232]	; (2cc8 <rt_smem_free+0x12c>)
    2be0:	0018      	movs	r0, r3
    2be2:	f001 f9f5 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(MEM_ISUSED(mem));
    2be6:	68fb      	ldr	r3, [r7, #12]
    2be8:	681b      	ldr	r3, [r3, #0]
    2bea:	2201      	movs	r2, #1
    2bec:	4013      	ands	r3, r2
    2bee:	d105      	bne.n	2bfc <rt_smem_free+0x60>
    2bf0:	4a36      	ldr	r2, [pc, #216]	; (2ccc <rt_smem_free+0x130>)
    2bf2:	4933      	ldr	r1, [pc, #204]	; (2cc0 <rt_smem_free+0x124>)
    2bf4:	4b36      	ldr	r3, [pc, #216]	; (2cd0 <rt_smem_free+0x134>)
    2bf6:	0018      	movs	r0, r3
    2bf8:	f001 f9ea 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&small_mem->parent.parent) == RT_Object_Class_Memory);
    2bfc:	68bb      	ldr	r3, [r7, #8]
    2bfe:	0018      	movs	r0, r3
    2c00:	f000 fa4e 	bl	30a0 <rt_object_get_type>
    2c04:	0003      	movs	r3, r0
    2c06:	2b0c      	cmp	r3, #12
    2c08:	d005      	beq.n	2c16 <rt_smem_free+0x7a>
    2c0a:	4a32      	ldr	r2, [pc, #200]	; (2cd4 <rt_smem_free+0x138>)
    2c0c:	492c      	ldr	r1, [pc, #176]	; (2cc0 <rt_smem_free+0x124>)
    2c0e:	4b32      	ldr	r3, [pc, #200]	; (2cd8 <rt_smem_free+0x13c>)
    2c10:	0018      	movs	r0, r3
    2c12:	f001 f9dd 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&small_mem->parent.parent));
    2c16:	68bb      	ldr	r3, [r7, #8]
    2c18:	0018      	movs	r0, r3
    2c1a:	f000 fa23 	bl	3064 <rt_object_is_systemobject>
    2c1e:	1e03      	subs	r3, r0, #0
    2c20:	d105      	bne.n	2c2e <rt_smem_free+0x92>
    2c22:	4a2e      	ldr	r2, [pc, #184]	; (2cdc <rt_smem_free+0x140>)
    2c24:	4926      	ldr	r1, [pc, #152]	; (2cc0 <rt_smem_free+0x124>)
    2c26:	4b2e      	ldr	r3, [pc, #184]	; (2ce0 <rt_smem_free+0x144>)
    2c28:	0018      	movs	r0, r3
    2c2a:	f001 f9d1 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT((rt_uint8_t *)rmem >= (rt_uint8_t *)small_mem->heap_ptr &&
    2c2e:	68bb      	ldr	r3, [r7, #8]
    2c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c32:	687a      	ldr	r2, [r7, #4]
    2c34:	429a      	cmp	r2, r3
    2c36:	d304      	bcc.n	2c42 <rt_smem_free+0xa6>
    2c38:	68bb      	ldr	r3, [r7, #8]
    2c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c3c:	687a      	ldr	r2, [r7, #4]
    2c3e:	429a      	cmp	r2, r3
    2c40:	d306      	bcc.n	2c50 <rt_smem_free+0xb4>
    2c42:	2386      	movs	r3, #134	; 0x86
    2c44:	009a      	lsls	r2, r3, #2
    2c46:	491e      	ldr	r1, [pc, #120]	; (2cc0 <rt_smem_free+0x124>)
    2c48:	4b26      	ldr	r3, [pc, #152]	; (2ce4 <rt_smem_free+0x148>)
    2c4a:	0018      	movs	r0, r3
    2c4c:	f001 f9c0 	bl	3fd0 <rt_assert_handler>
              (rt_uint8_t *)rmem < (rt_uint8_t *)small_mem->heap_end);
    RT_ASSERT(MEM_POOL(&small_mem->heap_ptr[mem->next]) == small_mem);
    2c50:	68bb      	ldr	r3, [r7, #8]
    2c52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2c54:	68fb      	ldr	r3, [r7, #12]
    2c56:	685b      	ldr	r3, [r3, #4]
    2c58:	18d3      	adds	r3, r2, r3
    2c5a:	681b      	ldr	r3, [r3, #0]
    2c5c:	2201      	movs	r2, #1
    2c5e:	4393      	bics	r3, r2
    2c60:	001a      	movs	r2, r3
    2c62:	68bb      	ldr	r3, [r7, #8]
    2c64:	4293      	cmp	r3, r2
    2c66:	d005      	beq.n	2c74 <rt_smem_free+0xd8>
    2c68:	4a1f      	ldr	r2, [pc, #124]	; (2ce8 <rt_smem_free+0x14c>)
    2c6a:	4915      	ldr	r1, [pc, #84]	; (2cc0 <rt_smem_free+0x124>)
    2c6c:	4b1f      	ldr	r3, [pc, #124]	; (2cec <rt_smem_free+0x150>)
    2c6e:	0018      	movs	r0, r3
    2c70:	f001 f9ae 	bl	3fd0 <rt_assert_handler>

    /* ... and is now unused. */
    mem->pool_ptr = MEM_FREED();
    2c74:	68bb      	ldr	r3, [r7, #8]
    2c76:	2201      	movs	r2, #1
    2c78:	4393      	bics	r3, r2
    2c7a:	001a      	movs	r2, r3
    2c7c:	68fb      	ldr	r3, [r7, #12]
    2c7e:	601a      	str	r2, [r3, #0]
#ifdef RT_USING_MEMTRACE
    rt_smem_setname(mem, "    ");
#endif /* RT_USING_MEMTRACE */

    if (mem < small_mem->lfree)
    2c80:	68bb      	ldr	r3, [r7, #8]
    2c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2c84:	68fa      	ldr	r2, [r7, #12]
    2c86:	429a      	cmp	r2, r3
    2c88:	d202      	bcs.n	2c90 <rt_smem_free+0xf4>
    {
        /* the newly freed struct is now the lowest */
        small_mem->lfree = mem;
    2c8a:	68bb      	ldr	r3, [r7, #8]
    2c8c:	68fa      	ldr	r2, [r7, #12]
    2c8e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    small_mem->parent.used -= (mem->next - ((rt_uint8_t *)mem - small_mem->heap_ptr));
    2c90:	68bb      	ldr	r3, [r7, #8]
    2c92:	6a1a      	ldr	r2, [r3, #32]
    2c94:	68bb      	ldr	r3, [r7, #8]
    2c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c98:	68f9      	ldr	r1, [r7, #12]
    2c9a:	1acb      	subs	r3, r1, r3
    2c9c:	0019      	movs	r1, r3
    2c9e:	68fb      	ldr	r3, [r7, #12]
    2ca0:	685b      	ldr	r3, [r3, #4]
    2ca2:	1acb      	subs	r3, r1, r3
    2ca4:	18d2      	adds	r2, r2, r3
    2ca6:	68bb      	ldr	r3, [r7, #8]
    2ca8:	621a      	str	r2, [r3, #32]

    /* finally, see if prev or next are free also */
    plug_holes(small_mem, mem);
    2caa:	68fa      	ldr	r2, [r7, #12]
    2cac:	68bb      	ldr	r3, [r7, #8]
    2cae:	0011      	movs	r1, r2
    2cb0:	0018      	movs	r0, r3
    2cb2:	f7ff fc3f 	bl	2534 <plug_holes>
    2cb6:	e000      	b.n	2cba <rt_smem_free+0x11e>
        return;
    2cb8:	46c0      	nop			; (mov r8, r8)
}
    2cba:	46bd      	mov	sp, r7
    2cbc:	b004      	add	sp, #16
    2cbe:	bd80      	pop	{r7, pc}
    2cc0:	0000bc88 	.word	0x0000bc88
    2cc4:	0000ba68 	.word	0x0000ba68
    2cc8:	0000bb08 	.word	0x0000bb08
    2ccc:	00000215 	.word	0x00000215
    2cd0:	0000bb20 	.word	0x0000bb20
    2cd4:	00000216 	.word	0x00000216
    2cd8:	0000bb30 	.word	0x0000bb30
    2cdc:	00000217 	.word	0x00000217
    2ce0:	0000bb78 	.word	0x0000bb78
    2ce4:	0000bbb0 	.word	0x0000bbb0
    2ce8:	0000021a 	.word	0x0000021a
    2cec:	0000bc24 	.word	0x0000bc24

00002cf0 <rt_tick_get>:
 * @brief    This function will return current tick from operating system startup.
 *
 * @return   Return current tick.
 */
rt_tick_t rt_tick_get(void)
{
    2cf0:	b580      	push	{r7, lr}
    2cf2:	af00      	add	r7, sp, #0
    /* return the global tick */
    return rt_tick;
    2cf4:	4b02      	ldr	r3, [pc, #8]	; (2d00 <rt_tick_get+0x10>)
    2cf6:	681b      	ldr	r3, [r3, #0]
}
    2cf8:	0018      	movs	r0, r3
    2cfa:	46bd      	mov	sp, r7
    2cfc:	bd80      	pop	{r7, pc}
    2cfe:	46c0      	nop			; (mov r8, r8)
    2d00:	1ffffd18 	.word	0x1ffffd18

00002d04 <rt_list_insert_after>:
{
    2d04:	b580      	push	{r7, lr}
    2d06:	b082      	sub	sp, #8
    2d08:	af00      	add	r7, sp, #0
    2d0a:	6078      	str	r0, [r7, #4]
    2d0c:	6039      	str	r1, [r7, #0]
    l->next->prev = n;
    2d0e:	687b      	ldr	r3, [r7, #4]
    2d10:	681b      	ldr	r3, [r3, #0]
    2d12:	683a      	ldr	r2, [r7, #0]
    2d14:	605a      	str	r2, [r3, #4]
    n->next = l->next;
    2d16:	687b      	ldr	r3, [r7, #4]
    2d18:	681a      	ldr	r2, [r3, #0]
    2d1a:	683b      	ldr	r3, [r7, #0]
    2d1c:	601a      	str	r2, [r3, #0]
    l->next = n;
    2d1e:	687b      	ldr	r3, [r7, #4]
    2d20:	683a      	ldr	r2, [r7, #0]
    2d22:	601a      	str	r2, [r3, #0]
    n->prev = l;
    2d24:	683b      	ldr	r3, [r7, #0]
    2d26:	687a      	ldr	r2, [r7, #4]
    2d28:	605a      	str	r2, [r3, #4]
}
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	46bd      	mov	sp, r7
    2d2e:	b002      	add	sp, #8
    2d30:	bd80      	pop	{r7, pc}

00002d32 <rt_list_remove>:
{
    2d32:	b580      	push	{r7, lr}
    2d34:	b082      	sub	sp, #8
    2d36:	af00      	add	r7, sp, #0
    2d38:	6078      	str	r0, [r7, #4]
    n->next->prev = n->prev;
    2d3a:	687b      	ldr	r3, [r7, #4]
    2d3c:	681b      	ldr	r3, [r3, #0]
    2d3e:	687a      	ldr	r2, [r7, #4]
    2d40:	6852      	ldr	r2, [r2, #4]
    2d42:	605a      	str	r2, [r3, #4]
    n->prev->next = n->next;
    2d44:	687b      	ldr	r3, [r7, #4]
    2d46:	685b      	ldr	r3, [r3, #4]
    2d48:	687a      	ldr	r2, [r7, #4]
    2d4a:	6812      	ldr	r2, [r2, #0]
    2d4c:	601a      	str	r2, [r3, #0]
    n->next = n->prev = n;
    2d4e:	687b      	ldr	r3, [r7, #4]
    2d50:	687a      	ldr	r2, [r7, #4]
    2d52:	605a      	str	r2, [r3, #4]
    2d54:	687b      	ldr	r3, [r7, #4]
    2d56:	685a      	ldr	r2, [r3, #4]
    2d58:	687b      	ldr	r3, [r7, #4]
    2d5a:	601a      	str	r2, [r3, #0]
}
    2d5c:	46c0      	nop			; (mov r8, r8)
    2d5e:	46bd      	mov	sp, r7
    2d60:	b002      	add	sp, #8
    2d62:	bd80      	pop	{r7, pc}

00002d64 <rt_object_get_information>:
 *
 * @return the object type information or RT_NULL
 */
struct rt_object_information *
rt_object_get_information(enum rt_object_class_type type)
{
    2d64:	b580      	push	{r7, lr}
    2d66:	b084      	sub	sp, #16
    2d68:	af00      	add	r7, sp, #0
    2d6a:	0002      	movs	r2, r0
    2d6c:	1dfb      	adds	r3, r7, #7
    2d6e:	701a      	strb	r2, [r3, #0]
    int index;

    for (index = 0; index < RT_Object_Info_Unknown; index ++)
    2d70:	2300      	movs	r3, #0
    2d72:	60fb      	str	r3, [r7, #12]
    2d74:	e00f      	b.n	2d96 <rt_object_get_information+0x32>
        if (_object_container[index].type == type) return &_object_container[index];
    2d76:	4b0c      	ldr	r3, [pc, #48]	; (2da8 <rt_object_get_information+0x44>)
    2d78:	68fa      	ldr	r2, [r7, #12]
    2d7a:	0112      	lsls	r2, r2, #4
    2d7c:	5cd3      	ldrb	r3, [r2, r3]
    2d7e:	1dfa      	adds	r2, r7, #7
    2d80:	7812      	ldrb	r2, [r2, #0]
    2d82:	429a      	cmp	r2, r3
    2d84:	d104      	bne.n	2d90 <rt_object_get_information+0x2c>
    2d86:	68fb      	ldr	r3, [r7, #12]
    2d88:	011a      	lsls	r2, r3, #4
    2d8a:	4b07      	ldr	r3, [pc, #28]	; (2da8 <rt_object_get_information+0x44>)
    2d8c:	18d3      	adds	r3, r2, r3
    2d8e:	e006      	b.n	2d9e <rt_object_get_information+0x3a>
    for (index = 0; index < RT_Object_Info_Unknown; index ++)
    2d90:	68fb      	ldr	r3, [r7, #12]
    2d92:	3301      	adds	r3, #1
    2d94:	60fb      	str	r3, [r7, #12]
    2d96:	68fb      	ldr	r3, [r7, #12]
    2d98:	2b09      	cmp	r3, #9
    2d9a:	ddec      	ble.n	2d76 <rt_object_get_information+0x12>

    return RT_NULL;
    2d9c:	2300      	movs	r3, #0
}
    2d9e:	0018      	movs	r0, r3
    2da0:	46bd      	mov	sp, r7
    2da2:	b004      	add	sp, #16
    2da4:	bd80      	pop	{r7, pc}
    2da6:	46c0      	nop			; (mov r8, r8)
    2da8:	1ffff0d4 	.word	0x1ffff0d4

00002dac <rt_object_init>:
 * @param name is the object name. In system, the object's name must be unique.
 */
void rt_object_init(struct rt_object         *object,
                    enum rt_object_class_type type,
                    const char               *name)
{
    2dac:	b590      	push	{r4, r7, lr}
    2dae:	b089      	sub	sp, #36	; 0x24
    2db0:	af00      	add	r7, sp, #0
    2db2:	60f8      	str	r0, [r7, #12]
    2db4:	607a      	str	r2, [r7, #4]
    2db6:	200b      	movs	r0, #11
    2db8:	183b      	adds	r3, r7, r0
    2dba:	1c0a      	adds	r2, r1, #0
    2dbc:	701a      	strb	r2, [r3, #0]
    register rt_base_t temp;
    struct rt_list_node *node = RT_NULL;
    2dbe:	2300      	movs	r3, #0
    2dc0:	61fb      	str	r3, [r7, #28]
#ifdef RT_USING_MODULE
    struct rt_dlmodule *module = dlmodule_self();
#endif /* RT_USING_MODULE */

    /* get object information */
    information = rt_object_get_information(type);
    2dc2:	183b      	adds	r3, r7, r0
    2dc4:	781b      	ldrb	r3, [r3, #0]
    2dc6:	0018      	movs	r0, r3
    2dc8:	f7ff ffcc 	bl	2d64 <rt_object_get_information>
    2dcc:	0003      	movs	r3, r0
    2dce:	61bb      	str	r3, [r7, #24]
    RT_ASSERT(information != RT_NULL);
    2dd0:	69bb      	ldr	r3, [r7, #24]
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d106      	bne.n	2de4 <rt_object_init+0x38>
    2dd6:	23ab      	movs	r3, #171	; 0xab
    2dd8:	005a      	lsls	r2, r3, #1
    2dda:	4928      	ldr	r1, [pc, #160]	; (2e7c <rt_object_init+0xd0>)
    2ddc:	4b28      	ldr	r3, [pc, #160]	; (2e80 <rt_object_init+0xd4>)
    2dde:	0018      	movs	r0, r3
    2de0:	f001 f8f6 	bl	3fd0 <rt_assert_handler>

    /* check object type to avoid re-initialization */

    /* enter critical */
    rt_enter_critical();
    2de4:	f7fe fe5a 	bl	1a9c <rt_enter_critical>
    /* try to find object */
    for (node  = information->object_list.next;
    2de8:	69bb      	ldr	r3, [r7, #24]
    2dea:	685b      	ldr	r3, [r3, #4]
    2dec:	61fb      	str	r3, [r7, #28]
    2dee:	e013      	b.n	2e18 <rt_object_init+0x6c>
            node != &(information->object_list);
            node  = node->next)
    {
        struct rt_object *obj;

        obj = rt_list_entry(node, struct rt_object, list);
    2df0:	69fb      	ldr	r3, [r7, #28]
    2df2:	3b0c      	subs	r3, #12
    2df4:	617b      	str	r3, [r7, #20]
        if (obj) /* skip warning when disable debug */
    2df6:	697b      	ldr	r3, [r7, #20]
    2df8:	2b00      	cmp	r3, #0
    2dfa:	d00a      	beq.n	2e12 <rt_object_init+0x66>
        {
            RT_ASSERT(obj != object);
    2dfc:	697a      	ldr	r2, [r7, #20]
    2dfe:	68fb      	ldr	r3, [r7, #12]
    2e00:	429a      	cmp	r2, r3
    2e02:	d106      	bne.n	2e12 <rt_object_init+0x66>
    2e04:	23b3      	movs	r3, #179	; 0xb3
    2e06:	005a      	lsls	r2, r3, #1
    2e08:	491c      	ldr	r1, [pc, #112]	; (2e7c <rt_object_init+0xd0>)
    2e0a:	4b1e      	ldr	r3, [pc, #120]	; (2e84 <rt_object_init+0xd8>)
    2e0c:	0018      	movs	r0, r3
    2e0e:	f001 f8df 	bl	3fd0 <rt_assert_handler>
            node  = node->next)
    2e12:	69fb      	ldr	r3, [r7, #28]
    2e14:	681b      	ldr	r3, [r3, #0]
    2e16:	61fb      	str	r3, [r7, #28]
            node != &(information->object_list);
    2e18:	69bb      	ldr	r3, [r7, #24]
    2e1a:	3304      	adds	r3, #4
    2e1c:	69fa      	ldr	r2, [r7, #28]
    2e1e:	429a      	cmp	r2, r3
    2e20:	d1e6      	bne.n	2df0 <rt_object_init+0x44>
        }
    }
    /* leave critical */
    rt_exit_critical();
    2e22:	f7fe fe51 	bl	1ac8 <rt_exit_critical>

    /* initialize object's parameters */
    /* set object type to static */
    object->type = type | RT_Object_Class_Static;
    2e26:	230b      	movs	r3, #11
    2e28:	18fb      	adds	r3, r7, r3
    2e2a:	781b      	ldrb	r3, [r3, #0]
    2e2c:	2280      	movs	r2, #128	; 0x80
    2e2e:	4252      	negs	r2, r2
    2e30:	4313      	orrs	r3, r2
    2e32:	b2da      	uxtb	r2, r3
    2e34:	68fb      	ldr	r3, [r7, #12]
    2e36:	721a      	strb	r2, [r3, #8]
    /* copy name */
    rt_strncpy(object->name, name, RT_NAME_MAX);
    2e38:	68fb      	ldr	r3, [r7, #12]
    2e3a:	6879      	ldr	r1, [r7, #4]
    2e3c:	2208      	movs	r2, #8
    2e3e:	0018      	movs	r0, r3
    2e40:	f000 fac8 	bl	33d4 <rt_strncpy>

    RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));
    2e44:	4b10      	ldr	r3, [pc, #64]	; (2e88 <rt_object_init+0xdc>)
    2e46:	681b      	ldr	r3, [r3, #0]
    2e48:	2b00      	cmp	r3, #0
    2e4a:	d004      	beq.n	2e56 <rt_object_init+0xaa>
    2e4c:	4b0e      	ldr	r3, [pc, #56]	; (2e88 <rt_object_init+0xdc>)
    2e4e:	681b      	ldr	r3, [r3, #0]
    2e50:	68fa      	ldr	r2, [r7, #12]
    2e52:	0010      	movs	r0, r2
    2e54:	4798      	blx	r3

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
    2e56:	f002 fb3b 	bl	54d0 <rt_hw_interrupt_disable>
    2e5a:	0004      	movs	r4, r0
    }
    else
#endif /* RT_USING_MODULE */
    {
        /* insert object into information object list */
        rt_list_insert_after(&(information->object_list), &(object->list));
    2e5c:	69bb      	ldr	r3, [r7, #24]
    2e5e:	1d1a      	adds	r2, r3, #4
    2e60:	68fb      	ldr	r3, [r7, #12]
    2e62:	330c      	adds	r3, #12
    2e64:	0019      	movs	r1, r3
    2e66:	0010      	movs	r0, r2
    2e68:	f7ff ff4c 	bl	2d04 <rt_list_insert_after>
    }

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
    2e6c:	0020      	movs	r0, r4
    2e6e:	f002 fb33 	bl	54d8 <rt_hw_interrupt_enable>
}
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	46bd      	mov	sp, r7
    2e76:	b009      	add	sp, #36	; 0x24
    2e78:	bd90      	pop	{r4, r7, pc}
    2e7a:	46c0      	nop			; (mov r8, r8)
    2e7c:	0000bd2c 	.word	0x0000bd2c
    2e80:	0000bc98 	.word	0x0000bc98
    2e84:	0000bcb0 	.word	0x0000bcb0
    2e88:	1ffffd1c 	.word	0x1ffffd1c

00002e8c <rt_object_detach>:
 *        and the memory of static object is not freed.
 *
 * @param object the specified object to be detached.
 */
void rt_object_detach(rt_object_t object)
{
    2e8c:	b590      	push	{r4, r7, lr}
    2e8e:	b083      	sub	sp, #12
    2e90:	af00      	add	r7, sp, #0
    2e92:	6078      	str	r0, [r7, #4]
    register rt_base_t temp;

    /* object check */
    RT_ASSERT(object != RT_NULL);
    2e94:	687b      	ldr	r3, [r7, #4]
    2e96:	2b00      	cmp	r3, #0
    2e98:	d107      	bne.n	2eaa <rt_object_detach+0x1e>
    2e9a:	2394      	movs	r3, #148	; 0x94
    2e9c:	33ff      	adds	r3, #255	; 0xff
    2e9e:	001a      	movs	r2, r3
    2ea0:	490f      	ldr	r1, [pc, #60]	; (2ee0 <rt_object_detach+0x54>)
    2ea2:	4b10      	ldr	r3, [pc, #64]	; (2ee4 <rt_object_detach+0x58>)
    2ea4:	0018      	movs	r0, r3
    2ea6:	f001 f893 	bl	3fd0 <rt_assert_handler>

    RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));
    2eaa:	4b0f      	ldr	r3, [pc, #60]	; (2ee8 <rt_object_detach+0x5c>)
    2eac:	681b      	ldr	r3, [r3, #0]
    2eae:	2b00      	cmp	r3, #0
    2eb0:	d004      	beq.n	2ebc <rt_object_detach+0x30>
    2eb2:	4b0d      	ldr	r3, [pc, #52]	; (2ee8 <rt_object_detach+0x5c>)
    2eb4:	681b      	ldr	r3, [r3, #0]
    2eb6:	687a      	ldr	r2, [r7, #4]
    2eb8:	0010      	movs	r0, r2
    2eba:	4798      	blx	r3

    /* reset object type */
    object->type = 0;
    2ebc:	687b      	ldr	r3, [r7, #4]
    2ebe:	2200      	movs	r2, #0
    2ec0:	721a      	strb	r2, [r3, #8]

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
    2ec2:	f002 fb05 	bl	54d0 <rt_hw_interrupt_disable>
    2ec6:	0004      	movs	r4, r0

    /* remove from old list */
    rt_list_remove(&(object->list));
    2ec8:	687b      	ldr	r3, [r7, #4]
    2eca:	330c      	adds	r3, #12
    2ecc:	0018      	movs	r0, r3
    2ece:	f7ff ff30 	bl	2d32 <rt_list_remove>

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
    2ed2:	0020      	movs	r0, r4
    2ed4:	f002 fb00 	bl	54d8 <rt_hw_interrupt_enable>
}
    2ed8:	46c0      	nop			; (mov r8, r8)
    2eda:	46bd      	mov	sp, r7
    2edc:	b003      	add	sp, #12
    2ede:	bd90      	pop	{r4, r7, pc}
    2ee0:	0000bd3c 	.word	0x0000bd3c
    2ee4:	0000bcc0 	.word	0x0000bcc0
    2ee8:	1ffffd20 	.word	0x1ffffd20

00002eec <rt_object_allocate>:
 * @param name is the object name. In system, the object's name must be unique.
 *
 * @return object
 */
rt_object_t rt_object_allocate(enum rt_object_class_type type, const char *name)
{
    2eec:	b590      	push	{r4, r7, lr}
    2eee:	b087      	sub	sp, #28
    2ef0:	af00      	add	r7, sp, #0
    2ef2:	0002      	movs	r2, r0
    2ef4:	6039      	str	r1, [r7, #0]
    2ef6:	1dfb      	adds	r3, r7, #7
    2ef8:	701a      	strb	r2, [r3, #0]
    struct rt_object_information *information;
#ifdef RT_USING_MODULE
    struct rt_dlmodule *module = dlmodule_self();
#endif /* RT_USING_MODULE */

    RT_DEBUG_NOT_IN_INTERRUPT;
    2efa:	f002 fae9 	bl	54d0 <rt_hw_interrupt_disable>
    2efe:	0003      	movs	r3, r0
    2f00:	617b      	str	r3, [r7, #20]
    2f02:	f7fe fb59 	bl	15b8 <rt_interrupt_get_nest>
    2f06:	1e03      	subs	r3, r0, #0
    2f08:	d00d      	beq.n	2f26 <rt_object_allocate+0x3a>
    2f0a:	4a30      	ldr	r2, [pc, #192]	; (2fcc <rt_object_allocate+0xe0>)
    2f0c:	4b30      	ldr	r3, [pc, #192]	; (2fd0 <rt_object_allocate+0xe4>)
    2f0e:	0011      	movs	r1, r2
    2f10:	0018      	movs	r0, r3
    2f12:	f000 feb7 	bl	3c84 <rt_kprintf>
    2f16:	23b8      	movs	r3, #184	; 0xb8
    2f18:	33ff      	adds	r3, #255	; 0xff
    2f1a:	001a      	movs	r2, r3
    2f1c:	492b      	ldr	r1, [pc, #172]	; (2fcc <rt_object_allocate+0xe0>)
    2f1e:	4b2d      	ldr	r3, [pc, #180]	; (2fd4 <rt_object_allocate+0xe8>)
    2f20:	0018      	movs	r0, r3
    2f22:	f001 f855 	bl	3fd0 <rt_assert_handler>
    2f26:	697b      	ldr	r3, [r7, #20]
    2f28:	0018      	movs	r0, r3
    2f2a:	f002 fad5 	bl	54d8 <rt_hw_interrupt_enable>

    /* get object information */
    information = rt_object_get_information(type);
    2f2e:	1dfb      	adds	r3, r7, #7
    2f30:	781b      	ldrb	r3, [r3, #0]
    2f32:	0018      	movs	r0, r3
    2f34:	f7ff ff16 	bl	2d64 <rt_object_get_information>
    2f38:	0003      	movs	r3, r0
    2f3a:	613b      	str	r3, [r7, #16]
    RT_ASSERT(information != RT_NULL);
    2f3c:	693b      	ldr	r3, [r7, #16]
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d107      	bne.n	2f52 <rt_object_allocate+0x66>
    2f42:	23bc      	movs	r3, #188	; 0xbc
    2f44:	33ff      	adds	r3, #255	; 0xff
    2f46:	001a      	movs	r2, r3
    2f48:	4920      	ldr	r1, [pc, #128]	; (2fcc <rt_object_allocate+0xe0>)
    2f4a:	4b23      	ldr	r3, [pc, #140]	; (2fd8 <rt_object_allocate+0xec>)
    2f4c:	0018      	movs	r0, r3
    2f4e:	f001 f83f 	bl	3fd0 <rt_assert_handler>

    object = (struct rt_object *)RT_KERNEL_MALLOC(information->object_size);
    2f52:	693b      	ldr	r3, [r7, #16]
    2f54:	68db      	ldr	r3, [r3, #12]
    2f56:	0018      	movs	r0, r3
    2f58:	f000 ff64 	bl	3e24 <rt_malloc>
    2f5c:	0003      	movs	r3, r0
    2f5e:	60fb      	str	r3, [r7, #12]
    if (object == RT_NULL)
    2f60:	68fb      	ldr	r3, [r7, #12]
    2f62:	2b00      	cmp	r3, #0
    2f64:	d101      	bne.n	2f6a <rt_object_allocate+0x7e>
    {
        /* no memory can be allocated */
        return RT_NULL;
    2f66:	2300      	movs	r3, #0
    2f68:	e02b      	b.n	2fc2 <rt_object_allocate+0xd6>
    }

    /* clean memory data of object */
    rt_memset(object, 0x0, information->object_size);
    2f6a:	693b      	ldr	r3, [r7, #16]
    2f6c:	68da      	ldr	r2, [r3, #12]
    2f6e:	68fb      	ldr	r3, [r7, #12]
    2f70:	2100      	movs	r1, #0
    2f72:	0018      	movs	r0, r3
    2f74:	f000 f930 	bl	31d8 <rt_memset>

    /* initialize object's parameters */

    /* set object type */
    object->type = type;
    2f78:	68fb      	ldr	r3, [r7, #12]
    2f7a:	1dfa      	adds	r2, r7, #7
    2f7c:	7812      	ldrb	r2, [r2, #0]
    2f7e:	721a      	strb	r2, [r3, #8]

    /* set object flag */
    object->flag = 0;
    2f80:	68fb      	ldr	r3, [r7, #12]
    2f82:	2200      	movs	r2, #0
    2f84:	725a      	strb	r2, [r3, #9]

    /* copy name */
    rt_strncpy(object->name, name, RT_NAME_MAX);
    2f86:	68fb      	ldr	r3, [r7, #12]
    2f88:	6839      	ldr	r1, [r7, #0]
    2f8a:	2208      	movs	r2, #8
    2f8c:	0018      	movs	r0, r3
    2f8e:	f000 fa21 	bl	33d4 <rt_strncpy>

    RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));
    2f92:	4b12      	ldr	r3, [pc, #72]	; (2fdc <rt_object_allocate+0xf0>)
    2f94:	681b      	ldr	r3, [r3, #0]
    2f96:	2b00      	cmp	r3, #0
    2f98:	d004      	beq.n	2fa4 <rt_object_allocate+0xb8>
    2f9a:	4b10      	ldr	r3, [pc, #64]	; (2fdc <rt_object_allocate+0xf0>)
    2f9c:	681b      	ldr	r3, [r3, #0]
    2f9e:	68fa      	ldr	r2, [r7, #12]
    2fa0:	0010      	movs	r0, r2
    2fa2:	4798      	blx	r3

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
    2fa4:	f002 fa94 	bl	54d0 <rt_hw_interrupt_disable>
    2fa8:	0004      	movs	r4, r0
    }
    else
#endif /* RT_USING_MODULE */
    {
        /* insert object into information object list */
        rt_list_insert_after(&(information->object_list), &(object->list));
    2faa:	693b      	ldr	r3, [r7, #16]
    2fac:	1d1a      	adds	r2, r3, #4
    2fae:	68fb      	ldr	r3, [r7, #12]
    2fb0:	330c      	adds	r3, #12
    2fb2:	0019      	movs	r1, r3
    2fb4:	0010      	movs	r0, r2
    2fb6:	f7ff fea5 	bl	2d04 <rt_list_insert_after>
    }

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
    2fba:	0020      	movs	r0, r4
    2fbc:	f002 fa8c 	bl	54d8 <rt_hw_interrupt_enable>

    /* return object */
    return object;
    2fc0:	68fb      	ldr	r3, [r7, #12]
}
    2fc2:	0018      	movs	r0, r3
    2fc4:	46bd      	mov	sp, r7
    2fc6:	b007      	add	sp, #28
    2fc8:	bd90      	pop	{r4, r7, pc}
    2fca:	46c0      	nop			; (mov r8, r8)
    2fcc:	0000bd50 	.word	0x0000bd50
    2fd0:	0000bcd4 	.word	0x0000bcd4
    2fd4:	0000bcfc 	.word	0x0000bcfc
    2fd8:	0000bc98 	.word	0x0000bc98
    2fdc:	1ffffd1c 	.word	0x1ffffd1c

00002fe0 <rt_object_delete>:
 * @brief This function will delete an object and release object memory.
 *
 * @param object is the specified object to be deleted.
 */
void rt_object_delete(rt_object_t object)
{
    2fe0:	b590      	push	{r4, r7, lr}
    2fe2:	b083      	sub	sp, #12
    2fe4:	af00      	add	r7, sp, #0
    2fe6:	6078      	str	r0, [r7, #4]
    register rt_base_t temp;

    /* object check */
    RT_ASSERT(object != RT_NULL);
    2fe8:	687b      	ldr	r3, [r7, #4]
    2fea:	2b00      	cmp	r3, #0
    2fec:	d107      	bne.n	2ffe <rt_object_delete+0x1e>
    2fee:	23f6      	movs	r3, #246	; 0xf6
    2ff0:	33ff      	adds	r3, #255	; 0xff
    2ff2:	001a      	movs	r2, r3
    2ff4:	4917      	ldr	r1, [pc, #92]	; (3054 <rt_object_delete+0x74>)
    2ff6:	4b18      	ldr	r3, [pc, #96]	; (3058 <rt_object_delete+0x78>)
    2ff8:	0018      	movs	r0, r3
    2ffa:	f000 ffe9 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(!(object->type & RT_Object_Class_Static));
    2ffe:	687b      	ldr	r3, [r7, #4]
    3000:	7a1b      	ldrb	r3, [r3, #8]
    3002:	b25b      	sxtb	r3, r3
    3004:	2b00      	cmp	r3, #0
    3006:	da06      	bge.n	3016 <rt_object_delete+0x36>
    3008:	23fb      	movs	r3, #251	; 0xfb
    300a:	005a      	lsls	r2, r3, #1
    300c:	4911      	ldr	r1, [pc, #68]	; (3054 <rt_object_delete+0x74>)
    300e:	4b13      	ldr	r3, [pc, #76]	; (305c <rt_object_delete+0x7c>)
    3010:	0018      	movs	r0, r3
    3012:	f000 ffdd 	bl	3fd0 <rt_assert_handler>

    RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));
    3016:	4b12      	ldr	r3, [pc, #72]	; (3060 <rt_object_delete+0x80>)
    3018:	681b      	ldr	r3, [r3, #0]
    301a:	2b00      	cmp	r3, #0
    301c:	d004      	beq.n	3028 <rt_object_delete+0x48>
    301e:	4b10      	ldr	r3, [pc, #64]	; (3060 <rt_object_delete+0x80>)
    3020:	681b      	ldr	r3, [r3, #0]
    3022:	687a      	ldr	r2, [r7, #4]
    3024:	0010      	movs	r0, r2
    3026:	4798      	blx	r3

    /* reset object type */
    object->type = RT_Object_Class_Null;
    3028:	687b      	ldr	r3, [r7, #4]
    302a:	2200      	movs	r2, #0
    302c:	721a      	strb	r2, [r3, #8]

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
    302e:	f002 fa4f 	bl	54d0 <rt_hw_interrupt_disable>
    3032:	0004      	movs	r4, r0

    /* remove from old list */
    rt_list_remove(&(object->list));
    3034:	687b      	ldr	r3, [r7, #4]
    3036:	330c      	adds	r3, #12
    3038:	0018      	movs	r0, r3
    303a:	f7ff fe7a 	bl	2d32 <rt_list_remove>

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
    303e:	0020      	movs	r0, r4
    3040:	f002 fa4a 	bl	54d8 <rt_hw_interrupt_enable>

    /* free the memory of object */
    RT_KERNEL_FREE(object);
    3044:	687b      	ldr	r3, [r7, #4]
    3046:	0018      	movs	r0, r3
    3048:	f000 ff50 	bl	3eec <rt_free>
}
    304c:	46c0      	nop			; (mov r8, r8)
    304e:	46bd      	mov	sp, r7
    3050:	b003      	add	sp, #12
    3052:	bd90      	pop	{r4, r7, pc}
    3054:	0000bd64 	.word	0x0000bd64
    3058:	0000bcc0 	.word	0x0000bcc0
    305c:	0000bd00 	.word	0x0000bd00
    3060:	1ffffd20 	.word	0x1ffffd20

00003064 <rt_object_is_systemobject>:
 * @param object is the specified object to be judged.
 *
 * @return RT_TRUE if a system object, RT_FALSE for others.
 */
rt_bool_t rt_object_is_systemobject(rt_object_t object)
{
    3064:	b580      	push	{r7, lr}
    3066:	b082      	sub	sp, #8
    3068:	af00      	add	r7, sp, #0
    306a:	6078      	str	r0, [r7, #4]
    /* object check */
    RT_ASSERT(object != RT_NULL);
    306c:	687b      	ldr	r3, [r7, #4]
    306e:	2b00      	cmp	r3, #0
    3070:	d106      	bne.n	3080 <rt_object_is_systemobject+0x1c>
    3072:	2386      	movs	r3, #134	; 0x86
    3074:	009a      	lsls	r2, r3, #2
    3076:	4908      	ldr	r1, [pc, #32]	; (3098 <rt_object_is_systemobject+0x34>)
    3078:	4b08      	ldr	r3, [pc, #32]	; (309c <rt_object_is_systemobject+0x38>)
    307a:	0018      	movs	r0, r3
    307c:	f000 ffa8 	bl	3fd0 <rt_assert_handler>

    if (object->type & RT_Object_Class_Static)
    3080:	687b      	ldr	r3, [r7, #4]
    3082:	7a1b      	ldrb	r3, [r3, #8]
    3084:	b25b      	sxtb	r3, r3
    3086:	2b00      	cmp	r3, #0
    3088:	da01      	bge.n	308e <rt_object_is_systemobject+0x2a>
        return RT_TRUE;
    308a:	2301      	movs	r3, #1
    308c:	e000      	b.n	3090 <rt_object_is_systemobject+0x2c>

    return RT_FALSE;
    308e:	2300      	movs	r3, #0
}
    3090:	0018      	movs	r0, r3
    3092:	46bd      	mov	sp, r7
    3094:	b002      	add	sp, #8
    3096:	bd80      	pop	{r7, pc}
    3098:	0000bd78 	.word	0x0000bd78
    309c:	0000bcc0 	.word	0x0000bcc0

000030a0 <rt_object_get_type>:
 * @param object is the specified object to be get type.
 *
 * @return the type of object.
 */
rt_uint8_t rt_object_get_type(rt_object_t object)
{
    30a0:	b580      	push	{r7, lr}
    30a2:	b082      	sub	sp, #8
    30a4:	af00      	add	r7, sp, #0
    30a6:	6078      	str	r0, [r7, #4]
    /* object check */
    RT_ASSERT(object != RT_NULL);
    30a8:	687b      	ldr	r3, [r7, #4]
    30aa:	2b00      	cmp	r3, #0
    30ac:	d105      	bne.n	30ba <rt_object_get_type+0x1a>
    30ae:	4a07      	ldr	r2, [pc, #28]	; (30cc <rt_object_get_type+0x2c>)
    30b0:	4907      	ldr	r1, [pc, #28]	; (30d0 <rt_object_get_type+0x30>)
    30b2:	4b08      	ldr	r3, [pc, #32]	; (30d4 <rt_object_get_type+0x34>)
    30b4:	0018      	movs	r0, r3
    30b6:	f000 ff8b 	bl	3fd0 <rt_assert_handler>

    return object->type & ~RT_Object_Class_Static;
    30ba:	687b      	ldr	r3, [r7, #4]
    30bc:	7a1b      	ldrb	r3, [r3, #8]
    30be:	227f      	movs	r2, #127	; 0x7f
    30c0:	4013      	ands	r3, r2
    30c2:	b2db      	uxtb	r3, r3
}
    30c4:	0018      	movs	r0, r3
    30c6:	46bd      	mov	sp, r7
    30c8:	b002      	add	sp, #8
    30ca:	bd80      	pop	{r7, pc}
    30cc:	0000022b 	.word	0x0000022b
    30d0:	0000bd94 	.word	0x0000bd94
    30d4:	0000bcc0 	.word	0x0000bcc0

000030d8 <rt_object_find>:
 * in object container.
 *
 * @note this function shall not be invoked in interrupt status.
 */
rt_object_t rt_object_find(const char *name, rt_uint8_t type)
{
    30d8:	b580      	push	{r7, lr}
    30da:	b086      	sub	sp, #24
    30dc:	af00      	add	r7, sp, #0
    30de:	6078      	str	r0, [r7, #4]
    30e0:	000a      	movs	r2, r1
    30e2:	1cfb      	adds	r3, r7, #3
    30e4:	701a      	strb	r2, [r3, #0]
    struct rt_object *object = RT_NULL;
    30e6:	2300      	movs	r3, #0
    30e8:	613b      	str	r3, [r7, #16]
    struct rt_list_node *node = RT_NULL;
    30ea:	2300      	movs	r3, #0
    30ec:	617b      	str	r3, [r7, #20]
    struct rt_object_information *information = RT_NULL;
    30ee:	2300      	movs	r3, #0
    30f0:	60fb      	str	r3, [r7, #12]

    information = rt_object_get_information((enum rt_object_class_type)type);
    30f2:	1cfb      	adds	r3, r7, #3
    30f4:	781b      	ldrb	r3, [r3, #0]
    30f6:	0018      	movs	r0, r3
    30f8:	f7ff fe34 	bl	2d64 <rt_object_get_information>
    30fc:	0003      	movs	r3, r0
    30fe:	60fb      	str	r3, [r7, #12]

    /* parameter check */
    if ((name == RT_NULL) || (information == RT_NULL)) return RT_NULL;
    3100:	687b      	ldr	r3, [r7, #4]
    3102:	2b00      	cmp	r3, #0
    3104:	d002      	beq.n	310c <rt_object_find+0x34>
    3106:	68fb      	ldr	r3, [r7, #12]
    3108:	2b00      	cmp	r3, #0
    310a:	d101      	bne.n	3110 <rt_object_find+0x38>
    310c:	2300      	movs	r3, #0
    310e:	e037      	b.n	3180 <rt_object_find+0xa8>

    /* which is invoke in interrupt status */
    RT_DEBUG_NOT_IN_INTERRUPT;
    3110:	f002 f9de 	bl	54d0 <rt_hw_interrupt_disable>
    3114:	0003      	movs	r3, r0
    3116:	60bb      	str	r3, [r7, #8]
    3118:	f7fe fa4e 	bl	15b8 <rt_interrupt_get_nest>
    311c:	1e03      	subs	r3, r0, #0
    311e:	d00b      	beq.n	3138 <rt_object_find+0x60>
    3120:	4a19      	ldr	r2, [pc, #100]	; (3188 <rt_object_find+0xb0>)
    3122:	4b1a      	ldr	r3, [pc, #104]	; (318c <rt_object_find+0xb4>)
    3124:	0011      	movs	r1, r2
    3126:	0018      	movs	r0, r3
    3128:	f000 fdac 	bl	3c84 <rt_kprintf>
    312c:	4a18      	ldr	r2, [pc, #96]	; (3190 <rt_object_find+0xb8>)
    312e:	4916      	ldr	r1, [pc, #88]	; (3188 <rt_object_find+0xb0>)
    3130:	4b18      	ldr	r3, [pc, #96]	; (3194 <rt_object_find+0xbc>)
    3132:	0018      	movs	r0, r3
    3134:	f000 ff4c 	bl	3fd0 <rt_assert_handler>
    3138:	68bb      	ldr	r3, [r7, #8]
    313a:	0018      	movs	r0, r3
    313c:	f002 f9cc 	bl	54d8 <rt_hw_interrupt_enable>

    /* enter critical */
    rt_enter_critical();
    3140:	f7fe fcac 	bl	1a9c <rt_enter_critical>

    /* try to find object */
    rt_list_for_each(node, &(information->object_list))
    3144:	68fb      	ldr	r3, [r7, #12]
    3146:	685b      	ldr	r3, [r3, #4]
    3148:	617b      	str	r3, [r7, #20]
    314a:	e011      	b.n	3170 <rt_object_find+0x98>
    {
        object = rt_list_entry(node, struct rt_object, list);
    314c:	697b      	ldr	r3, [r7, #20]
    314e:	3b0c      	subs	r3, #12
    3150:	613b      	str	r3, [r7, #16]
        if (rt_strncmp(object->name, name, RT_NAME_MAX) == 0)
    3152:	693b      	ldr	r3, [r7, #16]
    3154:	6879      	ldr	r1, [r7, #4]
    3156:	2208      	movs	r2, #8
    3158:	0018      	movs	r0, r3
    315a:	f000 f96b 	bl	3434 <rt_strncmp>
    315e:	1e03      	subs	r3, r0, #0
    3160:	d103      	bne.n	316a <rt_object_find+0x92>
        {
            /* leave critical */
            rt_exit_critical();
    3162:	f7fe fcb1 	bl	1ac8 <rt_exit_critical>

            return object;
    3166:	693b      	ldr	r3, [r7, #16]
    3168:	e00a      	b.n	3180 <rt_object_find+0xa8>
    rt_list_for_each(node, &(information->object_list))
    316a:	697b      	ldr	r3, [r7, #20]
    316c:	681b      	ldr	r3, [r3, #0]
    316e:	617b      	str	r3, [r7, #20]
    3170:	68fb      	ldr	r3, [r7, #12]
    3172:	3304      	adds	r3, #4
    3174:	697a      	ldr	r2, [r7, #20]
    3176:	429a      	cmp	r2, r3
    3178:	d1e8      	bne.n	314c <rt_object_find+0x74>
        }
    }

    /* leave critical */
    rt_exit_critical();
    317a:	f7fe fca5 	bl	1ac8 <rt_exit_critical>

    return RT_NULL;
    317e:	2300      	movs	r3, #0
}
    3180:	0018      	movs	r0, r3
    3182:	46bd      	mov	sp, r7
    3184:	b006      	add	sp, #24
    3186:	bd80      	pop	{r7, pc}
    3188:	0000bda8 	.word	0x0000bda8
    318c:	0000bcd4 	.word	0x0000bcd4
    3190:	00000249 	.word	0x00000249
    3194:	0000bcfc 	.word	0x0000bcfc

00003198 <rt_set_errno>:
 * This function sets the global errno for the current thread.
 *
 * @param error is the errno shall be set.
 */
void rt_set_errno(rt_err_t error)
{
    3198:	b580      	push	{r7, lr}
    319a:	b084      	sub	sp, #16
    319c:	af00      	add	r7, sp, #0
    319e:	6078      	str	r0, [r7, #4]
    rt_thread_t tid;

    if (rt_interrupt_get_nest() != 0)
    31a0:	f7fe fa0a 	bl	15b8 <rt_interrupt_get_nest>
    31a4:	1e03      	subs	r3, r0, #0
    31a6:	d003      	beq.n	31b0 <rt_set_errno+0x18>
    {
        /* it's in interrupt context */
        __rt_errno = error;
    31a8:	4b0a      	ldr	r3, [pc, #40]	; (31d4 <rt_set_errno+0x3c>)
    31aa:	687a      	ldr	r2, [r7, #4]
    31ac:	601a      	str	r2, [r3, #0]

        return;
    31ae:	e00d      	b.n	31cc <rt_set_errno+0x34>
    }

    tid = rt_thread_self();
    31b0:	f001 fd02 	bl	4bb8 <rt_thread_self>
    31b4:	0003      	movs	r3, r0
    31b6:	60fb      	str	r3, [r7, #12]
    if (tid == RT_NULL)
    31b8:	68fb      	ldr	r3, [r7, #12]
    31ba:	2b00      	cmp	r3, #0
    31bc:	d103      	bne.n	31c6 <rt_set_errno+0x2e>
    {
        __rt_errno = error;
    31be:	4b05      	ldr	r3, [pc, #20]	; (31d4 <rt_set_errno+0x3c>)
    31c0:	687a      	ldr	r2, [r7, #4]
    31c2:	601a      	str	r2, [r3, #0]

        return;
    31c4:	e002      	b.n	31cc <rt_set_errno+0x34>
    }

    tid->error = error;
    31c6:	68fb      	ldr	r3, [r7, #12]
    31c8:	687a      	ldr	r2, [r7, #4]
    31ca:	631a      	str	r2, [r3, #48]	; 0x30
}
    31cc:	46bd      	mov	sp, r7
    31ce:	b004      	add	sp, #16
    31d0:	bd80      	pop	{r7, pc}
    31d2:	46c0      	nop			; (mov r8, r8)
    31d4:	1ffffd30 	.word	0x1ffffd30

000031d8 <rt_memset>:
 * @param  count number of bytes to be set.
 *
 * @return The address of source memory.
 */
RT_WEAK void *rt_memset(void *s, int c, rt_ubase_t count)
{
    31d8:	b580      	push	{r7, lr}
    31da:	b088      	sub	sp, #32
    31dc:	af00      	add	r7, sp, #0
    31de:	60f8      	str	r0, [r7, #12]
    31e0:	60b9      	str	r1, [r7, #8]
    31e2:	607a      	str	r2, [r7, #4]
#define LBLOCKSIZE      (sizeof(long))
#define UNALIGNED(X)    ((long)X & (LBLOCKSIZE - 1))
#define TOO_SMALL(LEN)  ((LEN) < LBLOCKSIZE)

    unsigned int i;
    char *m = (char *)s;
    31e4:	68fb      	ldr	r3, [r7, #12]
    31e6:	61fb      	str	r3, [r7, #28]
    unsigned long buffer;
    unsigned long *aligned_addr;
    unsigned int d = c & 0xff;  /* To avoid sign extension, copy C to an
    31e8:	68bb      	ldr	r3, [r7, #8]
    31ea:	22ff      	movs	r2, #255	; 0xff
    31ec:	4013      	ands	r3, r2
    31ee:	617b      	str	r3, [r7, #20]
                                unsigned variable.  */

    if (!TOO_SMALL(count) && !UNALIGNED(s))
    31f0:	687b      	ldr	r3, [r7, #4]
    31f2:	2b03      	cmp	r3, #3
    31f4:	d93f      	bls.n	3276 <rt_memset+0x9e>
    31f6:	68fb      	ldr	r3, [r7, #12]
    31f8:	2203      	movs	r2, #3
    31fa:	4013      	ands	r3, r2
    31fc:	d13b      	bne.n	3276 <rt_memset+0x9e>
    {
        /* If we get this far, we know that count is large and s is word-aligned. */
        aligned_addr = (unsigned long *)s;
    31fe:	68fb      	ldr	r3, [r7, #12]
    3200:	61bb      	str	r3, [r7, #24]
        /* Store d into each char sized location in buffer so that
         * we can set large blocks quickly.
         */
        if (LBLOCKSIZE == 4)
        {
            buffer = (d << 8) | d;
    3202:	697b      	ldr	r3, [r7, #20]
    3204:	021b      	lsls	r3, r3, #8
    3206:	697a      	ldr	r2, [r7, #20]
    3208:	4313      	orrs	r3, r2
    320a:	613b      	str	r3, [r7, #16]
            buffer |= (buffer << 16);
    320c:	693b      	ldr	r3, [r7, #16]
    320e:	041b      	lsls	r3, r3, #16
    3210:	693a      	ldr	r2, [r7, #16]
    3212:	4313      	orrs	r3, r2
    3214:	613b      	str	r3, [r7, #16]
            buffer = 0;
            for (i = 0; i < LBLOCKSIZE; i ++)
                buffer = (buffer << 8) | d;
        }

        while (count >= LBLOCKSIZE * 4)
    3216:	e016      	b.n	3246 <rt_memset+0x6e>
        {
            *aligned_addr++ = buffer;
    3218:	69bb      	ldr	r3, [r7, #24]
    321a:	1d1a      	adds	r2, r3, #4
    321c:	61ba      	str	r2, [r7, #24]
    321e:	693a      	ldr	r2, [r7, #16]
    3220:	601a      	str	r2, [r3, #0]
            *aligned_addr++ = buffer;
    3222:	69bb      	ldr	r3, [r7, #24]
    3224:	1d1a      	adds	r2, r3, #4
    3226:	61ba      	str	r2, [r7, #24]
    3228:	693a      	ldr	r2, [r7, #16]
    322a:	601a      	str	r2, [r3, #0]
            *aligned_addr++ = buffer;
    322c:	69bb      	ldr	r3, [r7, #24]
    322e:	1d1a      	adds	r2, r3, #4
    3230:	61ba      	str	r2, [r7, #24]
    3232:	693a      	ldr	r2, [r7, #16]
    3234:	601a      	str	r2, [r3, #0]
            *aligned_addr++ = buffer;
    3236:	69bb      	ldr	r3, [r7, #24]
    3238:	1d1a      	adds	r2, r3, #4
    323a:	61ba      	str	r2, [r7, #24]
    323c:	693a      	ldr	r2, [r7, #16]
    323e:	601a      	str	r2, [r3, #0]
            count -= 4 * LBLOCKSIZE;
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	3b10      	subs	r3, #16
    3244:	607b      	str	r3, [r7, #4]
        while (count >= LBLOCKSIZE * 4)
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	2b0f      	cmp	r3, #15
    324a:	d8e5      	bhi.n	3218 <rt_memset+0x40>
        }

        while (count >= LBLOCKSIZE)
    324c:	e007      	b.n	325e <rt_memset+0x86>
        {
            *aligned_addr++ = buffer;
    324e:	69bb      	ldr	r3, [r7, #24]
    3250:	1d1a      	adds	r2, r3, #4
    3252:	61ba      	str	r2, [r7, #24]
    3254:	693a      	ldr	r2, [r7, #16]
    3256:	601a      	str	r2, [r3, #0]
            count -= LBLOCKSIZE;
    3258:	687b      	ldr	r3, [r7, #4]
    325a:	3b04      	subs	r3, #4
    325c:	607b      	str	r3, [r7, #4]
        while (count >= LBLOCKSIZE)
    325e:	687b      	ldr	r3, [r7, #4]
    3260:	2b03      	cmp	r3, #3
    3262:	d8f4      	bhi.n	324e <rt_memset+0x76>
        }

        /* Pick up the remainder with a bytewise loop. */
        m = (char *)aligned_addr;
    3264:	69bb      	ldr	r3, [r7, #24]
    3266:	61fb      	str	r3, [r7, #28]
    }

    while (count--)
    3268:	e005      	b.n	3276 <rt_memset+0x9e>
    {
        *m++ = (char)d;
    326a:	69fb      	ldr	r3, [r7, #28]
    326c:	1c5a      	adds	r2, r3, #1
    326e:	61fa      	str	r2, [r7, #28]
    3270:	697a      	ldr	r2, [r7, #20]
    3272:	b2d2      	uxtb	r2, r2
    3274:	701a      	strb	r2, [r3, #0]
    while (count--)
    3276:	687b      	ldr	r3, [r7, #4]
    3278:	1e5a      	subs	r2, r3, #1
    327a:	607a      	str	r2, [r7, #4]
    327c:	2b00      	cmp	r3, #0
    327e:	d1f4      	bne.n	326a <rt_memset+0x92>
    }

    return s;
    3280:	68fb      	ldr	r3, [r7, #12]

#undef LBLOCKSIZE
#undef UNALIGNED
#undef TOO_SMALL
#endif /* RT_KSERVICE_USING_TINY_SIZE */
}
    3282:	0018      	movs	r0, r3
    3284:	46bd      	mov	sp, r7
    3286:	b008      	add	sp, #32
    3288:	bd80      	pop	{r7, pc}

0000328a <rt_memcpy>:
 * @param  count is the copied length.
 *
 * @return The address of destination memory
 */
RT_WEAK void *rt_memcpy(void *dst, const void *src, rt_ubase_t count)
{
    328a:	b580      	push	{r7, lr}
    328c:	b08a      	sub	sp, #40	; 0x28
    328e:	af00      	add	r7, sp, #0
    3290:	60f8      	str	r0, [r7, #12]
    3292:	60b9      	str	r1, [r7, #8]
    3294:	607a      	str	r2, [r7, #4]
    (((long)X & (sizeof (long) - 1)) | ((long)Y & (sizeof (long) - 1)))
#define BIGBLOCKSIZE    (sizeof (long) << 2)
#define LITTLEBLOCKSIZE (sizeof (long))
#define TOO_SMALL(LEN)  ((LEN) < BIGBLOCKSIZE)

    char *dst_ptr = (char *)dst;
    3296:	68fb      	ldr	r3, [r7, #12]
    3298:	627b      	str	r3, [r7, #36]	; 0x24
    char *src_ptr = (char *)src;
    329a:	68bb      	ldr	r3, [r7, #8]
    329c:	623b      	str	r3, [r7, #32]
    long *aligned_dst;
    long *aligned_src;
    int len = count;
    329e:	687b      	ldr	r3, [r7, #4]
    32a0:	617b      	str	r3, [r7, #20]

    /* If the size is small, or either SRC or DST is unaligned,
    then punt into the byte copy loop.  This should be rare. */
    if (!TOO_SMALL(len) && !UNALIGNED(src_ptr, dst_ptr))
    32a2:	697b      	ldr	r3, [r7, #20]
    32a4:	2b0f      	cmp	r3, #15
    32a6:	d94c      	bls.n	3342 <rt_memcpy+0xb8>
    32a8:	6a3a      	ldr	r2, [r7, #32]
    32aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32ac:	4313      	orrs	r3, r2
    32ae:	2203      	movs	r2, #3
    32b0:	4013      	ands	r3, r2
    32b2:	d146      	bne.n	3342 <rt_memcpy+0xb8>
    {
        aligned_dst = (long *)dst_ptr;
    32b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32b6:	61fb      	str	r3, [r7, #28]
        aligned_src = (long *)src_ptr;
    32b8:	6a3b      	ldr	r3, [r7, #32]
    32ba:	61bb      	str	r3, [r7, #24]

        /* Copy 4X long words at a time if possible. */
        while (len >= BIGBLOCKSIZE)
    32bc:	e022      	b.n	3304 <rt_memcpy+0x7a>
        {
            *aligned_dst++ = *aligned_src++;
    32be:	69ba      	ldr	r2, [r7, #24]
    32c0:	1d13      	adds	r3, r2, #4
    32c2:	61bb      	str	r3, [r7, #24]
    32c4:	69fb      	ldr	r3, [r7, #28]
    32c6:	1d19      	adds	r1, r3, #4
    32c8:	61f9      	str	r1, [r7, #28]
    32ca:	6812      	ldr	r2, [r2, #0]
    32cc:	601a      	str	r2, [r3, #0]
            *aligned_dst++ = *aligned_src++;
    32ce:	69ba      	ldr	r2, [r7, #24]
    32d0:	1d13      	adds	r3, r2, #4
    32d2:	61bb      	str	r3, [r7, #24]
    32d4:	69fb      	ldr	r3, [r7, #28]
    32d6:	1d19      	adds	r1, r3, #4
    32d8:	61f9      	str	r1, [r7, #28]
    32da:	6812      	ldr	r2, [r2, #0]
    32dc:	601a      	str	r2, [r3, #0]
            *aligned_dst++ = *aligned_src++;
    32de:	69ba      	ldr	r2, [r7, #24]
    32e0:	1d13      	adds	r3, r2, #4
    32e2:	61bb      	str	r3, [r7, #24]
    32e4:	69fb      	ldr	r3, [r7, #28]
    32e6:	1d19      	adds	r1, r3, #4
    32e8:	61f9      	str	r1, [r7, #28]
    32ea:	6812      	ldr	r2, [r2, #0]
    32ec:	601a      	str	r2, [r3, #0]
            *aligned_dst++ = *aligned_src++;
    32ee:	69ba      	ldr	r2, [r7, #24]
    32f0:	1d13      	adds	r3, r2, #4
    32f2:	61bb      	str	r3, [r7, #24]
    32f4:	69fb      	ldr	r3, [r7, #28]
    32f6:	1d19      	adds	r1, r3, #4
    32f8:	61f9      	str	r1, [r7, #28]
    32fa:	6812      	ldr	r2, [r2, #0]
    32fc:	601a      	str	r2, [r3, #0]
            len -= BIGBLOCKSIZE;
    32fe:	697b      	ldr	r3, [r7, #20]
    3300:	3b10      	subs	r3, #16
    3302:	617b      	str	r3, [r7, #20]
        while (len >= BIGBLOCKSIZE)
    3304:	697b      	ldr	r3, [r7, #20]
    3306:	2b0f      	cmp	r3, #15
    3308:	d8d9      	bhi.n	32be <rt_memcpy+0x34>
        }

        /* Copy one long word at a time if possible. */
        while (len >= LITTLEBLOCKSIZE)
    330a:	e00a      	b.n	3322 <rt_memcpy+0x98>
        {
            *aligned_dst++ = *aligned_src++;
    330c:	69ba      	ldr	r2, [r7, #24]
    330e:	1d13      	adds	r3, r2, #4
    3310:	61bb      	str	r3, [r7, #24]
    3312:	69fb      	ldr	r3, [r7, #28]
    3314:	1d19      	adds	r1, r3, #4
    3316:	61f9      	str	r1, [r7, #28]
    3318:	6812      	ldr	r2, [r2, #0]
    331a:	601a      	str	r2, [r3, #0]
            len -= LITTLEBLOCKSIZE;
    331c:	697b      	ldr	r3, [r7, #20]
    331e:	3b04      	subs	r3, #4
    3320:	617b      	str	r3, [r7, #20]
        while (len >= LITTLEBLOCKSIZE)
    3322:	697b      	ldr	r3, [r7, #20]
    3324:	2b03      	cmp	r3, #3
    3326:	d8f1      	bhi.n	330c <rt_memcpy+0x82>
        }

        /* Pick up any residual with a byte copier. */
        dst_ptr = (char *)aligned_dst;
    3328:	69fb      	ldr	r3, [r7, #28]
    332a:	627b      	str	r3, [r7, #36]	; 0x24
        src_ptr = (char *)aligned_src;
    332c:	69bb      	ldr	r3, [r7, #24]
    332e:	623b      	str	r3, [r7, #32]
    }

    while (len--)
    3330:	e007      	b.n	3342 <rt_memcpy+0xb8>
        *dst_ptr++ = *src_ptr++;
    3332:	6a3a      	ldr	r2, [r7, #32]
    3334:	1c53      	adds	r3, r2, #1
    3336:	623b      	str	r3, [r7, #32]
    3338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    333a:	1c59      	adds	r1, r3, #1
    333c:	6279      	str	r1, [r7, #36]	; 0x24
    333e:	7812      	ldrb	r2, [r2, #0]
    3340:	701a      	strb	r2, [r3, #0]
    while (len--)
    3342:	697b      	ldr	r3, [r7, #20]
    3344:	1e5a      	subs	r2, r3, #1
    3346:	617a      	str	r2, [r7, #20]
    3348:	2b00      	cmp	r3, #0
    334a:	d1f2      	bne.n	3332 <rt_memcpy+0xa8>

    return dst;
    334c:	68fb      	ldr	r3, [r7, #12]
#undef UNALIGNED
#undef BIGBLOCKSIZE
#undef LITTLEBLOCKSIZE
#undef TOO_SMALL
#endif /* RT_KSERVICE_USING_TINY_SIZE */
}
    334e:	0018      	movs	r0, r3
    3350:	46bd      	mov	sp, r7
    3352:	b00a      	add	sp, #40	; 0x28
    3354:	bd80      	pop	{r7, pc}

00003356 <rt_memmove>:
 * @param  n is the copied length.
 *
 * @return The address of destination memory.
 */
void *rt_memmove(void *dest, const void *src, rt_size_t n)
{
    3356:	b580      	push	{r7, lr}
    3358:	b086      	sub	sp, #24
    335a:	af00      	add	r7, sp, #0
    335c:	60f8      	str	r0, [r7, #12]
    335e:	60b9      	str	r1, [r7, #8]
    3360:	607a      	str	r2, [r7, #4]
    char *tmp = (char *)dest, *s = (char *)src;
    3362:	68fb      	ldr	r3, [r7, #12]
    3364:	617b      	str	r3, [r7, #20]
    3366:	68bb      	ldr	r3, [r7, #8]
    3368:	613b      	str	r3, [r7, #16]

    if (s < tmp && tmp < s + n)
    336a:	693a      	ldr	r2, [r7, #16]
    336c:	697b      	ldr	r3, [r7, #20]
    336e:	429a      	cmp	r2, r3
    3370:	d226      	bcs.n	33c0 <rt_memmove+0x6a>
    3372:	693a      	ldr	r2, [r7, #16]
    3374:	687b      	ldr	r3, [r7, #4]
    3376:	18d3      	adds	r3, r2, r3
    3378:	697a      	ldr	r2, [r7, #20]
    337a:	429a      	cmp	r2, r3
    337c:	d220      	bcs.n	33c0 <rt_memmove+0x6a>
    {
        tmp += n;
    337e:	697a      	ldr	r2, [r7, #20]
    3380:	687b      	ldr	r3, [r7, #4]
    3382:	18d3      	adds	r3, r2, r3
    3384:	617b      	str	r3, [r7, #20]
        s += n;
    3386:	693a      	ldr	r2, [r7, #16]
    3388:	687b      	ldr	r3, [r7, #4]
    338a:	18d3      	adds	r3, r2, r3
    338c:	613b      	str	r3, [r7, #16]

        while (n--)
    338e:	e009      	b.n	33a4 <rt_memmove+0x4e>
            *(--tmp) = *(--s);
    3390:	693b      	ldr	r3, [r7, #16]
    3392:	3b01      	subs	r3, #1
    3394:	613b      	str	r3, [r7, #16]
    3396:	697b      	ldr	r3, [r7, #20]
    3398:	3b01      	subs	r3, #1
    339a:	617b      	str	r3, [r7, #20]
    339c:	693b      	ldr	r3, [r7, #16]
    339e:	781a      	ldrb	r2, [r3, #0]
    33a0:	697b      	ldr	r3, [r7, #20]
    33a2:	701a      	strb	r2, [r3, #0]
        while (n--)
    33a4:	687b      	ldr	r3, [r7, #4]
    33a6:	1e5a      	subs	r2, r3, #1
    33a8:	607a      	str	r2, [r7, #4]
    33aa:	2b00      	cmp	r3, #0
    33ac:	d1f0      	bne.n	3390 <rt_memmove+0x3a>
    if (s < tmp && tmp < s + n)
    33ae:	e00c      	b.n	33ca <rt_memmove+0x74>
    }
    else
    {
        while (n--)
            *tmp++ = *s++;
    33b0:	693a      	ldr	r2, [r7, #16]
    33b2:	1c53      	adds	r3, r2, #1
    33b4:	613b      	str	r3, [r7, #16]
    33b6:	697b      	ldr	r3, [r7, #20]
    33b8:	1c59      	adds	r1, r3, #1
    33ba:	6179      	str	r1, [r7, #20]
    33bc:	7812      	ldrb	r2, [r2, #0]
    33be:	701a      	strb	r2, [r3, #0]
        while (n--)
    33c0:	687b      	ldr	r3, [r7, #4]
    33c2:	1e5a      	subs	r2, r3, #1
    33c4:	607a      	str	r2, [r7, #4]
    33c6:	2b00      	cmp	r3, #0
    33c8:	d1f2      	bne.n	33b0 <rt_memmove+0x5a>
    }

    return dest;
    33ca:	68fb      	ldr	r3, [r7, #12]
}
    33cc:	0018      	movs	r0, r3
    33ce:	46bd      	mov	sp, r7
    33d0:	b006      	add	sp, #24
    33d2:	bd80      	pop	{r7, pc}

000033d4 <rt_strncpy>:
 * @param  n is the maximum copied length.
 *
 * @return The address where the copied content is stored.
 */
char *rt_strncpy(char *dst, const char *src, rt_size_t n)
{
    33d4:	b580      	push	{r7, lr}
    33d6:	b086      	sub	sp, #24
    33d8:	af00      	add	r7, sp, #0
    33da:	60f8      	str	r0, [r7, #12]
    33dc:	60b9      	str	r1, [r7, #8]
    33de:	607a      	str	r2, [r7, #4]
    if (n != 0)
    33e0:	687b      	ldr	r3, [r7, #4]
    33e2:	2b00      	cmp	r3, #0
    33e4:	d021      	beq.n	342a <rt_strncpy+0x56>
    {
        char *d = dst;
    33e6:	68fb      	ldr	r3, [r7, #12]
    33e8:	617b      	str	r3, [r7, #20]
        const char *s = src;
    33ea:	68bb      	ldr	r3, [r7, #8]
    33ec:	613b      	str	r3, [r7, #16]

        do
        {
            if ((*d++ = *s++) == 0)
    33ee:	693a      	ldr	r2, [r7, #16]
    33f0:	1c53      	adds	r3, r2, #1
    33f2:	613b      	str	r3, [r7, #16]
    33f4:	697b      	ldr	r3, [r7, #20]
    33f6:	1c59      	adds	r1, r3, #1
    33f8:	6179      	str	r1, [r7, #20]
    33fa:	7812      	ldrb	r2, [r2, #0]
    33fc:	701a      	strb	r2, [r3, #0]
    33fe:	781b      	ldrb	r3, [r3, #0]
    3400:	2b00      	cmp	r3, #0
    3402:	d10c      	bne.n	341e <rt_strncpy+0x4a>
            {
                /* NUL pad the remaining n-1 bytes */
                while (--n != 0)
    3404:	e004      	b.n	3410 <rt_strncpy+0x3c>
                    *d++ = 0;
    3406:	697b      	ldr	r3, [r7, #20]
    3408:	1c5a      	adds	r2, r3, #1
    340a:	617a      	str	r2, [r7, #20]
    340c:	2200      	movs	r2, #0
    340e:	701a      	strb	r2, [r3, #0]
                while (--n != 0)
    3410:	687b      	ldr	r3, [r7, #4]
    3412:	3b01      	subs	r3, #1
    3414:	607b      	str	r3, [r7, #4]
    3416:	687b      	ldr	r3, [r7, #4]
    3418:	2b00      	cmp	r3, #0
    341a:	d1f4      	bne.n	3406 <rt_strncpy+0x32>
                break;
    341c:	e005      	b.n	342a <rt_strncpy+0x56>
            }
        } while (--n != 0);
    341e:	687b      	ldr	r3, [r7, #4]
    3420:	3b01      	subs	r3, #1
    3422:	607b      	str	r3, [r7, #4]
    3424:	687b      	ldr	r3, [r7, #4]
    3426:	2b00      	cmp	r3, #0
    3428:	d1e1      	bne.n	33ee <rt_strncpy+0x1a>
    }

    return (dst);
    342a:	68fb      	ldr	r3, [r7, #12]
}
    342c:	0018      	movs	r0, r3
    342e:	46bd      	mov	sp, r7
    3430:	b006      	add	sp, #24
    3432:	bd80      	pop	{r7, pc}

00003434 <rt_strncmp>:
 *         If the result < 0, cs is smaller than ct.
 *         If the result > 0, cs is greater than ct.
 *         If the result = 0, cs is equal to ct.
 */
rt_int32_t rt_strncmp(const char *cs, const char *ct, rt_size_t count)
{
    3434:	b590      	push	{r4, r7, lr}
    3436:	b085      	sub	sp, #20
    3438:	af00      	add	r7, sp, #0
    343a:	60f8      	str	r0, [r7, #12]
    343c:	60b9      	str	r1, [r7, #8]
    343e:	607a      	str	r2, [r7, #4]
    register signed char __res = 0;
    3440:	2400      	movs	r4, #0

    while (count)
    3442:	e013      	b.n	346c <rt_strncmp+0x38>
    {
        if ((__res = *cs - *ct++) != 0 || !*cs++)
    3444:	68fb      	ldr	r3, [r7, #12]
    3446:	781a      	ldrb	r2, [r3, #0]
    3448:	68bb      	ldr	r3, [r7, #8]
    344a:	1c59      	adds	r1, r3, #1
    344c:	60b9      	str	r1, [r7, #8]
    344e:	781b      	ldrb	r3, [r3, #0]
    3450:	1ad3      	subs	r3, r2, r3
    3452:	b2db      	uxtb	r3, r3
    3454:	b25c      	sxtb	r4, r3
    3456:	2c00      	cmp	r4, #0
    3458:	d10b      	bne.n	3472 <rt_strncmp+0x3e>
    345a:	68fb      	ldr	r3, [r7, #12]
    345c:	1c5a      	adds	r2, r3, #1
    345e:	60fa      	str	r2, [r7, #12]
    3460:	781b      	ldrb	r3, [r3, #0]
    3462:	2b00      	cmp	r3, #0
    3464:	d005      	beq.n	3472 <rt_strncmp+0x3e>
            break;
        count --;
    3466:	687b      	ldr	r3, [r7, #4]
    3468:	3b01      	subs	r3, #1
    346a:	607b      	str	r3, [r7, #4]
    while (count)
    346c:	687b      	ldr	r3, [r7, #4]
    346e:	2b00      	cmp	r3, #0
    3470:	d1e8      	bne.n	3444 <rt_strncmp+0x10>
    }

    return __res;
    3472:	0023      	movs	r3, r4
}
    3474:	0018      	movs	r0, r3
    3476:	46bd      	mov	sp, r7
    3478:	b005      	add	sp, #20
    347a:	bd90      	pop	{r4, r7, pc}

0000347c <rt_show_version>:

/**
 * This function will show the version of rt-thread rtos
 */
void rt_show_version(void)
{
    347c:	b580      	push	{r7, lr}
    347e:	b082      	sub	sp, #8
    3480:	af02      	add	r7, sp, #8
    rt_kprintf("\n \\ | /\n");
    3482:	4b0c      	ldr	r3, [pc, #48]	; (34b4 <rt_show_version+0x38>)
    3484:	0018      	movs	r0, r3
    3486:	f000 fbfd 	bl	3c84 <rt_kprintf>
    rt_kprintf("- RT -     Thread Operating System\n");
    348a:	4b0b      	ldr	r3, [pc, #44]	; (34b8 <rt_show_version+0x3c>)
    348c:	0018      	movs	r0, r3
    348e:	f000 fbf9 	bl	3c84 <rt_kprintf>
    rt_kprintf(" / | \\     %d.%d.%d build %s %s\n",
    3492:	480a      	ldr	r0, [pc, #40]	; (34bc <rt_show_version+0x40>)
    3494:	4b0a      	ldr	r3, [pc, #40]	; (34c0 <rt_show_version+0x44>)
    3496:	9301      	str	r3, [sp, #4]
    3498:	4b0a      	ldr	r3, [pc, #40]	; (34c4 <rt_show_version+0x48>)
    349a:	9300      	str	r3, [sp, #0]
    349c:	2300      	movs	r3, #0
    349e:	2201      	movs	r2, #1
    34a0:	2104      	movs	r1, #4
    34a2:	f000 fbef 	bl	3c84 <rt_kprintf>
               RT_VERSION, RT_SUBVERSION, RT_REVISION, __DATE__, __TIME__);
    rt_kprintf(" 2006 - 2022 Copyright by RT-Thread team\n");
    34a6:	4b08      	ldr	r3, [pc, #32]	; (34c8 <rt_show_version+0x4c>)
    34a8:	0018      	movs	r0, r3
    34aa:	f000 fbeb 	bl	3c84 <rt_kprintf>
}
    34ae:	46c0      	nop			; (mov r8, r8)
    34b0:	46bd      	mov	sp, r7
    34b2:	bd80      	pop	{r7, pc}
    34b4:	0000bdb8 	.word	0x0000bdb8
    34b8:	0000bdc4 	.word	0x0000bdc4
    34bc:	0000bde8 	.word	0x0000bde8
    34c0:	0000be0c 	.word	0x0000be0c
    34c4:	0000be18 	.word	0x0000be18
    34c8:	0000be24 	.word	0x0000be24

000034cc <divide>:
#ifdef RT_KPRINTF_USING_LONGLONG
rt_inline int divide(long long *n, int base)
#else
rt_inline int divide(long *n, int base)
#endif /* RT_KPRINTF_USING_LONGLONG */
{
    34cc:	b580      	push	{r7, lr}
    34ce:	b084      	sub	sp, #16
    34d0:	af00      	add	r7, sp, #0
    34d2:	6078      	str	r0, [r7, #4]
    34d4:	6039      	str	r1, [r7, #0]
    int res;

    /* optimized for processor which does not support divide instructions. */
    if (base == 10)
    34d6:	683b      	ldr	r3, [r7, #0]
    34d8:	2b0a      	cmp	r3, #10
    34da:	d112      	bne.n	3502 <divide+0x36>
    {
#ifdef RT_KPRINTF_USING_LONGLONG
        res = (int)(((unsigned long long)*n) % 10U);
        *n = (long long)(((unsigned long long)*n) / 10U);
#else
        res = (int)(((unsigned long)*n) % 10U);
    34dc:	687b      	ldr	r3, [r7, #4]
    34de:	681b      	ldr	r3, [r3, #0]
    34e0:	210a      	movs	r1, #10
    34e2:	0018      	movs	r0, r3
    34e4:	f007 fd62 	bl	afac <__aeabi_uidivmod>
    34e8:	000b      	movs	r3, r1
    34ea:	60fb      	str	r3, [r7, #12]
        *n = (long)(((unsigned long)*n) / 10U);
    34ec:	687b      	ldr	r3, [r7, #4]
    34ee:	681b      	ldr	r3, [r3, #0]
    34f0:	210a      	movs	r1, #10
    34f2:	0018      	movs	r0, r3
    34f4:	f007 fcd4 	bl	aea0 <__udivsi3>
    34f8:	0003      	movs	r3, r0
    34fa:	001a      	movs	r2, r3
    34fc:	687b      	ldr	r3, [r7, #4]
    34fe:	601a      	str	r2, [r3, #0]
    3500:	e00a      	b.n	3518 <divide+0x4c>
    {
#ifdef RT_KPRINTF_USING_LONGLONG
        res = (int)(((unsigned long long)*n) % 16U);
        *n = (long long)(((unsigned long long)*n) / 16U);
#else
        res = (int)(((unsigned long)*n) % 16U);
    3502:	687b      	ldr	r3, [r7, #4]
    3504:	681b      	ldr	r3, [r3, #0]
    3506:	220f      	movs	r2, #15
    3508:	4013      	ands	r3, r2
    350a:	60fb      	str	r3, [r7, #12]
        *n = (long)(((unsigned long)*n) / 16U);
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	681b      	ldr	r3, [r3, #0]
    3510:	091b      	lsrs	r3, r3, #4
    3512:	001a      	movs	r2, r3
    3514:	687b      	ldr	r3, [r7, #4]
    3516:	601a      	str	r2, [r3, #0]
#endif
    }

    return res;
    3518:	68fb      	ldr	r3, [r7, #12]
}
    351a:	0018      	movs	r0, r3
    351c:	46bd      	mov	sp, r7
    351e:	b004      	add	sp, #16
    3520:	bd80      	pop	{r7, pc}

00003522 <skip_atoi>:

rt_inline int skip_atoi(const char **s)
{
    3522:	b590      	push	{r4, r7, lr}
    3524:	b083      	sub	sp, #12
    3526:	af00      	add	r7, sp, #0
    3528:	6078      	str	r0, [r7, #4]
    register int i = 0;
    352a:	2400      	movs	r4, #0
    while (_ISDIGIT(**s))
    352c:	e00d      	b.n	354a <skip_atoi+0x28>
        i = i * 10 + *((*s)++) - '0';
    352e:	0023      	movs	r3, r4
    3530:	009b      	lsls	r3, r3, #2
    3532:	191b      	adds	r3, r3, r4
    3534:	005b      	lsls	r3, r3, #1
    3536:	0018      	movs	r0, r3
    3538:	687b      	ldr	r3, [r7, #4]
    353a:	681b      	ldr	r3, [r3, #0]
    353c:	1c59      	adds	r1, r3, #1
    353e:	687a      	ldr	r2, [r7, #4]
    3540:	6011      	str	r1, [r2, #0]
    3542:	781b      	ldrb	r3, [r3, #0]
    3544:	18c3      	adds	r3, r0, r3
    3546:	3b30      	subs	r3, #48	; 0x30
    3548:	001c      	movs	r4, r3
    while (_ISDIGIT(**s))
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	681b      	ldr	r3, [r3, #0]
    354e:	781b      	ldrb	r3, [r3, #0]
    3550:	3b30      	subs	r3, #48	; 0x30
    3552:	2b09      	cmp	r3, #9
    3554:	d9eb      	bls.n	352e <skip_atoi+0xc>

    return i;
    3556:	0023      	movs	r3, r4
}
    3558:	0018      	movs	r0, r3
    355a:	46bd      	mov	sp, r7
    355c:	b003      	add	sp, #12
    355e:	bd90      	pop	{r4, r7, pc}

00003560 <print_number>:
                          int   s,
#ifdef RT_PRINTF_PRECISION
                          int   precision,
#endif /* RT_PRINTF_PRECISION */
                          int   type)
{
    3560:	b5b0      	push	{r4, r5, r7, lr}
    3562:	b08c      	sub	sp, #48	; 0x30
    3564:	af00      	add	r7, sp, #0
    3566:	60f8      	str	r0, [r7, #12]
    3568:	60b9      	str	r1, [r7, #8]
    356a:	607a      	str	r2, [r7, #4]
    356c:	603b      	str	r3, [r7, #0]
#ifdef RT_KPRINTF_USING_LONGLONG
    char tmp[32];
#else
    char tmp[16];
#endif /* RT_KPRINTF_USING_LONGLONG */
    int precision_bak = precision;
    356e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3570:	62bb      	str	r3, [r7, #40]	; 0x28
    static const char small_digits[] = "0123456789abcdef";
    static const char large_digits[] = "0123456789ABCDEF";
    register int i;
    register int size;

    size = s;
    3572:	6c3c      	ldr	r4, [r7, #64]	; 0x40

    digits = (type & LARGE) ? large_digits : small_digits;
    3574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3576:	2240      	movs	r2, #64	; 0x40
    3578:	4013      	ands	r3, r2
    357a:	d001      	beq.n	3580 <print_number+0x20>
    357c:	4b6a      	ldr	r3, [pc, #424]	; (3728 <print_number+0x1c8>)
    357e:	e000      	b.n	3582 <print_number+0x22>
    3580:	4b6a      	ldr	r3, [pc, #424]	; (372c <print_number+0x1cc>)
    3582:	627b      	str	r3, [r7, #36]	; 0x24
    if (type & LEFT)
    3584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3586:	2210      	movs	r2, #16
    3588:	4013      	ands	r3, r2
    358a:	d003      	beq.n	3594 <print_number+0x34>
        type &= ~ZEROPAD;
    358c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    358e:	2201      	movs	r2, #1
    3590:	4393      	bics	r3, r2
    3592:	64bb      	str	r3, [r7, #72]	; 0x48

    c = (type & ZEROPAD) ? '0' : ' ';
    3594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3596:	2201      	movs	r2, #1
    3598:	4013      	ands	r3, r2
    359a:	d001      	beq.n	35a0 <print_number+0x40>
    359c:	2230      	movs	r2, #48	; 0x30
    359e:	e000      	b.n	35a2 <print_number+0x42>
    35a0:	2220      	movs	r2, #32
    35a2:	2323      	movs	r3, #35	; 0x23
    35a4:	18fb      	adds	r3, r7, r3
    35a6:	701a      	strb	r2, [r3, #0]

    /* get sign */
    sign = 0;
    35a8:	212f      	movs	r1, #47	; 0x2f
    35aa:	187b      	adds	r3, r7, r1
    35ac:	2200      	movs	r2, #0
    35ae:	701a      	strb	r2, [r3, #0]
    if (type & SIGN)
    35b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    35b2:	2202      	movs	r2, #2
    35b4:	4013      	ands	r3, r2
    35b6:	d01a      	beq.n	35ee <print_number+0x8e>
    {
        if (num < 0)
    35b8:	687b      	ldr	r3, [r7, #4]
    35ba:	2b00      	cmp	r3, #0
    35bc:	da06      	bge.n	35cc <print_number+0x6c>
        {
            sign = '-';
    35be:	187b      	adds	r3, r7, r1
    35c0:	222d      	movs	r2, #45	; 0x2d
    35c2:	701a      	strb	r2, [r3, #0]
            num = -num;
    35c4:	687b      	ldr	r3, [r7, #4]
    35c6:	425b      	negs	r3, r3
    35c8:	607b      	str	r3, [r7, #4]
    35ca:	e010      	b.n	35ee <print_number+0x8e>
        }
        else if (type & PLUS)
    35cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    35ce:	2204      	movs	r2, #4
    35d0:	4013      	ands	r3, r2
    35d2:	d004      	beq.n	35de <print_number+0x7e>
            sign = '+';
    35d4:	232f      	movs	r3, #47	; 0x2f
    35d6:	18fb      	adds	r3, r7, r3
    35d8:	222b      	movs	r2, #43	; 0x2b
    35da:	701a      	strb	r2, [r3, #0]
    35dc:	e007      	b.n	35ee <print_number+0x8e>
        else if (type & SPACE)
    35de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    35e0:	2208      	movs	r2, #8
    35e2:	4013      	ands	r3, r2
    35e4:	d003      	beq.n	35ee <print_number+0x8e>
            sign = ' ';
    35e6:	232f      	movs	r3, #47	; 0x2f
    35e8:	18fb      	adds	r3, r7, r3
    35ea:	2220      	movs	r2, #32
    35ec:	701a      	strb	r2, [r3, #0]
        else if (base == 8)
            size--;
    }
#endif /* RT_PRINTF_SPECIAL */

    i = 0;
    35ee:	2500      	movs	r5, #0
    if (num == 0)
    35f0:	687b      	ldr	r3, [r7, #4]
    35f2:	2b00      	cmp	r3, #0
    35f4:	d116      	bne.n	3624 <print_number+0xc4>
        tmp[i++] = '0';
    35f6:	002b      	movs	r3, r5
    35f8:	1c5d      	adds	r5, r3, #1
    35fa:	2210      	movs	r2, #16
    35fc:	18ba      	adds	r2, r7, r2
    35fe:	2130      	movs	r1, #48	; 0x30
    3600:	54d1      	strb	r1, [r2, r3]
    3602:	e012      	b.n	362a <print_number+0xca>
    else
    {
        while (num != 0)
            tmp[i++] = digits[divide(&num, base)];
    3604:	683a      	ldr	r2, [r7, #0]
    3606:	1d3b      	adds	r3, r7, #4
    3608:	0011      	movs	r1, r2
    360a:	0018      	movs	r0, r3
    360c:	f7ff ff5e 	bl	34cc <divide>
    3610:	0003      	movs	r3, r0
    3612:	001a      	movs	r2, r3
    3614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3616:	189a      	adds	r2, r3, r2
    3618:	002b      	movs	r3, r5
    361a:	1c5d      	adds	r5, r3, #1
    361c:	7811      	ldrb	r1, [r2, #0]
    361e:	2210      	movs	r2, #16
    3620:	18ba      	adds	r2, r7, r2
    3622:	54d1      	strb	r1, [r2, r3]
        while (num != 0)
    3624:	687b      	ldr	r3, [r7, #4]
    3626:	2b00      	cmp	r3, #0
    3628:	d1ec      	bne.n	3604 <print_number+0xa4>
    }

#ifdef RT_PRINTF_PRECISION
    if (i > precision)
    362a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    362c:	429d      	cmp	r5, r3
    362e:	dd00      	ble.n	3632 <print_number+0xd2>
        precision = i;
    3630:	647d      	str	r5, [r7, #68]	; 0x44
    size -= precision;
    3632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3634:	1ae4      	subs	r4, r4, r3
#else
    size -= i;
#endif /* RT_PRINTF_PRECISION */

    if (!(type & (ZEROPAD | LEFT)))
    3636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3638:	2211      	movs	r2, #17
    363a:	4013      	ands	r3, r2
    363c:	d116      	bne.n	366c <print_number+0x10c>
    {
        if ((sign) && (size > 0))
    363e:	232f      	movs	r3, #47	; 0x2f
    3640:	18fb      	adds	r3, r7, r3
    3642:	781b      	ldrb	r3, [r3, #0]
    3644:	2b00      	cmp	r3, #0
    3646:	d00d      	beq.n	3664 <print_number+0x104>
    3648:	2c00      	cmp	r4, #0
    364a:	dd0b      	ble.n	3664 <print_number+0x104>
            size--;
    364c:	3c01      	subs	r4, #1

        while (size-- > 0)
    364e:	e009      	b.n	3664 <print_number+0x104>
        {
            if (buf < end)
    3650:	68fa      	ldr	r2, [r7, #12]
    3652:	68bb      	ldr	r3, [r7, #8]
    3654:	429a      	cmp	r2, r3
    3656:	d202      	bcs.n	365e <print_number+0xfe>
                *buf = ' ';
    3658:	68fb      	ldr	r3, [r7, #12]
    365a:	2220      	movs	r2, #32
    365c:	701a      	strb	r2, [r3, #0]
            ++ buf;
    365e:	68fb      	ldr	r3, [r7, #12]
    3660:	3301      	adds	r3, #1
    3662:	60fb      	str	r3, [r7, #12]
        while (size-- > 0)
    3664:	0023      	movs	r3, r4
    3666:	1e5c      	subs	r4, r3, #1
    3668:	2b00      	cmp	r3, #0
    366a:	dcf1      	bgt.n	3650 <print_number+0xf0>
        }
    }

    if (sign)
    366c:	212f      	movs	r1, #47	; 0x2f
    366e:	187b      	adds	r3, r7, r1
    3670:	781b      	ldrb	r3, [r3, #0]
    3672:	2b00      	cmp	r3, #0
    3674:	d00b      	beq.n	368e <print_number+0x12e>
    {
        if (buf < end)
    3676:	68fa      	ldr	r2, [r7, #12]
    3678:	68bb      	ldr	r3, [r7, #8]
    367a:	429a      	cmp	r2, r3
    367c:	d203      	bcs.n	3686 <print_number+0x126>
        {
            *buf = sign;
    367e:	68fb      	ldr	r3, [r7, #12]
    3680:	187a      	adds	r2, r7, r1
    3682:	7812      	ldrb	r2, [r2, #0]
    3684:	701a      	strb	r2, [r3, #0]
        }
        -- size;
    3686:	3c01      	subs	r4, #1
        ++ buf;
    3688:	68fb      	ldr	r3, [r7, #12]
    368a:	3301      	adds	r3, #1
    368c:	60fb      	str	r3, [r7, #12]
        }
    }
#endif /* RT_PRINTF_SPECIAL */

    /* no align to the left */
    if (!(type & LEFT))
    368e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3690:	2210      	movs	r2, #16
    3692:	4013      	ands	r3, r2
    3694:	d11b      	bne.n	36ce <print_number+0x16e>
    {
        while (size-- > 0)
    3696:	e00b      	b.n	36b0 <print_number+0x150>
        {
            if (buf < end)
    3698:	68fa      	ldr	r2, [r7, #12]
    369a:	68bb      	ldr	r3, [r7, #8]
    369c:	429a      	cmp	r2, r3
    369e:	d204      	bcs.n	36aa <print_number+0x14a>
                *buf = c;
    36a0:	68fb      	ldr	r3, [r7, #12]
    36a2:	2223      	movs	r2, #35	; 0x23
    36a4:	18ba      	adds	r2, r7, r2
    36a6:	7812      	ldrb	r2, [r2, #0]
    36a8:	701a      	strb	r2, [r3, #0]
            ++ buf;
    36aa:	68fb      	ldr	r3, [r7, #12]
    36ac:	3301      	adds	r3, #1
    36ae:	60fb      	str	r3, [r7, #12]
        while (size-- > 0)
    36b0:	0023      	movs	r3, r4
    36b2:	1e5c      	subs	r4, r3, #1
    36b4:	2b00      	cmp	r3, #0
    36b6:	dcef      	bgt.n	3698 <print_number+0x138>
        }
    }

#ifdef RT_PRINTF_PRECISION
    while (i < precision--)
    36b8:	e009      	b.n	36ce <print_number+0x16e>
    {
        if (buf < end)
    36ba:	68fa      	ldr	r2, [r7, #12]
    36bc:	68bb      	ldr	r3, [r7, #8]
    36be:	429a      	cmp	r2, r3
    36c0:	d202      	bcs.n	36c8 <print_number+0x168>
            *buf = '0';
    36c2:	68fb      	ldr	r3, [r7, #12]
    36c4:	2230      	movs	r2, #48	; 0x30
    36c6:	701a      	strb	r2, [r3, #0]
        ++ buf;
    36c8:	68fb      	ldr	r3, [r7, #12]
    36ca:	3301      	adds	r3, #1
    36cc:	60fb      	str	r3, [r7, #12]
    while (i < precision--)
    36ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    36d0:	1e5a      	subs	r2, r3, #1
    36d2:	647a      	str	r2, [r7, #68]	; 0x44
    36d4:	429d      	cmp	r5, r3
    36d6:	dbf0      	blt.n	36ba <print_number+0x15a>
    }
#endif /* RT_PRINTF_PRECISION */

    /* put number in the temporary buffer */
    while (i-- > 0 && (precision_bak != 0))
    36d8:	e00b      	b.n	36f2 <print_number+0x192>
    {
        if (buf < end)
    36da:	68fa      	ldr	r2, [r7, #12]
    36dc:	68bb      	ldr	r3, [r7, #8]
    36de:	429a      	cmp	r2, r3
    36e0:	d204      	bcs.n	36ec <print_number+0x18c>
            *buf = tmp[i];
    36e2:	2310      	movs	r3, #16
    36e4:	18fb      	adds	r3, r7, r3
    36e6:	5d5a      	ldrb	r2, [r3, r5]
    36e8:	68fb      	ldr	r3, [r7, #12]
    36ea:	701a      	strb	r2, [r3, #0]
        ++ buf;
    36ec:	68fb      	ldr	r3, [r7, #12]
    36ee:	3301      	adds	r3, #1
    36f0:	60fb      	str	r3, [r7, #12]
    while (i-- > 0 && (precision_bak != 0))
    36f2:	002b      	movs	r3, r5
    36f4:	1e5d      	subs	r5, r3, #1
    36f6:	2b00      	cmp	r3, #0
    36f8:	dd0d      	ble.n	3716 <print_number+0x1b6>
    36fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36fc:	2b00      	cmp	r3, #0
    36fe:	d1ec      	bne.n	36da <print_number+0x17a>
    }

    while (size-- > 0)
    3700:	e009      	b.n	3716 <print_number+0x1b6>
    {
        if (buf < end)
    3702:	68fa      	ldr	r2, [r7, #12]
    3704:	68bb      	ldr	r3, [r7, #8]
    3706:	429a      	cmp	r2, r3
    3708:	d202      	bcs.n	3710 <print_number+0x1b0>
            *buf = ' ';
    370a:	68fb      	ldr	r3, [r7, #12]
    370c:	2220      	movs	r2, #32
    370e:	701a      	strb	r2, [r3, #0]
        ++ buf;
    3710:	68fb      	ldr	r3, [r7, #12]
    3712:	3301      	adds	r3, #1
    3714:	60fb      	str	r3, [r7, #12]
    while (size-- > 0)
    3716:	0023      	movs	r3, r4
    3718:	1e5c      	subs	r4, r3, #1
    371a:	2b00      	cmp	r3, #0
    371c:	dcf1      	bgt.n	3702 <print_number+0x1a2>
    }

    return buf;
    371e:	68fb      	ldr	r3, [r7, #12]
}
    3720:	0018      	movs	r0, r3
    3722:	46bd      	mov	sp, r7
    3724:	b00c      	add	sp, #48	; 0x30
    3726:	bdb0      	pop	{r4, r5, r7, pc}
    3728:	0000c044 	.word	0x0000c044
    372c:	0000c058 	.word	0x0000c058

00003730 <rt_vsnprintf>:
 * @param  args is a list of variable parameters.
 *
 * @return The number of characters actually written to buffer.
 */
RT_WEAK int rt_vsnprintf(char *buf, rt_size_t size, const char *fmt, va_list args)
{
    3730:	b590      	push	{r4, r7, lr}
    3732:	b093      	sub	sp, #76	; 0x4c
    3734:	af04      	add	r7, sp, #16
    3736:	60f8      	str	r0, [r7, #12]
    3738:	60b9      	str	r1, [r7, #8]
    373a:	607a      	str	r2, [r7, #4]
    373c:	603b      	str	r3, [r7, #0]

#ifdef RT_PRINTF_PRECISION
    int precision;      /* min. # of digits for integers and max for a string */
#endif /* RT_PRINTF_PRECISION */

    str = buf;
    373e:	68fb      	ldr	r3, [r7, #12]
    3740:	62bb      	str	r3, [r7, #40]	; 0x28
    end = buf + size;
    3742:	68fa      	ldr	r2, [r7, #12]
    3744:	68bb      	ldr	r3, [r7, #8]
    3746:	18d3      	adds	r3, r2, r3
    3748:	627b      	str	r3, [r7, #36]	; 0x24

    /* Make sure end is always >= buf */
    if (end < buf)
    374a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    374c:	68fb      	ldr	r3, [r7, #12]
    374e:	429a      	cmp	r2, r3
    3750:	d300      	bcc.n	3754 <rt_vsnprintf+0x24>
    3752:	e216      	b.n	3b82 <rt_vsnprintf+0x452>
    {
        end  = ((char *) - 1);
    3754:	2301      	movs	r3, #1
    3756:	425b      	negs	r3, r3
    3758:	627b      	str	r3, [r7, #36]	; 0x24
        size = end - buf;
    375a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    375c:	68fb      	ldr	r3, [r7, #12]
    375e:	1ad3      	subs	r3, r2, r3
    3760:	60bb      	str	r3, [r7, #8]
    }

    for (; *fmt ; ++fmt)
    3762:	e20e      	b.n	3b82 <rt_vsnprintf+0x452>
    {
        if (*fmt != '%')
    3764:	687b      	ldr	r3, [r7, #4]
    3766:	781b      	ldrb	r3, [r3, #0]
    3768:	2b25      	cmp	r3, #37	; 0x25
    376a:	d00b      	beq.n	3784 <rt_vsnprintf+0x54>
        {
            if (str < end)
    376c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3770:	429a      	cmp	r2, r3
    3772:	d203      	bcs.n	377c <rt_vsnprintf+0x4c>
                *str = *fmt;
    3774:	687b      	ldr	r3, [r7, #4]
    3776:	781a      	ldrb	r2, [r3, #0]
    3778:	6abb      	ldr	r3, [r7, #40]	; 0x28
    377a:	701a      	strb	r2, [r3, #0]
            ++ str;
    377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    377e:	3301      	adds	r3, #1
    3780:	62bb      	str	r3, [r7, #40]	; 0x28
            continue;
    3782:	e1fb      	b.n	3b7c <rt_vsnprintf+0x44c>
        }

        /* process flags */
        flags = 0;
    3784:	231e      	movs	r3, #30
    3786:	18fb      	adds	r3, r7, r3
    3788:	2200      	movs	r2, #0
    378a:	701a      	strb	r2, [r3, #0]

        while (1)
        {
            /* skips the first '%' also */
            ++ fmt;
    378c:	687b      	ldr	r3, [r7, #4]
    378e:	3301      	adds	r3, #1
    3790:	607b      	str	r3, [r7, #4]
            if (*fmt == '-') flags |= LEFT;
    3792:	687b      	ldr	r3, [r7, #4]
    3794:	781b      	ldrb	r3, [r3, #0]
    3796:	2b2d      	cmp	r3, #45	; 0x2d
    3798:	d107      	bne.n	37aa <rt_vsnprintf+0x7a>
    379a:	221e      	movs	r2, #30
    379c:	18bb      	adds	r3, r7, r2
    379e:	18ba      	adds	r2, r7, r2
    37a0:	7812      	ldrb	r2, [r2, #0]
    37a2:	2110      	movs	r1, #16
    37a4:	430a      	orrs	r2, r1
    37a6:	701a      	strb	r2, [r3, #0]
    37a8:	e7f0      	b.n	378c <rt_vsnprintf+0x5c>
            else if (*fmt == '+') flags |= PLUS;
    37aa:	687b      	ldr	r3, [r7, #4]
    37ac:	781b      	ldrb	r3, [r3, #0]
    37ae:	2b2b      	cmp	r3, #43	; 0x2b
    37b0:	d107      	bne.n	37c2 <rt_vsnprintf+0x92>
    37b2:	221e      	movs	r2, #30
    37b4:	18bb      	adds	r3, r7, r2
    37b6:	18ba      	adds	r2, r7, r2
    37b8:	7812      	ldrb	r2, [r2, #0]
    37ba:	2104      	movs	r1, #4
    37bc:	430a      	orrs	r2, r1
    37be:	701a      	strb	r2, [r3, #0]
    37c0:	e7e4      	b.n	378c <rt_vsnprintf+0x5c>
            else if (*fmt == ' ') flags |= SPACE;
    37c2:	687b      	ldr	r3, [r7, #4]
    37c4:	781b      	ldrb	r3, [r3, #0]
    37c6:	2b20      	cmp	r3, #32
    37c8:	d107      	bne.n	37da <rt_vsnprintf+0xaa>
    37ca:	221e      	movs	r2, #30
    37cc:	18bb      	adds	r3, r7, r2
    37ce:	18ba      	adds	r2, r7, r2
    37d0:	7812      	ldrb	r2, [r2, #0]
    37d2:	2108      	movs	r1, #8
    37d4:	430a      	orrs	r2, r1
    37d6:	701a      	strb	r2, [r3, #0]
    37d8:	e7d8      	b.n	378c <rt_vsnprintf+0x5c>
            else if (*fmt == '#') flags |= SPECIAL;
    37da:	687b      	ldr	r3, [r7, #4]
    37dc:	781b      	ldrb	r3, [r3, #0]
    37de:	2b23      	cmp	r3, #35	; 0x23
    37e0:	d107      	bne.n	37f2 <rt_vsnprintf+0xc2>
    37e2:	221e      	movs	r2, #30
    37e4:	18bb      	adds	r3, r7, r2
    37e6:	18ba      	adds	r2, r7, r2
    37e8:	7812      	ldrb	r2, [r2, #0]
    37ea:	2120      	movs	r1, #32
    37ec:	430a      	orrs	r2, r1
    37ee:	701a      	strb	r2, [r3, #0]
    37f0:	e7cc      	b.n	378c <rt_vsnprintf+0x5c>
            else if (*fmt == '0') flags |= ZEROPAD;
    37f2:	687b      	ldr	r3, [r7, #4]
    37f4:	781b      	ldrb	r3, [r3, #0]
    37f6:	2b30      	cmp	r3, #48	; 0x30
    37f8:	d107      	bne.n	380a <rt_vsnprintf+0xda>
    37fa:	221e      	movs	r2, #30
    37fc:	18bb      	adds	r3, r7, r2
    37fe:	18ba      	adds	r2, r7, r2
    3800:	7812      	ldrb	r2, [r2, #0]
    3802:	2101      	movs	r1, #1
    3804:	430a      	orrs	r2, r1
    3806:	701a      	strb	r2, [r3, #0]
            ++ fmt;
    3808:	e7c0      	b.n	378c <rt_vsnprintf+0x5c>
            else break;
    380a:	46c0      	nop			; (mov r8, r8)
        }

        /* get field width */
        field_width = -1;
    380c:	2301      	movs	r3, #1
    380e:	425b      	negs	r3, r3
    3810:	61bb      	str	r3, [r7, #24]
        if (_ISDIGIT(*fmt)) field_width = skip_atoi(&fmt);
    3812:	687b      	ldr	r3, [r7, #4]
    3814:	781b      	ldrb	r3, [r3, #0]
    3816:	3b30      	subs	r3, #48	; 0x30
    3818:	2b09      	cmp	r3, #9
    381a:	d806      	bhi.n	382a <rt_vsnprintf+0xfa>
    381c:	1d3b      	adds	r3, r7, #4
    381e:	0018      	movs	r0, r3
    3820:	f7ff fe7f 	bl	3522 <skip_atoi>
    3824:	0003      	movs	r3, r0
    3826:	61bb      	str	r3, [r7, #24]
    3828:	e018      	b.n	385c <rt_vsnprintf+0x12c>
        else if (*fmt == '*')
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	781b      	ldrb	r3, [r3, #0]
    382e:	2b2a      	cmp	r3, #42	; 0x2a
    3830:	d114      	bne.n	385c <rt_vsnprintf+0x12c>
        {
            ++ fmt;
    3832:	687b      	ldr	r3, [r7, #4]
    3834:	3301      	adds	r3, #1
    3836:	607b      	str	r3, [r7, #4]
            /* it's the next argument */
            field_width = va_arg(args, int);
    3838:	683b      	ldr	r3, [r7, #0]
    383a:	1d1a      	adds	r2, r3, #4
    383c:	603a      	str	r2, [r7, #0]
    383e:	681b      	ldr	r3, [r3, #0]
    3840:	61bb      	str	r3, [r7, #24]
            if (field_width < 0)
    3842:	69bb      	ldr	r3, [r7, #24]
    3844:	2b00      	cmp	r3, #0
    3846:	da09      	bge.n	385c <rt_vsnprintf+0x12c>
            {
                field_width = -field_width;
    3848:	69bb      	ldr	r3, [r7, #24]
    384a:	425b      	negs	r3, r3
    384c:	61bb      	str	r3, [r7, #24]
                flags |= LEFT;
    384e:	221e      	movs	r2, #30
    3850:	18bb      	adds	r3, r7, r2
    3852:	18ba      	adds	r2, r7, r2
    3854:	7812      	ldrb	r2, [r2, #0]
    3856:	2110      	movs	r1, #16
    3858:	430a      	orrs	r2, r1
    385a:	701a      	strb	r2, [r3, #0]
            }
        }

#ifdef RT_PRINTF_PRECISION
        /* get the precision */
        precision = -1;
    385c:	2301      	movs	r3, #1
    385e:	425b      	negs	r3, r3
    3860:	617b      	str	r3, [r7, #20]
        if (*fmt == '.')
    3862:	687b      	ldr	r3, [r7, #4]
    3864:	781b      	ldrb	r3, [r3, #0]
    3866:	2b2e      	cmp	r3, #46	; 0x2e
    3868:	d11f      	bne.n	38aa <rt_vsnprintf+0x17a>
        {
            ++ fmt;
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	3301      	adds	r3, #1
    386e:	607b      	str	r3, [r7, #4]
            if (_ISDIGIT(*fmt)) precision = skip_atoi(&fmt);
    3870:	687b      	ldr	r3, [r7, #4]
    3872:	781b      	ldrb	r3, [r3, #0]
    3874:	3b30      	subs	r3, #48	; 0x30
    3876:	2b09      	cmp	r3, #9
    3878:	d806      	bhi.n	3888 <rt_vsnprintf+0x158>
    387a:	1d3b      	adds	r3, r7, #4
    387c:	0018      	movs	r0, r3
    387e:	f7ff fe50 	bl	3522 <skip_atoi>
    3882:	0003      	movs	r3, r0
    3884:	617b      	str	r3, [r7, #20]
    3886:	e00b      	b.n	38a0 <rt_vsnprintf+0x170>
            else if (*fmt == '*')
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	781b      	ldrb	r3, [r3, #0]
    388c:	2b2a      	cmp	r3, #42	; 0x2a
    388e:	d107      	bne.n	38a0 <rt_vsnprintf+0x170>
            {
                ++ fmt;
    3890:	687b      	ldr	r3, [r7, #4]
    3892:	3301      	adds	r3, #1
    3894:	607b      	str	r3, [r7, #4]
                /* it's the next argument */
                precision = va_arg(args, int);
    3896:	683b      	ldr	r3, [r7, #0]
    3898:	1d1a      	adds	r2, r3, #4
    389a:	603a      	str	r2, [r7, #0]
    389c:	681b      	ldr	r3, [r3, #0]
    389e:	617b      	str	r3, [r7, #20]
            }
            if (precision < 0) precision = 0;
    38a0:	697b      	ldr	r3, [r7, #20]
    38a2:	2b00      	cmp	r3, #0
    38a4:	da01      	bge.n	38aa <rt_vsnprintf+0x17a>
    38a6:	2300      	movs	r3, #0
    38a8:	617b      	str	r3, [r7, #20]
        }
#endif /* RT_PRINTF_PRECISION */
        /* get the conversion qualifier */
        qualifier = 0;
    38aa:	231d      	movs	r3, #29
    38ac:	18fb      	adds	r3, r7, r3
    38ae:	2200      	movs	r2, #0
    38b0:	701a      	strb	r2, [r3, #0]
#ifdef RT_KPRINTF_USING_LONGLONG
        if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L')
#else
        if (*fmt == 'h' || *fmt == 'l')
    38b2:	687b      	ldr	r3, [r7, #4]
    38b4:	781b      	ldrb	r3, [r3, #0]
    38b6:	2b68      	cmp	r3, #104	; 0x68
    38b8:	d003      	beq.n	38c2 <rt_vsnprintf+0x192>
    38ba:	687b      	ldr	r3, [r7, #4]
    38bc:	781b      	ldrb	r3, [r3, #0]
    38be:	2b6c      	cmp	r3, #108	; 0x6c
    38c0:	d107      	bne.n	38d2 <rt_vsnprintf+0x1a2>
#endif /* RT_KPRINTF_USING_LONGLONG */
        {
            qualifier = *fmt;
    38c2:	687a      	ldr	r2, [r7, #4]
    38c4:	231d      	movs	r3, #29
    38c6:	18fb      	adds	r3, r7, r3
    38c8:	7812      	ldrb	r2, [r2, #0]
    38ca:	701a      	strb	r2, [r3, #0]
            ++ fmt;
    38cc:	687b      	ldr	r3, [r7, #4]
    38ce:	3301      	adds	r3, #1
    38d0:	607b      	str	r3, [r7, #4]
            }
#endif /* RT_KPRINTF_USING_LONGLONG */
        }

        /* the default base */
        base = 10;
    38d2:	231f      	movs	r3, #31
    38d4:	18fb      	adds	r3, r7, r3
    38d6:	220a      	movs	r2, #10
    38d8:	701a      	strb	r2, [r3, #0]

        switch (*fmt)
    38da:	687b      	ldr	r3, [r7, #4]
    38dc:	781b      	ldrb	r3, [r3, #0]
    38de:	2b25      	cmp	r3, #37	; 0x25
    38e0:	d100      	bne.n	38e4 <rt_vsnprintf+0x1b4>
    38e2:	e0d0      	b.n	3a86 <rt_vsnprintf+0x356>
    38e4:	da00      	bge.n	38e8 <rt_vsnprintf+0x1b8>
    38e6:	e0f2      	b.n	3ace <rt_vsnprintf+0x39e>
    38e8:	2b78      	cmp	r3, #120	; 0x78
    38ea:	dd00      	ble.n	38ee <rt_vsnprintf+0x1be>
    38ec:	e0ef      	b.n	3ace <rt_vsnprintf+0x39e>
    38ee:	2b58      	cmp	r3, #88	; 0x58
    38f0:	da00      	bge.n	38f4 <rt_vsnprintf+0x1c4>
    38f2:	e0ec      	b.n	3ace <rt_vsnprintf+0x39e>
    38f4:	3b58      	subs	r3, #88	; 0x58
    38f6:	2b20      	cmp	r3, #32
    38f8:	d900      	bls.n	38fc <rt_vsnprintf+0x1cc>
    38fa:	e0e8      	b.n	3ace <rt_vsnprintf+0x39e>
    38fc:	009a      	lsls	r2, r3, #2
    38fe:	4bae      	ldr	r3, [pc, #696]	; (3bb8 <rt_vsnprintf+0x488>)
    3900:	18d3      	adds	r3, r2, r3
    3902:	681b      	ldr	r3, [r3, #0]
    3904:	469f      	mov	pc, r3
        {
        case 'c':
            if (!(flags & LEFT))
    3906:	231e      	movs	r3, #30
    3908:	18fb      	adds	r3, r7, r3
    390a:	781b      	ldrb	r3, [r3, #0]
    390c:	2210      	movs	r2, #16
    390e:	4013      	ands	r3, r2
    3910:	d110      	bne.n	3934 <rt_vsnprintf+0x204>
            {
                while (--field_width > 0)
    3912:	e009      	b.n	3928 <rt_vsnprintf+0x1f8>
                {
                    if (str < end) *str = ' ';
    3914:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3918:	429a      	cmp	r2, r3
    391a:	d202      	bcs.n	3922 <rt_vsnprintf+0x1f2>
    391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    391e:	2220      	movs	r2, #32
    3920:	701a      	strb	r2, [r3, #0]
                    ++ str;
    3922:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3924:	3301      	adds	r3, #1
    3926:	62bb      	str	r3, [r7, #40]	; 0x28
                while (--field_width > 0)
    3928:	69bb      	ldr	r3, [r7, #24]
    392a:	3b01      	subs	r3, #1
    392c:	61bb      	str	r3, [r7, #24]
    392e:	69bb      	ldr	r3, [r7, #24]
    3930:	2b00      	cmp	r3, #0
    3932:	dcef      	bgt.n	3914 <rt_vsnprintf+0x1e4>
                }
            }

            /* get character */
            c = (rt_uint8_t)va_arg(args, int);
    3934:	683b      	ldr	r3, [r7, #0]
    3936:	1d1a      	adds	r2, r3, #4
    3938:	603a      	str	r2, [r7, #0]
    393a:	681a      	ldr	r2, [r3, #0]
    393c:	2113      	movs	r1, #19
    393e:	187b      	adds	r3, r7, r1
    3940:	701a      	strb	r2, [r3, #0]
            if (str < end) *str = c;
    3942:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3946:	429a      	cmp	r2, r3
    3948:	d203      	bcs.n	3952 <rt_vsnprintf+0x222>
    394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    394c:	187a      	adds	r2, r7, r1
    394e:	7812      	ldrb	r2, [r2, #0]
    3950:	701a      	strb	r2, [r3, #0]
            ++ str;
    3952:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3954:	3301      	adds	r3, #1
    3956:	62bb      	str	r3, [r7, #40]	; 0x28

            /* put width */
            while (--field_width > 0)
    3958:	e009      	b.n	396e <rt_vsnprintf+0x23e>
            {
                if (str < end) *str = ' ';
    395a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    395e:	429a      	cmp	r2, r3
    3960:	d202      	bcs.n	3968 <rt_vsnprintf+0x238>
    3962:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3964:	2220      	movs	r2, #32
    3966:	701a      	strb	r2, [r3, #0]
                ++ str;
    3968:	6abb      	ldr	r3, [r7, #40]	; 0x28
    396a:	3301      	adds	r3, #1
    396c:	62bb      	str	r3, [r7, #40]	; 0x28
            while (--field_width > 0)
    396e:	69bb      	ldr	r3, [r7, #24]
    3970:	3b01      	subs	r3, #1
    3972:	61bb      	str	r3, [r7, #24]
    3974:	69bb      	ldr	r3, [r7, #24]
    3976:	2b00      	cmp	r3, #0
    3978:	dcef      	bgt.n	395a <rt_vsnprintf+0x22a>
            }
            continue;
    397a:	e0ff      	b.n	3b7c <rt_vsnprintf+0x44c>

        case 's':
            s = va_arg(args, char *);
    397c:	683b      	ldr	r3, [r7, #0]
    397e:	1d1a      	adds	r2, r3, #4
    3980:	603a      	str	r2, [r7, #0]
    3982:	681b      	ldr	r3, [r3, #0]
    3984:	623b      	str	r3, [r7, #32]
            if (!s) s = "(NULL)";
    3986:	6a3b      	ldr	r3, [r7, #32]
    3988:	2b00      	cmp	r3, #0
    398a:	d101      	bne.n	3990 <rt_vsnprintf+0x260>
    398c:	4b8b      	ldr	r3, [pc, #556]	; (3bbc <rt_vsnprintf+0x48c>)
    398e:	623b      	str	r3, [r7, #32]

            for (len = 0; (len != field_width) && (s[len] != '\0'); len++);
    3990:	2300      	movs	r3, #0
    3992:	62fb      	str	r3, [r7, #44]	; 0x2c
    3994:	e002      	b.n	399c <rt_vsnprintf+0x26c>
    3996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3998:	3301      	adds	r3, #1
    399a:	62fb      	str	r3, [r7, #44]	; 0x2c
    399c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    399e:	69bb      	ldr	r3, [r7, #24]
    39a0:	429a      	cmp	r2, r3
    39a2:	d005      	beq.n	39b0 <rt_vsnprintf+0x280>
    39a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    39a6:	6a3a      	ldr	r2, [r7, #32]
    39a8:	18d3      	adds	r3, r2, r3
    39aa:	781b      	ldrb	r3, [r3, #0]
    39ac:	2b00      	cmp	r3, #0
    39ae:	d1f2      	bne.n	3996 <rt_vsnprintf+0x266>
#ifdef RT_PRINTF_PRECISION
            if (precision > 0 && len > precision) len = precision;
    39b0:	697b      	ldr	r3, [r7, #20]
    39b2:	2b00      	cmp	r3, #0
    39b4:	dd05      	ble.n	39c2 <rt_vsnprintf+0x292>
    39b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    39b8:	697b      	ldr	r3, [r7, #20]
    39ba:	429a      	cmp	r2, r3
    39bc:	dd01      	ble.n	39c2 <rt_vsnprintf+0x292>
    39be:	697b      	ldr	r3, [r7, #20]
    39c0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* RT_PRINTF_PRECISION */

            if (!(flags & LEFT))
    39c2:	231e      	movs	r3, #30
    39c4:	18fb      	adds	r3, r7, r3
    39c6:	781b      	ldrb	r3, [r3, #0]
    39c8:	2210      	movs	r2, #16
    39ca:	4013      	ands	r3, r2
    39cc:	d110      	bne.n	39f0 <rt_vsnprintf+0x2c0>
            {
                while (len < field_width--)
    39ce:	e009      	b.n	39e4 <rt_vsnprintf+0x2b4>
                {
                    if (str < end) *str = ' ';
    39d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    39d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39d4:	429a      	cmp	r2, r3
    39d6:	d202      	bcs.n	39de <rt_vsnprintf+0x2ae>
    39d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    39da:	2220      	movs	r2, #32
    39dc:	701a      	strb	r2, [r3, #0]
                    ++ str;
    39de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    39e0:	3301      	adds	r3, #1
    39e2:	62bb      	str	r3, [r7, #40]	; 0x28
                while (len < field_width--)
    39e4:	69bb      	ldr	r3, [r7, #24]
    39e6:	1e5a      	subs	r2, r3, #1
    39e8:	61ba      	str	r2, [r7, #24]
    39ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    39ec:	429a      	cmp	r2, r3
    39ee:	dbef      	blt.n	39d0 <rt_vsnprintf+0x2a0>
                }
            }

            for (i = 0; i < len; ++i)
    39f0:	2300      	movs	r3, #0
    39f2:	633b      	str	r3, [r7, #48]	; 0x30
    39f4:	e010      	b.n	3a18 <rt_vsnprintf+0x2e8>
            {
                if (str < end) *str = *s;
    39f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    39f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39fa:	429a      	cmp	r2, r3
    39fc:	d203      	bcs.n	3a06 <rt_vsnprintf+0x2d6>
    39fe:	6a3b      	ldr	r3, [r7, #32]
    3a00:	781a      	ldrb	r2, [r3, #0]
    3a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a04:	701a      	strb	r2, [r3, #0]
                ++ str;
    3a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a08:	3301      	adds	r3, #1
    3a0a:	62bb      	str	r3, [r7, #40]	; 0x28
                ++ s;
    3a0c:	6a3b      	ldr	r3, [r7, #32]
    3a0e:	3301      	adds	r3, #1
    3a10:	623b      	str	r3, [r7, #32]
            for (i = 0; i < len; ++i)
    3a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a14:	3301      	adds	r3, #1
    3a16:	633b      	str	r3, [r7, #48]	; 0x30
    3a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a1c:	429a      	cmp	r2, r3
    3a1e:	dbea      	blt.n	39f6 <rt_vsnprintf+0x2c6>
            }

            while (len < field_width--)
    3a20:	e009      	b.n	3a36 <rt_vsnprintf+0x306>
            {
                if (str < end) *str = ' ';
    3a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a26:	429a      	cmp	r2, r3
    3a28:	d202      	bcs.n	3a30 <rt_vsnprintf+0x300>
    3a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a2c:	2220      	movs	r2, #32
    3a2e:	701a      	strb	r2, [r3, #0]
                ++ str;
    3a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a32:	3301      	adds	r3, #1
    3a34:	62bb      	str	r3, [r7, #40]	; 0x28
            while (len < field_width--)
    3a36:	69bb      	ldr	r3, [r7, #24]
    3a38:	1e5a      	subs	r2, r3, #1
    3a3a:	61ba      	str	r2, [r7, #24]
    3a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3a3e:	429a      	cmp	r2, r3
    3a40:	dbef      	blt.n	3a22 <rt_vsnprintf+0x2f2>
            }
            continue;
    3a42:	e09b      	b.n	3b7c <rt_vsnprintf+0x44c>

        case 'p':
            if (field_width == -1)
    3a44:	69bb      	ldr	r3, [r7, #24]
    3a46:	3301      	adds	r3, #1
    3a48:	d108      	bne.n	3a5c <rt_vsnprintf+0x32c>
            {
                field_width = sizeof(void *) << 1;
    3a4a:	2308      	movs	r3, #8
    3a4c:	61bb      	str	r3, [r7, #24]
                flags |= ZEROPAD;
    3a4e:	221e      	movs	r2, #30
    3a50:	18bb      	adds	r3, r7, r2
    3a52:	18ba      	adds	r2, r7, r2
    3a54:	7812      	ldrb	r2, [r2, #0]
    3a56:	2101      	movs	r1, #1
    3a58:	430a      	orrs	r2, r1
    3a5a:	701a      	strb	r2, [r3, #0]
            }
#ifdef RT_PRINTF_PRECISION
            str = print_number(str, end,
                               (long)va_arg(args, void *),
    3a5c:	683b      	ldr	r3, [r7, #0]
    3a5e:	1d1a      	adds	r2, r3, #4
    3a60:	603a      	str	r2, [r7, #0]
    3a62:	681b      	ldr	r3, [r3, #0]
            str = print_number(str, end,
    3a64:	001a      	movs	r2, r3
    3a66:	231e      	movs	r3, #30
    3a68:	18fb      	adds	r3, r7, r3
    3a6a:	781b      	ldrb	r3, [r3, #0]
    3a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3a70:	9302      	str	r3, [sp, #8]
    3a72:	697b      	ldr	r3, [r7, #20]
    3a74:	9301      	str	r3, [sp, #4]
    3a76:	69bb      	ldr	r3, [r7, #24]
    3a78:	9300      	str	r3, [sp, #0]
    3a7a:	2310      	movs	r3, #16
    3a7c:	f7ff fd70 	bl	3560 <print_number>
    3a80:	0003      	movs	r3, r0
    3a82:	62bb      	str	r3, [r7, #40]	; 0x28
#else
            str = print_number(str, end,
                               (long)va_arg(args, void *),
                               16, field_width, flags);
#endif /* RT_PRINTF_PRECISION */
            continue;
    3a84:	e07a      	b.n	3b7c <rt_vsnprintf+0x44c>

        case '%':
            if (str < end) *str = '%';
    3a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a8a:	429a      	cmp	r2, r3
    3a8c:	d202      	bcs.n	3a94 <rt_vsnprintf+0x364>
    3a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a90:	2225      	movs	r2, #37	; 0x25
    3a92:	701a      	strb	r2, [r3, #0]
            ++ str;
    3a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a96:	3301      	adds	r3, #1
    3a98:	62bb      	str	r3, [r7, #40]	; 0x28
            continue;
    3a9a:	e06f      	b.n	3b7c <rt_vsnprintf+0x44c>

        /* integer number formats - set up the flags and "break" */
        case 'o':
            base = 8;
    3a9c:	231f      	movs	r3, #31
    3a9e:	18fb      	adds	r3, r7, r3
    3aa0:	2208      	movs	r2, #8
    3aa2:	701a      	strb	r2, [r3, #0]
            break;
    3aa4:	e032      	b.n	3b0c <rt_vsnprintf+0x3dc>

        case 'X':
            flags |= LARGE;
    3aa6:	221e      	movs	r2, #30
    3aa8:	18bb      	adds	r3, r7, r2
    3aaa:	18ba      	adds	r2, r7, r2
    3aac:	7812      	ldrb	r2, [r2, #0]
    3aae:	2140      	movs	r1, #64	; 0x40
    3ab0:	430a      	orrs	r2, r1
    3ab2:	701a      	strb	r2, [r3, #0]
        case 'x':
            base = 16;
    3ab4:	231f      	movs	r3, #31
    3ab6:	18fb      	adds	r3, r7, r3
    3ab8:	2210      	movs	r2, #16
    3aba:	701a      	strb	r2, [r3, #0]
            break;
    3abc:	e026      	b.n	3b0c <rt_vsnprintf+0x3dc>

        case 'd':
        case 'i':
            flags |= SIGN;
    3abe:	221e      	movs	r2, #30
    3ac0:	18bb      	adds	r3, r7, r2
    3ac2:	18ba      	adds	r2, r7, r2
    3ac4:	7812      	ldrb	r2, [r2, #0]
    3ac6:	2102      	movs	r1, #2
    3ac8:	430a      	orrs	r2, r1
    3aca:	701a      	strb	r2, [r3, #0]
        case 'u':
            break;
    3acc:	e01d      	b.n	3b0a <rt_vsnprintf+0x3da>

        default:
            if (str < end) *str = '%';
    3ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ad2:	429a      	cmp	r2, r3
    3ad4:	d202      	bcs.n	3adc <rt_vsnprintf+0x3ac>
    3ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ad8:	2225      	movs	r2, #37	; 0x25
    3ada:	701a      	strb	r2, [r3, #0]
            ++ str;
    3adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ade:	3301      	adds	r3, #1
    3ae0:	62bb      	str	r3, [r7, #40]	; 0x28

            if (*fmt)
    3ae2:	687b      	ldr	r3, [r7, #4]
    3ae4:	781b      	ldrb	r3, [r3, #0]
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	d00b      	beq.n	3b02 <rt_vsnprintf+0x3d2>
            {
                if (str < end) *str = *fmt;
    3aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3aee:	429a      	cmp	r2, r3
    3af0:	d203      	bcs.n	3afa <rt_vsnprintf+0x3ca>
    3af2:	687b      	ldr	r3, [r7, #4]
    3af4:	781a      	ldrb	r2, [r3, #0]
    3af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3af8:	701a      	strb	r2, [r3, #0]
                ++ str;
    3afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3afc:	3301      	adds	r3, #1
    3afe:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            else
            {
                -- fmt;
            }
            continue;
    3b00:	e03c      	b.n	3b7c <rt_vsnprintf+0x44c>
                -- fmt;
    3b02:	687b      	ldr	r3, [r7, #4]
    3b04:	3b01      	subs	r3, #1
    3b06:	607b      	str	r3, [r7, #4]
            continue;
    3b08:	e038      	b.n	3b7c <rt_vsnprintf+0x44c>
            break;
    3b0a:	46c0      	nop			; (mov r8, r8)

#ifdef RT_KPRINTF_USING_LONGLONG
        if (qualifier == 'L') num = va_arg(args, long long);
        else if (qualifier == 'l')
#else
        if (qualifier == 'l')
    3b0c:	231d      	movs	r3, #29
    3b0e:	18fb      	adds	r3, r7, r3
    3b10:	781b      	ldrb	r3, [r3, #0]
    3b12:	2b6c      	cmp	r3, #108	; 0x6c
    3b14:	d105      	bne.n	3b22 <rt_vsnprintf+0x3f2>
#endif /* RT_KPRINTF_USING_LONGLONG */
        {
            num = va_arg(args, rt_uint32_t);
    3b16:	683b      	ldr	r3, [r7, #0]
    3b18:	1d1a      	adds	r2, r3, #4
    3b1a:	603a      	str	r2, [r7, #0]
    3b1c:	681b      	ldr	r3, [r3, #0]
    3b1e:	637b      	str	r3, [r7, #52]	; 0x34
    3b20:	e019      	b.n	3b56 <rt_vsnprintf+0x426>
            if (flags & SIGN) num = (rt_int32_t)num;
        }
        else if (qualifier == 'h')
    3b22:	231d      	movs	r3, #29
    3b24:	18fb      	adds	r3, r7, r3
    3b26:	781b      	ldrb	r3, [r3, #0]
    3b28:	2b68      	cmp	r3, #104	; 0x68
    3b2a:	d10f      	bne.n	3b4c <rt_vsnprintf+0x41c>
        {
            num = (rt_uint16_t)va_arg(args, rt_int32_t);
    3b2c:	683b      	ldr	r3, [r7, #0]
    3b2e:	1d1a      	adds	r2, r3, #4
    3b30:	603a      	str	r2, [r7, #0]
    3b32:	681b      	ldr	r3, [r3, #0]
    3b34:	b29b      	uxth	r3, r3
    3b36:	637b      	str	r3, [r7, #52]	; 0x34
            if (flags & SIGN) num = (rt_int16_t)num;
    3b38:	231e      	movs	r3, #30
    3b3a:	18fb      	adds	r3, r7, r3
    3b3c:	781b      	ldrb	r3, [r3, #0]
    3b3e:	2202      	movs	r2, #2
    3b40:	4013      	ands	r3, r2
    3b42:	d008      	beq.n	3b56 <rt_vsnprintf+0x426>
    3b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b46:	b21b      	sxth	r3, r3
    3b48:	637b      	str	r3, [r7, #52]	; 0x34
    3b4a:	e004      	b.n	3b56 <rt_vsnprintf+0x426>
        }
        else
        {
            num = va_arg(args, rt_uint32_t);
    3b4c:	683b      	ldr	r3, [r7, #0]
    3b4e:	1d1a      	adds	r2, r3, #4
    3b50:	603a      	str	r2, [r7, #0]
    3b52:	681b      	ldr	r3, [r3, #0]
    3b54:	637b      	str	r3, [r7, #52]	; 0x34
            if (flags & SIGN) num = (rt_int32_t)num;
        }
#ifdef RT_PRINTF_PRECISION
        str = print_number(str, end, num, base, field_width, precision, flags);
    3b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3b58:	231f      	movs	r3, #31
    3b5a:	18fb      	adds	r3, r7, r3
    3b5c:	781c      	ldrb	r4, [r3, #0]
    3b5e:	231e      	movs	r3, #30
    3b60:	18fb      	adds	r3, r7, r3
    3b62:	781b      	ldrb	r3, [r3, #0]
    3b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3b68:	9302      	str	r3, [sp, #8]
    3b6a:	697b      	ldr	r3, [r7, #20]
    3b6c:	9301      	str	r3, [sp, #4]
    3b6e:	69bb      	ldr	r3, [r7, #24]
    3b70:	9300      	str	r3, [sp, #0]
    3b72:	0023      	movs	r3, r4
    3b74:	f7ff fcf4 	bl	3560 <print_number>
    3b78:	0003      	movs	r3, r0
    3b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (; *fmt ; ++fmt)
    3b7c:	687b      	ldr	r3, [r7, #4]
    3b7e:	3301      	adds	r3, #1
    3b80:	607b      	str	r3, [r7, #4]
    3b82:	687b      	ldr	r3, [r7, #4]
    3b84:	781b      	ldrb	r3, [r3, #0]
    3b86:	2b00      	cmp	r3, #0
    3b88:	d000      	beq.n	3b8c <rt_vsnprintf+0x45c>
    3b8a:	e5eb      	b.n	3764 <rt_vsnprintf+0x34>
#else
        str = print_number(str, end, num, base, field_width, flags);
#endif /* RT_PRINTF_PRECISION */
    }

    if (size > 0)
    3b8c:	68bb      	ldr	r3, [r7, #8]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d00b      	beq.n	3baa <rt_vsnprintf+0x47a>
    {
        if (str < end) *str = '\0';
    3b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b96:	429a      	cmp	r2, r3
    3b98:	d203      	bcs.n	3ba2 <rt_vsnprintf+0x472>
    3b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3b9c:	2200      	movs	r2, #0
    3b9e:	701a      	strb	r2, [r3, #0]
    3ba0:	e003      	b.n	3baa <rt_vsnprintf+0x47a>
        else
        {
            end[-1] = '\0';
    3ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ba4:	3b01      	subs	r3, #1
    3ba6:	2200      	movs	r2, #0
    3ba8:	701a      	strb	r2, [r3, #0]
    }

    /* the trailing null byte doesn't count towards the total
    * ++str;
    */
    return str - buf;
    3baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3bac:	68fb      	ldr	r3, [r7, #12]
    3bae:	1ad3      	subs	r3, r2, r3
}
    3bb0:	0018      	movs	r0, r3
    3bb2:	46bd      	mov	sp, r7
    3bb4:	b00f      	add	sp, #60	; 0x3c
    3bb6:	bd90      	pop	{r4, r7, pc}
    3bb8:	0000bec0 	.word	0x0000bec0
    3bbc:	0000be50 	.word	0x0000be50

00003bc0 <rt_vsprintf>:
 * @param  arg_ptr is a list of variable parameters.
 *
 * @return The number of characters actually written to buffer.
 */
int rt_vsprintf(char *buf, const char *format, va_list arg_ptr)
{
    3bc0:	b580      	push	{r7, lr}
    3bc2:	b084      	sub	sp, #16
    3bc4:	af00      	add	r7, sp, #0
    3bc6:	60f8      	str	r0, [r7, #12]
    3bc8:	60b9      	str	r1, [r7, #8]
    3bca:	607a      	str	r2, [r7, #4]
    return rt_vsnprintf(buf, (rt_size_t) - 1, format, arg_ptr);
    3bcc:	687b      	ldr	r3, [r7, #4]
    3bce:	68ba      	ldr	r2, [r7, #8]
    3bd0:	2101      	movs	r1, #1
    3bd2:	4249      	negs	r1, r1
    3bd4:	68f8      	ldr	r0, [r7, #12]
    3bd6:	f7ff fdab 	bl	3730 <rt_vsnprintf>
    3bda:	0003      	movs	r3, r0
}
    3bdc:	0018      	movs	r0, r3
    3bde:	46bd      	mov	sp, r7
    3be0:	b004      	add	sp, #16
    3be2:	bd80      	pop	{r7, pc}

00003be4 <rt_sprintf>:
 * @param  format is the format parameters.
 *
 * @return The number of characters actually written to buffer.
 */
int rt_sprintf(char *buf, const char *format, ...)
{
    3be4:	b40e      	push	{r1, r2, r3}
    3be6:	b580      	push	{r7, lr}
    3be8:	b085      	sub	sp, #20
    3bea:	af00      	add	r7, sp, #0
    3bec:	6078      	str	r0, [r7, #4]
    rt_int32_t n;
    va_list arg_ptr;

    va_start(arg_ptr, format);
    3bee:	2320      	movs	r3, #32
    3bf0:	18fb      	adds	r3, r7, r3
    3bf2:	60bb      	str	r3, [r7, #8]
    n = rt_vsprintf(buf, format, arg_ptr);
    3bf4:	68ba      	ldr	r2, [r7, #8]
    3bf6:	69f9      	ldr	r1, [r7, #28]
    3bf8:	687b      	ldr	r3, [r7, #4]
    3bfa:	0018      	movs	r0, r3
    3bfc:	f7ff ffe0 	bl	3bc0 <rt_vsprintf>
    3c00:	0003      	movs	r3, r0
    3c02:	60fb      	str	r3, [r7, #12]
    va_end(arg_ptr);

    return n;
    3c04:	68fb      	ldr	r3, [r7, #12]
}
    3c06:	0018      	movs	r0, r3
    3c08:	46bd      	mov	sp, r7
    3c0a:	b005      	add	sp, #20
    3c0c:	bc80      	pop	{r7}
    3c0e:	bc08      	pop	{r3}
    3c10:	b003      	add	sp, #12
    3c12:	4718      	bx	r3

00003c14 <rt_console_get_device>:
 * This function returns the device using in console.
 *
 * @return Returns the console device pointer or RT_NULL.
 */
rt_device_t rt_console_get_device(void)
{
    3c14:	b580      	push	{r7, lr}
    3c16:	af00      	add	r7, sp, #0
    return _console_device;
    3c18:	4b02      	ldr	r3, [pc, #8]	; (3c24 <rt_console_get_device+0x10>)
    3c1a:	681b      	ldr	r3, [r3, #0]
}
    3c1c:	0018      	movs	r0, r3
    3c1e:	46bd      	mov	sp, r7
    3c20:	bd80      	pop	{r7, pc}
    3c22:	46c0      	nop			; (mov r8, r8)
    3c24:	1ffffd34 	.word	0x1ffffd34

00003c28 <rt_console_set_device>:
 * @param  name is the name of new console device.
 *
 * @return the old console device handler on successful, or RT_NULL on failure.
 */
rt_device_t rt_console_set_device(const char *name)
{
    3c28:	b580      	push	{r7, lr}
    3c2a:	b084      	sub	sp, #16
    3c2c:	af00      	add	r7, sp, #0
    3c2e:	6078      	str	r0, [r7, #4]
    rt_device_t new_device, old_device;

    /* save old device */
    old_device = _console_device;
    3c30:	4b13      	ldr	r3, [pc, #76]	; (3c80 <rt_console_set_device+0x58>)
    3c32:	681b      	ldr	r3, [r3, #0]
    3c34:	60fb      	str	r3, [r7, #12]

    /* find new console device */
    new_device = rt_device_find(name);
    3c36:	687b      	ldr	r3, [r7, #4]
    3c38:	0018      	movs	r0, r3
    3c3a:	f7fe faa1 	bl	2180 <rt_device_find>
    3c3e:	0003      	movs	r3, r0
    3c40:	60bb      	str	r3, [r7, #8]

    /* check whether it's a same device */
    if (new_device == old_device) return RT_NULL;
    3c42:	68ba      	ldr	r2, [r7, #8]
    3c44:	68fb      	ldr	r3, [r7, #12]
    3c46:	429a      	cmp	r2, r3
    3c48:	d101      	bne.n	3c4e <rt_console_set_device+0x26>
    3c4a:	2300      	movs	r3, #0
    3c4c:	e014      	b.n	3c78 <rt_console_set_device+0x50>

    if (new_device != RT_NULL)
    3c4e:	68bb      	ldr	r3, [r7, #8]
    3c50:	2b00      	cmp	r3, #0
    3c52:	d010      	beq.n	3c76 <rt_console_set_device+0x4e>
    {
        if (_console_device != RT_NULL)
    3c54:	4b0a      	ldr	r3, [pc, #40]	; (3c80 <rt_console_set_device+0x58>)
    3c56:	681b      	ldr	r3, [r3, #0]
    3c58:	2b00      	cmp	r3, #0
    3c5a:	d004      	beq.n	3c66 <rt_console_set_device+0x3e>
        {
            /* close old console device */
            rt_device_close(_console_device);
    3c5c:	4b08      	ldr	r3, [pc, #32]	; (3c80 <rt_console_set_device+0x58>)
    3c5e:	681b      	ldr	r3, [r3, #0]
    3c60:	0018      	movs	r0, r3
    3c62:	f7fe fb27 	bl	22b4 <rt_device_close>
        }

        /* set new console device */
        rt_device_open(new_device, RT_DEVICE_OFLAG_RDWR | RT_DEVICE_FLAG_STREAM);
    3c66:	68bb      	ldr	r3, [r7, #8]
    3c68:	2143      	movs	r1, #67	; 0x43
    3c6a:	0018      	movs	r0, r3
    3c6c:	f7fe fa96 	bl	219c <rt_device_open>
        _console_device = new_device;
    3c70:	4b03      	ldr	r3, [pc, #12]	; (3c80 <rt_console_set_device+0x58>)
    3c72:	68ba      	ldr	r2, [r7, #8]
    3c74:	601a      	str	r2, [r3, #0]
    }

    return old_device;
    3c76:	68fb      	ldr	r3, [r7, #12]
}
    3c78:	0018      	movs	r0, r3
    3c7a:	46bd      	mov	sp, r7
    3c7c:	b004      	add	sp, #16
    3c7e:	bd80      	pop	{r7, pc}
    3c80:	1ffffd34 	.word	0x1ffffd34

00003c84 <rt_kprintf>:
 * @param fmt is the format parameters.
 *
 * @return The number of characters actually written to buffer.
 */
RT_WEAK int rt_kprintf(const char *fmt, ...)
{
    3c84:	b40f      	push	{r0, r1, r2, r3}
    3c86:	b580      	push	{r7, lr}
    3c88:	b082      	sub	sp, #8
    3c8a:	af00      	add	r7, sp, #0
    va_list args;
    rt_size_t length;
    static char rt_log_buf[RT_CONSOLEBUF_SIZE];

    va_start(args, fmt);
    3c8c:	2314      	movs	r3, #20
    3c8e:	18fb      	adds	r3, r7, r3
    3c90:	603b      	str	r3, [r7, #0]
    /* the return value of vsnprintf is the number of bytes that would be
     * written to buffer had if the size of the buffer been sufficiently
     * large excluding the terminating null byte. If the output string
     * would be larger than the rt_log_buf, we have to adjust the output
     * length. */
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
    3c92:	683b      	ldr	r3, [r7, #0]
    3c94:	693a      	ldr	r2, [r7, #16]
    3c96:	4811      	ldr	r0, [pc, #68]	; (3cdc <rt_kprintf+0x58>)
    3c98:	217f      	movs	r1, #127	; 0x7f
    3c9a:	f7ff fd49 	bl	3730 <rt_vsnprintf>
    3c9e:	0003      	movs	r3, r0
    3ca0:	607b      	str	r3, [r7, #4]
    if (length > RT_CONSOLEBUF_SIZE - 1)
    3ca2:	687b      	ldr	r3, [r7, #4]
    3ca4:	2b7f      	cmp	r3, #127	; 0x7f
    3ca6:	d901      	bls.n	3cac <rt_kprintf+0x28>
        length = RT_CONSOLEBUF_SIZE - 1;
    3ca8:	237f      	movs	r3, #127	; 0x7f
    3caa:	607b      	str	r3, [r7, #4]
#ifdef RT_USING_DEVICE
    if (_console_device == RT_NULL)
    3cac:	4b0c      	ldr	r3, [pc, #48]	; (3ce0 <rt_kprintf+0x5c>)
    3cae:	681b      	ldr	r3, [r3, #0]
    3cb0:	2b00      	cmp	r3, #0
    3cb2:	d104      	bne.n	3cbe <rt_kprintf+0x3a>
    {
        rt_hw_console_output(rt_log_buf);
    3cb4:	4b09      	ldr	r3, [pc, #36]	; (3cdc <rt_kprintf+0x58>)
    3cb6:	0018      	movs	r0, r3
    3cb8:	f7fd fb9a 	bl	13f0 <rt_hw_console_output>
    3cbc:	e006      	b.n	3ccc <rt_kprintf+0x48>
    }
    else
    {
        rt_device_write(_console_device, 0, rt_log_buf, length);
    3cbe:	4b08      	ldr	r3, [pc, #32]	; (3ce0 <rt_kprintf+0x5c>)
    3cc0:	6818      	ldr	r0, [r3, #0]
    3cc2:	687b      	ldr	r3, [r7, #4]
    3cc4:	4a05      	ldr	r2, [pc, #20]	; (3cdc <rt_kprintf+0x58>)
    3cc6:	2100      	movs	r1, #0
    3cc8:	f7fe fb8e 	bl	23e8 <rt_device_write>
#else
    rt_hw_console_output(rt_log_buf);
#endif /* RT_USING_DEVICE */
    va_end(args);

    return length;
    3ccc:	687b      	ldr	r3, [r7, #4]
}
    3cce:	0018      	movs	r0, r3
    3cd0:	46bd      	mov	sp, r7
    3cd2:	b002      	add	sp, #8
    3cd4:	bc80      	pop	{r7}
    3cd6:	bc08      	pop	{r3}
    3cd8:	b004      	add	sp, #16
    3cda:	4718      	bx	r3
    3cdc:	1ffffd6c 	.word	0x1ffffd6c
    3ce0:	1ffffd34 	.word	0x1ffffd34

00003ce4 <_heap_lock_init>:
#elif defined(RT_USING_MUTEX)
static struct rt_mutex _lock;
#endif

rt_inline void _heap_lock_init(void)
{
    3ce4:	b580      	push	{r7, lr}
    3ce6:	af00      	add	r7, sp, #0
#if defined(RT_USING_HEAP_ISR)
#elif defined(RT_USING_MUTEX)
    rt_mutex_init(&_lock, "heap", RT_IPC_FLAG_PRIO);
    3ce8:	4904      	ldr	r1, [pc, #16]	; (3cfc <_heap_lock_init+0x18>)
    3cea:	4b05      	ldr	r3, [pc, #20]	; (3d00 <_heap_lock_init+0x1c>)
    3cec:	2201      	movs	r2, #1
    3cee:	0018      	movs	r0, r3
    3cf0:	f000 fbcc 	bl	448c <rt_mutex_init>
#endif
}
    3cf4:	46c0      	nop			; (mov r8, r8)
    3cf6:	46bd      	mov	sp, r7
    3cf8:	bd80      	pop	{r7, pc}
    3cfa:	46c0      	nop			; (mov r8, r8)
    3cfc:	0000be58 	.word	0x0000be58
    3d00:	1ffffd40 	.word	0x1ffffd40

00003d04 <_heap_lock>:

rt_inline rt_base_t _heap_lock(void)
{
    3d04:	b580      	push	{r7, lr}
    3d06:	af00      	add	r7, sp, #0
#if defined(RT_USING_HEAP_ISR)
    return rt_hw_interrupt_disable();
#elif defined(RT_USING_MUTEX)
    if (rt_thread_self())
    3d08:	f000 ff56 	bl	4bb8 <rt_thread_self>
    3d0c:	1e03      	subs	r3, r0, #0
    3d0e:	d008      	beq.n	3d22 <_heap_lock+0x1e>
        return rt_mutex_take(&_lock, RT_WAITING_FOREVER);
    3d10:	2301      	movs	r3, #1
    3d12:	425a      	negs	r2, r3
    3d14:	4b05      	ldr	r3, [pc, #20]	; (3d2c <_heap_lock+0x28>)
    3d16:	0011      	movs	r1, r2
    3d18:	0018      	movs	r0, r3
    3d1a:	f000 fbeb 	bl	44f4 <rt_mutex_take>
    3d1e:	0003      	movs	r3, r0
    3d20:	e000      	b.n	3d24 <_heap_lock+0x20>
    else
        return RT_EOK;
    3d22:	2300      	movs	r3, #0
#else
    rt_enter_critical();
    return RT_EOK;
#endif
}
    3d24:	0018      	movs	r0, r3
    3d26:	46bd      	mov	sp, r7
    3d28:	bd80      	pop	{r7, pc}
    3d2a:	46c0      	nop			; (mov r8, r8)
    3d2c:	1ffffd40 	.word	0x1ffffd40

00003d30 <_heap_unlock>:

rt_inline void _heap_unlock(rt_base_t level)
{
    3d30:	b580      	push	{r7, lr}
    3d32:	b082      	sub	sp, #8
    3d34:	af00      	add	r7, sp, #0
    3d36:	6078      	str	r0, [r7, #4]
#if defined(RT_USING_HEAP_ISR)
    rt_hw_interrupt_enable(level);
#elif defined(RT_USING_MUTEX)
    RT_ASSERT(level == RT_EOK);
    3d38:	687b      	ldr	r3, [r7, #4]
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	d005      	beq.n	3d4a <_heap_unlock+0x1a>
    3d3e:	4a09      	ldr	r2, [pc, #36]	; (3d64 <_heap_unlock+0x34>)
    3d40:	4909      	ldr	r1, [pc, #36]	; (3d68 <_heap_unlock+0x38>)
    3d42:	4b0a      	ldr	r3, [pc, #40]	; (3d6c <_heap_unlock+0x3c>)
    3d44:	0018      	movs	r0, r3
    3d46:	f000 f943 	bl	3fd0 <rt_assert_handler>
    if (rt_thread_self())
    3d4a:	f000 ff35 	bl	4bb8 <rt_thread_self>
    3d4e:	1e03      	subs	r3, r0, #0
    3d50:	d003      	beq.n	3d5a <_heap_unlock+0x2a>
        rt_mutex_release(&_lock);
    3d52:	4b07      	ldr	r3, [pc, #28]	; (3d70 <_heap_unlock+0x40>)
    3d54:	0018      	movs	r0, r3
    3d56:	f000 fceb 	bl	4730 <rt_mutex_release>
#else
    rt_exit_critical();
#endif
}
    3d5a:	46c0      	nop			; (mov r8, r8)
    3d5c:	46bd      	mov	sp, r7
    3d5e:	b002      	add	sp, #8
    3d60:	bd80      	pop	{r7, pc}
    3d62:	46c0      	nop			; (mov r8, r8)
    3d64:	0000055d 	.word	0x0000055d
    3d68:	0000c080 	.word	0x0000c080
    3d6c:	0000be60 	.word	0x0000be60
    3d70:	1ffffd40 	.word	0x1ffffd40

00003d74 <_smem_info>:

#if defined(RT_USING_SMALL_MEM_AS_HEAP)
static rt_smem_t system_heap;
rt_inline void _smem_info(rt_size_t *total,
    rt_size_t *used, rt_size_t *max_used)
{
    3d74:	b580      	push	{r7, lr}
    3d76:	b084      	sub	sp, #16
    3d78:	af00      	add	r7, sp, #0
    3d7a:	60f8      	str	r0, [r7, #12]
    3d7c:	60b9      	str	r1, [r7, #8]
    3d7e:	607a      	str	r2, [r7, #4]
    if (total)
    3d80:	68fb      	ldr	r3, [r7, #12]
    3d82:	2b00      	cmp	r3, #0
    3d84:	d004      	beq.n	3d90 <_smem_info+0x1c>
        *total = system_heap->total;
    3d86:	4b0c      	ldr	r3, [pc, #48]	; (3db8 <_smem_info+0x44>)
    3d88:	681b      	ldr	r3, [r3, #0]
    3d8a:	69da      	ldr	r2, [r3, #28]
    3d8c:	68fb      	ldr	r3, [r7, #12]
    3d8e:	601a      	str	r2, [r3, #0]
    if (used)
    3d90:	68bb      	ldr	r3, [r7, #8]
    3d92:	2b00      	cmp	r3, #0
    3d94:	d004      	beq.n	3da0 <_smem_info+0x2c>
        *used = system_heap->used;
    3d96:	4b08      	ldr	r3, [pc, #32]	; (3db8 <_smem_info+0x44>)
    3d98:	681b      	ldr	r3, [r3, #0]
    3d9a:	6a1a      	ldr	r2, [r3, #32]
    3d9c:	68bb      	ldr	r3, [r7, #8]
    3d9e:	601a      	str	r2, [r3, #0]
    if (max_used)
    3da0:	687b      	ldr	r3, [r7, #4]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d004      	beq.n	3db0 <_smem_info+0x3c>
        *max_used = system_heap->max;
    3da6:	4b04      	ldr	r3, [pc, #16]	; (3db8 <_smem_info+0x44>)
    3da8:	681b      	ldr	r3, [r3, #0]
    3daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3dac:	687b      	ldr	r3, [r7, #4]
    3dae:	601a      	str	r2, [r3, #0]
}
    3db0:	46c0      	nop			; (mov r8, r8)
    3db2:	46bd      	mov	sp, r7
    3db4:	b004      	add	sp, #16
    3db6:	bd80      	pop	{r7, pc}
    3db8:	1ffffd64 	.word	0x1ffffd64

00003dbc <rt_system_heap_init>:
 * @param begin_addr the beginning address of system page.
 *
 * @param end_addr the end address of system page.
 */
RT_WEAK void rt_system_heap_init(void *begin_addr, void *end_addr)
{
    3dbc:	b580      	push	{r7, lr}
    3dbe:	b084      	sub	sp, #16
    3dc0:	af00      	add	r7, sp, #0
    3dc2:	6078      	str	r0, [r7, #4]
    3dc4:	6039      	str	r1, [r7, #0]
    rt_ubase_t begin_align = RT_ALIGN((rt_ubase_t)begin_addr, RT_ALIGN_SIZE);
    3dc6:	687b      	ldr	r3, [r7, #4]
    3dc8:	3303      	adds	r3, #3
    3dca:	2203      	movs	r2, #3
    3dcc:	4393      	bics	r3, r2
    3dce:	60fb      	str	r3, [r7, #12]
    rt_ubase_t end_align   = RT_ALIGN_DOWN((rt_ubase_t)end_addr, RT_ALIGN_SIZE);
    3dd0:	683b      	ldr	r3, [r7, #0]
    3dd2:	2203      	movs	r2, #3
    3dd4:	4393      	bics	r3, r2
    3dd6:	60bb      	str	r3, [r7, #8]

    RT_ASSERT(end_align > begin_align);
    3dd8:	68ba      	ldr	r2, [r7, #8]
    3dda:	68fb      	ldr	r3, [r7, #12]
    3ddc:	429a      	cmp	r2, r3
    3dde:	d805      	bhi.n	3dec <rt_system_heap_init+0x30>
    3de0:	4a0b      	ldr	r2, [pc, #44]	; (3e10 <rt_system_heap_init+0x54>)
    3de2:	490c      	ldr	r1, [pc, #48]	; (3e14 <rt_system_heap_init+0x58>)
    3de4:	4b0c      	ldr	r3, [pc, #48]	; (3e18 <rt_system_heap_init+0x5c>)
    3de6:	0018      	movs	r0, r3
    3de8:	f000 f8f2 	bl	3fd0 <rt_assert_handler>

    /* Initialize system memory heap */
    _MEM_INIT("heap", begin_addr, end_align - begin_align);
    3dec:	68ba      	ldr	r2, [r7, #8]
    3dee:	68fb      	ldr	r3, [r7, #12]
    3df0:	1ad2      	subs	r2, r2, r3
    3df2:	6879      	ldr	r1, [r7, #4]
    3df4:	4b09      	ldr	r3, [pc, #36]	; (3e1c <rt_system_heap_init+0x60>)
    3df6:	0018      	movs	r0, r3
    3df8:	f7fe fc18 	bl	262c <rt_smem_init>
    3dfc:	0002      	movs	r2, r0
    3dfe:	4b08      	ldr	r3, [pc, #32]	; (3e20 <rt_system_heap_init+0x64>)
    3e00:	601a      	str	r2, [r3, #0]
    /* Initialize multi thread contention lock */
    _heap_lock_init();
    3e02:	f7ff ff6f 	bl	3ce4 <_heap_lock_init>
}
    3e06:	46c0      	nop			; (mov r8, r8)
    3e08:	46bd      	mov	sp, r7
    3e0a:	b004      	add	sp, #16
    3e0c:	bd80      	pop	{r7, pc}
    3e0e:	46c0      	nop			; (mov r8, r8)
    3e10:	000005b3 	.word	0x000005b3
    3e14:	0000c06c 	.word	0x0000c06c
    3e18:	0000be70 	.word	0x0000be70
    3e1c:	0000be58 	.word	0x0000be58
    3e20:	1ffffd64 	.word	0x1ffffd64

00003e24 <rt_malloc>:
 * @param size is the minimum size of the requested block in bytes.
 *
 * @return the pointer to allocated memory or NULL if no free memory was found.
 */
RT_WEAK void *rt_malloc(rt_size_t size)
{
    3e24:	b580      	push	{r7, lr}
    3e26:	b084      	sub	sp, #16
    3e28:	af00      	add	r7, sp, #0
    3e2a:	6078      	str	r0, [r7, #4]
    rt_base_t level;
    void *ptr;

    /* Enter critical zone */
    level = _heap_lock();
    3e2c:	f7ff ff6a 	bl	3d04 <_heap_lock>
    3e30:	0003      	movs	r3, r0
    3e32:	60fb      	str	r3, [r7, #12]
    /* allocate memory block from system heap */
    ptr = _MEM_MALLOC(size);
    3e34:	4b0d      	ldr	r3, [pc, #52]	; (3e6c <rt_malloc+0x48>)
    3e36:	681b      	ldr	r3, [r3, #0]
    3e38:	687a      	ldr	r2, [r7, #4]
    3e3a:	0011      	movs	r1, r2
    3e3c:	0018      	movs	r0, r3
    3e3e:	f7fe fc79 	bl	2734 <rt_smem_alloc>
    3e42:	0003      	movs	r3, r0
    3e44:	60bb      	str	r3, [r7, #8]
    /* Exit critical zone */
    _heap_unlock(level);
    3e46:	68fb      	ldr	r3, [r7, #12]
    3e48:	0018      	movs	r0, r3
    3e4a:	f7ff ff71 	bl	3d30 <_heap_unlock>
    /* call 'rt_malloc' hook */
    RT_OBJECT_HOOK_CALL(rt_malloc_hook, (ptr, size));
    3e4e:	4b08      	ldr	r3, [pc, #32]	; (3e70 <rt_malloc+0x4c>)
    3e50:	681b      	ldr	r3, [r3, #0]
    3e52:	2b00      	cmp	r3, #0
    3e54:	d005      	beq.n	3e62 <rt_malloc+0x3e>
    3e56:	4b06      	ldr	r3, [pc, #24]	; (3e70 <rt_malloc+0x4c>)
    3e58:	681b      	ldr	r3, [r3, #0]
    3e5a:	6879      	ldr	r1, [r7, #4]
    3e5c:	68ba      	ldr	r2, [r7, #8]
    3e5e:	0010      	movs	r0, r2
    3e60:	4798      	blx	r3
    return ptr;
    3e62:	68bb      	ldr	r3, [r7, #8]
}
    3e64:	0018      	movs	r0, r3
    3e66:	46bd      	mov	sp, r7
    3e68:	b004      	add	sp, #16
    3e6a:	bd80      	pop	{r7, pc}
    3e6c:	1ffffd64 	.word	0x1ffffd64
    3e70:	1ffffd38 	.word	0x1ffffd38

00003e74 <rt_realloc>:
 * @param newsize is the required new size.
 *
 * @return the changed memory block address.
 */
RT_WEAK void *rt_realloc(void *rmem, rt_size_t newsize)
{
    3e74:	b580      	push	{r7, lr}
    3e76:	b084      	sub	sp, #16
    3e78:	af00      	add	r7, sp, #0
    3e7a:	6078      	str	r0, [r7, #4]
    3e7c:	6039      	str	r1, [r7, #0]
    rt_base_t level;
    void *nptr;

    /* Enter critical zone */
    level = _heap_lock();
    3e7e:	f7ff ff41 	bl	3d04 <_heap_lock>
    3e82:	0003      	movs	r3, r0
    3e84:	60fb      	str	r3, [r7, #12]
    /* Change the size of previously allocated memory block */
    nptr = _MEM_REALLOC(rmem, newsize);
    3e86:	4b09      	ldr	r3, [pc, #36]	; (3eac <rt_realloc+0x38>)
    3e88:	681b      	ldr	r3, [r3, #0]
    3e8a:	683a      	ldr	r2, [r7, #0]
    3e8c:	6879      	ldr	r1, [r7, #4]
    3e8e:	0018      	movs	r0, r3
    3e90:	f7fe fd8c 	bl	29ac <rt_smem_realloc>
    3e94:	0003      	movs	r3, r0
    3e96:	60bb      	str	r3, [r7, #8]
    /* Exit critical zone */
    _heap_unlock(level);
    3e98:	68fb      	ldr	r3, [r7, #12]
    3e9a:	0018      	movs	r0, r3
    3e9c:	f7ff ff48 	bl	3d30 <_heap_unlock>
    return nptr;
    3ea0:	68bb      	ldr	r3, [r7, #8]
}
    3ea2:	0018      	movs	r0, r3
    3ea4:	46bd      	mov	sp, r7
    3ea6:	b004      	add	sp, #16
    3ea8:	bd80      	pop	{r7, pc}
    3eaa:	46c0      	nop			; (mov r8, r8)
    3eac:	1ffffd64 	.word	0x1ffffd64

00003eb0 <rt_calloc>:
 * @param  size is the size of one object to allocate.
 *
 * @return pointer to allocated memory / NULL pointer if there is an error.
 */
RT_WEAK void *rt_calloc(rt_size_t count, rt_size_t size)
{
    3eb0:	b580      	push	{r7, lr}
    3eb2:	b084      	sub	sp, #16
    3eb4:	af00      	add	r7, sp, #0
    3eb6:	6078      	str	r0, [r7, #4]
    3eb8:	6039      	str	r1, [r7, #0]
    void *p;

    /* allocate 'count' objects of size 'size' */
    p = rt_malloc(count * size);
    3eba:	687b      	ldr	r3, [r7, #4]
    3ebc:	683a      	ldr	r2, [r7, #0]
    3ebe:	4353      	muls	r3, r2
    3ec0:	0018      	movs	r0, r3
    3ec2:	f7ff ffaf 	bl	3e24 <rt_malloc>
    3ec6:	0003      	movs	r3, r0
    3ec8:	60fb      	str	r3, [r7, #12]
    /* zero the memory */
    if (p)
    3eca:	68fb      	ldr	r3, [r7, #12]
    3ecc:	2b00      	cmp	r3, #0
    3ece:	d007      	beq.n	3ee0 <rt_calloc+0x30>
    {
        rt_memset(p, 0, count * size);
    3ed0:	687b      	ldr	r3, [r7, #4]
    3ed2:	683a      	ldr	r2, [r7, #0]
    3ed4:	435a      	muls	r2, r3
    3ed6:	68fb      	ldr	r3, [r7, #12]
    3ed8:	2100      	movs	r1, #0
    3eda:	0018      	movs	r0, r3
    3edc:	f7ff f97c 	bl	31d8 <rt_memset>
    }
    return p;
    3ee0:	68fb      	ldr	r3, [r7, #12]
}
    3ee2:	0018      	movs	r0, r3
    3ee4:	46bd      	mov	sp, r7
    3ee6:	b004      	add	sp, #16
    3ee8:	bd80      	pop	{r7, pc}
	...

00003eec <rt_free>:
 *        rt_malloc. The released memory block is taken back to system heap.
 *
 * @param rmem the address of memory which will be released.
 */
RT_WEAK void rt_free(void *rmem)
{
    3eec:	b580      	push	{r7, lr}
    3eee:	b084      	sub	sp, #16
    3ef0:	af00      	add	r7, sp, #0
    3ef2:	6078      	str	r0, [r7, #4]
    rt_base_t level;

    /* call 'rt_free' hook */
    RT_OBJECT_HOOK_CALL(rt_free_hook, (rmem));
    3ef4:	4b0c      	ldr	r3, [pc, #48]	; (3f28 <rt_free+0x3c>)
    3ef6:	681b      	ldr	r3, [r3, #0]
    3ef8:	2b00      	cmp	r3, #0
    3efa:	d004      	beq.n	3f06 <rt_free+0x1a>
    3efc:	4b0a      	ldr	r3, [pc, #40]	; (3f28 <rt_free+0x3c>)
    3efe:	681b      	ldr	r3, [r3, #0]
    3f00:	687a      	ldr	r2, [r7, #4]
    3f02:	0010      	movs	r0, r2
    3f04:	4798      	blx	r3
    /* Enter critical zone */
    level = _heap_lock();
    3f06:	f7ff fefd 	bl	3d04 <_heap_lock>
    3f0a:	0003      	movs	r3, r0
    3f0c:	60fb      	str	r3, [r7, #12]
    _MEM_FREE(rmem);
    3f0e:	687b      	ldr	r3, [r7, #4]
    3f10:	0018      	movs	r0, r3
    3f12:	f7fe fe43 	bl	2b9c <rt_smem_free>
    /* Exit critical zone */
    _heap_unlock(level);
    3f16:	68fb      	ldr	r3, [r7, #12]
    3f18:	0018      	movs	r0, r3
    3f1a:	f7ff ff09 	bl	3d30 <_heap_unlock>
}
    3f1e:	46c0      	nop			; (mov r8, r8)
    3f20:	46bd      	mov	sp, r7
    3f22:	b004      	add	sp, #16
    3f24:	bd80      	pop	{r7, pc}
    3f26:	46c0      	nop			; (mov r8, r8)
    3f28:	1ffffd3c 	.word	0x1ffffd3c

00003f2c <rt_memory_info>:
* @param max_used is a pointer to get the maximum memory used.
*/
RT_WEAK void rt_memory_info(rt_size_t *total,
                            rt_size_t *used,
                            rt_size_t *max_used)
{
    3f2c:	b580      	push	{r7, lr}
    3f2e:	b086      	sub	sp, #24
    3f30:	af00      	add	r7, sp, #0
    3f32:	60f8      	str	r0, [r7, #12]
    3f34:	60b9      	str	r1, [r7, #8]
    3f36:	607a      	str	r2, [r7, #4]
    rt_base_t level;

    /* Enter critical zone */
    level = _heap_lock();
    3f38:	f7ff fee4 	bl	3d04 <_heap_lock>
    3f3c:	0003      	movs	r3, r0
    3f3e:	617b      	str	r3, [r7, #20]
    _MEM_INFO(total, used, max_used);
    3f40:	687a      	ldr	r2, [r7, #4]
    3f42:	68b9      	ldr	r1, [r7, #8]
    3f44:	68fb      	ldr	r3, [r7, #12]
    3f46:	0018      	movs	r0, r3
    3f48:	f7ff ff14 	bl	3d74 <_smem_info>
    /* Exit critical zone */
    _heap_unlock(level);
    3f4c:	697b      	ldr	r3, [r7, #20]
    3f4e:	0018      	movs	r0, r3
    3f50:	f7ff feee 	bl	3d30 <_heap_unlock>
}
    3f54:	46c0      	nop			; (mov r8, r8)
    3f56:	46bd      	mov	sp, r7
    3f58:	b006      	add	sp, #24
    3f5a:	bd80      	pop	{r7, pc}

00003f5c <__rt_ffs>:
 *
 * @return Return the index of the first bit set. If value is 0, then this function
 *         shall return 0.
 */
int __rt_ffs(int value)
{
    3f5c:	b580      	push	{r7, lr}
    3f5e:	b082      	sub	sp, #8
    3f60:	af00      	add	r7, sp, #0
    3f62:	6078      	str	r0, [r7, #4]
    if (value == 0) return 0;
    3f64:	687b      	ldr	r3, [r7, #4]
    3f66:	2b00      	cmp	r3, #0
    3f68:	d101      	bne.n	3f6e <__rt_ffs+0x12>
    3f6a:	2300      	movs	r3, #0
    3f6c:	e029      	b.n	3fc2 <__rt_ffs+0x66>

    if (value & 0xff)
    3f6e:	687b      	ldr	r3, [r7, #4]
    3f70:	22ff      	movs	r2, #255	; 0xff
    3f72:	4013      	ands	r3, r2
    3f74:	d006      	beq.n	3f84 <__rt_ffs+0x28>
        return __lowest_bit_bitmap[value & 0xff] + 1;
    3f76:	687b      	ldr	r3, [r7, #4]
    3f78:	22ff      	movs	r2, #255	; 0xff
    3f7a:	4013      	ands	r3, r2
    3f7c:	4a13      	ldr	r2, [pc, #76]	; (3fcc <__rt_ffs+0x70>)
    3f7e:	5cd3      	ldrb	r3, [r2, r3]
    3f80:	3301      	adds	r3, #1
    3f82:	e01e      	b.n	3fc2 <__rt_ffs+0x66>

    if (value & 0xff00)
    3f84:	687a      	ldr	r2, [r7, #4]
    3f86:	23ff      	movs	r3, #255	; 0xff
    3f88:	021b      	lsls	r3, r3, #8
    3f8a:	4013      	ands	r3, r2
    3f8c:	d007      	beq.n	3f9e <__rt_ffs+0x42>
        return __lowest_bit_bitmap[(value & 0xff00) >> 8] + 9;
    3f8e:	687b      	ldr	r3, [r7, #4]
    3f90:	121b      	asrs	r3, r3, #8
    3f92:	22ff      	movs	r2, #255	; 0xff
    3f94:	4013      	ands	r3, r2
    3f96:	4a0d      	ldr	r2, [pc, #52]	; (3fcc <__rt_ffs+0x70>)
    3f98:	5cd3      	ldrb	r3, [r2, r3]
    3f9a:	3309      	adds	r3, #9
    3f9c:	e011      	b.n	3fc2 <__rt_ffs+0x66>

    if (value & 0xff0000)
    3f9e:	687a      	ldr	r2, [r7, #4]
    3fa0:	23ff      	movs	r3, #255	; 0xff
    3fa2:	041b      	lsls	r3, r3, #16
    3fa4:	4013      	ands	r3, r2
    3fa6:	d007      	beq.n	3fb8 <__rt_ffs+0x5c>
        return __lowest_bit_bitmap[(value & 0xff0000) >> 16] + 17;
    3fa8:	687b      	ldr	r3, [r7, #4]
    3faa:	141b      	asrs	r3, r3, #16
    3fac:	22ff      	movs	r2, #255	; 0xff
    3fae:	4013      	ands	r3, r2
    3fb0:	4a06      	ldr	r2, [pc, #24]	; (3fcc <__rt_ffs+0x70>)
    3fb2:	5cd3      	ldrb	r3, [r2, r3]
    3fb4:	3311      	adds	r3, #17
    3fb6:	e004      	b.n	3fc2 <__rt_ffs+0x66>

    return __lowest_bit_bitmap[(value & 0xff000000) >> 24] + 25;
    3fb8:	687b      	ldr	r3, [r7, #4]
    3fba:	0e1b      	lsrs	r3, r3, #24
    3fbc:	4a03      	ldr	r2, [pc, #12]	; (3fcc <__rt_ffs+0x70>)
    3fbe:	5cd3      	ldrb	r3, [r2, r3]
    3fc0:	3319      	adds	r3, #25
}
    3fc2:	0018      	movs	r0, r3
    3fc4:	46bd      	mov	sp, r7
    3fc6:	b002      	add	sp, #8
    3fc8:	bd80      	pop	{r7, pc}
    3fca:	46c0      	nop			; (mov r8, r8)
    3fcc:	0000bf44 	.word	0x0000bf44

00003fd0 <rt_assert_handler>:
 * @param func is the function name when assertion.
 *
 * @param line is the file line number when assertion.
 */
void rt_assert_handler(const char *ex_string, const char *func, rt_size_t line)
{
    3fd0:	b580      	push	{r7, lr}
    3fd2:	b086      	sub	sp, #24
    3fd4:	af00      	add	r7, sp, #0
    3fd6:	60f8      	str	r0, [r7, #12]
    3fd8:	60b9      	str	r1, [r7, #8]
    3fda:	607a      	str	r2, [r7, #4]
    volatile char dummy = 0;
    3fdc:	2317      	movs	r3, #23
    3fde:	18fb      	adds	r3, r7, r3
    3fe0:	2200      	movs	r2, #0
    3fe2:	701a      	strb	r2, [r3, #0]

    if (rt_assert_hook == RT_NULL)
    3fe4:	4b0d      	ldr	r3, [pc, #52]	; (401c <rt_assert_handler+0x4c>)
    3fe6:	681b      	ldr	r3, [r3, #0]
    3fe8:	2b00      	cmp	r3, #0
    3fea:	d10d      	bne.n	4008 <rt_assert_handler+0x38>
            dlmodule_exit(-1);
        }
        else
#endif /*RT_USING_MODULE*/
        {
            rt_kprintf("(%s) assertion failed at function:%s, line number:%d \n", ex_string, func, line);
    3fec:	687b      	ldr	r3, [r7, #4]
    3fee:	68ba      	ldr	r2, [r7, #8]
    3ff0:	68f9      	ldr	r1, [r7, #12]
    3ff2:	480b      	ldr	r0, [pc, #44]	; (4020 <rt_assert_handler+0x50>)
    3ff4:	f7ff fe46 	bl	3c84 <rt_kprintf>
            while (dummy == 0);
    3ff8:	46c0      	nop			; (mov r8, r8)
    3ffa:	2317      	movs	r3, #23
    3ffc:	18fb      	adds	r3, r7, r3
    3ffe:	781b      	ldrb	r3, [r3, #0]
    4000:	b2db      	uxtb	r3, r3
    4002:	2b00      	cmp	r3, #0
    4004:	d0f9      	beq.n	3ffa <rt_assert_handler+0x2a>
    }
    else
    {
        rt_assert_hook(ex_string, func, line);
    }
}
    4006:	e005      	b.n	4014 <rt_assert_handler+0x44>
        rt_assert_hook(ex_string, func, line);
    4008:	4b04      	ldr	r3, [pc, #16]	; (401c <rt_assert_handler+0x4c>)
    400a:	681b      	ldr	r3, [r3, #0]
    400c:	687a      	ldr	r2, [r7, #4]
    400e:	68b9      	ldr	r1, [r7, #8]
    4010:	68f8      	ldr	r0, [r7, #12]
    4012:	4798      	blx	r3
}
    4014:	46c0      	nop			; (mov r8, r8)
    4016:	46bd      	mov	sp, r7
    4018:	b006      	add	sp, #24
    401a:	bd80      	pop	{r7, pc}
    401c:	1ffffd68 	.word	0x1ffffd68
    4020:	0000be88 	.word	0x0000be88

00004024 <rt_list_init>:
{
    4024:	b580      	push	{r7, lr}
    4026:	b082      	sub	sp, #8
    4028:	af00      	add	r7, sp, #0
    402a:	6078      	str	r0, [r7, #4]
    l->next = l->prev = l;
    402c:	687b      	ldr	r3, [r7, #4]
    402e:	687a      	ldr	r2, [r7, #4]
    4030:	605a      	str	r2, [r3, #4]
    4032:	687b      	ldr	r3, [r7, #4]
    4034:	685a      	ldr	r2, [r3, #4]
    4036:	687b      	ldr	r3, [r7, #4]
    4038:	601a      	str	r2, [r3, #0]
}
    403a:	46c0      	nop			; (mov r8, r8)
    403c:	46bd      	mov	sp, r7
    403e:	b002      	add	sp, #8
    4040:	bd80      	pop	{r7, pc}

00004042 <rt_list_insert_before>:
{
    4042:	b580      	push	{r7, lr}
    4044:	b082      	sub	sp, #8
    4046:	af00      	add	r7, sp, #0
    4048:	6078      	str	r0, [r7, #4]
    404a:	6039      	str	r1, [r7, #0]
    l->prev->next = n;
    404c:	687b      	ldr	r3, [r7, #4]
    404e:	685b      	ldr	r3, [r3, #4]
    4050:	683a      	ldr	r2, [r7, #0]
    4052:	601a      	str	r2, [r3, #0]
    n->prev = l->prev;
    4054:	687b      	ldr	r3, [r7, #4]
    4056:	685a      	ldr	r2, [r3, #4]
    4058:	683b      	ldr	r3, [r7, #0]
    405a:	605a      	str	r2, [r3, #4]
    l->prev = n;
    405c:	687b      	ldr	r3, [r7, #4]
    405e:	683a      	ldr	r2, [r7, #0]
    4060:	605a      	str	r2, [r3, #4]
    n->next = l;
    4062:	683b      	ldr	r3, [r7, #0]
    4064:	687a      	ldr	r2, [r7, #4]
    4066:	601a      	str	r2, [r3, #0]
}
    4068:	46c0      	nop			; (mov r8, r8)
    406a:	46bd      	mov	sp, r7
    406c:	b002      	add	sp, #8
    406e:	bd80      	pop	{r7, pc}

00004070 <rt_list_isempty>:
{
    4070:	b580      	push	{r7, lr}
    4072:	b082      	sub	sp, #8
    4074:	af00      	add	r7, sp, #0
    4076:	6078      	str	r0, [r7, #4]
    return l->next == l;
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	681b      	ldr	r3, [r3, #0]
    407c:	687a      	ldr	r2, [r7, #4]
    407e:	1ad3      	subs	r3, r2, r3
    4080:	425a      	negs	r2, r3
    4082:	4153      	adcs	r3, r2
    4084:	b2db      	uxtb	r3, r3
}
    4086:	0018      	movs	r0, r3
    4088:	46bd      	mov	sp, r7
    408a:	b002      	add	sp, #8
    408c:	bd80      	pop	{r7, pc}

0000408e <_ipc_object_init>:
 *           When the return value is any other values, it means the initialization failed.
 *
 * @warning  This function can be called from all IPC initialization and creation.
 */
rt_inline rt_err_t _ipc_object_init(struct rt_ipc_object *ipc)
{
    408e:	b580      	push	{r7, lr}
    4090:	b082      	sub	sp, #8
    4092:	af00      	add	r7, sp, #0
    4094:	6078      	str	r0, [r7, #4]
    /* initialize ipc object */
    rt_list_init(&(ipc->suspend_thread));
    4096:	687b      	ldr	r3, [r7, #4]
    4098:	3314      	adds	r3, #20
    409a:	0018      	movs	r0, r3
    409c:	f7ff ffc2 	bl	4024 <rt_list_init>

    return RT_EOK;
    40a0:	2300      	movs	r3, #0
}
    40a2:	0018      	movs	r0, r3
    40a4:	46bd      	mov	sp, r7
    40a6:	b002      	add	sp, #8
    40a8:	bd80      	pop	{r7, pc}
	...

000040ac <_ipc_list_suspend>:
 *           rt_mb_recv(),   rt_mq_recv(),     rt_mq_send_wait()
 */
rt_inline rt_err_t _ipc_list_suspend(rt_list_t        *list,
                                     struct rt_thread *thread,
                                     rt_uint8_t        flag)
{
    40ac:	b580      	push	{r7, lr}
    40ae:	b086      	sub	sp, #24
    40b0:	af00      	add	r7, sp, #0
    40b2:	60f8      	str	r0, [r7, #12]
    40b4:	60b9      	str	r1, [r7, #8]
    40b6:	1dfb      	adds	r3, r7, #7
    40b8:	701a      	strb	r2, [r3, #0]
    /* suspend thread */
    rt_thread_suspend(thread);
    40ba:	68bb      	ldr	r3, [r7, #8]
    40bc:	0018      	movs	r0, r3
    40be:	f000 ffbb 	bl	5038 <rt_thread_suspend>

    switch (flag)
    40c2:	1dfb      	adds	r3, r7, #7
    40c4:	781b      	ldrb	r3, [r3, #0]
    40c6:	2b00      	cmp	r3, #0
    40c8:	d002      	beq.n	40d0 <_ipc_list_suspend+0x24>
    40ca:	2b01      	cmp	r3, #1
    40cc:	d009      	beq.n	40e2 <_ipc_list_suspend+0x36>
    40ce:	e035      	b.n	413c <_ipc_list_suspend+0x90>
    {
    case RT_IPC_FLAG_FIFO:
        rt_list_insert_before(list, &(thread->tlist));
    40d0:	68bb      	ldr	r3, [r7, #8]
    40d2:	3314      	adds	r3, #20
    40d4:	001a      	movs	r2, r3
    40d6:	68fb      	ldr	r3, [r7, #12]
    40d8:	0011      	movs	r1, r2
    40da:	0018      	movs	r0, r3
    40dc:	f7ff ffb1 	bl	4042 <rt_list_insert_before>
        break; /* RT_IPC_FLAG_FIFO */
    40e0:	e034      	b.n	414c <_ipc_list_suspend+0xa0>
        {
            struct rt_list_node *n;
            struct rt_thread *sthread;

            /* find a suitable position */
            for (n = list->next; n != list; n = n->next)
    40e2:	68fb      	ldr	r3, [r7, #12]
    40e4:	681b      	ldr	r3, [r3, #0]
    40e6:	617b      	str	r3, [r7, #20]
    40e8:	e017      	b.n	411a <_ipc_list_suspend+0x6e>
            {
                sthread = rt_list_entry(n, struct rt_thread, tlist);
    40ea:	697b      	ldr	r3, [r7, #20]
    40ec:	3b14      	subs	r3, #20
    40ee:	613b      	str	r3, [r7, #16]

                /* find out */
                if (thread->current_priority < sthread->current_priority)
    40f0:	68bb      	ldr	r3, [r7, #8]
    40f2:	2235      	movs	r2, #53	; 0x35
    40f4:	5c9a      	ldrb	r2, [r3, r2]
    40f6:	693b      	ldr	r3, [r7, #16]
    40f8:	2135      	movs	r1, #53	; 0x35
    40fa:	5c5b      	ldrb	r3, [r3, r1]
    40fc:	429a      	cmp	r2, r3
    40fe:	d209      	bcs.n	4114 <_ipc_list_suspend+0x68>
                {
                    /* insert this thread before the sthread */
                    rt_list_insert_before(&(sthread->tlist), &(thread->tlist));
    4100:	693b      	ldr	r3, [r7, #16]
    4102:	3314      	adds	r3, #20
    4104:	001a      	movs	r2, r3
    4106:	68bb      	ldr	r3, [r7, #8]
    4108:	3314      	adds	r3, #20
    410a:	0019      	movs	r1, r3
    410c:	0010      	movs	r0, r2
    410e:	f7ff ff98 	bl	4042 <rt_list_insert_before>
                    break;
    4112:	e006      	b.n	4122 <_ipc_list_suspend+0x76>
            for (n = list->next; n != list; n = n->next)
    4114:	697b      	ldr	r3, [r7, #20]
    4116:	681b      	ldr	r3, [r3, #0]
    4118:	617b      	str	r3, [r7, #20]
    411a:	697a      	ldr	r2, [r7, #20]
    411c:	68fb      	ldr	r3, [r7, #12]
    411e:	429a      	cmp	r2, r3
    4120:	d1e3      	bne.n	40ea <_ipc_list_suspend+0x3e>

            /*
             * not found a suitable position,
             * append to the end of suspend_thread list
             */
            if (n == list)
    4122:	697a      	ldr	r2, [r7, #20]
    4124:	68fb      	ldr	r3, [r7, #12]
    4126:	429a      	cmp	r2, r3
    4128:	d10f      	bne.n	414a <_ipc_list_suspend+0x9e>
                rt_list_insert_before(list, &(thread->tlist));
    412a:	68bb      	ldr	r3, [r7, #8]
    412c:	3314      	adds	r3, #20
    412e:	001a      	movs	r2, r3
    4130:	68fb      	ldr	r3, [r7, #12]
    4132:	0011      	movs	r1, r2
    4134:	0018      	movs	r0, r3
    4136:	f7ff ff84 	bl	4042 <rt_list_insert_before>
        }
        break;/* RT_IPC_FLAG_PRIO */
    413a:	e006      	b.n	414a <_ipc_list_suspend+0x9e>

    default:
        RT_ASSERT(0);
    413c:	4906      	ldr	r1, [pc, #24]	; (4158 <_ipc_list_suspend+0xac>)
    413e:	4b07      	ldr	r3, [pc, #28]	; (415c <_ipc_list_suspend+0xb0>)
    4140:	22a3      	movs	r2, #163	; 0xa3
    4142:	0018      	movs	r0, r3
    4144:	f7ff ff44 	bl	3fd0 <rt_assert_handler>
        break;
    4148:	e000      	b.n	414c <_ipc_list_suspend+0xa0>
        break;/* RT_IPC_FLAG_PRIO */
    414a:	46c0      	nop			; (mov r8, r8)
    }

    return RT_EOK;
    414c:	2300      	movs	r3, #0
}
    414e:	0018      	movs	r0, r3
    4150:	46bd      	mov	sp, r7
    4152:	b006      	add	sp, #24
    4154:	bd80      	pop	{r7, pc}
    4156:	46c0      	nop			; (mov r8, r8)
    4158:	0000c588 	.word	0x0000c588
    415c:	0000c090 	.word	0x0000c090

00004160 <_ipc_list_resume>:
 * @warning  This function is generally called by the following functions:
 *           rt_sem_release(),    rt_mutex_release(),    rt_mb_send_wait(),    rt_mq_send_wait(),
 *           rt_mb_urgent(),      rt_mb_recv(),          rt_mq_urgent(),       rt_mq_recv(),
 */
rt_inline rt_err_t _ipc_list_resume(rt_list_t *list)
{
    4160:	b580      	push	{r7, lr}
    4162:	b084      	sub	sp, #16
    4164:	af00      	add	r7, sp, #0
    4166:	6078      	str	r0, [r7, #4]
    struct rt_thread *thread;

    /* get thread entry */
    thread = rt_list_entry(list->next, struct rt_thread, tlist);
    4168:	687b      	ldr	r3, [r7, #4]
    416a:	681b      	ldr	r3, [r3, #0]
    416c:	3b14      	subs	r3, #20
    416e:	60fb      	str	r3, [r7, #12]

    RT_DEBUG_LOG(RT_DEBUG_IPC, ("resume thread:%s\n", thread->name));

    /* resume it */
    rt_thread_resume(thread);
    4170:	68fb      	ldr	r3, [r7, #12]
    4172:	0018      	movs	r0, r3
    4174:	f000 ffce 	bl	5114 <rt_thread_resume>

    return RT_EOK;
    4178:	2300      	movs	r3, #0
}
    417a:	0018      	movs	r0, r3
    417c:	46bd      	mov	sp, r7
    417e:	b004      	add	sp, #16
    4180:	bd80      	pop	{r7, pc}
	...

00004184 <rt_sem_init>:
 */
rt_err_t rt_sem_init(rt_sem_t    sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
    4184:	b580      	push	{r7, lr}
    4186:	b084      	sub	sp, #16
    4188:	af00      	add	r7, sp, #0
    418a:	60f8      	str	r0, [r7, #12]
    418c:	60b9      	str	r1, [r7, #8]
    418e:	607a      	str	r2, [r7, #4]
    4190:	001a      	movs	r2, r3
    4192:	1cfb      	adds	r3, r7, #3
    4194:	701a      	strb	r2, [r3, #0]
    RT_ASSERT(sem != RT_NULL);
    4196:	68fb      	ldr	r3, [r7, #12]
    4198:	2b00      	cmp	r3, #0
    419a:	d106      	bne.n	41aa <rt_sem_init+0x26>
    419c:	2396      	movs	r3, #150	; 0x96
    419e:	005a      	lsls	r2, r3, #1
    41a0:	491b      	ldr	r1, [pc, #108]	; (4210 <rt_sem_init+0x8c>)
    41a2:	4b1c      	ldr	r3, [pc, #112]	; (4214 <rt_sem_init+0x90>)
    41a4:	0018      	movs	r0, r3
    41a6:	f7ff ff13 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(value < 0x10000U);
    41aa:	687a      	ldr	r2, [r7, #4]
    41ac:	2380      	movs	r3, #128	; 0x80
    41ae:	025b      	lsls	r3, r3, #9
    41b0:	429a      	cmp	r2, r3
    41b2:	d307      	bcc.n	41c4 <rt_sem_init+0x40>
    41b4:	232e      	movs	r3, #46	; 0x2e
    41b6:	33ff      	adds	r3, #255	; 0xff
    41b8:	001a      	movs	r2, r3
    41ba:	4915      	ldr	r1, [pc, #84]	; (4210 <rt_sem_init+0x8c>)
    41bc:	4b16      	ldr	r3, [pc, #88]	; (4218 <rt_sem_init+0x94>)
    41be:	0018      	movs	r0, r3
    41c0:	f7ff ff06 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT((flag == RT_IPC_FLAG_FIFO) || (flag == RT_IPC_FLAG_PRIO));
    41c4:	1cfb      	adds	r3, r7, #3
    41c6:	781b      	ldrb	r3, [r3, #0]
    41c8:	2b00      	cmp	r3, #0
    41ca:	d00a      	beq.n	41e2 <rt_sem_init+0x5e>
    41cc:	1cfb      	adds	r3, r7, #3
    41ce:	781b      	ldrb	r3, [r3, #0]
    41d0:	2b01      	cmp	r3, #1
    41d2:	d006      	beq.n	41e2 <rt_sem_init+0x5e>
    41d4:	2397      	movs	r3, #151	; 0x97
    41d6:	005a      	lsls	r2, r3, #1
    41d8:	490d      	ldr	r1, [pc, #52]	; (4210 <rt_sem_init+0x8c>)
    41da:	4b10      	ldr	r3, [pc, #64]	; (421c <rt_sem_init+0x98>)
    41dc:	0018      	movs	r0, r3
    41de:	f7ff fef7 	bl	3fd0 <rt_assert_handler>

    /* initialize object */
    rt_object_init(&(sem->parent.parent), RT_Object_Class_Semaphore, name);
    41e2:	68fb      	ldr	r3, [r7, #12]
    41e4:	68ba      	ldr	r2, [r7, #8]
    41e6:	2102      	movs	r1, #2
    41e8:	0018      	movs	r0, r3
    41ea:	f7fe fddf 	bl	2dac <rt_object_init>

    /* initialize ipc object */
    _ipc_object_init(&(sem->parent));
    41ee:	68fb      	ldr	r3, [r7, #12]
    41f0:	0018      	movs	r0, r3
    41f2:	f7ff ff4c 	bl	408e <_ipc_object_init>

    /* set initial value */
    sem->value = (rt_uint16_t)value;
    41f6:	687b      	ldr	r3, [r7, #4]
    41f8:	b29a      	uxth	r2, r3
    41fa:	68fb      	ldr	r3, [r7, #12]
    41fc:	839a      	strh	r2, [r3, #28]

    /* set parent */
    sem->parent.parent.flag = flag;
    41fe:	68fb      	ldr	r3, [r7, #12]
    4200:	1cfa      	adds	r2, r7, #3
    4202:	7812      	ldrb	r2, [r2, #0]
    4204:	725a      	strb	r2, [r3, #9]

    return RT_EOK;
    4206:	2300      	movs	r3, #0
}
    4208:	0018      	movs	r0, r3
    420a:	46bd      	mov	sp, r7
    420c:	b004      	add	sp, #16
    420e:	bd80      	pop	{r7, pc}
    4210:	0000c570 	.word	0x0000c570
    4214:	0000c094 	.word	0x0000c094
    4218:	0000c0a4 	.word	0x0000c0a4
    421c:	0000c0b8 	.word	0x0000c0b8

00004220 <rt_sem_take>:
 *           If the return value is any other values, it means that the semaphore take failed.
 *
 * @warning  This function can ONLY be called in the thread context. It MUST NOT BE called in interrupt context.
 */
rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
{
    4220:	b590      	push	{r4, r7, lr}
    4222:	b087      	sub	sp, #28
    4224:	af00      	add	r7, sp, #0
    4226:	6078      	str	r0, [r7, #4]
    4228:	6039      	str	r1, [r7, #0]
    register rt_base_t temp;
    struct rt_thread *thread;

    /* parameter check */
    RT_ASSERT(sem != RT_NULL);
    422a:	687b      	ldr	r3, [r7, #4]
    422c:	2b00      	cmp	r3, #0
    422e:	d107      	bne.n	4240 <rt_sem_take+0x20>
    4230:	23e6      	movs	r3, #230	; 0xe6
    4232:	33ff      	adds	r3, #255	; 0xff
    4234:	001a      	movs	r2, r3
    4236:	495b      	ldr	r1, [pc, #364]	; (43a4 <rt_sem_take+0x184>)
    4238:	4b5b      	ldr	r3, [pc, #364]	; (43a8 <rt_sem_take+0x188>)
    423a:	0018      	movs	r0, r3
    423c:	f7ff fec8 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);
    4240:	687b      	ldr	r3, [r7, #4]
    4242:	0018      	movs	r0, r3
    4244:	f7fe ff2c 	bl	30a0 <rt_object_get_type>
    4248:	0003      	movs	r3, r0
    424a:	2b02      	cmp	r3, #2
    424c:	d006      	beq.n	425c <rt_sem_take+0x3c>
    424e:	23f3      	movs	r3, #243	; 0xf3
    4250:	005a      	lsls	r2, r3, #1
    4252:	4954      	ldr	r1, [pc, #336]	; (43a4 <rt_sem_take+0x184>)
    4254:	4b55      	ldr	r3, [pc, #340]	; (43ac <rt_sem_take+0x18c>)
    4256:	0018      	movs	r0, r3
    4258:	f7ff feba 	bl	3fd0 <rt_assert_handler>

    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(sem->parent.parent)));
    425c:	4b54      	ldr	r3, [pc, #336]	; (43b0 <rt_sem_take+0x190>)
    425e:	681b      	ldr	r3, [r3, #0]
    4260:	2b00      	cmp	r3, #0
    4262:	d004      	beq.n	426e <rt_sem_take+0x4e>
    4264:	4b52      	ldr	r3, [pc, #328]	; (43b0 <rt_sem_take+0x190>)
    4266:	681b      	ldr	r3, [r3, #0]
    4268:	687a      	ldr	r2, [r7, #4]
    426a:	0010      	movs	r0, r2
    426c:	4798      	blx	r3

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
    426e:	f001 f92f 	bl	54d0 <rt_hw_interrupt_disable>
    4272:	0004      	movs	r4, r0
    RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s take sem:%s, which value is: %d\n",
                                rt_thread_self()->name,
                                ((struct rt_object *)sem)->name,
                                sem->value));

    if (sem->value > 0)
    4274:	687b      	ldr	r3, [r7, #4]
    4276:	8b9b      	ldrh	r3, [r3, #28]
    4278:	2b00      	cmp	r3, #0
    427a:	d009      	beq.n	4290 <rt_sem_take+0x70>
    {
        /* semaphore is available */
        sem->value --;
    427c:	687b      	ldr	r3, [r7, #4]
    427e:	8b9b      	ldrh	r3, [r3, #28]
    4280:	3b01      	subs	r3, #1
    4282:	b29a      	uxth	r2, r3
    4284:	687b      	ldr	r3, [r7, #4]
    4286:	839a      	strh	r2, [r3, #28]

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
    4288:	0020      	movs	r0, r4
    428a:	f001 f925 	bl	54d8 <rt_hw_interrupt_enable>
    428e:	e07b      	b.n	4388 <rt_sem_take+0x168>
    }
    else
    {
        /* no waiting, return with timeout */
        if (time == 0)
    4290:	683b      	ldr	r3, [r7, #0]
    4292:	2b00      	cmp	r3, #0
    4294:	d105      	bne.n	42a2 <rt_sem_take+0x82>
        {
            rt_hw_interrupt_enable(temp);
    4296:	0020      	movs	r0, r4
    4298:	f001 f91e 	bl	54d8 <rt_hw_interrupt_enable>

            return -RT_ETIMEOUT;
    429c:	2302      	movs	r3, #2
    429e:	425b      	negs	r3, r3
    42a0:	e07c      	b.n	439c <rt_sem_take+0x17c>
        }
        else
        {
            /* current context checking */
            RT_DEBUG_SCHEDULER_AVAILABLE(RT_TRUE);
    42a2:	f001 f915 	bl	54d0 <rt_hw_interrupt_disable>
    42a6:	0003      	movs	r3, r0
    42a8:	617b      	str	r3, [r7, #20]
    42aa:	f7fd fc37 	bl	1b1c <rt_critical_level>
    42ae:	1e03      	subs	r3, r0, #0
    42b0:	d00b      	beq.n	42ca <rt_sem_take+0xaa>
    42b2:	4a3c      	ldr	r2, [pc, #240]	; (43a4 <rt_sem_take+0x184>)
    42b4:	4b3f      	ldr	r3, [pc, #252]	; (43b4 <rt_sem_take+0x194>)
    42b6:	0011      	movs	r1, r2
    42b8:	0018      	movs	r0, r3
    42ba:	f7ff fce3 	bl	3c84 <rt_kprintf>
    42be:	4a3e      	ldr	r2, [pc, #248]	; (43b8 <rt_sem_take+0x198>)
    42c0:	4938      	ldr	r1, [pc, #224]	; (43a4 <rt_sem_take+0x184>)
    42c2:	4b3e      	ldr	r3, [pc, #248]	; (43bc <rt_sem_take+0x19c>)
    42c4:	0018      	movs	r0, r3
    42c6:	f7ff fe83 	bl	3fd0 <rt_assert_handler>
    42ca:	f001 f901 	bl	54d0 <rt_hw_interrupt_disable>
    42ce:	0003      	movs	r3, r0
    42d0:	613b      	str	r3, [r7, #16]
    42d2:	f000 fc71 	bl	4bb8 <rt_thread_self>
    42d6:	1e03      	subs	r3, r0, #0
    42d8:	d10b      	bne.n	42f2 <rt_sem_take+0xd2>
    42da:	4a32      	ldr	r2, [pc, #200]	; (43a4 <rt_sem_take+0x184>)
    42dc:	4b38      	ldr	r3, [pc, #224]	; (43c0 <rt_sem_take+0x1a0>)
    42de:	0011      	movs	r1, r2
    42e0:	0018      	movs	r0, r3
    42e2:	f7ff fccf 	bl	3c84 <rt_kprintf>
    42e6:	4a34      	ldr	r2, [pc, #208]	; (43b8 <rt_sem_take+0x198>)
    42e8:	492e      	ldr	r1, [pc, #184]	; (43a4 <rt_sem_take+0x184>)
    42ea:	4b34      	ldr	r3, [pc, #208]	; (43bc <rt_sem_take+0x19c>)
    42ec:	0018      	movs	r0, r3
    42ee:	f7ff fe6f 	bl	3fd0 <rt_assert_handler>
    42f2:	f001 f8ed 	bl	54d0 <rt_hw_interrupt_disable>
    42f6:	0003      	movs	r3, r0
    42f8:	60fb      	str	r3, [r7, #12]
    42fa:	f7fd f95d 	bl	15b8 <rt_interrupt_get_nest>
    42fe:	1e03      	subs	r3, r0, #0
    4300:	d00b      	beq.n	431a <rt_sem_take+0xfa>
    4302:	4a28      	ldr	r2, [pc, #160]	; (43a4 <rt_sem_take+0x184>)
    4304:	4b2f      	ldr	r3, [pc, #188]	; (43c4 <rt_sem_take+0x1a4>)
    4306:	0011      	movs	r1, r2
    4308:	0018      	movs	r0, r3
    430a:	f7ff fcbb 	bl	3c84 <rt_kprintf>
    430e:	4a2a      	ldr	r2, [pc, #168]	; (43b8 <rt_sem_take+0x198>)
    4310:	4924      	ldr	r1, [pc, #144]	; (43a4 <rt_sem_take+0x184>)
    4312:	4b2a      	ldr	r3, [pc, #168]	; (43bc <rt_sem_take+0x19c>)
    4314:	0018      	movs	r0, r3
    4316:	f7ff fe5b 	bl	3fd0 <rt_assert_handler>
    431a:	68fb      	ldr	r3, [r7, #12]
    431c:	0018      	movs	r0, r3
    431e:	f001 f8db 	bl	54d8 <rt_hw_interrupt_enable>
    4322:	693b      	ldr	r3, [r7, #16]
    4324:	0018      	movs	r0, r3
    4326:	f001 f8d7 	bl	54d8 <rt_hw_interrupt_enable>
    432a:	697b      	ldr	r3, [r7, #20]
    432c:	0018      	movs	r0, r3
    432e:	f001 f8d3 	bl	54d8 <rt_hw_interrupt_enable>

            /* semaphore is unavailable, push to suspend list */
            /* get current thread */
            thread = rt_thread_self();
    4332:	f000 fc41 	bl	4bb8 <rt_thread_self>
    4336:	0003      	movs	r3, r0
    4338:	60bb      	str	r3, [r7, #8]

            /* reset thread error number */
            thread->error = RT_EOK;
    433a:	68bb      	ldr	r3, [r7, #8]
    433c:	2200      	movs	r2, #0
    433e:	631a      	str	r2, [r3, #48]	; 0x30

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("sem take: suspend thread - %s\n",
                                        thread->name));

            /* suspend thread */
            _ipc_list_suspend(&(sem->parent.suspend_thread),
    4340:	687b      	ldr	r3, [r7, #4]
    4342:	3314      	adds	r3, #20
    4344:	0018      	movs	r0, r3
    4346:	687b      	ldr	r3, [r7, #4]
    4348:	7a5a      	ldrb	r2, [r3, #9]
    434a:	68bb      	ldr	r3, [r7, #8]
    434c:	0019      	movs	r1, r3
    434e:	f7ff fead 	bl	40ac <_ipc_list_suspend>
                                thread,
                                sem->parent.parent.flag);

            /* has waiting time, start thread timer */
            if (time > 0)
    4352:	683b      	ldr	r3, [r7, #0]
    4354:	2b00      	cmp	r3, #0
    4356:	dd0b      	ble.n	4370 <rt_sem_take+0x150>
            {
                RT_DEBUG_LOG(RT_DEBUG_IPC, ("set thread:%s to timer list\n",
                                            thread->name));

                /* reset the timeout of thread timer and start it */
                rt_timer_control(&(thread->thread_timer),
    4358:	68bb      	ldr	r3, [r7, #8]
    435a:	334c      	adds	r3, #76	; 0x4c
    435c:	003a      	movs	r2, r7
    435e:	2100      	movs	r1, #0
    4360:	0018      	movs	r0, r3
    4362:	f7fd fe49 	bl	1ff8 <rt_timer_control>
                                 RT_TIMER_CTRL_SET_TIME,
                                 &time);
                rt_timer_start(&(thread->thread_timer));
    4366:	68bb      	ldr	r3, [r7, #8]
    4368:	334c      	adds	r3, #76	; 0x4c
    436a:	0018      	movs	r0, r3
    436c:	f7fd fd06 	bl	1d7c <rt_timer_start>
            }

            /* enable interrupt */
            rt_hw_interrupt_enable(temp);
    4370:	0020      	movs	r0, r4
    4372:	f001 f8b1 	bl	54d8 <rt_hw_interrupt_enable>

            /* do schedule */
            rt_schedule();
    4376:	f7fd fa27 	bl	17c8 <rt_schedule>

            if (thread->error != RT_EOK)
    437a:	68bb      	ldr	r3, [r7, #8]
    437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    437e:	2b00      	cmp	r3, #0
    4380:	d002      	beq.n	4388 <rt_sem_take+0x168>
            {
                return thread->error;
    4382:	68bb      	ldr	r3, [r7, #8]
    4384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4386:	e009      	b.n	439c <rt_sem_take+0x17c>
            }
        }
    }

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(sem->parent.parent)));
    4388:	4b0f      	ldr	r3, [pc, #60]	; (43c8 <rt_sem_take+0x1a8>)
    438a:	681b      	ldr	r3, [r3, #0]
    438c:	2b00      	cmp	r3, #0
    438e:	d004      	beq.n	439a <rt_sem_take+0x17a>
    4390:	4b0d      	ldr	r3, [pc, #52]	; (43c8 <rt_sem_take+0x1a8>)
    4392:	681b      	ldr	r3, [r3, #0]
    4394:	687a      	ldr	r2, [r7, #4]
    4396:	0010      	movs	r0, r2
    4398:	4798      	blx	r3

    return RT_EOK;
    439a:	2300      	movs	r3, #0
}
    439c:	0018      	movs	r0, r3
    439e:	46bd      	mov	sp, r7
    43a0:	b007      	add	sp, #28
    43a2:	bd90      	pop	{r4, r7, pc}
    43a4:	0000c57c 	.word	0x0000c57c
    43a8:	0000c094 	.word	0x0000c094
    43ac:	0000c0f4 	.word	0x0000c0f4
    43b0:	1ffffd24 	.word	0x1ffffd24
    43b4:	0000c1d0 	.word	0x0000c1d0
    43b8:	00000206 	.word	0x00000206
    43bc:	0000c090 	.word	0x0000c090
    43c0:	0000c1fc 	.word	0x0000c1fc
    43c4:	0000c16c 	.word	0x0000c16c
    43c8:	1ffffd28 	.word	0x1ffffd28

000043cc <rt_sem_release>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that the semaphore release failed.
 */
rt_err_t rt_sem_release(rt_sem_t sem)
{
    43cc:	b5b0      	push	{r4, r5, r7, lr}
    43ce:	b082      	sub	sp, #8
    43d0:	af00      	add	r7, sp, #0
    43d2:	6078      	str	r0, [r7, #4]
    register rt_base_t temp;
    register rt_bool_t need_schedule;

    /* parameter check */
    RT_ASSERT(sem != RT_NULL);
    43d4:	687b      	ldr	r3, [r7, #4]
    43d6:	2b00      	cmp	r3, #0
    43d8:	d105      	bne.n	43e6 <rt_sem_release+0x1a>
    43da:	4a26      	ldr	r2, [pc, #152]	; (4474 <rt_sem_release+0xa8>)
    43dc:	4926      	ldr	r1, [pc, #152]	; (4478 <rt_sem_release+0xac>)
    43de:	4b27      	ldr	r3, [pc, #156]	; (447c <rt_sem_release+0xb0>)
    43e0:	0018      	movs	r0, r3
    43e2:	f7ff fdf5 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);
    43e6:	687b      	ldr	r3, [r7, #4]
    43e8:	0018      	movs	r0, r3
    43ea:	f7fe fe59 	bl	30a0 <rt_object_get_type>
    43ee:	0003      	movs	r3, r0
    43f0:	2b02      	cmp	r3, #2
    43f2:	d006      	beq.n	4402 <rt_sem_release+0x36>
    43f4:	2398      	movs	r3, #152	; 0x98
    43f6:	009a      	lsls	r2, r3, #2
    43f8:	491f      	ldr	r1, [pc, #124]	; (4478 <rt_sem_release+0xac>)
    43fa:	4b21      	ldr	r3, [pc, #132]	; (4480 <rt_sem_release+0xb4>)
    43fc:	0018      	movs	r0, r3
    43fe:	f7ff fde7 	bl	3fd0 <rt_assert_handler>

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(sem->parent.parent)));
    4402:	4b20      	ldr	r3, [pc, #128]	; (4484 <rt_sem_release+0xb8>)
    4404:	681b      	ldr	r3, [r3, #0]
    4406:	2b00      	cmp	r3, #0
    4408:	d004      	beq.n	4414 <rt_sem_release+0x48>
    440a:	4b1e      	ldr	r3, [pc, #120]	; (4484 <rt_sem_release+0xb8>)
    440c:	681b      	ldr	r3, [r3, #0]
    440e:	687a      	ldr	r2, [r7, #4]
    4410:	0010      	movs	r0, r2
    4412:	4798      	blx	r3

    need_schedule = RT_FALSE;
    4414:	2400      	movs	r4, #0

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
    4416:	f001 f85b 	bl	54d0 <rt_hw_interrupt_disable>
    441a:	0005      	movs	r5, r0
    RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s releases sem:%s, which value is: %d\n",
                                rt_thread_self()->name,
                                ((struct rt_object *)sem)->name,
                                sem->value));

    if (!rt_list_isempty(&sem->parent.suspend_thread))
    441c:	687b      	ldr	r3, [r7, #4]
    441e:	3314      	adds	r3, #20
    4420:	0018      	movs	r0, r3
    4422:	f7ff fe25 	bl	4070 <rt_list_isempty>
    4426:	1e03      	subs	r3, r0, #0
    4428:	d106      	bne.n	4438 <rt_sem_release+0x6c>
    {
        /* resume the suspended thread */
        _ipc_list_resume(&(sem->parent.suspend_thread));
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	3314      	adds	r3, #20
    442e:	0018      	movs	r0, r3
    4430:	f7ff fe96 	bl	4160 <_ipc_list_resume>
        need_schedule = RT_TRUE;
    4434:	2401      	movs	r4, #1
    4436:	e011      	b.n	445c <rt_sem_release+0x90>
    }
    else
    {
        if(sem->value < RT_SEM_VALUE_MAX)
    4438:	687b      	ldr	r3, [r7, #4]
    443a:	8b9b      	ldrh	r3, [r3, #28]
    443c:	4a12      	ldr	r2, [pc, #72]	; (4488 <rt_sem_release+0xbc>)
    443e:	4293      	cmp	r3, r2
    4440:	d006      	beq.n	4450 <rt_sem_release+0x84>
        {
            sem->value ++; /* increase value */
    4442:	687b      	ldr	r3, [r7, #4]
    4444:	8b9b      	ldrh	r3, [r3, #28]
    4446:	3301      	adds	r3, #1
    4448:	b29a      	uxth	r2, r3
    444a:	687b      	ldr	r3, [r7, #4]
    444c:	839a      	strh	r2, [r3, #28]
    444e:	e005      	b.n	445c <rt_sem_release+0x90>
        }
        else
        {
            rt_hw_interrupt_enable(temp); /* enable interrupt */
    4450:	0028      	movs	r0, r5
    4452:	f001 f841 	bl	54d8 <rt_hw_interrupt_enable>
            return -RT_EFULL; /* value overflowed */
    4456:	2303      	movs	r3, #3
    4458:	425b      	negs	r3, r3
    445a:	e007      	b.n	446c <rt_sem_release+0xa0>
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
    445c:	0028      	movs	r0, r5
    445e:	f001 f83b 	bl	54d8 <rt_hw_interrupt_enable>

    /* resume a thread, re-schedule */
    if (need_schedule == RT_TRUE)
    4462:	2c01      	cmp	r4, #1
    4464:	d101      	bne.n	446a <rt_sem_release+0x9e>
        rt_schedule();
    4466:	f7fd f9af 	bl	17c8 <rt_schedule>

    return RT_EOK;
    446a:	2300      	movs	r3, #0
}
    446c:	0018      	movs	r0, r3
    446e:	46bd      	mov	sp, r7
    4470:	b002      	add	sp, #8
    4472:	bdb0      	pop	{r4, r5, r7, pc}
    4474:	0000025f 	.word	0x0000025f
    4478:	0000c59c 	.word	0x0000c59c
    447c:	0000c094 	.word	0x0000c094
    4480:	0000c0f4 	.word	0x0000c0f4
    4484:	1ffffd2c 	.word	0x1ffffd2c
    4488:	0000ffff 	.word	0x0000ffff

0000448c <rt_mutex_init>:
 *           If the return value is any other values, it represents the initialization failed.
 *
 * @warning  This function can ONLY be called from threads.
 */
rt_err_t rt_mutex_init(rt_mutex_t mutex, const char *name, rt_uint8_t flag)
{
    448c:	b580      	push	{r7, lr}
    448e:	b084      	sub	sp, #16
    4490:	af00      	add	r7, sp, #0
    4492:	60f8      	str	r0, [r7, #12]
    4494:	60b9      	str	r1, [r7, #8]
    4496:	1dfb      	adds	r3, r7, #7
    4498:	701a      	strb	r2, [r3, #0]
    /* flag parameter has been obsoleted */
    RT_UNUSED(flag);

    /* parameter check */
    RT_ASSERT(mutex != RT_NULL);
    449a:	68fb      	ldr	r3, [r7, #12]
    449c:	2b00      	cmp	r3, #0
    449e:	d105      	bne.n	44ac <rt_mutex_init+0x20>
    44a0:	4a11      	ldr	r2, [pc, #68]	; (44e8 <rt_mutex_init+0x5c>)
    44a2:	4912      	ldr	r1, [pc, #72]	; (44ec <rt_mutex_init+0x60>)
    44a4:	4b12      	ldr	r3, [pc, #72]	; (44f0 <rt_mutex_init+0x64>)
    44a6:	0018      	movs	r0, r3
    44a8:	f7ff fd92 	bl	3fd0 <rt_assert_handler>

    /* initialize object */
    rt_object_init(&(mutex->parent.parent), RT_Object_Class_Mutex, name);
    44ac:	68fb      	ldr	r3, [r7, #12]
    44ae:	68ba      	ldr	r2, [r7, #8]
    44b0:	2103      	movs	r1, #3
    44b2:	0018      	movs	r0, r3
    44b4:	f7fe fc7a 	bl	2dac <rt_object_init>

    /* initialize ipc object */
    _ipc_object_init(&(mutex->parent));
    44b8:	68fb      	ldr	r3, [r7, #12]
    44ba:	0018      	movs	r0, r3
    44bc:	f7ff fde7 	bl	408e <_ipc_object_init>

    mutex->value = 1;
    44c0:	68fb      	ldr	r3, [r7, #12]
    44c2:	2201      	movs	r2, #1
    44c4:	839a      	strh	r2, [r3, #28]
    mutex->owner = RT_NULL;
    44c6:	68fb      	ldr	r3, [r7, #12]
    44c8:	2200      	movs	r2, #0
    44ca:	621a      	str	r2, [r3, #32]
    mutex->original_priority = 0xFF;
    44cc:	68fb      	ldr	r3, [r7, #12]
    44ce:	22ff      	movs	r2, #255	; 0xff
    44d0:	779a      	strb	r2, [r3, #30]
    mutex->hold  = 0;
    44d2:	68fb      	ldr	r3, [r7, #12]
    44d4:	2200      	movs	r2, #0
    44d6:	77da      	strb	r2, [r3, #31]

    /* flag can only be RT_IPC_FLAG_PRIO. RT_IPC_FLAG_FIFO cannot solve the unbounded priority inversion problem */
    mutex->parent.parent.flag = RT_IPC_FLAG_PRIO;
    44d8:	68fb      	ldr	r3, [r7, #12]
    44da:	2201      	movs	r2, #1
    44dc:	725a      	strb	r2, [r3, #9]

    return RT_EOK;
    44de:	2300      	movs	r3, #0
}
    44e0:	0018      	movs	r0, r3
    44e2:	46bd      	mov	sp, r7
    44e4:	b004      	add	sp, #16
    44e6:	bd80      	pop	{r7, pc}
    44e8:	000002e6 	.word	0x000002e6
    44ec:	0000c5ac 	.word	0x0000c5ac
    44f0:	0000c234 	.word	0x0000c234

000044f4 <rt_mutex_take>:
 *           If the return value is any other values, it means that the mutex take failed.
 *
 * @warning  This function can ONLY be called in the thread context. It MUST NOT BE called in interrupt context.
 */
rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t time)
{
    44f4:	b590      	push	{r4, r7, lr}
    44f6:	b087      	sub	sp, #28
    44f8:	af00      	add	r7, sp, #0
    44fa:	6078      	str	r0, [r7, #4]
    44fc:	6039      	str	r1, [r7, #0]
    register rt_base_t temp;
    struct rt_thread *thread;

    /* this function must not be used in interrupt even if time = 0 */
    /* current context checking */
    RT_DEBUG_SCHEDULER_AVAILABLE(RT_TRUE);
    44fe:	f000 ffe7 	bl	54d0 <rt_hw_interrupt_disable>
    4502:	0003      	movs	r3, r0
    4504:	617b      	str	r3, [r7, #20]
    4506:	f7fd fb09 	bl	1b1c <rt_critical_level>
    450a:	1e03      	subs	r3, r0, #0
    450c:	d00c      	beq.n	4528 <rt_mutex_take+0x34>
    450e:	4a7e      	ldr	r2, [pc, #504]	; (4708 <rt_mutex_take+0x214>)
    4510:	4b7e      	ldr	r3, [pc, #504]	; (470c <rt_mutex_take+0x218>)
    4512:	0011      	movs	r1, r2
    4514:	0018      	movs	r0, r3
    4516:	f7ff fbb5 	bl	3c84 <rt_kprintf>
    451a:	23e5      	movs	r3, #229	; 0xe5
    451c:	009a      	lsls	r2, r3, #2
    451e:	497a      	ldr	r1, [pc, #488]	; (4708 <rt_mutex_take+0x214>)
    4520:	4b7b      	ldr	r3, [pc, #492]	; (4710 <rt_mutex_take+0x21c>)
    4522:	0018      	movs	r0, r3
    4524:	f7ff fd54 	bl	3fd0 <rt_assert_handler>
    4528:	f000 ffd2 	bl	54d0 <rt_hw_interrupt_disable>
    452c:	0003      	movs	r3, r0
    452e:	613b      	str	r3, [r7, #16]
    4530:	f000 fb42 	bl	4bb8 <rt_thread_self>
    4534:	1e03      	subs	r3, r0, #0
    4536:	d10c      	bne.n	4552 <rt_mutex_take+0x5e>
    4538:	4a73      	ldr	r2, [pc, #460]	; (4708 <rt_mutex_take+0x214>)
    453a:	4b76      	ldr	r3, [pc, #472]	; (4714 <rt_mutex_take+0x220>)
    453c:	0011      	movs	r1, r2
    453e:	0018      	movs	r0, r3
    4540:	f7ff fba0 	bl	3c84 <rt_kprintf>
    4544:	23e5      	movs	r3, #229	; 0xe5
    4546:	009a      	lsls	r2, r3, #2
    4548:	496f      	ldr	r1, [pc, #444]	; (4708 <rt_mutex_take+0x214>)
    454a:	4b71      	ldr	r3, [pc, #452]	; (4710 <rt_mutex_take+0x21c>)
    454c:	0018      	movs	r0, r3
    454e:	f7ff fd3f 	bl	3fd0 <rt_assert_handler>
    4552:	f000 ffbd 	bl	54d0 <rt_hw_interrupt_disable>
    4556:	0003      	movs	r3, r0
    4558:	60fb      	str	r3, [r7, #12]
    455a:	f7fd f82d 	bl	15b8 <rt_interrupt_get_nest>
    455e:	1e03      	subs	r3, r0, #0
    4560:	d00c      	beq.n	457c <rt_mutex_take+0x88>
    4562:	4a69      	ldr	r2, [pc, #420]	; (4708 <rt_mutex_take+0x214>)
    4564:	4b6c      	ldr	r3, [pc, #432]	; (4718 <rt_mutex_take+0x224>)
    4566:	0011      	movs	r1, r2
    4568:	0018      	movs	r0, r3
    456a:	f7ff fb8b 	bl	3c84 <rt_kprintf>
    456e:	23e5      	movs	r3, #229	; 0xe5
    4570:	009a      	lsls	r2, r3, #2
    4572:	4965      	ldr	r1, [pc, #404]	; (4708 <rt_mutex_take+0x214>)
    4574:	4b66      	ldr	r3, [pc, #408]	; (4710 <rt_mutex_take+0x21c>)
    4576:	0018      	movs	r0, r3
    4578:	f7ff fd2a 	bl	3fd0 <rt_assert_handler>
    457c:	68fb      	ldr	r3, [r7, #12]
    457e:	0018      	movs	r0, r3
    4580:	f000 ffaa 	bl	54d8 <rt_hw_interrupt_enable>
    4584:	693b      	ldr	r3, [r7, #16]
    4586:	0018      	movs	r0, r3
    4588:	f000 ffa6 	bl	54d8 <rt_hw_interrupt_enable>
    458c:	697b      	ldr	r3, [r7, #20]
    458e:	0018      	movs	r0, r3
    4590:	f000 ffa2 	bl	54d8 <rt_hw_interrupt_enable>

    /* parameter check */
    RT_ASSERT(mutex != RT_NULL);
    4594:	687b      	ldr	r3, [r7, #4]
    4596:	2b00      	cmp	r3, #0
    4598:	d105      	bne.n	45a6 <rt_mutex_take+0xb2>
    459a:	4a60      	ldr	r2, [pc, #384]	; (471c <rt_mutex_take+0x228>)
    459c:	495a      	ldr	r1, [pc, #360]	; (4708 <rt_mutex_take+0x214>)
    459e:	4b60      	ldr	r3, [pc, #384]	; (4720 <rt_mutex_take+0x22c>)
    45a0:	0018      	movs	r0, r3
    45a2:	f7ff fd15 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);
    45a6:	687b      	ldr	r3, [r7, #4]
    45a8:	0018      	movs	r0, r3
    45aa:	f7fe fd79 	bl	30a0 <rt_object_get_type>
    45ae:	0003      	movs	r3, r0
    45b0:	2b03      	cmp	r3, #3
    45b2:	d006      	beq.n	45c2 <rt_mutex_take+0xce>
    45b4:	23e6      	movs	r3, #230	; 0xe6
    45b6:	009a      	lsls	r2, r3, #2
    45b8:	4953      	ldr	r1, [pc, #332]	; (4708 <rt_mutex_take+0x214>)
    45ba:	4b5a      	ldr	r3, [pc, #360]	; (4724 <rt_mutex_take+0x230>)
    45bc:	0018      	movs	r0, r3
    45be:	f7ff fd07 	bl	3fd0 <rt_assert_handler>

    /* get current thread */
    thread = rt_thread_self();
    45c2:	f000 faf9 	bl	4bb8 <rt_thread_self>
    45c6:	0003      	movs	r3, r0
    45c8:	60bb      	str	r3, [r7, #8]

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
    45ca:	f000 ff81 	bl	54d0 <rt_hw_interrupt_disable>
    45ce:	0004      	movs	r4, r0

    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(mutex->parent.parent)));
    45d0:	4b55      	ldr	r3, [pc, #340]	; (4728 <rt_mutex_take+0x234>)
    45d2:	681b      	ldr	r3, [r3, #0]
    45d4:	2b00      	cmp	r3, #0
    45d6:	d004      	beq.n	45e2 <rt_mutex_take+0xee>
    45d8:	4b53      	ldr	r3, [pc, #332]	; (4728 <rt_mutex_take+0x234>)
    45da:	681b      	ldr	r3, [r3, #0]
    45dc:	687a      	ldr	r2, [r7, #4]
    45de:	0010      	movs	r0, r2
    45e0:	4798      	blx	r3
    RT_DEBUG_LOG(RT_DEBUG_IPC,
                 ("mutex_take: current thread %s, mutex value: %d, hold: %d\n",
                  thread->name, mutex->value, mutex->hold));

    /* reset thread error */
    thread->error = RT_EOK;
    45e2:	68bb      	ldr	r3, [r7, #8]
    45e4:	2200      	movs	r2, #0
    45e6:	631a      	str	r2, [r3, #48]	; 0x30

    if (mutex->owner == thread)
    45e8:	687b      	ldr	r3, [r7, #4]
    45ea:	6a1b      	ldr	r3, [r3, #32]
    45ec:	68ba      	ldr	r2, [r7, #8]
    45ee:	429a      	cmp	r2, r3
    45f0:	d110      	bne.n	4614 <rt_mutex_take+0x120>
    {
        if(mutex->hold < RT_MUTEX_HOLD_MAX)
    45f2:	687b      	ldr	r3, [r7, #4]
    45f4:	7fdb      	ldrb	r3, [r3, #31]
    45f6:	2bff      	cmp	r3, #255	; 0xff
    45f8:	d006      	beq.n	4608 <rt_mutex_take+0x114>
        {
            /* it's the same thread */
            mutex->hold ++;
    45fa:	687b      	ldr	r3, [r7, #4]
    45fc:	7fdb      	ldrb	r3, [r3, #31]
    45fe:	3301      	adds	r3, #1
    4600:	b2da      	uxtb	r2, r3
    4602:	687b      	ldr	r3, [r7, #4]
    4604:	77da      	strb	r2, [r3, #31]
    4606:	e06d      	b.n	46e4 <rt_mutex_take+0x1f0>
        }
        else
        {
            rt_hw_interrupt_enable(temp); /* enable interrupt */
    4608:	0020      	movs	r0, r4
    460a:	f000 ff65 	bl	54d8 <rt_hw_interrupt_enable>
            return -RT_EFULL; /* value overflowed */
    460e:	2303      	movs	r3, #3
    4610:	425b      	negs	r3, r3
    4612:	e074      	b.n	46fe <rt_mutex_take+0x20a>
    else
    {
        /* The value of mutex is 1 in initial status. Therefore, if the
         * value is great than 0, it indicates the mutex is avaible.
         */
        if (mutex->value > 0)
    4614:	687b      	ldr	r3, [r7, #4]
    4616:	8b9b      	ldrh	r3, [r3, #28]
    4618:	2b00      	cmp	r3, #0
    461a:	d01e      	beq.n	465a <rt_mutex_take+0x166>
        {
            /* mutex is available */
            mutex->value --;
    461c:	687b      	ldr	r3, [r7, #4]
    461e:	8b9b      	ldrh	r3, [r3, #28]
    4620:	3b01      	subs	r3, #1
    4622:	b29a      	uxth	r2, r3
    4624:	687b      	ldr	r3, [r7, #4]
    4626:	839a      	strh	r2, [r3, #28]

            /* set mutex owner and original priority */
            mutex->owner             = thread;
    4628:	687b      	ldr	r3, [r7, #4]
    462a:	68ba      	ldr	r2, [r7, #8]
    462c:	621a      	str	r2, [r3, #32]
            mutex->original_priority = thread->current_priority;
    462e:	68bb      	ldr	r3, [r7, #8]
    4630:	2235      	movs	r2, #53	; 0x35
    4632:	5c9a      	ldrb	r2, [r3, r2]
    4634:	687b      	ldr	r3, [r7, #4]
    4636:	779a      	strb	r2, [r3, #30]
            if(mutex->hold < RT_MUTEX_HOLD_MAX)
    4638:	687b      	ldr	r3, [r7, #4]
    463a:	7fdb      	ldrb	r3, [r3, #31]
    463c:	2bff      	cmp	r3, #255	; 0xff
    463e:	d006      	beq.n	464e <rt_mutex_take+0x15a>
            {
                mutex->hold ++;
    4640:	687b      	ldr	r3, [r7, #4]
    4642:	7fdb      	ldrb	r3, [r3, #31]
    4644:	3301      	adds	r3, #1
    4646:	b2da      	uxtb	r2, r3
    4648:	687b      	ldr	r3, [r7, #4]
    464a:	77da      	strb	r2, [r3, #31]
    464c:	e04a      	b.n	46e4 <rt_mutex_take+0x1f0>
            }
            else
            {
                rt_hw_interrupt_enable(temp); /* enable interrupt */
    464e:	0020      	movs	r0, r4
    4650:	f000 ff42 	bl	54d8 <rt_hw_interrupt_enable>
                return -RT_EFULL; /* value overflowed */
    4654:	2303      	movs	r3, #3
    4656:	425b      	negs	r3, r3
    4658:	e051      	b.n	46fe <rt_mutex_take+0x20a>
            }
        }
        else
        {
            /* no waiting, return with timeout */
            if (time == 0)
    465a:	683b      	ldr	r3, [r7, #0]
    465c:	2b00      	cmp	r3, #0
    465e:	d109      	bne.n	4674 <rt_mutex_take+0x180>
            {
                /* set error as timeout */
                thread->error = -RT_ETIMEOUT;
    4660:	68bb      	ldr	r3, [r7, #8]
    4662:	2202      	movs	r2, #2
    4664:	4252      	negs	r2, r2
    4666:	631a      	str	r2, [r3, #48]	; 0x30

                /* enable interrupt */
                rt_hw_interrupt_enable(temp);
    4668:	0020      	movs	r0, r4
    466a:	f000 ff35 	bl	54d8 <rt_hw_interrupt_enable>

                return -RT_ETIMEOUT;
    466e:	2302      	movs	r3, #2
    4670:	425b      	negs	r3, r3
    4672:	e044      	b.n	46fe <rt_mutex_take+0x20a>
                /* mutex is unavailable, push to suspend list */
                RT_DEBUG_LOG(RT_DEBUG_IPC, ("mutex_take: suspend thread: %s\n",
                                            thread->name));

                /* change the owner thread priority of mutex */
                if (thread->current_priority < mutex->owner->current_priority)
    4674:	68bb      	ldr	r3, [r7, #8]
    4676:	2235      	movs	r2, #53	; 0x35
    4678:	5c9a      	ldrb	r2, [r3, r2]
    467a:	687b      	ldr	r3, [r7, #4]
    467c:	6a1b      	ldr	r3, [r3, #32]
    467e:	2135      	movs	r1, #53	; 0x35
    4680:	5c5b      	ldrb	r3, [r3, r1]
    4682:	429a      	cmp	r2, r3
    4684:	d207      	bcs.n	4696 <rt_mutex_take+0x1a2>
                {
                    /* change the owner thread priority */
                    rt_thread_control(mutex->owner,
    4686:	687b      	ldr	r3, [r7, #4]
    4688:	6a18      	ldr	r0, [r3, #32]
                                      RT_THREAD_CTRL_CHANGE_PRIORITY,
                                      &thread->current_priority);
    468a:	68bb      	ldr	r3, [r7, #8]
    468c:	3335      	adds	r3, #53	; 0x35
                    rt_thread_control(mutex->owner,
    468e:	001a      	movs	r2, r3
    4690:	2102      	movs	r1, #2
    4692:	f000 fc45 	bl	4f20 <rt_thread_control>
                }

                /* suspend current thread */
                _ipc_list_suspend(&(mutex->parent.suspend_thread),
    4696:	687b      	ldr	r3, [r7, #4]
    4698:	3314      	adds	r3, #20
    469a:	0018      	movs	r0, r3
    469c:	687b      	ldr	r3, [r7, #4]
    469e:	7a5a      	ldrb	r2, [r3, #9]
    46a0:	68bb      	ldr	r3, [r7, #8]
    46a2:	0019      	movs	r1, r3
    46a4:	f7ff fd02 	bl	40ac <_ipc_list_suspend>
                                    thread,
                                    mutex->parent.parent.flag);

                /* has waiting time, start thread timer */
                if (time > 0)
    46a8:	683b      	ldr	r3, [r7, #0]
    46aa:	2b00      	cmp	r3, #0
    46ac:	dd0b      	ble.n	46c6 <rt_mutex_take+0x1d2>
                    RT_DEBUG_LOG(RT_DEBUG_IPC,
                                 ("mutex_take: start the timer of thread:%s\n",
                                  thread->name));

                    /* reset the timeout of thread timer and start it */
                    rt_timer_control(&(thread->thread_timer),
    46ae:	68bb      	ldr	r3, [r7, #8]
    46b0:	334c      	adds	r3, #76	; 0x4c
    46b2:	003a      	movs	r2, r7
    46b4:	2100      	movs	r1, #0
    46b6:	0018      	movs	r0, r3
    46b8:	f7fd fc9e 	bl	1ff8 <rt_timer_control>
                                     RT_TIMER_CTRL_SET_TIME,
                                     &time);
                    rt_timer_start(&(thread->thread_timer));
    46bc:	68bb      	ldr	r3, [r7, #8]
    46be:	334c      	adds	r3, #76	; 0x4c
    46c0:	0018      	movs	r0, r3
    46c2:	f7fd fb5b 	bl	1d7c <rt_timer_start>
                }

                /* enable interrupt */
                rt_hw_interrupt_enable(temp);
    46c6:	0020      	movs	r0, r4
    46c8:	f000 ff06 	bl	54d8 <rt_hw_interrupt_enable>

                /* do schedule */
                rt_schedule();
    46cc:	f7fd f87c 	bl	17c8 <rt_schedule>

                if (thread->error != RT_EOK)
    46d0:	68bb      	ldr	r3, [r7, #8]
    46d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    46d4:	2b00      	cmp	r3, #0
    46d6:	d002      	beq.n	46de <rt_mutex_take+0x1ea>
                {
                    /* return error */
                    return thread->error;
    46d8:	68bb      	ldr	r3, [r7, #8]
    46da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    46dc:	e00f      	b.n	46fe <rt_mutex_take+0x20a>
                }
                else
                {
                    /* the mutex is taken successfully. */
                    /* disable interrupt */
                    temp = rt_hw_interrupt_disable();
    46de:	f000 fef7 	bl	54d0 <rt_hw_interrupt_disable>
    46e2:	0004      	movs	r4, r0
            }
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
    46e4:	0020      	movs	r0, r4
    46e6:	f000 fef7 	bl	54d8 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(mutex->parent.parent)));
    46ea:	4b10      	ldr	r3, [pc, #64]	; (472c <rt_mutex_take+0x238>)
    46ec:	681b      	ldr	r3, [r3, #0]
    46ee:	2b00      	cmp	r3, #0
    46f0:	d004      	beq.n	46fc <rt_mutex_take+0x208>
    46f2:	4b0e      	ldr	r3, [pc, #56]	; (472c <rt_mutex_take+0x238>)
    46f4:	681b      	ldr	r3, [r3, #0]
    46f6:	687a      	ldr	r2, [r7, #4]
    46f8:	0010      	movs	r0, r2
    46fa:	4798      	blx	r3

    return RT_EOK;
    46fc:	2300      	movs	r3, #0
}
    46fe:	0018      	movs	r0, r3
    4700:	46bd      	mov	sp, r7
    4702:	b007      	add	sp, #28
    4704:	bd90      	pop	{r4, r7, pc}
    4706:	46c0      	nop			; (mov r8, r8)
    4708:	0000c5bc 	.word	0x0000c5bc
    470c:	0000c1d0 	.word	0x0000c1d0
    4710:	0000c090 	.word	0x0000c090
    4714:	0000c1fc 	.word	0x0000c1fc
    4718:	0000c16c 	.word	0x0000c16c
    471c:	00000397 	.word	0x00000397
    4720:	0000c234 	.word	0x0000c234
    4724:	0000c248 	.word	0x0000c248
    4728:	1ffffd24 	.word	0x1ffffd24
    472c:	1ffffd28 	.word	0x1ffffd28

00004730 <rt_mutex_release>:
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 *           If the return value is any other values, it means that the mutex release failed.
 */
rt_err_t rt_mutex_release(rt_mutex_t mutex)
{
    4730:	b590      	push	{r4, r7, lr}
    4732:	b087      	sub	sp, #28
    4734:	af00      	add	r7, sp, #0
    4736:	6078      	str	r0, [r7, #4]
    register rt_base_t temp;
    struct rt_thread *thread;
    rt_bool_t need_schedule;

    /* parameter check */
    RT_ASSERT(mutex != RT_NULL);
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	2b00      	cmp	r3, #0
    473c:	d105      	bne.n	474a <rt_mutex_release+0x1a>
    473e:	4a67      	ldr	r2, [pc, #412]	; (48dc <rt_mutex_release+0x1ac>)
    4740:	4967      	ldr	r1, [pc, #412]	; (48e0 <rt_mutex_release+0x1b0>)
    4742:	4b68      	ldr	r3, [pc, #416]	; (48e4 <rt_mutex_release+0x1b4>)
    4744:	0018      	movs	r0, r3
    4746:	f7ff fc43 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type(&mutex->parent.parent) == RT_Object_Class_Mutex);
    474a:	687b      	ldr	r3, [r7, #4]
    474c:	0018      	movs	r0, r3
    474e:	f7fe fca7 	bl	30a0 <rt_object_get_type>
    4752:	0003      	movs	r3, r0
    4754:	2b03      	cmp	r3, #3
    4756:	d005      	beq.n	4764 <rt_mutex_release+0x34>
    4758:	4a63      	ldr	r2, [pc, #396]	; (48e8 <rt_mutex_release+0x1b8>)
    475a:	4961      	ldr	r1, [pc, #388]	; (48e0 <rt_mutex_release+0x1b0>)
    475c:	4b63      	ldr	r3, [pc, #396]	; (48ec <rt_mutex_release+0x1bc>)
    475e:	0018      	movs	r0, r3
    4760:	f7ff fc36 	bl	3fd0 <rt_assert_handler>

    need_schedule = RT_FALSE;
    4764:	2300      	movs	r3, #0
    4766:	617b      	str	r3, [r7, #20]

    /* only thread could release mutex because we need test the ownership */
    RT_DEBUG_IN_THREAD_CONTEXT;
    4768:	f000 feb2 	bl	54d0 <rt_hw_interrupt_disable>
    476c:	0003      	movs	r3, r0
    476e:	613b      	str	r3, [r7, #16]
    4770:	f000 fa22 	bl	4bb8 <rt_thread_self>
    4774:	1e03      	subs	r3, r0, #0
    4776:	d10b      	bne.n	4790 <rt_mutex_release+0x60>
    4778:	4a59      	ldr	r2, [pc, #356]	; (48e0 <rt_mutex_release+0x1b0>)
    477a:	4b5d      	ldr	r3, [pc, #372]	; (48f0 <rt_mutex_release+0x1c0>)
    477c:	0011      	movs	r1, r2
    477e:	0018      	movs	r0, r3
    4780:	f7ff fa80 	bl	3c84 <rt_kprintf>
    4784:	4a5b      	ldr	r2, [pc, #364]	; (48f4 <rt_mutex_release+0x1c4>)
    4786:	4956      	ldr	r1, [pc, #344]	; (48e0 <rt_mutex_release+0x1b0>)
    4788:	4b5b      	ldr	r3, [pc, #364]	; (48f8 <rt_mutex_release+0x1c8>)
    478a:	0018      	movs	r0, r3
    478c:	f7ff fc20 	bl	3fd0 <rt_assert_handler>
    4790:	f000 fe9e 	bl	54d0 <rt_hw_interrupt_disable>
    4794:	0003      	movs	r3, r0
    4796:	60fb      	str	r3, [r7, #12]
    4798:	f7fc ff0e 	bl	15b8 <rt_interrupt_get_nest>
    479c:	1e03      	subs	r3, r0, #0
    479e:	d00b      	beq.n	47b8 <rt_mutex_release+0x88>
    47a0:	4a4f      	ldr	r2, [pc, #316]	; (48e0 <rt_mutex_release+0x1b0>)
    47a2:	4b56      	ldr	r3, [pc, #344]	; (48fc <rt_mutex_release+0x1cc>)
    47a4:	0011      	movs	r1, r2
    47a6:	0018      	movs	r0, r3
    47a8:	f7ff fa6c 	bl	3c84 <rt_kprintf>
    47ac:	4a51      	ldr	r2, [pc, #324]	; (48f4 <rt_mutex_release+0x1c4>)
    47ae:	494c      	ldr	r1, [pc, #304]	; (48e0 <rt_mutex_release+0x1b0>)
    47b0:	4b51      	ldr	r3, [pc, #324]	; (48f8 <rt_mutex_release+0x1c8>)
    47b2:	0018      	movs	r0, r3
    47b4:	f7ff fc0c 	bl	3fd0 <rt_assert_handler>
    47b8:	68fb      	ldr	r3, [r7, #12]
    47ba:	0018      	movs	r0, r3
    47bc:	f000 fe8c 	bl	54d8 <rt_hw_interrupt_enable>
    47c0:	693b      	ldr	r3, [r7, #16]
    47c2:	0018      	movs	r0, r3
    47c4:	f000 fe88 	bl	54d8 <rt_hw_interrupt_enable>

    /* get current thread */
    thread = rt_thread_self();
    47c8:	f000 f9f6 	bl	4bb8 <rt_thread_self>
    47cc:	0003      	movs	r3, r0
    47ce:	60bb      	str	r3, [r7, #8]

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
    47d0:	f000 fe7e 	bl	54d0 <rt_hw_interrupt_disable>
    47d4:	0004      	movs	r4, r0

    RT_DEBUG_LOG(RT_DEBUG_IPC,
                 ("mutex_release:current thread %s, mutex value: %d, hold: %d\n",
                  thread->name, mutex->value, mutex->hold));

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(mutex->parent.parent)));
    47d6:	4b4a      	ldr	r3, [pc, #296]	; (4900 <rt_mutex_release+0x1d0>)
    47d8:	681b      	ldr	r3, [r3, #0]
    47da:	2b00      	cmp	r3, #0
    47dc:	d004      	beq.n	47e8 <rt_mutex_release+0xb8>
    47de:	4b48      	ldr	r3, [pc, #288]	; (4900 <rt_mutex_release+0x1d0>)
    47e0:	681b      	ldr	r3, [r3, #0]
    47e2:	687a      	ldr	r2, [r7, #4]
    47e4:	0010      	movs	r0, r2
    47e6:	4798      	blx	r3

    /* mutex only can be released by owner */
    if (thread != mutex->owner)
    47e8:	687b      	ldr	r3, [r7, #4]
    47ea:	6a1b      	ldr	r3, [r3, #32]
    47ec:	68ba      	ldr	r2, [r7, #8]
    47ee:	429a      	cmp	r2, r3
    47f0:	d009      	beq.n	4806 <rt_mutex_release+0xd6>
    {
        thread->error = -RT_ERROR;
    47f2:	68bb      	ldr	r3, [r7, #8]
    47f4:	2201      	movs	r2, #1
    47f6:	4252      	negs	r2, r2
    47f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* enable interrupt */
        rt_hw_interrupt_enable(temp);
    47fa:	0020      	movs	r0, r4
    47fc:	f000 fe6c 	bl	54d8 <rt_hw_interrupt_enable>

        return -RT_ERROR;
    4800:	2301      	movs	r3, #1
    4802:	425b      	negs	r3, r3
    4804:	e065      	b.n	48d2 <rt_mutex_release+0x1a2>
    }

    /* decrease hold */
    mutex->hold --;
    4806:	687b      	ldr	r3, [r7, #4]
    4808:	7fdb      	ldrb	r3, [r3, #31]
    480a:	3b01      	subs	r3, #1
    480c:	b2da      	uxtb	r2, r3
    480e:	687b      	ldr	r3, [r7, #4]
    4810:	77da      	strb	r2, [r3, #31]
    /* if no hold */
    if (mutex->hold == 0)
    4812:	687b      	ldr	r3, [r7, #4]
    4814:	7fdb      	ldrb	r3, [r3, #31]
    4816:	2b00      	cmp	r3, #0
    4818:	d152      	bne.n	48c0 <rt_mutex_release+0x190>
    {
        /* change the owner thread to original priority */
        if (mutex->original_priority != mutex->owner->current_priority)
    481a:	687b      	ldr	r3, [r7, #4]
    481c:	7f9a      	ldrb	r2, [r3, #30]
    481e:	687b      	ldr	r3, [r7, #4]
    4820:	6a1b      	ldr	r3, [r3, #32]
    4822:	2135      	movs	r1, #53	; 0x35
    4824:	5c5b      	ldrb	r3, [r3, r1]
    4826:	429a      	cmp	r2, r3
    4828:	d007      	beq.n	483a <rt_mutex_release+0x10a>
        {
            rt_thread_control(mutex->owner,
    482a:	687b      	ldr	r3, [r7, #4]
    482c:	6a18      	ldr	r0, [r3, #32]
                              RT_THREAD_CTRL_CHANGE_PRIORITY,
                              &(mutex->original_priority));
    482e:	687b      	ldr	r3, [r7, #4]
    4830:	331e      	adds	r3, #30
            rt_thread_control(mutex->owner,
    4832:	001a      	movs	r2, r3
    4834:	2102      	movs	r1, #2
    4836:	f000 fb73 	bl	4f20 <rt_thread_control>
        }

        /* wakeup suspended thread */
        if (!rt_list_isempty(&mutex->parent.suspend_thread))
    483a:	687b      	ldr	r3, [r7, #4]
    483c:	3314      	adds	r3, #20
    483e:	0018      	movs	r0, r3
    4840:	f7ff fc16 	bl	4070 <rt_list_isempty>
    4844:	1e03      	subs	r3, r0, #0
    4846:	d123      	bne.n	4890 <rt_mutex_release+0x160>
        {
            /* get suspended thread */
            thread = rt_list_entry(mutex->parent.suspend_thread.next,
    4848:	687b      	ldr	r3, [r7, #4]
    484a:	695b      	ldr	r3, [r3, #20]
    484c:	3b14      	subs	r3, #20
    484e:	60bb      	str	r3, [r7, #8]

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("mutex_release: resume thread: %s\n",
                                        thread->name));

            /* set new owner and priority */
            mutex->owner             = thread;
    4850:	687b      	ldr	r3, [r7, #4]
    4852:	68ba      	ldr	r2, [r7, #8]
    4854:	621a      	str	r2, [r3, #32]
            mutex->original_priority = thread->current_priority;
    4856:	68bb      	ldr	r3, [r7, #8]
    4858:	2235      	movs	r2, #53	; 0x35
    485a:	5c9a      	ldrb	r2, [r3, r2]
    485c:	687b      	ldr	r3, [r7, #4]
    485e:	779a      	strb	r2, [r3, #30]

            if(mutex->hold < RT_MUTEX_HOLD_MAX)
    4860:	687b      	ldr	r3, [r7, #4]
    4862:	7fdb      	ldrb	r3, [r3, #31]
    4864:	2bff      	cmp	r3, #255	; 0xff
    4866:	d00d      	beq.n	4884 <rt_mutex_release+0x154>
            {
                mutex->hold ++;
    4868:	687b      	ldr	r3, [r7, #4]
    486a:	7fdb      	ldrb	r3, [r3, #31]
    486c:	3301      	adds	r3, #1
    486e:	b2da      	uxtb	r2, r3
    4870:	687b      	ldr	r3, [r7, #4]
    4872:	77da      	strb	r2, [r3, #31]
                rt_hw_interrupt_enable(temp); /* enable interrupt */
                return -RT_EFULL; /* value overflowed */
            }

            /* resume thread */
            _ipc_list_resume(&(mutex->parent.suspend_thread));
    4874:	687b      	ldr	r3, [r7, #4]
    4876:	3314      	adds	r3, #20
    4878:	0018      	movs	r0, r3
    487a:	f7ff fc71 	bl	4160 <_ipc_list_resume>

            need_schedule = RT_TRUE;
    487e:	2301      	movs	r3, #1
    4880:	617b      	str	r3, [r7, #20]
    4882:	e01d      	b.n	48c0 <rt_mutex_release+0x190>
                rt_hw_interrupt_enable(temp); /* enable interrupt */
    4884:	0020      	movs	r0, r4
    4886:	f000 fe27 	bl	54d8 <rt_hw_interrupt_enable>
                return -RT_EFULL; /* value overflowed */
    488a:	2303      	movs	r3, #3
    488c:	425b      	negs	r3, r3
    488e:	e020      	b.n	48d2 <rt_mutex_release+0x1a2>
        }
        else
        {
            if(mutex->value < RT_MUTEX_VALUE_MAX)
    4890:	687b      	ldr	r3, [r7, #4]
    4892:	8b9b      	ldrh	r3, [r3, #28]
    4894:	4a1b      	ldr	r2, [pc, #108]	; (4904 <rt_mutex_release+0x1d4>)
    4896:	4293      	cmp	r3, r2
    4898:	d00c      	beq.n	48b4 <rt_mutex_release+0x184>
            {
                /* increase value */
                mutex->value ++;
    489a:	687b      	ldr	r3, [r7, #4]
    489c:	8b9b      	ldrh	r3, [r3, #28]
    489e:	3301      	adds	r3, #1
    48a0:	b29a      	uxth	r2, r3
    48a2:	687b      	ldr	r3, [r7, #4]
    48a4:	839a      	strh	r2, [r3, #28]
                rt_hw_interrupt_enable(temp); /* enable interrupt */
                return -RT_EFULL; /* value overflowed */
            }

            /* clear owner */
            mutex->owner             = RT_NULL;
    48a6:	687b      	ldr	r3, [r7, #4]
    48a8:	2200      	movs	r2, #0
    48aa:	621a      	str	r2, [r3, #32]
            mutex->original_priority = 0xff;
    48ac:	687b      	ldr	r3, [r7, #4]
    48ae:	22ff      	movs	r2, #255	; 0xff
    48b0:	779a      	strb	r2, [r3, #30]
    48b2:	e005      	b.n	48c0 <rt_mutex_release+0x190>
                rt_hw_interrupt_enable(temp); /* enable interrupt */
    48b4:	0020      	movs	r0, r4
    48b6:	f000 fe0f 	bl	54d8 <rt_hw_interrupt_enable>
                return -RT_EFULL; /* value overflowed */
    48ba:	2303      	movs	r3, #3
    48bc:	425b      	negs	r3, r3
    48be:	e008      	b.n	48d2 <rt_mutex_release+0x1a2>
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
    48c0:	0020      	movs	r0, r4
    48c2:	f000 fe09 	bl	54d8 <rt_hw_interrupt_enable>

    /* perform a schedule */
    if (need_schedule == RT_TRUE)
    48c6:	697b      	ldr	r3, [r7, #20]
    48c8:	2b01      	cmp	r3, #1
    48ca:	d101      	bne.n	48d0 <rt_mutex_release+0x1a0>
        rt_schedule();
    48cc:	f7fc ff7c 	bl	17c8 <rt_schedule>

    return RT_EOK;
    48d0:	2300      	movs	r3, #0
}
    48d2:	0018      	movs	r0, r3
    48d4:	46bd      	mov	sp, r7
    48d6:	b007      	add	sp, #28
    48d8:	bd90      	pop	{r4, r7, pc}
    48da:	46c0      	nop			; (mov r8, r8)
    48dc:	00000444 	.word	0x00000444
    48e0:	0000c5cc 	.word	0x0000c5cc
    48e4:	0000c234 	.word	0x0000c234
    48e8:	00000445 	.word	0x00000445
    48ec:	0000c248 	.word	0x0000c248
    48f0:	0000c1fc 	.word	0x0000c1fc
    48f4:	0000044a 	.word	0x0000044a
    48f8:	0000c090 	.word	0x0000c090
    48fc:	0000c16c 	.word	0x0000c16c
    4900:	1ffffd2c 	.word	0x1ffffd2c
    4904:	0000ffff 	.word	0x0000ffff

00004908 <rt_list_init>:
{
    4908:	b580      	push	{r7, lr}
    490a:	b082      	sub	sp, #8
    490c:	af00      	add	r7, sp, #0
    490e:	6078      	str	r0, [r7, #4]
    l->next = l->prev = l;
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	687a      	ldr	r2, [r7, #4]
    4914:	605a      	str	r2, [r3, #4]
    4916:	687b      	ldr	r3, [r7, #4]
    4918:	685a      	ldr	r2, [r3, #4]
    491a:	687b      	ldr	r3, [r7, #4]
    491c:	601a      	str	r2, [r3, #0]
}
    491e:	46c0      	nop			; (mov r8, r8)
    4920:	46bd      	mov	sp, r7
    4922:	b002      	add	sp, #8
    4924:	bd80      	pop	{r7, pc}

00004926 <rt_list_remove>:
{
    4926:	b580      	push	{r7, lr}
    4928:	b082      	sub	sp, #8
    492a:	af00      	add	r7, sp, #0
    492c:	6078      	str	r0, [r7, #4]
    n->next->prev = n->prev;
    492e:	687b      	ldr	r3, [r7, #4]
    4930:	681b      	ldr	r3, [r3, #0]
    4932:	687a      	ldr	r2, [r7, #4]
    4934:	6852      	ldr	r2, [r2, #4]
    4936:	605a      	str	r2, [r3, #4]
    n->prev->next = n->next;
    4938:	687b      	ldr	r3, [r7, #4]
    493a:	685b      	ldr	r3, [r3, #4]
    493c:	687a      	ldr	r2, [r7, #4]
    493e:	6812      	ldr	r2, [r2, #0]
    4940:	601a      	str	r2, [r3, #0]
    n->next = n->prev = n;
    4942:	687b      	ldr	r3, [r7, #4]
    4944:	687a      	ldr	r2, [r7, #4]
    4946:	605a      	str	r2, [r3, #4]
    4948:	687b      	ldr	r3, [r7, #4]
    494a:	685a      	ldr	r2, [r3, #4]
    494c:	687b      	ldr	r3, [r7, #4]
    494e:	601a      	str	r2, [r3, #0]
}
    4950:	46c0      	nop			; (mov r8, r8)
    4952:	46bd      	mov	sp, r7
    4954:	b002      	add	sp, #8
    4956:	bd80      	pop	{r7, pc}

00004958 <_thread_exit>:
}

#endif /* RT_USING_HOOK */

static void _thread_exit(void)
{
    4958:	b590      	push	{r4, r7, lr}
    495a:	b083      	sub	sp, #12
    495c:	af00      	add	r7, sp, #0
    struct rt_thread *thread;
    register rt_base_t level;

    /* get current thread */
    thread = rt_thread_self();
    495e:	f000 f92b 	bl	4bb8 <rt_thread_self>
    4962:	0003      	movs	r3, r0
    4964:	607b      	str	r3, [r7, #4]

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    4966:	f000 fdb3 	bl	54d0 <rt_hw_interrupt_disable>
    496a:	0004      	movs	r4, r0

    /* remove from schedule */
    rt_schedule_remove_thread(thread);
    496c:	687b      	ldr	r3, [r7, #4]
    496e:	0018      	movs	r0, r3
    4970:	f7fd f85a 	bl	1a28 <rt_schedule_remove_thread>

    /* remove it from timer list */
    rt_timer_detach(&thread->thread_timer);
    4974:	687b      	ldr	r3, [r7, #4]
    4976:	334c      	adds	r3, #76	; 0x4c
    4978:	0018      	movs	r0, r3
    497a:	f7fd f9b3 	bl	1ce4 <rt_timer_detach>

    /* change stat */
    thread->stat = RT_THREAD_CLOSE;
    497e:	687b      	ldr	r3, [r7, #4]
    4980:	2234      	movs	r2, #52	; 0x34
    4982:	2104      	movs	r1, #4
    4984:	5499      	strb	r1, [r3, r2]

    /* insert to defunct thread list */
    rt_thread_defunct_enqueue(thread);
    4986:	687b      	ldr	r3, [r7, #4]
    4988:	0018      	movs	r0, r3
    498a:	f000 fc47 	bl	521c <rt_thread_defunct_enqueue>

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
    498e:	0020      	movs	r0, r4
    4990:	f000 fda2 	bl	54d8 <rt_hw_interrupt_enable>

    /* switch to next task */
    rt_schedule();
    4994:	f7fc ff18 	bl	17c8 <rt_schedule>
}
    4998:	46c0      	nop			; (mov r8, r8)
    499a:	46bd      	mov	sp, r7
    499c:	b003      	add	sp, #12
    499e:	bd90      	pop	{r4, r7, pc}

000049a0 <_thread_timeout>:
 *          when thread is timeout to wait some resource.
 *
 * @param   parameter is the parameter of thread timeout function
 */
static void _thread_timeout(void *parameter)
{
    49a0:	b590      	push	{r4, r7, lr}
    49a2:	b085      	sub	sp, #20
    49a4:	af00      	add	r7, sp, #0
    49a6:	6078      	str	r0, [r7, #4]
    struct rt_thread *thread;
    register rt_base_t temp;

    thread = (struct rt_thread *)parameter;
    49a8:	687b      	ldr	r3, [r7, #4]
    49aa:	60fb      	str	r3, [r7, #12]

    /* parameter check */
    RT_ASSERT(thread != RT_NULL);
    49ac:	68fb      	ldr	r3, [r7, #12]
    49ae:	2b00      	cmp	r3, #0
    49b0:	d105      	bne.n	49be <_thread_timeout+0x1e>
    49b2:	491d      	ldr	r1, [pc, #116]	; (4a28 <_thread_timeout+0x88>)
    49b4:	4b1d      	ldr	r3, [pc, #116]	; (4a2c <_thread_timeout+0x8c>)
    49b6:	2287      	movs	r2, #135	; 0x87
    49b8:	0018      	movs	r0, r3
    49ba:	f7ff fb09 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND);
    49be:	68fb      	ldr	r3, [r7, #12]
    49c0:	2234      	movs	r2, #52	; 0x34
    49c2:	5c9b      	ldrb	r3, [r3, r2]
    49c4:	001a      	movs	r2, r3
    49c6:	2307      	movs	r3, #7
    49c8:	4013      	ands	r3, r2
    49ca:	2b02      	cmp	r3, #2
    49cc:	d005      	beq.n	49da <_thread_timeout+0x3a>
    49ce:	4916      	ldr	r1, [pc, #88]	; (4a28 <_thread_timeout+0x88>)
    49d0:	4b17      	ldr	r3, [pc, #92]	; (4a30 <_thread_timeout+0x90>)
    49d2:	2288      	movs	r2, #136	; 0x88
    49d4:	0018      	movs	r0, r3
    49d6:	f7ff fafb 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    49da:	68fb      	ldr	r3, [r7, #12]
    49dc:	0018      	movs	r0, r3
    49de:	f7fe fb5f 	bl	30a0 <rt_object_get_type>
    49e2:	0003      	movs	r3, r0
    49e4:	2b01      	cmp	r3, #1
    49e6:	d005      	beq.n	49f4 <_thread_timeout+0x54>
    49e8:	490f      	ldr	r1, [pc, #60]	; (4a28 <_thread_timeout+0x88>)
    49ea:	4b12      	ldr	r3, [pc, #72]	; (4a34 <_thread_timeout+0x94>)
    49ec:	2289      	movs	r2, #137	; 0x89
    49ee:	0018      	movs	r0, r3
    49f0:	f7ff faee 	bl	3fd0 <rt_assert_handler>

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
    49f4:	f000 fd6c 	bl	54d0 <rt_hw_interrupt_disable>
    49f8:	0004      	movs	r4, r0

    /* set error number */
    thread->error = -RT_ETIMEOUT;
    49fa:	68fb      	ldr	r3, [r7, #12]
    49fc:	2202      	movs	r2, #2
    49fe:	4252      	negs	r2, r2
    4a00:	631a      	str	r2, [r3, #48]	; 0x30

    /* remove from suspend list */
    rt_list_remove(&(thread->tlist));
    4a02:	68fb      	ldr	r3, [r7, #12]
    4a04:	3314      	adds	r3, #20
    4a06:	0018      	movs	r0, r3
    4a08:	f7ff ff8d 	bl	4926 <rt_list_remove>

    /* insert to schedule ready list */
    rt_schedule_insert_thread(thread);
    4a0c:	68fb      	ldr	r3, [r7, #12]
    4a0e:	0018      	movs	r0, r3
    4a10:	f7fc ffb2 	bl	1978 <rt_schedule_insert_thread>

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
    4a14:	0020      	movs	r0, r4
    4a16:	f000 fd5f 	bl	54d8 <rt_hw_interrupt_enable>

    /* do schedule */
    rt_schedule();
    4a1a:	f7fc fed5 	bl	17c8 <rt_schedule>
}
    4a1e:	46c0      	nop			; (mov r8, r8)
    4a20:	46bd      	mov	sp, r7
    4a22:	b005      	add	sp, #20
    4a24:	bd90      	pop	{r4, r7, pc}
    4a26:	46c0      	nop			; (mov r8, r8)
    4a28:	0000c780 	.word	0x0000c780
    4a2c:	0000c5e0 	.word	0x0000c5e0
    4a30:	0000c5f4 	.word	0x0000c5f4
    4a34:	0000c630 	.word	0x0000c630

00004a38 <_thread_init>:
                             void             *parameter,
                             void             *stack_start,
                             rt_uint32_t       stack_size,
                             rt_uint8_t        priority,
                             rt_uint32_t       tick)
{
    4a38:	b590      	push	{r4, r7, lr}
    4a3a:	b087      	sub	sp, #28
    4a3c:	af02      	add	r7, sp, #8
    4a3e:	60f8      	str	r0, [r7, #12]
    4a40:	60b9      	str	r1, [r7, #8]
    4a42:	607a      	str	r2, [r7, #4]
    4a44:	603b      	str	r3, [r7, #0]
    /* init thread list */
    rt_list_init(&(thread->tlist));
    4a46:	68fb      	ldr	r3, [r7, #12]
    4a48:	3314      	adds	r3, #20
    4a4a:	0018      	movs	r0, r3
    4a4c:	f7ff ff5c 	bl	4908 <rt_list_init>

    thread->entry = (void *)entry;
    4a50:	68fb      	ldr	r3, [r7, #12]
    4a52:	687a      	ldr	r2, [r7, #4]
    4a54:	621a      	str	r2, [r3, #32]
    thread->parameter = parameter;
    4a56:	68fb      	ldr	r3, [r7, #12]
    4a58:	683a      	ldr	r2, [r7, #0]
    4a5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* stack init */
    thread->stack_addr = stack_start;
    4a5c:	68fb      	ldr	r3, [r7, #12]
    4a5e:	6a3a      	ldr	r2, [r7, #32]
    4a60:	629a      	str	r2, [r3, #40]	; 0x28
    thread->stack_size = stack_size;
    4a62:	68fb      	ldr	r3, [r7, #12]
    4a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4a66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* init thread stack */
    rt_memset(thread->stack_addr, '#', thread->stack_size);
    4a68:	68fb      	ldr	r3, [r7, #12]
    4a6a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4a6c:	68fb      	ldr	r3, [r7, #12]
    4a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a70:	001a      	movs	r2, r3
    4a72:	2123      	movs	r1, #35	; 0x23
    4a74:	f7fe fbb0 	bl	31d8 <rt_memset>
#ifdef ARCH_CPU_STACK_GROWS_UPWARD
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
                                          (void *)((char *)thread->stack_addr),
                                          (void *)_thread_exit);
#else
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
    4a78:	68fb      	ldr	r3, [r7, #12]
    4a7a:	6a18      	ldr	r0, [r3, #32]
    4a7c:	68fb      	ldr	r3, [r7, #12]
    4a7e:	6a59      	ldr	r1, [r3, #36]	; 0x24
                                          (rt_uint8_t *)((char *)thread->stack_addr + thread->stack_size - sizeof(rt_ubase_t)),
    4a80:	68fb      	ldr	r3, [r7, #12]
    4a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4a84:	68fb      	ldr	r3, [r7, #12]
    4a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a88:	3b04      	subs	r3, #4
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
    4a8a:	18d2      	adds	r2, r2, r3
    4a8c:	4b26      	ldr	r3, [pc, #152]	; (4b28 <_thread_init+0xf0>)
    4a8e:	f000 fc81 	bl	5394 <rt_hw_stack_init>
    4a92:	0002      	movs	r2, r0
    4a94:	68fb      	ldr	r3, [r7, #12]
    4a96:	61da      	str	r2, [r3, #28]
                                          (void *)_thread_exit);
#endif /* ARCH_CPU_STACK_GROWS_UPWARD */

    /* priority init */
    RT_ASSERT(priority < RT_THREAD_PRIORITY_MAX);
    4a98:	2328      	movs	r3, #40	; 0x28
    4a9a:	18fb      	adds	r3, r7, r3
    4a9c:	781b      	ldrb	r3, [r3, #0]
    4a9e:	2b1f      	cmp	r3, #31
    4aa0:	d905      	bls.n	4aae <_thread_init+0x76>
    4aa2:	4922      	ldr	r1, [pc, #136]	; (4b2c <_thread_init+0xf4>)
    4aa4:	4b22      	ldr	r3, [pc, #136]	; (4b30 <_thread_init+0xf8>)
    4aa6:	22be      	movs	r2, #190	; 0xbe
    4aa8:	0018      	movs	r0, r3
    4aaa:	f7ff fa91 	bl	3fd0 <rt_assert_handler>
    thread->current_priority = priority;
    4aae:	68fb      	ldr	r3, [r7, #12]
    4ab0:	2228      	movs	r2, #40	; 0x28
    4ab2:	18ba      	adds	r2, r7, r2
    4ab4:	2135      	movs	r1, #53	; 0x35
    4ab6:	7812      	ldrb	r2, [r2, #0]
    4ab8:	545a      	strb	r2, [r3, r1]

    thread->number_mask = 0;
    4aba:	68fb      	ldr	r3, [r7, #12]
    4abc:	2200      	movs	r2, #0
    4abe:	639a      	str	r2, [r3, #56]	; 0x38

#ifdef RT_USING_EVENT
    thread->event_set = 0;
    4ac0:	68fb      	ldr	r3, [r7, #12]
    4ac2:	2200      	movs	r2, #0
    4ac4:	63da      	str	r2, [r3, #60]	; 0x3c
    thread->event_info = 0;
    4ac6:	68fb      	ldr	r3, [r7, #12]
    4ac8:	2240      	movs	r2, #64	; 0x40
    4aca:	2100      	movs	r1, #0
    4acc:	5499      	strb	r1, [r3, r2]
    thread->number = 0;
    thread->high_mask = 0;
#endif /* RT_THREAD_PRIORITY_MAX > 32 */

    /* tick init */
    thread->init_tick      = tick;
    4ace:	68fb      	ldr	r3, [r7, #12]
    4ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4ad2:	645a      	str	r2, [r3, #68]	; 0x44
    thread->remaining_tick = tick;
    4ad4:	68fb      	ldr	r3, [r7, #12]
    4ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4ad8:	649a      	str	r2, [r3, #72]	; 0x48

    /* error and flags */
    thread->error = RT_EOK;
    4ada:	68fb      	ldr	r3, [r7, #12]
    4adc:	2200      	movs	r2, #0
    4ade:	631a      	str	r2, [r3, #48]	; 0x30
    thread->stat  = RT_THREAD_INIT;
    4ae0:	68fb      	ldr	r3, [r7, #12]
    4ae2:	2234      	movs	r2, #52	; 0x34
    4ae4:	2100      	movs	r1, #0
    4ae6:	5499      	strb	r1, [r3, r2]
    thread->cpus_lock_nest = 0;
    thread->critical_lock_nest = 0;
#endif /* RT_USING_SMP */

    /* initialize cleanup function and user data */
    thread->cleanup   = 0;
    4ae8:	68fb      	ldr	r3, [r7, #12]
    4aea:	2200      	movs	r2, #0
    4aec:	679a      	str	r2, [r3, #120]	; 0x78
    thread->user_data = 0;
    4aee:	68fb      	ldr	r3, [r7, #12]
    4af0:	2200      	movs	r2, #0
    4af2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* initialize thread timer */
    rt_timer_init(&(thread->thread_timer),
    4af4:	68fb      	ldr	r3, [r7, #12]
    4af6:	334c      	adds	r3, #76	; 0x4c
    4af8:	0018      	movs	r0, r3
                  thread->name,
    4afa:	68f9      	ldr	r1, [r7, #12]
    rt_timer_init(&(thread->thread_timer),
    4afc:	68fb      	ldr	r3, [r7, #12]
    4afe:	4a0d      	ldr	r2, [pc, #52]	; (4b34 <_thread_init+0xfc>)
    4b00:	2400      	movs	r4, #0
    4b02:	9401      	str	r4, [sp, #4]
    4b04:	2400      	movs	r4, #0
    4b06:	9400      	str	r4, [sp, #0]
    4b08:	f7fd f8a4 	bl	1c54 <rt_timer_init>

#ifdef RT_USING_MODULE
    thread->module_id = 0;
#endif

    RT_OBJECT_HOOK_CALL(rt_thread_inited_hook, (thread));
    4b0c:	4b0a      	ldr	r3, [pc, #40]	; (4b38 <_thread_init+0x100>)
    4b0e:	681b      	ldr	r3, [r3, #0]
    4b10:	2b00      	cmp	r3, #0
    4b12:	d004      	beq.n	4b1e <_thread_init+0xe6>
    4b14:	4b08      	ldr	r3, [pc, #32]	; (4b38 <_thread_init+0x100>)
    4b16:	681b      	ldr	r3, [r3, #0]
    4b18:	68fa      	ldr	r2, [r7, #12]
    4b1a:	0010      	movs	r0, r2
    4b1c:	4798      	blx	r3

    return RT_EOK;
    4b1e:	2300      	movs	r3, #0
}
    4b20:	0018      	movs	r0, r3
    4b22:	46bd      	mov	sp, r7
    4b24:	b005      	add	sp, #20
    4b26:	bd90      	pop	{r4, r7, pc}
    4b28:	00004959 	.word	0x00004959
    4b2c:	0000c790 	.word	0x0000c790
    4b30:	0000c674 	.word	0x0000c674
    4b34:	000049a1 	.word	0x000049a1
    4b38:	1ffffdf4 	.word	0x1ffffdf4

00004b3c <rt_thread_init>:
                        void             *parameter,
                        void             *stack_start,
                        rt_uint32_t       stack_size,
                        rt_uint8_t        priority,
                        rt_uint32_t       tick)
{
    4b3c:	b590      	push	{r4, r7, lr}
    4b3e:	b089      	sub	sp, #36	; 0x24
    4b40:	af04      	add	r7, sp, #16
    4b42:	60f8      	str	r0, [r7, #12]
    4b44:	60b9      	str	r1, [r7, #8]
    4b46:	607a      	str	r2, [r7, #4]
    4b48:	603b      	str	r3, [r7, #0]
    /* parameter check */
    RT_ASSERT(thread != RT_NULL);
    4b4a:	68fb      	ldr	r3, [r7, #12]
    4b4c:	2b00      	cmp	r3, #0
    4b4e:	d107      	bne.n	4b60 <rt_thread_init+0x24>
    4b50:	2332      	movs	r3, #50	; 0x32
    4b52:	33ff      	adds	r3, #255	; 0xff
    4b54:	001a      	movs	r2, r3
    4b56:	4915      	ldr	r1, [pc, #84]	; (4bac <rt_thread_init+0x70>)
    4b58:	4b15      	ldr	r3, [pc, #84]	; (4bb0 <rt_thread_init+0x74>)
    4b5a:	0018      	movs	r0, r3
    4b5c:	f7ff fa38 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(stack_start != RT_NULL);
    4b60:	6a3b      	ldr	r3, [r7, #32]
    4b62:	2b00      	cmp	r3, #0
    4b64:	d106      	bne.n	4b74 <rt_thread_init+0x38>
    4b66:	2399      	movs	r3, #153	; 0x99
    4b68:	005a      	lsls	r2, r3, #1
    4b6a:	4910      	ldr	r1, [pc, #64]	; (4bac <rt_thread_init+0x70>)
    4b6c:	4b11      	ldr	r3, [pc, #68]	; (4bb4 <rt_thread_init+0x78>)
    4b6e:	0018      	movs	r0, r3
    4b70:	f7ff fa2e 	bl	3fd0 <rt_assert_handler>

    /* initialize thread object */
    rt_object_init((rt_object_t)thread, RT_Object_Class_Thread, name);
    4b74:	68ba      	ldr	r2, [r7, #8]
    4b76:	68fb      	ldr	r3, [r7, #12]
    4b78:	2101      	movs	r1, #1
    4b7a:	0018      	movs	r0, r3
    4b7c:	f7fe f916 	bl	2dac <rt_object_init>

    return _thread_init(thread,
    4b80:	683c      	ldr	r4, [r7, #0]
    4b82:	687a      	ldr	r2, [r7, #4]
    4b84:	68b9      	ldr	r1, [r7, #8]
    4b86:	68f8      	ldr	r0, [r7, #12]
    4b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4b8a:	9303      	str	r3, [sp, #12]
    4b8c:	2328      	movs	r3, #40	; 0x28
    4b8e:	18fb      	adds	r3, r7, r3
    4b90:	781b      	ldrb	r3, [r3, #0]
    4b92:	9302      	str	r3, [sp, #8]
    4b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b96:	9301      	str	r3, [sp, #4]
    4b98:	6a3b      	ldr	r3, [r7, #32]
    4b9a:	9300      	str	r3, [sp, #0]
    4b9c:	0023      	movs	r3, r4
    4b9e:	f7ff ff4b 	bl	4a38 <_thread_init>
    4ba2:	0003      	movs	r3, r0
                        parameter,
                        stack_start,
                        stack_size,
                        priority,
                        tick);
}
    4ba4:	0018      	movs	r0, r3
    4ba6:	46bd      	mov	sp, r7
    4ba8:	b005      	add	sp, #20
    4baa:	bd90      	pop	{r4, r7, pc}
    4bac:	0000c7a0 	.word	0x0000c7a0
    4bb0:	0000c5e0 	.word	0x0000c5e0
    4bb4:	0000c698 	.word	0x0000c698

00004bb8 <rt_thread_self>:
 * @brief   This function will return self thread object.
 *
 * @return  The self thread object.
 */
rt_thread_t rt_thread_self(void)
{
    4bb8:	b580      	push	{r7, lr}
    4bba:	af00      	add	r7, sp, #0
    rt_hw_local_irq_enable(lock);
    return self;
#else
    extern rt_thread_t rt_current_thread;

    return rt_current_thread;
    4bbc:	4b02      	ldr	r3, [pc, #8]	; (4bc8 <rt_thread_self+0x10>)
    4bbe:	681b      	ldr	r3, [r3, #0]
#endif /* RT_USING_SMP */
}
    4bc0:	0018      	movs	r0, r3
    4bc2:	46bd      	mov	sp, r7
    4bc4:	bd80      	pop	{r7, pc}
    4bc6:	46c0      	nop			; (mov r8, r8)
    4bc8:	1ffffcfc 	.word	0x1ffffcfc

00004bcc <rt_thread_startup>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_startup(rt_thread_t thread)
{
    4bcc:	b580      	push	{r7, lr}
    4bce:	b082      	sub	sp, #8
    4bd0:	af00      	add	r7, sp, #0
    4bd2:	6078      	str	r0, [r7, #4]
    /* parameter check */
    RT_ASSERT(thread != RT_NULL);
    4bd4:	687b      	ldr	r3, [r7, #4]
    4bd6:	2b00      	cmp	r3, #0
    4bd8:	d106      	bne.n	4be8 <rt_thread_startup+0x1c>
    4bda:	23b2      	movs	r3, #178	; 0xb2
    4bdc:	005a      	lsls	r2, r3, #1
    4bde:	491f      	ldr	r1, [pc, #124]	; (4c5c <rt_thread_startup+0x90>)
    4be0:	4b1f      	ldr	r3, [pc, #124]	; (4c60 <rt_thread_startup+0x94>)
    4be2:	0018      	movs	r0, r3
    4be4:	f7ff f9f4 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_INIT);
    4be8:	687b      	ldr	r3, [r7, #4]
    4bea:	2234      	movs	r2, #52	; 0x34
    4bec:	5c9b      	ldrb	r3, [r3, r2]
    4bee:	001a      	movs	r2, r3
    4bf0:	2307      	movs	r3, #7
    4bf2:	4013      	ands	r3, r2
    4bf4:	d007      	beq.n	4c06 <rt_thread_startup+0x3a>
    4bf6:	2366      	movs	r3, #102	; 0x66
    4bf8:	33ff      	adds	r3, #255	; 0xff
    4bfa:	001a      	movs	r2, r3
    4bfc:	4917      	ldr	r1, [pc, #92]	; (4c5c <rt_thread_startup+0x90>)
    4bfe:	4b19      	ldr	r3, [pc, #100]	; (4c64 <rt_thread_startup+0x98>)
    4c00:	0018      	movs	r0, r3
    4c02:	f7ff f9e5 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    4c06:	687b      	ldr	r3, [r7, #4]
    4c08:	0018      	movs	r0, r3
    4c0a:	f7fe fa49 	bl	30a0 <rt_object_get_type>
    4c0e:	0003      	movs	r3, r0
    4c10:	2b01      	cmp	r3, #1
    4c12:	d006      	beq.n	4c22 <rt_thread_startup+0x56>
    4c14:	23b3      	movs	r3, #179	; 0xb3
    4c16:	005a      	lsls	r2, r3, #1
    4c18:	4910      	ldr	r1, [pc, #64]	; (4c5c <rt_thread_startup+0x90>)
    4c1a:	4b13      	ldr	r3, [pc, #76]	; (4c68 <rt_thread_startup+0x9c>)
    4c1c:	0018      	movs	r0, r3
    4c1e:	f7ff f9d7 	bl	3fd0 <rt_assert_handler>
#if RT_THREAD_PRIORITY_MAX > 32
    thread->number      = thread->current_priority >> 3;            /* 5bit */
    thread->number_mask = 1L << thread->number;
    thread->high_mask   = 1L << (thread->current_priority & 0x07);  /* 3bit */
#else
    thread->number_mask = 1L << thread->current_priority;
    4c22:	687b      	ldr	r3, [r7, #4]
    4c24:	2235      	movs	r2, #53	; 0x35
    4c26:	5c9b      	ldrb	r3, [r3, r2]
    4c28:	001a      	movs	r2, r3
    4c2a:	2301      	movs	r3, #1
    4c2c:	4093      	lsls	r3, r2
    4c2e:	001a      	movs	r2, r3
    4c30:	687b      	ldr	r3, [r7, #4]
    4c32:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RT_THREAD_PRIORITY_MAX > 32 */

    RT_DEBUG_LOG(RT_DEBUG_THREAD, ("startup a thread:%s with priority:%d\n",
                                   thread->name, thread->current_priority));
    /* change thread stat */
    thread->stat = RT_THREAD_SUSPEND;
    4c34:	687b      	ldr	r3, [r7, #4]
    4c36:	2234      	movs	r2, #52	; 0x34
    4c38:	2102      	movs	r1, #2
    4c3a:	5499      	strb	r1, [r3, r2]
    /* then resume it */
    rt_thread_resume(thread);
    4c3c:	687b      	ldr	r3, [r7, #4]
    4c3e:	0018      	movs	r0, r3
    4c40:	f000 fa68 	bl	5114 <rt_thread_resume>
    if (rt_thread_self() != RT_NULL)
    4c44:	f7ff ffb8 	bl	4bb8 <rt_thread_self>
    4c48:	1e03      	subs	r3, r0, #0
    4c4a:	d001      	beq.n	4c50 <rt_thread_startup+0x84>
    {
        /* do a scheduling */
        rt_schedule();
    4c4c:	f7fc fdbc 	bl	17c8 <rt_schedule>
    }

    return RT_EOK;
    4c50:	2300      	movs	r3, #0
}
    4c52:	0018      	movs	r0, r3
    4c54:	46bd      	mov	sp, r7
    4c56:	b002      	add	sp, #8
    4c58:	bd80      	pop	{r7, pc}
    4c5a:	46c0      	nop			; (mov r8, r8)
    4c5c:	0000c7b0 	.word	0x0000c7b0
    4c60:	0000c5e0 	.word	0x0000c5e0
    4c64:	0000c6b0 	.word	0x0000c6b0
    4c68:	0000c630 	.word	0x0000c630

00004c6c <rt_thread_detach>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_detach(rt_thread_t thread)
{
    4c6c:	b580      	push	{r7, lr}
    4c6e:	b084      	sub	sp, #16
    4c70:	af00      	add	r7, sp, #0
    4c72:	6078      	str	r0, [r7, #4]
    rt_base_t lock;

    /* parameter check */
    RT_ASSERT(thread != RT_NULL);
    4c74:	687b      	ldr	r3, [r7, #4]
    4c76:	2b00      	cmp	r3, #0
    4c78:	d107      	bne.n	4c8a <rt_thread_detach+0x1e>
    4c7a:	2390      	movs	r3, #144	; 0x90
    4c7c:	33ff      	adds	r3, #255	; 0xff
    4c7e:	001a      	movs	r2, r3
    4c80:	4927      	ldr	r1, [pc, #156]	; (4d20 <rt_thread_detach+0xb4>)
    4c82:	4b28      	ldr	r3, [pc, #160]	; (4d24 <rt_thread_detach+0xb8>)
    4c84:	0018      	movs	r0, r3
    4c86:	f7ff f9a3 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    4c8a:	687b      	ldr	r3, [r7, #4]
    4c8c:	0018      	movs	r0, r3
    4c8e:	f7fe fa07 	bl	30a0 <rt_object_get_type>
    4c92:	0003      	movs	r3, r0
    4c94:	2b01      	cmp	r3, #1
    4c96:	d006      	beq.n	4ca6 <rt_thread_detach+0x3a>
    4c98:	23c8      	movs	r3, #200	; 0xc8
    4c9a:	005a      	lsls	r2, r3, #1
    4c9c:	4920      	ldr	r1, [pc, #128]	; (4d20 <rt_thread_detach+0xb4>)
    4c9e:	4b22      	ldr	r3, [pc, #136]	; (4d28 <rt_thread_detach+0xbc>)
    4ca0:	0018      	movs	r0, r3
    4ca2:	f7ff f995 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread));
    4ca6:	687b      	ldr	r3, [r7, #4]
    4ca8:	0018      	movs	r0, r3
    4caa:	f7fe f9db 	bl	3064 <rt_object_is_systemobject>
    4cae:	1e03      	subs	r3, r0, #0
    4cb0:	d107      	bne.n	4cc2 <rt_thread_detach+0x56>
    4cb2:	2392      	movs	r3, #146	; 0x92
    4cb4:	33ff      	adds	r3, #255	; 0xff
    4cb6:	001a      	movs	r2, r3
    4cb8:	4919      	ldr	r1, [pc, #100]	; (4d20 <rt_thread_detach+0xb4>)
    4cba:	4b1c      	ldr	r3, [pc, #112]	; (4d2c <rt_thread_detach+0xc0>)
    4cbc:	0018      	movs	r0, r3
    4cbe:	f7ff f987 	bl	3fd0 <rt_assert_handler>

    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_CLOSE)
    4cc2:	687b      	ldr	r3, [r7, #4]
    4cc4:	2234      	movs	r2, #52	; 0x34
    4cc6:	5c9b      	ldrb	r3, [r3, r2]
    4cc8:	001a      	movs	r2, r3
    4cca:	2307      	movs	r3, #7
    4ccc:	4013      	ands	r3, r2
    4cce:	2b04      	cmp	r3, #4
    4cd0:	d101      	bne.n	4cd6 <rt_thread_detach+0x6a>
        return RT_EOK;
    4cd2:	2300      	movs	r3, #0
    4cd4:	e020      	b.n	4d18 <rt_thread_detach+0xac>

    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
    4cd6:	687b      	ldr	r3, [r7, #4]
    4cd8:	2234      	movs	r2, #52	; 0x34
    4cda:	5c9b      	ldrb	r3, [r3, r2]
    4cdc:	001a      	movs	r2, r3
    4cde:	2307      	movs	r3, #7
    4ce0:	4013      	ands	r3, r2
    4ce2:	d003      	beq.n	4cec <rt_thread_detach+0x80>
    {
        /* remove from schedule */
        rt_schedule_remove_thread(thread);
    4ce4:	687b      	ldr	r3, [r7, #4]
    4ce6:	0018      	movs	r0, r3
    4ce8:	f7fc fe9e 	bl	1a28 <rt_schedule_remove_thread>
    }

    /* disable interrupt */
    lock = rt_hw_interrupt_disable();
    4cec:	f000 fbf0 	bl	54d0 <rt_hw_interrupt_disable>
    4cf0:	0003      	movs	r3, r0
    4cf2:	60fb      	str	r3, [r7, #12]

    /* release thread timer */
    rt_timer_detach(&(thread->thread_timer));
    4cf4:	687b      	ldr	r3, [r7, #4]
    4cf6:	334c      	adds	r3, #76	; 0x4c
    4cf8:	0018      	movs	r0, r3
    4cfa:	f7fc fff3 	bl	1ce4 <rt_timer_detach>

    /* change stat */
    thread->stat = RT_THREAD_CLOSE;
    4cfe:	687b      	ldr	r3, [r7, #4]
    4d00:	2234      	movs	r2, #52	; 0x34
    4d02:	2104      	movs	r1, #4
    4d04:	5499      	strb	r1, [r3, r2]

    /* insert to defunct thread list */
    rt_thread_defunct_enqueue(thread);
    4d06:	687b      	ldr	r3, [r7, #4]
    4d08:	0018      	movs	r0, r3
    4d0a:	f000 fa87 	bl	521c <rt_thread_defunct_enqueue>

    /* enable interrupt */
    rt_hw_interrupt_enable(lock);
    4d0e:	68fb      	ldr	r3, [r7, #12]
    4d10:	0018      	movs	r0, r3
    4d12:	f000 fbe1 	bl	54d8 <rt_hw_interrupt_enable>

    return RT_EOK;
    4d16:	2300      	movs	r3, #0
}
    4d18:	0018      	movs	r0, r3
    4d1a:	46bd      	mov	sp, r7
    4d1c:	b004      	add	sp, #16
    4d1e:	bd80      	pop	{r7, pc}
    4d20:	0000c7c4 	.word	0x0000c7c4
    4d24:	0000c5e0 	.word	0x0000c5e0
    4d28:	0000c630 	.word	0x0000c630
    4d2c:	0000c6e8 	.word	0x0000c6e8

00004d30 <rt_thread_create>:
                             void (*entry)(void *parameter),
                             void       *parameter,
                             rt_uint32_t stack_size,
                             rt_uint8_t  priority,
                             rt_uint32_t tick)
{
    4d30:	b590      	push	{r4, r7, lr}
    4d32:	b08b      	sub	sp, #44	; 0x2c
    4d34:	af04      	add	r7, sp, #16
    4d36:	60f8      	str	r0, [r7, #12]
    4d38:	60b9      	str	r1, [r7, #8]
    4d3a:	607a      	str	r2, [r7, #4]
    4d3c:	603b      	str	r3, [r7, #0]
    struct rt_thread *thread;
    void *stack_start;

    thread = (struct rt_thread *)rt_object_allocate(RT_Object_Class_Thread,
    4d3e:	68fb      	ldr	r3, [r7, #12]
    4d40:	0019      	movs	r1, r3
    4d42:	2001      	movs	r0, #1
    4d44:	f7fe f8d2 	bl	2eec <rt_object_allocate>
    4d48:	0003      	movs	r3, r0
    4d4a:	617b      	str	r3, [r7, #20]
                                                    name);
    if (thread == RT_NULL)
    4d4c:	697b      	ldr	r3, [r7, #20]
    4d4e:	2b00      	cmp	r3, #0
    4d50:	d101      	bne.n	4d56 <rt_thread_create+0x26>
        return RT_NULL;
    4d52:	2300      	movs	r3, #0
    4d54:	e020      	b.n	4d98 <rt_thread_create+0x68>

    stack_start = (void *)RT_KERNEL_MALLOC(stack_size);
    4d56:	683b      	ldr	r3, [r7, #0]
    4d58:	0018      	movs	r0, r3
    4d5a:	f7ff f863 	bl	3e24 <rt_malloc>
    4d5e:	0003      	movs	r3, r0
    4d60:	613b      	str	r3, [r7, #16]
    if (stack_start == RT_NULL)
    4d62:	693b      	ldr	r3, [r7, #16]
    4d64:	2b00      	cmp	r3, #0
    4d66:	d105      	bne.n	4d74 <rt_thread_create+0x44>
    {
        /* allocate stack failure */
        rt_object_delete((rt_object_t)thread);
    4d68:	697b      	ldr	r3, [r7, #20]
    4d6a:	0018      	movs	r0, r3
    4d6c:	f7fe f938 	bl	2fe0 <rt_object_delete>

        return RT_NULL;
    4d70:	2300      	movs	r3, #0
    4d72:	e011      	b.n	4d98 <rt_thread_create+0x68>
    }

    _thread_init(thread,
    4d74:	687c      	ldr	r4, [r7, #4]
    4d76:	68ba      	ldr	r2, [r7, #8]
    4d78:	68f9      	ldr	r1, [r7, #12]
    4d7a:	6978      	ldr	r0, [r7, #20]
    4d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4d7e:	9303      	str	r3, [sp, #12]
    4d80:	2328      	movs	r3, #40	; 0x28
    4d82:	18fb      	adds	r3, r7, r3
    4d84:	781b      	ldrb	r3, [r3, #0]
    4d86:	9302      	str	r3, [sp, #8]
    4d88:	683b      	ldr	r3, [r7, #0]
    4d8a:	9301      	str	r3, [sp, #4]
    4d8c:	693b      	ldr	r3, [r7, #16]
    4d8e:	9300      	str	r3, [sp, #0]
    4d90:	0023      	movs	r3, r4
    4d92:	f7ff fe51 	bl	4a38 <_thread_init>
                    stack_start,
                    stack_size,
                    priority,
                    tick);

    return thread;
    4d96:	697b      	ldr	r3, [r7, #20]
}
    4d98:	0018      	movs	r0, r3
    4d9a:	46bd      	mov	sp, r7
    4d9c:	b007      	add	sp, #28
    4d9e:	bd90      	pop	{r4, r7, pc}

00004da0 <rt_thread_delete>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_delete(rt_thread_t thread)
{
    4da0:	b580      	push	{r7, lr}
    4da2:	b084      	sub	sp, #16
    4da4:	af00      	add	r7, sp, #0
    4da6:	6078      	str	r0, [r7, #4]
    rt_base_t lock;

    /* parameter check */
    RT_ASSERT(thread != RT_NULL);
    4da8:	687b      	ldr	r3, [r7, #4]
    4daa:	2b00      	cmp	r3, #0
    4dac:	d106      	bne.n	4dbc <rt_thread_delete+0x1c>
    4dae:	23fb      	movs	r3, #251	; 0xfb
    4db0:	005a      	lsls	r2, r3, #1
    4db2:	4928      	ldr	r1, [pc, #160]	; (4e54 <rt_thread_delete+0xb4>)
    4db4:	4b28      	ldr	r3, [pc, #160]	; (4e58 <rt_thread_delete+0xb8>)
    4db6:	0018      	movs	r0, r3
    4db8:	f7ff f90a 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    4dbc:	687b      	ldr	r3, [r7, #4]
    4dbe:	0018      	movs	r0, r3
    4dc0:	f7fe f96e 	bl	30a0 <rt_object_get_type>
    4dc4:	0003      	movs	r3, r0
    4dc6:	2b01      	cmp	r3, #1
    4dc8:	d007      	beq.n	4dda <rt_thread_delete+0x3a>
    4dca:	23f8      	movs	r3, #248	; 0xf8
    4dcc:	33ff      	adds	r3, #255	; 0xff
    4dce:	001a      	movs	r2, r3
    4dd0:	4920      	ldr	r1, [pc, #128]	; (4e54 <rt_thread_delete+0xb4>)
    4dd2:	4b22      	ldr	r3, [pc, #136]	; (4e5c <rt_thread_delete+0xbc>)
    4dd4:	0018      	movs	r0, r3
    4dd6:	f7ff f8fb 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread) == RT_FALSE);
    4dda:	687b      	ldr	r3, [r7, #4]
    4ddc:	0018      	movs	r0, r3
    4dde:	f7fe f941 	bl	3064 <rt_object_is_systemobject>
    4de2:	1e03      	subs	r3, r0, #0
    4de4:	d006      	beq.n	4df4 <rt_thread_delete+0x54>
    4de6:	23fc      	movs	r3, #252	; 0xfc
    4de8:	005a      	lsls	r2, r3, #1
    4dea:	491a      	ldr	r1, [pc, #104]	; (4e54 <rt_thread_delete+0xb4>)
    4dec:	4b1c      	ldr	r3, [pc, #112]	; (4e60 <rt_thread_delete+0xc0>)
    4dee:	0018      	movs	r0, r3
    4df0:	f7ff f8ee 	bl	3fd0 <rt_assert_handler>

    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_CLOSE)
    4df4:	687b      	ldr	r3, [r7, #4]
    4df6:	2234      	movs	r2, #52	; 0x34
    4df8:	5c9b      	ldrb	r3, [r3, r2]
    4dfa:	001a      	movs	r2, r3
    4dfc:	2307      	movs	r3, #7
    4dfe:	4013      	ands	r3, r2
    4e00:	2b04      	cmp	r3, #4
    4e02:	d101      	bne.n	4e08 <rt_thread_delete+0x68>
        return RT_EOK;
    4e04:	2300      	movs	r3, #0
    4e06:	e020      	b.n	4e4a <rt_thread_delete+0xaa>

    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
    4e08:	687b      	ldr	r3, [r7, #4]
    4e0a:	2234      	movs	r2, #52	; 0x34
    4e0c:	5c9b      	ldrb	r3, [r3, r2]
    4e0e:	001a      	movs	r2, r3
    4e10:	2307      	movs	r3, #7
    4e12:	4013      	ands	r3, r2
    4e14:	d003      	beq.n	4e1e <rt_thread_delete+0x7e>
    {
        /* remove from schedule */
        rt_schedule_remove_thread(thread);
    4e16:	687b      	ldr	r3, [r7, #4]
    4e18:	0018      	movs	r0, r3
    4e1a:	f7fc fe05 	bl	1a28 <rt_schedule_remove_thread>
    }

    /* disable interrupt */
    lock = rt_hw_interrupt_disable();
    4e1e:	f000 fb57 	bl	54d0 <rt_hw_interrupt_disable>
    4e22:	0003      	movs	r3, r0
    4e24:	60fb      	str	r3, [r7, #12]

    /* release thread timer */
    rt_timer_detach(&(thread->thread_timer));
    4e26:	687b      	ldr	r3, [r7, #4]
    4e28:	334c      	adds	r3, #76	; 0x4c
    4e2a:	0018      	movs	r0, r3
    4e2c:	f7fc ff5a 	bl	1ce4 <rt_timer_detach>

    /* change stat */
    thread->stat = RT_THREAD_CLOSE;
    4e30:	687b      	ldr	r3, [r7, #4]
    4e32:	2234      	movs	r2, #52	; 0x34
    4e34:	2104      	movs	r1, #4
    4e36:	5499      	strb	r1, [r3, r2]

    /* insert to defunct thread list */
    rt_thread_defunct_enqueue(thread);
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	0018      	movs	r0, r3
    4e3c:	f000 f9ee 	bl	521c <rt_thread_defunct_enqueue>

    /* enable interrupt */
    rt_hw_interrupt_enable(lock);
    4e40:	68fb      	ldr	r3, [r7, #12]
    4e42:	0018      	movs	r0, r3
    4e44:	f000 fb48 	bl	54d8 <rt_hw_interrupt_enable>

    return RT_EOK;
    4e48:	2300      	movs	r3, #0
}
    4e4a:	0018      	movs	r0, r3
    4e4c:	46bd      	mov	sp, r7
    4e4e:	b004      	add	sp, #16
    4e50:	bd80      	pop	{r7, pc}
    4e52:	46c0      	nop			; (mov r8, r8)
    4e54:	0000c7d8 	.word	0x0000c7d8
    4e58:	0000c5e0 	.word	0x0000c5e0
    4e5c:	0000c630 	.word	0x0000c630
    4e60:	0000c718 	.word	0x0000c718

00004e64 <rt_thread_sleep>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_sleep(rt_tick_t tick)
{
    4e64:	b590      	push	{r4, r7, lr}
    4e66:	b085      	sub	sp, #20
    4e68:	af00      	add	r7, sp, #0
    4e6a:	6078      	str	r0, [r7, #4]
    register rt_base_t temp;
    struct rt_thread *thread;

    /* set to current thread */
    thread = rt_thread_self();
    4e6c:	f7ff fea4 	bl	4bb8 <rt_thread_self>
    4e70:	0003      	movs	r3, r0
    4e72:	60fb      	str	r3, [r7, #12]
    RT_ASSERT(thread != RT_NULL);
    4e74:	68fb      	ldr	r3, [r7, #12]
    4e76:	2b00      	cmp	r3, #0
    4e78:	d105      	bne.n	4e86 <rt_thread_sleep+0x22>
    4e7a:	4a1e      	ldr	r2, [pc, #120]	; (4ef4 <rt_thread_sleep+0x90>)
    4e7c:	491e      	ldr	r1, [pc, #120]	; (4ef8 <rt_thread_sleep+0x94>)
    4e7e:	4b1f      	ldr	r3, [pc, #124]	; (4efc <rt_thread_sleep+0x98>)
    4e80:	0018      	movs	r0, r3
    4e82:	f7ff f8a5 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    4e86:	68fb      	ldr	r3, [r7, #12]
    4e88:	0018      	movs	r0, r3
    4e8a:	f7fe f909 	bl	30a0 <rt_object_get_type>
    4e8e:	0003      	movs	r3, r0
    4e90:	2b01      	cmp	r3, #1
    4e92:	d006      	beq.n	4ea2 <rt_thread_sleep+0x3e>
    4e94:	2390      	movs	r3, #144	; 0x90
    4e96:	009a      	lsls	r2, r3, #2
    4e98:	4917      	ldr	r1, [pc, #92]	; (4ef8 <rt_thread_sleep+0x94>)
    4e9a:	4b19      	ldr	r3, [pc, #100]	; (4f00 <rt_thread_sleep+0x9c>)
    4e9c:	0018      	movs	r0, r3
    4e9e:	f7ff f897 	bl	3fd0 <rt_assert_handler>

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
    4ea2:	f000 fb15 	bl	54d0 <rt_hw_interrupt_disable>
    4ea6:	0004      	movs	r4, r0

    /* reset thread error */
    thread->error = RT_EOK;
    4ea8:	68fb      	ldr	r3, [r7, #12]
    4eaa:	2200      	movs	r2, #0
    4eac:	631a      	str	r2, [r3, #48]	; 0x30

    /* suspend thread */
    rt_thread_suspend(thread);
    4eae:	68fb      	ldr	r3, [r7, #12]
    4eb0:	0018      	movs	r0, r3
    4eb2:	f000 f8c1 	bl	5038 <rt_thread_suspend>

    /* reset the timeout of thread timer and start it */
    rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &tick);
    4eb6:	68fb      	ldr	r3, [r7, #12]
    4eb8:	334c      	adds	r3, #76	; 0x4c
    4eba:	1d3a      	adds	r2, r7, #4
    4ebc:	2100      	movs	r1, #0
    4ebe:	0018      	movs	r0, r3
    4ec0:	f7fd f89a 	bl	1ff8 <rt_timer_control>
    rt_timer_start(&(thread->thread_timer));
    4ec4:	68fb      	ldr	r3, [r7, #12]
    4ec6:	334c      	adds	r3, #76	; 0x4c
    4ec8:	0018      	movs	r0, r3
    4eca:	f7fc ff57 	bl	1d7c <rt_timer_start>

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
    4ece:	0020      	movs	r0, r4
    4ed0:	f000 fb02 	bl	54d8 <rt_hw_interrupt_enable>

    rt_schedule();
    4ed4:	f7fc fc78 	bl	17c8 <rt_schedule>

    /* clear error number of this thread to RT_EOK */
    if (thread->error == -RT_ETIMEOUT)
    4ed8:	68fb      	ldr	r3, [r7, #12]
    4eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4edc:	3302      	adds	r3, #2
    4ede:	d102      	bne.n	4ee6 <rt_thread_sleep+0x82>
        thread->error = RT_EOK;
    4ee0:	68fb      	ldr	r3, [r7, #12]
    4ee2:	2200      	movs	r2, #0
    4ee4:	631a      	str	r2, [r3, #48]	; 0x30

    return thread->error;
    4ee6:	68fb      	ldr	r3, [r7, #12]
    4ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    4eea:	0018      	movs	r0, r3
    4eec:	46bd      	mov	sp, r7
    4eee:	b005      	add	sp, #20
    4ef0:	bd90      	pop	{r4, r7, pc}
    4ef2:	46c0      	nop			; (mov r8, r8)
    4ef4:	0000023f 	.word	0x0000023f
    4ef8:	0000c7ec 	.word	0x0000c7ec
    4efc:	0000c5e0 	.word	0x0000c5e0
    4f00:	0000c630 	.word	0x0000c630

00004f04 <rt_thread_delay>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_delay(rt_tick_t tick)
{
    4f04:	b580      	push	{r7, lr}
    4f06:	b082      	sub	sp, #8
    4f08:	af00      	add	r7, sp, #0
    4f0a:	6078      	str	r0, [r7, #4]
    return rt_thread_sleep(tick);
    4f0c:	687b      	ldr	r3, [r7, #4]
    4f0e:	0018      	movs	r0, r3
    4f10:	f7ff ffa8 	bl	4e64 <rt_thread_sleep>
    4f14:	0003      	movs	r3, r0
}
    4f16:	0018      	movs	r0, r3
    4f18:	46bd      	mov	sp, r7
    4f1a:	b002      	add	sp, #8
    4f1c:	bd80      	pop	{r7, pc}
	...

00004f20 <rt_thread_control>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_control(rt_thread_t thread, int cmd, void *arg)
{
    4f20:	b590      	push	{r4, r7, lr}
    4f22:	b087      	sub	sp, #28
    4f24:	af00      	add	r7, sp, #0
    4f26:	60f8      	str	r0, [r7, #12]
    4f28:	60b9      	str	r1, [r7, #8]
    4f2a:	607a      	str	r2, [r7, #4]
    register rt_base_t temp;

    /* parameter check */
    RT_ASSERT(thread != RT_NULL);
    4f2c:	68fb      	ldr	r3, [r7, #12]
    4f2e:	2b00      	cmp	r3, #0
    4f30:	d105      	bne.n	4f3e <rt_thread_control+0x1e>
    4f32:	4a3c      	ldr	r2, [pc, #240]	; (5024 <rt_thread_control+0x104>)
    4f34:	493c      	ldr	r1, [pc, #240]	; (5028 <rt_thread_control+0x108>)
    4f36:	4b3d      	ldr	r3, [pc, #244]	; (502c <rt_thread_control+0x10c>)
    4f38:	0018      	movs	r0, r3
    4f3a:	f7ff f849 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    4f3e:	68fb      	ldr	r3, [r7, #12]
    4f40:	0018      	movs	r0, r3
    4f42:	f7fe f8ad 	bl	30a0 <rt_object_get_type>
    4f46:	0003      	movs	r3, r0
    4f48:	2b01      	cmp	r3, #1
    4f4a:	d005      	beq.n	4f58 <rt_thread_control+0x38>
    4f4c:	4a38      	ldr	r2, [pc, #224]	; (5030 <rt_thread_control+0x110>)
    4f4e:	4936      	ldr	r1, [pc, #216]	; (5028 <rt_thread_control+0x108>)
    4f50:	4b38      	ldr	r3, [pc, #224]	; (5034 <rt_thread_control+0x114>)
    4f52:	0018      	movs	r0, r3
    4f54:	f7ff f83c 	bl	3fd0 <rt_assert_handler>

    switch (cmd)
    4f58:	68bb      	ldr	r3, [r7, #8]
    4f5a:	2b02      	cmp	r3, #2
    4f5c:	d009      	beq.n	4f72 <rt_thread_control+0x52>
    4f5e:	68bb      	ldr	r3, [r7, #8]
    4f60:	2b02      	cmp	r3, #2
    4f62:	dc58      	bgt.n	5016 <rt_thread_control+0xf6>
    4f64:	68bb      	ldr	r3, [r7, #8]
    4f66:	2b00      	cmp	r3, #0
    4f68:	d037      	beq.n	4fda <rt_thread_control+0xba>
    4f6a:	68bb      	ldr	r3, [r7, #8]
    4f6c:	2b01      	cmp	r3, #1
    4f6e:	d03a      	beq.n	4fe6 <rt_thread_control+0xc6>
            break;
        }
    #endif /* RT_USING_SMP */

        default:
            break;
    4f70:	e051      	b.n	5016 <rt_thread_control+0xf6>
            temp = rt_hw_interrupt_disable();
    4f72:	f000 faad 	bl	54d0 <rt_hw_interrupt_disable>
    4f76:	0004      	movs	r4, r0
            if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY)
    4f78:	68fb      	ldr	r3, [r7, #12]
    4f7a:	2234      	movs	r2, #52	; 0x34
    4f7c:	5c9b      	ldrb	r3, [r3, r2]
    4f7e:	001a      	movs	r2, r3
    4f80:	2307      	movs	r3, #7
    4f82:	4013      	ands	r3, r2
    4f84:	2b01      	cmp	r3, #1
    4f86:	d116      	bne.n	4fb6 <rt_thread_control+0x96>
                rt_schedule_remove_thread(thread);
    4f88:	68fb      	ldr	r3, [r7, #12]
    4f8a:	0018      	movs	r0, r3
    4f8c:	f7fc fd4c 	bl	1a28 <rt_schedule_remove_thread>
                thread->current_priority = *(rt_uint8_t *)arg;
    4f90:	687b      	ldr	r3, [r7, #4]
    4f92:	7819      	ldrb	r1, [r3, #0]
    4f94:	68fb      	ldr	r3, [r7, #12]
    4f96:	2235      	movs	r2, #53	; 0x35
    4f98:	5499      	strb	r1, [r3, r2]
                thread->number_mask = 1 << thread->current_priority;
    4f9a:	68fb      	ldr	r3, [r7, #12]
    4f9c:	2235      	movs	r2, #53	; 0x35
    4f9e:	5c9b      	ldrb	r3, [r3, r2]
    4fa0:	001a      	movs	r2, r3
    4fa2:	2301      	movs	r3, #1
    4fa4:	4093      	lsls	r3, r2
    4fa6:	001a      	movs	r2, r3
    4fa8:	68fb      	ldr	r3, [r7, #12]
    4faa:	639a      	str	r2, [r3, #56]	; 0x38
                rt_schedule_insert_thread(thread);
    4fac:	68fb      	ldr	r3, [r7, #12]
    4fae:	0018      	movs	r0, r3
    4fb0:	f7fc fce2 	bl	1978 <rt_schedule_insert_thread>
    4fb4:	e00d      	b.n	4fd2 <rt_thread_control+0xb2>
                thread->current_priority = *(rt_uint8_t *)arg;
    4fb6:	687b      	ldr	r3, [r7, #4]
    4fb8:	7819      	ldrb	r1, [r3, #0]
    4fba:	68fb      	ldr	r3, [r7, #12]
    4fbc:	2235      	movs	r2, #53	; 0x35
    4fbe:	5499      	strb	r1, [r3, r2]
                thread->number_mask = 1 << thread->current_priority;
    4fc0:	68fb      	ldr	r3, [r7, #12]
    4fc2:	2235      	movs	r2, #53	; 0x35
    4fc4:	5c9b      	ldrb	r3, [r3, r2]
    4fc6:	001a      	movs	r2, r3
    4fc8:	2301      	movs	r3, #1
    4fca:	4093      	lsls	r3, r2
    4fcc:	001a      	movs	r2, r3
    4fce:	68fb      	ldr	r3, [r7, #12]
    4fd0:	639a      	str	r2, [r3, #56]	; 0x38
            rt_hw_interrupt_enable(temp);
    4fd2:	0020      	movs	r0, r4
    4fd4:	f000 fa80 	bl	54d8 <rt_hw_interrupt_enable>
            break;
    4fd8:	e01e      	b.n	5018 <rt_thread_control+0xf8>
            return rt_thread_startup(thread);
    4fda:	68fb      	ldr	r3, [r7, #12]
    4fdc:	0018      	movs	r0, r3
    4fde:	f7ff fdf5 	bl	4bcc <rt_thread_startup>
    4fe2:	0003      	movs	r3, r0
    4fe4:	e019      	b.n	501a <rt_thread_control+0xfa>
            if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
    4fe6:	68fb      	ldr	r3, [r7, #12]
    4fe8:	0018      	movs	r0, r3
    4fea:	f7fe f83b 	bl	3064 <rt_object_is_systemobject>
    4fee:	0003      	movs	r3, r0
    4ff0:	2b01      	cmp	r3, #1
    4ff2:	d106      	bne.n	5002 <rt_thread_control+0xe2>
                rt_err = rt_thread_detach(thread);
    4ff4:	68fb      	ldr	r3, [r7, #12]
    4ff6:	0018      	movs	r0, r3
    4ff8:	f7ff fe38 	bl	4c6c <rt_thread_detach>
    4ffc:	0003      	movs	r3, r0
    4ffe:	617b      	str	r3, [r7, #20]
    5000:	e005      	b.n	500e <rt_thread_control+0xee>
                rt_err = rt_thread_delete(thread);
    5002:	68fb      	ldr	r3, [r7, #12]
    5004:	0018      	movs	r0, r3
    5006:	f7ff fecb 	bl	4da0 <rt_thread_delete>
    500a:	0003      	movs	r3, r0
    500c:	617b      	str	r3, [r7, #20]
            rt_schedule();
    500e:	f7fc fbdb 	bl	17c8 <rt_schedule>
            return rt_err;
    5012:	697b      	ldr	r3, [r7, #20]
    5014:	e001      	b.n	501a <rt_thread_control+0xfa>
            break;
    5016:	46c0      	nop			; (mov r8, r8)
    }

    return RT_EOK;
    5018:	2300      	movs	r3, #0
}
    501a:	0018      	movs	r0, r3
    501c:	46bd      	mov	sp, r7
    501e:	b007      	add	sp, #28
    5020:	bd90      	pop	{r4, r7, pc}
    5022:	46c0      	nop			; (mov r8, r8)
    5024:	000002d5 	.word	0x000002d5
    5028:	0000c7fc 	.word	0x0000c7fc
    502c:	0000c5e0 	.word	0x0000c5e0
    5030:	000002d6 	.word	0x000002d6
    5034:	0000c630 	.word	0x0000c630

00005038 <rt_thread_suspend>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_suspend(rt_thread_t thread)
{
    5038:	b590      	push	{r4, r7, lr}
    503a:	b083      	sub	sp, #12
    503c:	af00      	add	r7, sp, #0
    503e:	6078      	str	r0, [r7, #4]
    register rt_base_t stat;
    register rt_base_t temp;

    /* parameter check */
    RT_ASSERT(thread != RT_NULL);
    5040:	687b      	ldr	r3, [r7, #4]
    5042:	2b00      	cmp	r3, #0
    5044:	d105      	bne.n	5052 <rt_thread_suspend+0x1a>
    5046:	4a2c      	ldr	r2, [pc, #176]	; (50f8 <rt_thread_suspend+0xc0>)
    5048:	492c      	ldr	r1, [pc, #176]	; (50fc <rt_thread_suspend+0xc4>)
    504a:	4b2d      	ldr	r3, [pc, #180]	; (5100 <rt_thread_suspend+0xc8>)
    504c:	0018      	movs	r0, r3
    504e:	f7fe ffbf 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    5052:	687b      	ldr	r3, [r7, #4]
    5054:	0018      	movs	r0, r3
    5056:	f7fe f823 	bl	30a0 <rt_object_get_type>
    505a:	0003      	movs	r3, r0
    505c:	2b01      	cmp	r3, #1
    505e:	d006      	beq.n	506e <rt_thread_suspend+0x36>
    5060:	23d3      	movs	r3, #211	; 0xd3
    5062:	009a      	lsls	r2, r3, #2
    5064:	4925      	ldr	r1, [pc, #148]	; (50fc <rt_thread_suspend+0xc4>)
    5066:	4b27      	ldr	r3, [pc, #156]	; (5104 <rt_thread_suspend+0xcc>)
    5068:	0018      	movs	r0, r3
    506a:	f7fe ffb1 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(thread == rt_thread_self());
    506e:	f7ff fda3 	bl	4bb8 <rt_thread_self>
    5072:	0002      	movs	r2, r0
    5074:	687b      	ldr	r3, [r7, #4]
    5076:	4293      	cmp	r3, r2
    5078:	d005      	beq.n	5086 <rt_thread_suspend+0x4e>
    507a:	4a23      	ldr	r2, [pc, #140]	; (5108 <rt_thread_suspend+0xd0>)
    507c:	491f      	ldr	r1, [pc, #124]	; (50fc <rt_thread_suspend+0xc4>)
    507e:	4b23      	ldr	r3, [pc, #140]	; (510c <rt_thread_suspend+0xd4>)
    5080:	0018      	movs	r0, r3
    5082:	f7fe ffa5 	bl	3fd0 <rt_assert_handler>

    RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend:  %s\n", thread->name));

    stat = thread->stat & RT_THREAD_STAT_MASK;
    5086:	687b      	ldr	r3, [r7, #4]
    5088:	2234      	movs	r2, #52	; 0x34
    508a:	5c9b      	ldrb	r3, [r3, r2]
    508c:	001a      	movs	r2, r3
    508e:	2307      	movs	r3, #7
    5090:	401a      	ands	r2, r3
    5092:	0014      	movs	r4, r2
    if ((stat != RT_THREAD_READY) && (stat != RT_THREAD_RUNNING))
    5094:	2c01      	cmp	r4, #1
    5096:	d004      	beq.n	50a2 <rt_thread_suspend+0x6a>
    5098:	2c03      	cmp	r4, #3
    509a:	d002      	beq.n	50a2 <rt_thread_suspend+0x6a>
    {
        RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend: thread disorder, 0x%2x\n", thread->stat));
        return -RT_ERROR;
    509c:	2301      	movs	r3, #1
    509e:	425b      	negs	r3, r3
    50a0:	e026      	b.n	50f0 <rt_thread_suspend+0xb8>
    }

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
    50a2:	f000 fa15 	bl	54d0 <rt_hw_interrupt_disable>
    50a6:	0004      	movs	r4, r0

    /* change thread stat */
    rt_schedule_remove_thread(thread);
    50a8:	687b      	ldr	r3, [r7, #4]
    50aa:	0018      	movs	r0, r3
    50ac:	f7fc fcbc 	bl	1a28 <rt_schedule_remove_thread>
    thread->stat = RT_THREAD_SUSPEND | (thread->stat & ~RT_THREAD_STAT_MASK);
    50b0:	687b      	ldr	r3, [r7, #4]
    50b2:	2234      	movs	r2, #52	; 0x34
    50b4:	5c9b      	ldrb	r3, [r3, r2]
    50b6:	b25b      	sxtb	r3, r3
    50b8:	2207      	movs	r2, #7
    50ba:	4393      	bics	r3, r2
    50bc:	b25b      	sxtb	r3, r3
    50be:	2202      	movs	r2, #2
    50c0:	4313      	orrs	r3, r2
    50c2:	b25b      	sxtb	r3, r3
    50c4:	b2d9      	uxtb	r1, r3
    50c6:	687b      	ldr	r3, [r7, #4]
    50c8:	2234      	movs	r2, #52	; 0x34
    50ca:	5499      	strb	r1, [r3, r2]

    /* stop thread timer anyway */
    rt_timer_stop(&(thread->thread_timer));
    50cc:	687b      	ldr	r3, [r7, #4]
    50ce:	334c      	adds	r3, #76	; 0x4c
    50d0:	0018      	movs	r0, r3
    50d2:	f7fc ff43 	bl	1f5c <rt_timer_stop>

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
    50d6:	0020      	movs	r0, r4
    50d8:	f000 f9fe 	bl	54d8 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_thread_suspend_hook, (thread));
    50dc:	4b0c      	ldr	r3, [pc, #48]	; (5110 <rt_thread_suspend+0xd8>)
    50de:	681b      	ldr	r3, [r3, #0]
    50e0:	2b00      	cmp	r3, #0
    50e2:	d004      	beq.n	50ee <rt_thread_suspend+0xb6>
    50e4:	4b0a      	ldr	r3, [pc, #40]	; (5110 <rt_thread_suspend+0xd8>)
    50e6:	681b      	ldr	r3, [r3, #0]
    50e8:	687a      	ldr	r2, [r7, #4]
    50ea:	0010      	movs	r0, r2
    50ec:	4798      	blx	r3
    return RT_EOK;
    50ee:	2300      	movs	r3, #0
}
    50f0:	0018      	movs	r0, r3
    50f2:	46bd      	mov	sp, r7
    50f4:	b003      	add	sp, #12
    50f6:	bd90      	pop	{r4, r7, pc}
    50f8:	0000034b 	.word	0x0000034b
    50fc:	0000c810 	.word	0x0000c810
    5100:	0000c5e0 	.word	0x0000c5e0
    5104:	0000c630 	.word	0x0000c630
    5108:	0000034d 	.word	0x0000034d
    510c:	0000c764 	.word	0x0000c764
    5110:	1ffffdec 	.word	0x1ffffdec

00005114 <rt_thread_resume>:
 *
 * @return  Return the operation status. If the return value is RT_EOK, the function is successfully executed.
 *          If the return value is any other values, it means this operation failed.
 */
rt_err_t rt_thread_resume(rt_thread_t thread)
{
    5114:	b590      	push	{r4, r7, lr}
    5116:	b083      	sub	sp, #12
    5118:	af00      	add	r7, sp, #0
    511a:	6078      	str	r0, [r7, #4]
    register rt_base_t temp;

    /* parameter check */
    RT_ASSERT(thread != RT_NULL);
    511c:	687b      	ldr	r3, [r7, #4]
    511e:	2b00      	cmp	r3, #0
    5120:	d105      	bne.n	512e <rt_thread_resume+0x1a>
    5122:	4a20      	ldr	r2, [pc, #128]	; (51a4 <rt_thread_resume+0x90>)
    5124:	4920      	ldr	r1, [pc, #128]	; (51a8 <rt_thread_resume+0x94>)
    5126:	4b21      	ldr	r3, [pc, #132]	; (51ac <rt_thread_resume+0x98>)
    5128:	0018      	movs	r0, r3
    512a:	f7fe ff51 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    512e:	687b      	ldr	r3, [r7, #4]
    5130:	0018      	movs	r0, r3
    5132:	f7fd ffb5 	bl	30a0 <rt_object_get_type>
    5136:	0003      	movs	r3, r0
    5138:	2b01      	cmp	r3, #1
    513a:	d005      	beq.n	5148 <rt_thread_resume+0x34>
    513c:	4a1c      	ldr	r2, [pc, #112]	; (51b0 <rt_thread_resume+0x9c>)
    513e:	491a      	ldr	r1, [pc, #104]	; (51a8 <rt_thread_resume+0x94>)
    5140:	4b1c      	ldr	r3, [pc, #112]	; (51b4 <rt_thread_resume+0xa0>)
    5142:	0018      	movs	r0, r3
    5144:	f7fe ff44 	bl	3fd0 <rt_assert_handler>

    RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume:  %s\n", thread->name));

    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_SUSPEND)
    5148:	687b      	ldr	r3, [r7, #4]
    514a:	2234      	movs	r2, #52	; 0x34
    514c:	5c9b      	ldrb	r3, [r3, r2]
    514e:	001a      	movs	r2, r3
    5150:	2307      	movs	r3, #7
    5152:	4013      	ands	r3, r2
    5154:	2b02      	cmp	r3, #2
    5156:	d002      	beq.n	515e <rt_thread_resume+0x4a>
    {
        RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume: thread disorder, %d\n",
                                       thread->stat));

        return -RT_ERROR;
    5158:	2301      	movs	r3, #1
    515a:	425b      	negs	r3, r3
    515c:	e01d      	b.n	519a <rt_thread_resume+0x86>
    }

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
    515e:	f000 f9b7 	bl	54d0 <rt_hw_interrupt_disable>
    5162:	0004      	movs	r4, r0

    /* remove from suspend list */
    rt_list_remove(&(thread->tlist));
    5164:	687b      	ldr	r3, [r7, #4]
    5166:	3314      	adds	r3, #20
    5168:	0018      	movs	r0, r3
    516a:	f7ff fbdc 	bl	4926 <rt_list_remove>

    rt_timer_stop(&thread->thread_timer);
    516e:	687b      	ldr	r3, [r7, #4]
    5170:	334c      	adds	r3, #76	; 0x4c
    5172:	0018      	movs	r0, r3
    5174:	f7fc fef2 	bl	1f5c <rt_timer_stop>

    /* insert to schedule ready list */
    rt_schedule_insert_thread(thread);
    5178:	687b      	ldr	r3, [r7, #4]
    517a:	0018      	movs	r0, r3
    517c:	f7fc fbfc 	bl	1978 <rt_schedule_insert_thread>

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
    5180:	0020      	movs	r0, r4
    5182:	f000 f9a9 	bl	54d8 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_thread_resume_hook, (thread));
    5186:	4b0c      	ldr	r3, [pc, #48]	; (51b8 <rt_thread_resume+0xa4>)
    5188:	681b      	ldr	r3, [r3, #0]
    518a:	2b00      	cmp	r3, #0
    518c:	d004      	beq.n	5198 <rt_thread_resume+0x84>
    518e:	4b0a      	ldr	r3, [pc, #40]	; (51b8 <rt_thread_resume+0xa4>)
    5190:	681b      	ldr	r3, [r3, #0]
    5192:	687a      	ldr	r2, [r7, #4]
    5194:	0010      	movs	r0, r2
    5196:	4798      	blx	r3
    return RT_EOK;
    5198:	2300      	movs	r3, #0
}
    519a:	0018      	movs	r0, r3
    519c:	46bd      	mov	sp, r7
    519e:	b003      	add	sp, #12
    51a0:	bd90      	pop	{r4, r7, pc}
    51a2:	46c0      	nop			; (mov r8, r8)
    51a4:	00000379 	.word	0x00000379
    51a8:	0000c824 	.word	0x0000c824
    51ac:	0000c5e0 	.word	0x0000c5e0
    51b0:	0000037a 	.word	0x0000037a
    51b4:	0000c630 	.word	0x0000c630
    51b8:	1ffffdf0 	.word	0x1ffffdf0

000051bc <rt_list_insert_after>:
{
    51bc:	b580      	push	{r7, lr}
    51be:	b082      	sub	sp, #8
    51c0:	af00      	add	r7, sp, #0
    51c2:	6078      	str	r0, [r7, #4]
    51c4:	6039      	str	r1, [r7, #0]
    l->next->prev = n;
    51c6:	687b      	ldr	r3, [r7, #4]
    51c8:	681b      	ldr	r3, [r3, #0]
    51ca:	683a      	ldr	r2, [r7, #0]
    51cc:	605a      	str	r2, [r3, #4]
    n->next = l->next;
    51ce:	687b      	ldr	r3, [r7, #4]
    51d0:	681a      	ldr	r2, [r3, #0]
    51d2:	683b      	ldr	r3, [r7, #0]
    51d4:	601a      	str	r2, [r3, #0]
    l->next = n;
    51d6:	687b      	ldr	r3, [r7, #4]
    51d8:	683a      	ldr	r2, [r7, #0]
    51da:	601a      	str	r2, [r3, #0]
    n->prev = l;
    51dc:	683b      	ldr	r3, [r7, #0]
    51de:	687a      	ldr	r2, [r7, #4]
    51e0:	605a      	str	r2, [r3, #4]
}
    51e2:	46c0      	nop			; (mov r8, r8)
    51e4:	46bd      	mov	sp, r7
    51e6:	b002      	add	sp, #8
    51e8:	bd80      	pop	{r7, pc}

000051ea <rt_list_remove>:
{
    51ea:	b580      	push	{r7, lr}
    51ec:	b082      	sub	sp, #8
    51ee:	af00      	add	r7, sp, #0
    51f0:	6078      	str	r0, [r7, #4]
    n->next->prev = n->prev;
    51f2:	687b      	ldr	r3, [r7, #4]
    51f4:	681b      	ldr	r3, [r3, #0]
    51f6:	687a      	ldr	r2, [r7, #4]
    51f8:	6852      	ldr	r2, [r2, #4]
    51fa:	605a      	str	r2, [r3, #4]
    n->prev->next = n->next;
    51fc:	687b      	ldr	r3, [r7, #4]
    51fe:	685b      	ldr	r3, [r3, #4]
    5200:	687a      	ldr	r2, [r7, #4]
    5202:	6812      	ldr	r2, [r2, #0]
    5204:	601a      	str	r2, [r3, #0]
    n->next = n->prev = n;
    5206:	687b      	ldr	r3, [r7, #4]
    5208:	687a      	ldr	r2, [r7, #4]
    520a:	605a      	str	r2, [r3, #4]
    520c:	687b      	ldr	r3, [r7, #4]
    520e:	685a      	ldr	r2, [r3, #4]
    5210:	687b      	ldr	r3, [r7, #4]
    5212:	601a      	str	r2, [r3, #0]
}
    5214:	46c0      	nop			; (mov r8, r8)
    5216:	46bd      	mov	sp, r7
    5218:	b002      	add	sp, #8
    521a:	bd80      	pop	{r7, pc}

0000521c <rt_thread_defunct_enqueue>:
 * @brief Enqueue a thread to defunct queue.
 *
 * @note It must be called between rt_hw_interrupt_disable and rt_hw_interrupt_enable
 */
void rt_thread_defunct_enqueue(rt_thread_t thread)
{
    521c:	b580      	push	{r7, lr}
    521e:	b082      	sub	sp, #8
    5220:	af00      	add	r7, sp, #0
    5222:	6078      	str	r0, [r7, #4]
    rt_list_insert_after(&_rt_thread_defunct, &thread->tlist);
    5224:	687b      	ldr	r3, [r7, #4]
    5226:	3314      	adds	r3, #20
    5228:	001a      	movs	r2, r3
    522a:	4b04      	ldr	r3, [pc, #16]	; (523c <rt_thread_defunct_enqueue+0x20>)
    522c:	0011      	movs	r1, r2
    522e:	0018      	movs	r0, r3
    5230:	f7ff ffc4 	bl	51bc <rt_list_insert_after>
#ifdef RT_USING_SMP
    rt_sem_release(&system_sem);
#endif
}
    5234:	46c0      	nop			; (mov r8, r8)
    5236:	46bd      	mov	sp, r7
    5238:	b002      	add	sp, #8
    523a:	bd80      	pop	{r7, pc}
    523c:	1ffff174 	.word	0x1ffff174

00005240 <rt_thread_defunct_dequeue>:

/**
 * @brief Dequeue a thread from defunct queue.
 */
rt_thread_t rt_thread_defunct_dequeue(void)
{
    5240:	b590      	push	{r4, r7, lr}
    5242:	b083      	sub	sp, #12
    5244:	af00      	add	r7, sp, #0
    register rt_base_t lock;
    rt_thread_t thread = RT_NULL;
    5246:	2300      	movs	r3, #0
    5248:	607b      	str	r3, [r7, #4]
    rt_list_t *l = &_rt_thread_defunct;
    524a:	4b0d      	ldr	r3, [pc, #52]	; (5280 <rt_thread_defunct_dequeue+0x40>)
    524c:	603b      	str	r3, [r7, #0]
                tlist);
        rt_list_remove(&(thread->tlist));
    }
    rt_hw_interrupt_enable(lock);
#else
    if (l->next != l)
    524e:	683b      	ldr	r3, [r7, #0]
    5250:	681b      	ldr	r3, [r3, #0]
    5252:	683a      	ldr	r2, [r7, #0]
    5254:	429a      	cmp	r2, r3
    5256:	d00e      	beq.n	5276 <rt_thread_defunct_dequeue+0x36>
    {
        thread = rt_list_entry(l->next,
    5258:	683b      	ldr	r3, [r7, #0]
    525a:	681b      	ldr	r3, [r3, #0]
    525c:	3b14      	subs	r3, #20
    525e:	607b      	str	r3, [r7, #4]
                struct rt_thread,
                tlist);
        lock = rt_hw_interrupt_disable();
    5260:	f000 f936 	bl	54d0 <rt_hw_interrupt_disable>
    5264:	0004      	movs	r4, r0
        rt_list_remove(&(thread->tlist));
    5266:	687b      	ldr	r3, [r7, #4]
    5268:	3314      	adds	r3, #20
    526a:	0018      	movs	r0, r3
    526c:	f7ff ffbd 	bl	51ea <rt_list_remove>
        rt_hw_interrupt_enable(lock);
    5270:	0020      	movs	r0, r4
    5272:	f000 f931 	bl	54d8 <rt_hw_interrupt_enable>
    }
#endif
    return thread;
    5276:	687b      	ldr	r3, [r7, #4]
}
    5278:	0018      	movs	r0, r3
    527a:	46bd      	mov	sp, r7
    527c:	b003      	add	sp, #12
    527e:	bd90      	pop	{r4, r7, pc}
    5280:	1ffff174 	.word	0x1ffff174

00005284 <rt_defunct_execute>:

/**
 * @brief This function will perform system background job when system idle.
 */
static void rt_defunct_execute(void)
{
    5284:	b580      	push	{r7, lr}
    5286:	b082      	sub	sp, #8
    5288:	af00      	add	r7, sp, #0

#ifdef RT_USING_MODULE
        struct rt_dlmodule *module = RT_NULL;
#endif
        /* get defunct thread */
        thread = rt_thread_defunct_dequeue();
    528a:	f7ff ffd9 	bl	5240 <rt_thread_defunct_dequeue>
    528e:	0003      	movs	r3, r0
    5290:	607b      	str	r3, [r7, #4]
        if (thread == RT_NULL)
    5292:	687b      	ldr	r3, [r7, #4]
    5294:	2b00      	cmp	r3, #0
    5296:	d01f      	beq.n	52d8 <rt_defunct_execute+0x54>
        {
            dlmodule_destroy(module);
        }
#endif
        /* invoke thread cleanup */
        cleanup = thread->cleanup;
    5298:	687b      	ldr	r3, [r7, #4]
    529a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    529c:	603b      	str	r3, [r7, #0]
        if (cleanup != RT_NULL)
    529e:	683b      	ldr	r3, [r7, #0]
    52a0:	2b00      	cmp	r3, #0
    52a2:	d003      	beq.n	52ac <rt_defunct_execute+0x28>
        {
            cleanup(thread);
    52a4:	687a      	ldr	r2, [r7, #4]
    52a6:	683b      	ldr	r3, [r7, #0]
    52a8:	0010      	movs	r0, r2
    52aa:	4798      	blx	r3
#ifdef RT_USING_SIGNALS
        rt_thread_free_sig(thread);
#endif

        /* if it's a system object, not delete it */
        if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
    52ac:	687b      	ldr	r3, [r7, #4]
    52ae:	0018      	movs	r0, r3
    52b0:	f7fd fed8 	bl	3064 <rt_object_is_systemobject>
    52b4:	0003      	movs	r3, r0
    52b6:	2b01      	cmp	r3, #1
    52b8:	d104      	bne.n	52c4 <rt_defunct_execute+0x40>
        {
            /* detach this object */
            rt_object_detach((rt_object_t)thread);
    52ba:	687b      	ldr	r3, [r7, #4]
    52bc:	0018      	movs	r0, r3
    52be:	f7fd fde5 	bl	2e8c <rt_object_detach>
    52c2:	e7e2      	b.n	528a <rt_defunct_execute+0x6>
        }
        else
        {
#ifdef RT_USING_HEAP
            /* release thread's stack */
            RT_KERNEL_FREE(thread->stack_addr);
    52c4:	687b      	ldr	r3, [r7, #4]
    52c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52c8:	0018      	movs	r0, r3
    52ca:	f7fe fe0f 	bl	3eec <rt_free>
            /* delete thread object */
            rt_object_delete((rt_object_t)thread);
    52ce:	687b      	ldr	r3, [r7, #4]
    52d0:	0018      	movs	r0, r3
    52d2:	f7fd fe85 	bl	2fe0 <rt_object_delete>
    {
    52d6:	e7d8      	b.n	528a <rt_defunct_execute+0x6>
            break;
    52d8:	46c0      	nop			; (mov r8, r8)
#endif
        }
    }
}
    52da:	46c0      	nop			; (mov r8, r8)
    52dc:	46bd      	mov	sp, r7
    52de:	b002      	add	sp, #8
    52e0:	bd80      	pop	{r7, pc}
	...

000052e4 <rt_thread_idle_entry>:

static void rt_thread_idle_entry(void *parameter)
{
    52e4:	b580      	push	{r7, lr}
    52e6:	b084      	sub	sp, #16
    52e8:	af00      	add	r7, sp, #0
    52ea:	6078      	str	r0, [r7, #4]
    {
#ifdef RT_USING_IDLE_HOOK
        rt_size_t i;
        void (*idle_hook)(void);

        for (i = 0; i < RT_IDLE_HOOK_LIST_SIZE; i++)
    52ec:	2300      	movs	r3, #0
    52ee:	60fb      	str	r3, [r7, #12]
    52f0:	e00c      	b.n	530c <rt_thread_idle_entry+0x28>
        {
            idle_hook = idle_hook_list[i];
    52f2:	4b09      	ldr	r3, [pc, #36]	; (5318 <rt_thread_idle_entry+0x34>)
    52f4:	68fa      	ldr	r2, [r7, #12]
    52f6:	0092      	lsls	r2, r2, #2
    52f8:	58d3      	ldr	r3, [r2, r3]
    52fa:	60bb      	str	r3, [r7, #8]
            if (idle_hook != RT_NULL)
    52fc:	68bb      	ldr	r3, [r7, #8]
    52fe:	2b00      	cmp	r3, #0
    5300:	d001      	beq.n	5306 <rt_thread_idle_entry+0x22>
            {
                idle_hook();
    5302:	68bb      	ldr	r3, [r7, #8]
    5304:	4798      	blx	r3
        for (i = 0; i < RT_IDLE_HOOK_LIST_SIZE; i++)
    5306:	68fb      	ldr	r3, [r7, #12]
    5308:	3301      	adds	r3, #1
    530a:	60fb      	str	r3, [r7, #12]
    530c:	68fb      	ldr	r3, [r7, #12]
    530e:	2b03      	cmp	r3, #3
    5310:	d9ef      	bls.n	52f2 <rt_thread_idle_entry+0xe>
            }
        }
#endif /* RT_USING_IDLE_HOOK */

#ifndef RT_USING_SMP
        rt_defunct_execute();
    5312:	f7ff ffb7 	bl	5284 <rt_defunct_execute>
    {
    5316:	e7e9      	b.n	52ec <rt_thread_idle_entry+0x8>
    5318:	20000278 	.word	0x20000278

0000531c <rt_thread_idle_init>:
 * @brief This function will initialize idle thread, then start it.
 *
 * @note this function must be invoked when system init.
 */
void rt_thread_idle_init(void)
{
    531c:	b590      	push	{r4, r7, lr}
    531e:	b089      	sub	sp, #36	; 0x24
    5320:	af04      	add	r7, sp, #16
    rt_ubase_t i;
    char tidle_name[RT_NAME_MAX];

    for (i = 0; i < _CPUS_NR; i++)
    5322:	2300      	movs	r3, #0
    5324:	60fb      	str	r3, [r7, #12]
    5326:	e025      	b.n	5374 <rt_thread_idle_init+0x58>
    {
        rt_sprintf(tidle_name, "tidle%d", i);
    5328:	68fa      	ldr	r2, [r7, #12]
    532a:	4916      	ldr	r1, [pc, #88]	; (5384 <rt_thread_idle_init+0x68>)
    532c:	1d3b      	adds	r3, r7, #4
    532e:	0018      	movs	r0, r3
    5330:	f7fe fc58 	bl	3be4 <rt_sprintf>
        rt_thread_init(&idle[i],
    5334:	68fb      	ldr	r3, [r7, #12]
    5336:	01da      	lsls	r2, r3, #7
    5338:	4b13      	ldr	r3, [pc, #76]	; (5388 <rt_thread_idle_init+0x6c>)
    533a:	18d0      	adds	r0, r2, r3
                tidle_name,
                rt_thread_idle_entry,
                RT_NULL,
                &rt_thread_stack[i][0],
    533c:	68fb      	ldr	r3, [r7, #12]
    533e:	029a      	lsls	r2, r3, #10
    5340:	4b12      	ldr	r3, [pc, #72]	; (538c <rt_thread_idle_init+0x70>)
    5342:	18d3      	adds	r3, r2, r3
        rt_thread_init(&idle[i],
    5344:	4c12      	ldr	r4, [pc, #72]	; (5390 <rt_thread_idle_init+0x74>)
    5346:	1d39      	adds	r1, r7, #4
    5348:	2220      	movs	r2, #32
    534a:	9203      	str	r2, [sp, #12]
    534c:	221f      	movs	r2, #31
    534e:	9202      	str	r2, [sp, #8]
    5350:	2280      	movs	r2, #128	; 0x80
    5352:	00d2      	lsls	r2, r2, #3
    5354:	9201      	str	r2, [sp, #4]
    5356:	9300      	str	r3, [sp, #0]
    5358:	2300      	movs	r3, #0
    535a:	0022      	movs	r2, r4
    535c:	f7ff fbee 	bl	4b3c <rt_thread_init>
                32);
#ifdef RT_USING_SMP
        rt_thread_control(&idle[i], RT_THREAD_CTRL_BIND_CPU, (void*)i);
#endif /* RT_USING_SMP */
        /* startup */
        rt_thread_startup(&idle[i]);
    5360:	68fb      	ldr	r3, [r7, #12]
    5362:	01da      	lsls	r2, r3, #7
    5364:	4b08      	ldr	r3, [pc, #32]	; (5388 <rt_thread_idle_init+0x6c>)
    5366:	18d3      	adds	r3, r2, r3
    5368:	0018      	movs	r0, r3
    536a:	f7ff fc2f 	bl	4bcc <rt_thread_startup>
    for (i = 0; i < _CPUS_NR; i++)
    536e:	68fb      	ldr	r3, [r7, #12]
    5370:	3301      	adds	r3, #1
    5372:	60fb      	str	r3, [r7, #12]
    5374:	68fb      	ldr	r3, [r7, #12]
    5376:	2b00      	cmp	r3, #0
    5378:	d0d6      	beq.n	5328 <rt_thread_idle_init+0xc>
            RT_THREAD_PRIORITY_MAX - 2,
            32);
    /* startup */
    rt_thread_startup(&rt_system_thread);
#endif
}
    537a:	46c0      	nop			; (mov r8, r8)
    537c:	46c0      	nop			; (mov r8, r8)
    537e:	46bd      	mov	sp, r7
    5380:	b005      	add	sp, #20
    5382:	bd90      	pop	{r4, r7, pc}
    5384:	0000c838 	.word	0x0000c838
    5388:	1ffffdf8 	.word	0x1ffffdf8
    538c:	1ffffe78 	.word	0x1ffffe78
    5390:	000052e5 	.word	0x000052e5

00005394 <rt_hw_stack_init>:
 */
rt_uint8_t *rt_hw_stack_init(void       *tentry,
                             void       *parameter,
                             rt_uint8_t *stack_addr,
                             void       *texit)
{
    5394:	b580      	push	{r7, lr}
    5396:	b088      	sub	sp, #32
    5398:	af00      	add	r7, sp, #0
    539a:	60f8      	str	r0, [r7, #12]
    539c:	60b9      	str	r1, [r7, #8]
    539e:	607a      	str	r2, [r7, #4]
    53a0:	603b      	str	r3, [r7, #0]
    struct stack_frame *stack_frame;
    rt_uint8_t         *stk;
    unsigned long       i;

    stk  = stack_addr + sizeof(rt_uint32_t);
    53a2:	687b      	ldr	r3, [r7, #4]
    53a4:	3304      	adds	r3, #4
    53a6:	61bb      	str	r3, [r7, #24]
    stk  = (rt_uint8_t *)RT_ALIGN_DOWN((rt_uint32_t)stk, 8);
    53a8:	69bb      	ldr	r3, [r7, #24]
    53aa:	2207      	movs	r2, #7
    53ac:	4393      	bics	r3, r2
    53ae:	61bb      	str	r3, [r7, #24]
    stk -= sizeof(struct stack_frame);
    53b0:	69bb      	ldr	r3, [r7, #24]
    53b2:	3b40      	subs	r3, #64	; 0x40
    53b4:	61bb      	str	r3, [r7, #24]

    stack_frame = (struct stack_frame *)stk;
    53b6:	69bb      	ldr	r3, [r7, #24]
    53b8:	617b      	str	r3, [r7, #20]

    /* init all register */
    for (i = 0; i < sizeof(struct stack_frame) / sizeof(rt_uint32_t); i ++)
    53ba:	2300      	movs	r3, #0
    53bc:	61fb      	str	r3, [r7, #28]
    53be:	e008      	b.n	53d2 <rt_hw_stack_init+0x3e>
    {
        ((rt_uint32_t *)stack_frame)[i] = 0xdeadbeef;
    53c0:	69fb      	ldr	r3, [r7, #28]
    53c2:	009b      	lsls	r3, r3, #2
    53c4:	697a      	ldr	r2, [r7, #20]
    53c6:	18d3      	adds	r3, r2, r3
    53c8:	4a12      	ldr	r2, [pc, #72]	; (5414 <rt_hw_stack_init+0x80>)
    53ca:	601a      	str	r2, [r3, #0]
    for (i = 0; i < sizeof(struct stack_frame) / sizeof(rt_uint32_t); i ++)
    53cc:	69fb      	ldr	r3, [r7, #28]
    53ce:	3301      	adds	r3, #1
    53d0:	61fb      	str	r3, [r7, #28]
    53d2:	69fb      	ldr	r3, [r7, #28]
    53d4:	2b0f      	cmp	r3, #15
    53d6:	d9f3      	bls.n	53c0 <rt_hw_stack_init+0x2c>
    }

    stack_frame->exception_stack_frame.r0  = (unsigned long)parameter; /* r0 : argument */
    53d8:	68ba      	ldr	r2, [r7, #8]
    53da:	697b      	ldr	r3, [r7, #20]
    53dc:	621a      	str	r2, [r3, #32]
    stack_frame->exception_stack_frame.r1  = 0;                        /* r1 */
    53de:	697b      	ldr	r3, [r7, #20]
    53e0:	2200      	movs	r2, #0
    53e2:	625a      	str	r2, [r3, #36]	; 0x24
    stack_frame->exception_stack_frame.r2  = 0;                        /* r2 */
    53e4:	697b      	ldr	r3, [r7, #20]
    53e6:	2200      	movs	r2, #0
    53e8:	629a      	str	r2, [r3, #40]	; 0x28
    stack_frame->exception_stack_frame.r3  = 0;                        /* r3 */
    53ea:	697b      	ldr	r3, [r7, #20]
    53ec:	2200      	movs	r2, #0
    53ee:	62da      	str	r2, [r3, #44]	; 0x2c
    stack_frame->exception_stack_frame.r12 = 0;                        /* r12 */
    53f0:	697b      	ldr	r3, [r7, #20]
    53f2:	2200      	movs	r2, #0
    53f4:	631a      	str	r2, [r3, #48]	; 0x30
    stack_frame->exception_stack_frame.lr  = (unsigned long)texit;     /* lr */
    53f6:	683a      	ldr	r2, [r7, #0]
    53f8:	697b      	ldr	r3, [r7, #20]
    53fa:	635a      	str	r2, [r3, #52]	; 0x34
    stack_frame->exception_stack_frame.pc  = (unsigned long)tentry;    /* entry point, pc */
    53fc:	68fa      	ldr	r2, [r7, #12]
    53fe:	697b      	ldr	r3, [r7, #20]
    5400:	639a      	str	r2, [r3, #56]	; 0x38
    stack_frame->exception_stack_frame.psr = 0x01000000L;              /* PSR */
    5402:	697b      	ldr	r3, [r7, #20]
    5404:	2280      	movs	r2, #128	; 0x80
    5406:	0452      	lsls	r2, r2, #17
    5408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* return task's current stack address */
    return stk;
    540a:	69bb      	ldr	r3, [r7, #24]
}
    540c:	0018      	movs	r0, r3
    540e:	46bd      	mov	sp, r7
    5410:	b008      	add	sp, #32
    5412:	bd80      	pop	{r7, pc}
    5414:	deadbeef 	.word	0xdeadbeef

00005418 <rt_hw_hard_fault_exception>:
extern rt_thread_t rt_current_thread;
/**
 * fault exception handling
 */
void rt_hw_hard_fault_exception(struct exception_stack_frame *contex)
{
    5418:	b580      	push	{r7, lr}
    541a:	b082      	sub	sp, #8
    541c:	af00      	add	r7, sp, #0
    541e:	6078      	str	r0, [r7, #4]
    rt_kprintf("psr: 0x%08x\n", contex->psr);
    5420:	687b      	ldr	r3, [r7, #4]
    5422:	69da      	ldr	r2, [r3, #28]
    5424:	4b20      	ldr	r3, [pc, #128]	; (54a8 <rt_hw_hard_fault_exception+0x90>)
    5426:	0011      	movs	r1, r2
    5428:	0018      	movs	r0, r3
    542a:	f7fe fc2b 	bl	3c84 <rt_kprintf>
    rt_kprintf(" pc: 0x%08x\n", contex->pc);
    542e:	687b      	ldr	r3, [r7, #4]
    5430:	699a      	ldr	r2, [r3, #24]
    5432:	4b1e      	ldr	r3, [pc, #120]	; (54ac <rt_hw_hard_fault_exception+0x94>)
    5434:	0011      	movs	r1, r2
    5436:	0018      	movs	r0, r3
    5438:	f7fe fc24 	bl	3c84 <rt_kprintf>
    rt_kprintf(" lr: 0x%08x\n", contex->lr);
    543c:	687b      	ldr	r3, [r7, #4]
    543e:	695a      	ldr	r2, [r3, #20]
    5440:	4b1b      	ldr	r3, [pc, #108]	; (54b0 <rt_hw_hard_fault_exception+0x98>)
    5442:	0011      	movs	r1, r2
    5444:	0018      	movs	r0, r3
    5446:	f7fe fc1d 	bl	3c84 <rt_kprintf>
    rt_kprintf("r12: 0x%08x\n", contex->r12);
    544a:	687b      	ldr	r3, [r7, #4]
    544c:	691a      	ldr	r2, [r3, #16]
    544e:	4b19      	ldr	r3, [pc, #100]	; (54b4 <rt_hw_hard_fault_exception+0x9c>)
    5450:	0011      	movs	r1, r2
    5452:	0018      	movs	r0, r3
    5454:	f7fe fc16 	bl	3c84 <rt_kprintf>
    rt_kprintf("r03: 0x%08x\n", contex->r3);
    5458:	687b      	ldr	r3, [r7, #4]
    545a:	68da      	ldr	r2, [r3, #12]
    545c:	4b16      	ldr	r3, [pc, #88]	; (54b8 <rt_hw_hard_fault_exception+0xa0>)
    545e:	0011      	movs	r1, r2
    5460:	0018      	movs	r0, r3
    5462:	f7fe fc0f 	bl	3c84 <rt_kprintf>
    rt_kprintf("r02: 0x%08x\n", contex->r2);
    5466:	687b      	ldr	r3, [r7, #4]
    5468:	689a      	ldr	r2, [r3, #8]
    546a:	4b14      	ldr	r3, [pc, #80]	; (54bc <rt_hw_hard_fault_exception+0xa4>)
    546c:	0011      	movs	r1, r2
    546e:	0018      	movs	r0, r3
    5470:	f7fe fc08 	bl	3c84 <rt_kprintf>
    rt_kprintf("r01: 0x%08x\n", contex->r1);
    5474:	687b      	ldr	r3, [r7, #4]
    5476:	685a      	ldr	r2, [r3, #4]
    5478:	4b11      	ldr	r3, [pc, #68]	; (54c0 <rt_hw_hard_fault_exception+0xa8>)
    547a:	0011      	movs	r1, r2
    547c:	0018      	movs	r0, r3
    547e:	f7fe fc01 	bl	3c84 <rt_kprintf>
    rt_kprintf("r00: 0x%08x\n", contex->r0);
    5482:	687b      	ldr	r3, [r7, #4]
    5484:	681a      	ldr	r2, [r3, #0]
    5486:	4b0f      	ldr	r3, [pc, #60]	; (54c4 <rt_hw_hard_fault_exception+0xac>)
    5488:	0011      	movs	r1, r2
    548a:	0018      	movs	r0, r3
    548c:	f7fe fbfa 	bl	3c84 <rt_kprintf>

    rt_kprintf("hard fault on thread: %s\n", rt_current_thread->name);
    5490:	4b0d      	ldr	r3, [pc, #52]	; (54c8 <rt_hw_hard_fault_exception+0xb0>)
    5492:	681b      	ldr	r3, [r3, #0]
    5494:	001a      	movs	r2, r3
    5496:	4b0d      	ldr	r3, [pc, #52]	; (54cc <rt_hw_hard_fault_exception+0xb4>)
    5498:	0011      	movs	r1, r2
    549a:	0018      	movs	r0, r3
    549c:	f7fe fbf2 	bl	3c84 <rt_kprintf>

#if defined(RT_USING_FINSH) && defined(MSH_USING_BUILT_IN_COMMANDS)
    list_thread();
    54a0:	f002 fe7c 	bl	819c <list_thread>
#endif

    while (1);
    54a4:	e7fe      	b.n	54a4 <rt_hw_hard_fault_exception+0x8c>
    54a6:	46c0      	nop			; (mov r8, r8)
    54a8:	0000c840 	.word	0x0000c840
    54ac:	0000c850 	.word	0x0000c850
    54b0:	0000c860 	.word	0x0000c860
    54b4:	0000c870 	.word	0x0000c870
    54b8:	0000c880 	.word	0x0000c880
    54bc:	0000c890 	.word	0x0000c890
    54c0:	0000c8a0 	.word	0x0000c8a0
    54c4:	0000c8b0 	.word	0x0000c8b0
    54c8:	1ffffcfc 	.word	0x1ffffcfc
    54cc:	0000c8c0 	.word	0x0000c8c0

000054d0 <rt_hw_interrupt_disable>:
 * rt_base_t rt_hw_interrupt_disable();
 */
    .global rt_hw_interrupt_disable
    .type rt_hw_interrupt_disable, %function
rt_hw_interrupt_disable:
    MRS     R0, PRIMASK
    54d0:	f3ef 8010 	mrs	r0, PRIMASK
    CPSID   I
    54d4:	b672      	cpsid	i
    BX      LR
    54d6:	4770      	bx	lr

000054d8 <rt_hw_interrupt_enable>:
 * void rt_hw_interrupt_enable(rt_base_t level);
 */
    .global rt_hw_interrupt_enable
    .type rt_hw_interrupt_enable, %function
rt_hw_interrupt_enable:
    MSR     PRIMASK, R0
    54d8:	f380 8810 	msr	PRIMASK, r0
    BX      LR
    54dc:	4770      	bx	lr

000054de <rt_hw_context_switch>:
    .global rt_hw_context_switch
    .type rt_hw_context_switch, %function
rt_hw_context_switch_interrupt:
rt_hw_context_switch:
    /* set rt_thread_switch_interrupt_flag to 1 */
    LDR     R2, =rt_thread_switch_interrupt_flag
    54de:	4a2f      	ldr	r2, [pc, #188]	; (559c <rt_hw_interrupt_check+0x6>)
    LDR     R3, [R2]
    54e0:	6813      	ldr	r3, [r2, #0]
    CMP     R3, #1
    54e2:	2b01      	cmp	r3, #1
    BEQ     _reswitch
    54e4:	d003      	beq.n	54ee <_reswitch>
    MOVS    R3, #1
    54e6:	2301      	movs	r3, #1
    STR     R3, [R2]
    54e8:	6013      	str	r3, [r2, #0]

    LDR     R2, =rt_interrupt_from_thread   /* set rt_interrupt_from_thread */
    54ea:	4a2d      	ldr	r2, [pc, #180]	; (55a0 <rt_hw_interrupt_check+0xa>)
    STR     R0, [R2]
    54ec:	6010      	str	r0, [r2, #0]

000054ee <_reswitch>:

_reswitch:
    LDR     R2, =rt_interrupt_to_thread     /* set rt_interrupt_to_thread */
    54ee:	4a2d      	ldr	r2, [pc, #180]	; (55a4 <rt_hw_interrupt_check+0xe>)
    STR     R1, [R2]
    54f0:	6011      	str	r1, [r2, #0]

    LDR     R0, =NVIC_INT_CTRL           /* trigger the PendSV exception (causes context switch) */
    54f2:	482d      	ldr	r0, [pc, #180]	; (55a8 <rt_hw_interrupt_check+0x12>)
    LDR     R1, =NVIC_PENDSVSET
    54f4:	492d      	ldr	r1, [pc, #180]	; (55ac <rt_hw_interrupt_check+0x16>)
    STR     R1, [R0]
    54f6:	6001      	str	r1, [r0, #0]
    BX      LR
    54f8:	4770      	bx	lr

000054fa <PendSV_Handler>:
 */
    .global PendSV_Handler
    .type PendSV_Handler, %function
PendSV_Handler:
    /* disable interrupt to protect context switch */
    MRS     R2, PRIMASK
    54fa:	f3ef 8210 	mrs	r2, PRIMASK
    CPSID   I
    54fe:	b672      	cpsid	i

    /* get rt_thread_switch_interrupt_flag */
    LDR     R0, =rt_thread_switch_interrupt_flag
    5500:	4826      	ldr	r0, [pc, #152]	; (559c <rt_hw_interrupt_check+0x6>)
    LDR     R1, [R0]
    5502:	6801      	ldr	r1, [r0, #0]
    CMP     R1, #0x00
    5504:	2900      	cmp	r1, #0
    BEQ     pendsv_exit     /* pendsv aLReady handled */
    5506:	d01d      	beq.n	5544 <pendsv_exit>

    /* clear rt_thread_switch_interrupt_flag to 0 */
    MOVS    R1, #0
    5508:	2100      	movs	r1, #0
    STR     R1, [R0]
    550a:	6001      	str	r1, [r0, #0]

    LDR     R0, =rt_interrupt_from_thread
    550c:	4824      	ldr	r0, [pc, #144]	; (55a0 <rt_hw_interrupt_check+0xa>)
    LDR     R1, [R0]
    550e:	6801      	ldr	r1, [r0, #0]
    CMP     R1, #0x00
    5510:	2900      	cmp	r1, #0
    BEQ     switch_to_thread    /* skip register save at the first time */
    5512:	d00a      	beq.n	552a <switch_to_thread>

    MRS     R1, PSP                 /* get from thread stack pointer */
    5514:	f3ef 8109 	mrs	r1, PSP

    SUBS    R1, R1, #0x20           /* space for {R4 - R7} and {R8 - R11} */
    5518:	3920      	subs	r1, #32
    LDR     R0, [R0]
    551a:	6800      	ldr	r0, [r0, #0]
    STR     R1, [R0]                /* update from thread stack pointer */
    551c:	6001      	str	r1, [r0, #0]

    STMIA   R1!, {R4 - R7}          /* push thread {R4 - R7} register to thread stack */
    551e:	c1f0      	stmia	r1!, {r4, r5, r6, r7}

    MOV     R4, R8                  /* mov thread {R8 - R11} to {R4 - R7} */
    5520:	4644      	mov	r4, r8
    MOV     R5, R9
    5522:	464d      	mov	r5, r9
    MOV     R6, R10
    5524:	4656      	mov	r6, sl
    MOV     R7, R11
    5526:	465f      	mov	r7, fp
    STMIA   R1!, {R4 - R7}          /* push thread {R8 - R11} high register to thread stack */
    5528:	c1f0      	stmia	r1!, {r4, r5, r6, r7}

0000552a <switch_to_thread>:
switch_to_thread:
    LDR     R1, =rt_interrupt_to_thread
    552a:	491e      	ldr	r1, [pc, #120]	; (55a4 <rt_hw_interrupt_check+0xe>)
    LDR     R1, [R1]
    552c:	6809      	ldr	r1, [r1, #0]
    LDR     R1, [R1]                /* load thread stack pointer */
    552e:	6809      	ldr	r1, [r1, #0]

    LDMIA   R1!, {R4 - R7}          /* pop thread {R4 - R7} register from thread stack */
    5530:	c9f0      	ldmia	r1!, {r4, r5, r6, r7}
    PUSH    {R4 - R7}               /* push {R4 - R7} to MSP for copy {R8 - R11} */
    5532:	b4f0      	push	{r4, r5, r6, r7}

    LDMIA   R1!, {R4 - R7}          /* pop thread {R8 - R11} high register from thread stack to {R4 - R7} */
    5534:	c9f0      	ldmia	r1!, {r4, r5, r6, r7}
    MOV     R8,  R4                 /* mov {R4 - R7} to {R8 - R11} */
    5536:	46a0      	mov	r8, r4
    MOV     R9,  R5
    5538:	46a9      	mov	r9, r5
    MOV     R10, R6
    553a:	46b2      	mov	sl, r6
    MOV     R11, R7
    553c:	46bb      	mov	fp, r7

    POP     {R4 - R7}               /* pop {R4 - R7} from MSP */
    553e:	bcf0      	pop	{r4, r5, r6, r7}

    MSR     PSP, R1                 /* update stack pointer */
    5540:	f381 8809 	msr	PSP, r1

00005544 <pendsv_exit>:

pendsv_exit:
    /* restore interrupt */
    MSR     PRIMASK, R2
    5544:	f382 8810 	msr	PRIMASK, r2

    MOVS    R0, #0x04
    5548:	2004      	movs	r0, #4
    RSBS    R0, R0, #0x00
    554a:	4240      	negs	r0, r0
    BX      R0
    554c:	4700      	bx	r0

0000554e <rt_hw_context_switch_to>:
 * R0 --> to
 */
    .global rt_hw_context_switch_to
    .type rt_hw_context_switch_to, %function
rt_hw_context_switch_to:
    LDR     R1, =rt_interrupt_to_thread
    554e:	4915      	ldr	r1, [pc, #84]	; (55a4 <rt_hw_interrupt_check+0xe>)
    STR     R0, [R1]
    5550:	6008      	str	r0, [r1, #0]

    /* set from thread to 0 */
    LDR     R1, =rt_interrupt_from_thread
    5552:	4913      	ldr	r1, [pc, #76]	; (55a0 <rt_hw_interrupt_check+0xa>)
    MOVS    R0, #0
    5554:	2000      	movs	r0, #0
    STR     R0, [R1]
    5556:	6008      	str	r0, [r1, #0]

    /* set interrupt flag to 1 */
    LDR     R1, =rt_thread_switch_interrupt_flag
    5558:	4910      	ldr	r1, [pc, #64]	; (559c <rt_hw_interrupt_check+0x6>)
    MOVS    R0, #1
    555a:	2001      	movs	r0, #1
    STR     R0, [R1]
    555c:	6008      	str	r0, [r1, #0]

    /* set the PendSV and SysTick exception priority */
    LDR     R0, =NVIC_SHPR3
    555e:	4814      	ldr	r0, [pc, #80]	; (55b0 <rt_hw_interrupt_check+0x1a>)
    LDR     R1, =NVIC_PENDSV_PRI
    5560:	4914      	ldr	r1, [pc, #80]	; (55b4 <rt_hw_interrupt_check+0x1e>)
    LDR     R2, [R0,#0x00]       /* read */
    5562:	6802      	ldr	r2, [r0, #0]
    ORRS    R1, R1, R2             /* modify */
    5564:	4311      	orrs	r1, r2
    STR     R1, [R0]             /* write-back */
    5566:	6001      	str	r1, [r0, #0]

    LDR     R0, =NVIC_INT_CTRL               /* trigger the PendSV exception (causes context switch) */
    5568:	480f      	ldr	r0, [pc, #60]	; (55a8 <rt_hw_interrupt_check+0x12>)
    LDR     R1, =NVIC_PENDSVSET
    556a:	4910      	ldr	r1, [pc, #64]	; (55ac <rt_hw_interrupt_check+0x16>)
    STR     R1, [R0]
    556c:	6001      	str	r1, [r0, #0]
    NOP
    556e:	46c0      	nop			; (mov r8, r8)
    /* restore MSP */
    LDR     R0, =SCB_VTOR
    5570:	4811      	ldr	r0, [pc, #68]	; (55b8 <rt_hw_interrupt_check+0x22>)
    LDR     R0, [R0]
    5572:	6800      	ldr	r0, [r0, #0]
    LDR     R0, [R0]
    5574:	6800      	ldr	r0, [r0, #0]
    NOP
    5576:	46c0      	nop			; (mov r8, r8)
    MSR     MSP, R0
    5578:	f380 8808 	msr	MSP, r0

    /* enable interrupts at processor level */
    CPSIE   I
    557c:	b662      	cpsie	i

    /* ensure PendSV exception taken place before subsequent operation */
    DSB
    557e:	f3bf 8f4f 	dsb	sy
    ISB
    5582:	f3bf 8f6f 	isb	sy

00005586 <rt_hw_interrupt_thread_switch>:

/* compatible with old version */
    .global rt_hw_interrupt_thread_switch
    .type rt_hw_interrupt_thread_switch, %function
rt_hw_interrupt_thread_switch:
    BX      LR
    5586:	4770      	bx	lr
    NOP
    5588:	46c0      	nop			; (mov r8, r8)

0000558a <HardFault_Handler>:

    .global HardFault_Handler
    .type HardFault_Handler, %function
HardFault_Handler:
    /* get current context */
    MRS     R0, PSP                 /* get fault thread stack pointer */
    558a:	f3ef 8009 	mrs	r0, PSP
    PUSH    {LR}
    558e:	b500      	push	{lr}
    BL      rt_hw_hard_fault_exception
    5590:	f7ff ff42 	bl	5418 <rt_hw_hard_fault_exception>
    POP     {PC}
    5594:	bd00      	pop	{pc}

00005596 <rt_hw_interrupt_check>:
 * R0 --> state
 */
    .global rt_hw_interrupt_check
    .type rt_hw_interrupt_check, %function
rt_hw_interrupt_check:
    MRS     R0, IPSR
    5596:	f3ef 8005 	mrs	r0, IPSR
    BX      LR
    559a:	4770      	bx	lr
    LDR     R2, =rt_thread_switch_interrupt_flag
    559c:	20000290 	.word	0x20000290
    LDR     R2, =rt_interrupt_from_thread   /* set rt_interrupt_from_thread */
    55a0:	20000288 	.word	0x20000288
    LDR     R2, =rt_interrupt_to_thread     /* set rt_interrupt_to_thread */
    55a4:	2000028c 	.word	0x2000028c
    LDR     R0, =NVIC_INT_CTRL           /* trigger the PendSV exception (causes context switch) */
    55a8:	e000ed04 	.word	0xe000ed04
    LDR     R1, =NVIC_PENDSVSET
    55ac:	10000000 	.word	0x10000000
    LDR     R0, =NVIC_SHPR3
    55b0:	e000ed20 	.word	0xe000ed20
    LDR     R1, =NVIC_PENDSV_PRI
    55b4:	ffff0000 	.word	0xffff0000
    LDR     R0, =SCB_VTOR
    55b8:	e000ed08 	.word	0xe000ed08

000055bc <rt_list_init>:
{
    55bc:	b580      	push	{r7, lr}
    55be:	b082      	sub	sp, #8
    55c0:	af00      	add	r7, sp, #0
    55c2:	6078      	str	r0, [r7, #4]
    l->next = l->prev = l;
    55c4:	687b      	ldr	r3, [r7, #4]
    55c6:	687a      	ldr	r2, [r7, #4]
    55c8:	605a      	str	r2, [r3, #4]
    55ca:	687b      	ldr	r3, [r7, #4]
    55cc:	685a      	ldr	r2, [r3, #4]
    55ce:	687b      	ldr	r3, [r7, #4]
    55d0:	601a      	str	r2, [r3, #0]
}
    55d2:	46c0      	nop			; (mov r8, r8)
    55d4:	46bd      	mov	sp, r7
    55d6:	b002      	add	sp, #8
    55d8:	bd80      	pop	{r7, pc}

000055da <rt_list_insert_before>:
{
    55da:	b580      	push	{r7, lr}
    55dc:	b082      	sub	sp, #8
    55de:	af00      	add	r7, sp, #0
    55e0:	6078      	str	r0, [r7, #4]
    55e2:	6039      	str	r1, [r7, #0]
    l->prev->next = n;
    55e4:	687b      	ldr	r3, [r7, #4]
    55e6:	685b      	ldr	r3, [r3, #4]
    55e8:	683a      	ldr	r2, [r7, #0]
    55ea:	601a      	str	r2, [r3, #0]
    n->prev = l->prev;
    55ec:	687b      	ldr	r3, [r7, #4]
    55ee:	685a      	ldr	r2, [r3, #4]
    55f0:	683b      	ldr	r3, [r7, #0]
    55f2:	605a      	str	r2, [r3, #4]
    l->prev = n;
    55f4:	687b      	ldr	r3, [r7, #4]
    55f6:	683a      	ldr	r2, [r7, #0]
    55f8:	605a      	str	r2, [r3, #4]
    n->next = l;
    55fa:	683b      	ldr	r3, [r7, #0]
    55fc:	687a      	ldr	r2, [r7, #4]
    55fe:	601a      	str	r2, [r3, #0]
}
    5600:	46c0      	nop			; (mov r8, r8)
    5602:	46bd      	mov	sp, r7
    5604:	b002      	add	sp, #8
    5606:	bd80      	pop	{r7, pc}

00005608 <rt_list_isempty>:
{
    5608:	b580      	push	{r7, lr}
    560a:	b082      	sub	sp, #8
    560c:	af00      	add	r7, sp, #0
    560e:	6078      	str	r0, [r7, #4]
    return l->next == l;
    5610:	687b      	ldr	r3, [r7, #4]
    5612:	681b      	ldr	r3, [r3, #0]
    5614:	687a      	ldr	r2, [r7, #4]
    5616:	1ad3      	subs	r3, r2, r3
    5618:	425a      	negs	r2, r3
    561a:	4153      	adcs	r3, r2
    561c:	b2db      	uxtb	r3, r3
}
    561e:	0018      	movs	r0, r3
    5620:	46bd      	mov	sp, r7
    5622:	b002      	add	sp, #8
    5624:	bd80      	pop	{r7, pc}
	...

00005628 <rt_data_queue_init>:
rt_err_t
rt_data_queue_init(struct rt_data_queue *queue,
                   rt_uint16_t size,
                   rt_uint16_t lwm,
                   void (*evt_notify)(struct rt_data_queue *queue, rt_uint32_t event))
{
    5628:	b590      	push	{r4, r7, lr}
    562a:	b085      	sub	sp, #20
    562c:	af00      	add	r7, sp, #0
    562e:	60f8      	str	r0, [r7, #12]
    5630:	0008      	movs	r0, r1
    5632:	0011      	movs	r1, r2
    5634:	607b      	str	r3, [r7, #4]
    5636:	230a      	movs	r3, #10
    5638:	18fb      	adds	r3, r7, r3
    563a:	1c02      	adds	r2, r0, #0
    563c:	801a      	strh	r2, [r3, #0]
    563e:	2308      	movs	r3, #8
    5640:	18fb      	adds	r3, r7, r3
    5642:	1c0a      	adds	r2, r1, #0
    5644:	801a      	strh	r2, [r3, #0]
    RT_ASSERT(queue != RT_NULL);
    5646:	68fb      	ldr	r3, [r7, #12]
    5648:	2b00      	cmp	r3, #0
    564a:	d105      	bne.n	5658 <rt_data_queue_init+0x30>
    564c:	492a      	ldr	r1, [pc, #168]	; (56f8 <rt_data_queue_init+0xd0>)
    564e:	4b2b      	ldr	r3, [pc, #172]	; (56fc <rt_data_queue_init+0xd4>)
    5650:	222f      	movs	r2, #47	; 0x2f
    5652:	0018      	movs	r0, r3
    5654:	f7fe fcbc 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(size > 0);
    5658:	230a      	movs	r3, #10
    565a:	18fb      	adds	r3, r7, r3
    565c:	881b      	ldrh	r3, [r3, #0]
    565e:	2b00      	cmp	r3, #0
    5660:	d105      	bne.n	566e <rt_data_queue_init+0x46>
    5662:	4925      	ldr	r1, [pc, #148]	; (56f8 <rt_data_queue_init+0xd0>)
    5664:	4b26      	ldr	r3, [pc, #152]	; (5700 <rt_data_queue_init+0xd8>)
    5666:	2230      	movs	r2, #48	; 0x30
    5668:	0018      	movs	r0, r3
    566a:	f7fe fcb1 	bl	3fd0 <rt_assert_handler>

    queue->evt_notify = evt_notify;
    566e:	68fb      	ldr	r3, [r7, #12]
    5670:	687a      	ldr	r2, [r7, #4]
    5672:	621a      	str	r2, [r3, #32]

    queue->magic = DATAQUEUE_MAGIC;
    5674:	68fb      	ldr	r3, [r7, #12]
    5676:	4a23      	ldr	r2, [pc, #140]	; (5704 <rt_data_queue_init+0xdc>)
    5678:	601a      	str	r2, [r3, #0]
    queue->size = size;
    567a:	68fb      	ldr	r3, [r7, #12]
    567c:	240a      	movs	r4, #10
    567e:	193a      	adds	r2, r7, r4
    5680:	8812      	ldrh	r2, [r2, #0]
    5682:	809a      	strh	r2, [r3, #4]
    queue->lwm = lwm;
    5684:	68fb      	ldr	r3, [r7, #12]
    5686:	2208      	movs	r2, #8
    5688:	18ba      	adds	r2, r7, r2
    568a:	8812      	ldrh	r2, [r2, #0]
    568c:	80da      	strh	r2, [r3, #6]

    queue->get_index = 0;
    568e:	68fb      	ldr	r3, [r7, #12]
    5690:	891a      	ldrh	r2, [r3, #8]
    5692:	0bd2      	lsrs	r2, r2, #15
    5694:	03d2      	lsls	r2, r2, #15
    5696:	811a      	strh	r2, [r3, #8]
    queue->put_index = 0;
    5698:	68fb      	ldr	r3, [r7, #12]
    569a:	895a      	ldrh	r2, [r3, #10]
    569c:	0bd2      	lsrs	r2, r2, #15
    569e:	03d2      	lsls	r2, r2, #15
    56a0:	815a      	strh	r2, [r3, #10]
    queue->is_empty = 1;
    56a2:	68fb      	ldr	r3, [r7, #12]
    56a4:	7a5a      	ldrb	r2, [r3, #9]
    56a6:	2180      	movs	r1, #128	; 0x80
    56a8:	4249      	negs	r1, r1
    56aa:	430a      	orrs	r2, r1
    56ac:	725a      	strb	r2, [r3, #9]
    queue->is_full = 0;
    56ae:	68fb      	ldr	r3, [r7, #12]
    56b0:	7ada      	ldrb	r2, [r3, #11]
    56b2:	217f      	movs	r1, #127	; 0x7f
    56b4:	400a      	ands	r2, r1
    56b6:	72da      	strb	r2, [r3, #11]

    rt_list_init(&(queue->suspended_push_list));
    56b8:	68fb      	ldr	r3, [r7, #12]
    56ba:	3310      	adds	r3, #16
    56bc:	0018      	movs	r0, r3
    56be:	f7ff ff7d 	bl	55bc <rt_list_init>
    rt_list_init(&(queue->suspended_pop_list));
    56c2:	68fb      	ldr	r3, [r7, #12]
    56c4:	3318      	adds	r3, #24
    56c6:	0018      	movs	r0, r3
    56c8:	f7ff ff78 	bl	55bc <rt_list_init>

    queue->queue = (struct rt_data_item *)rt_malloc(sizeof(struct rt_data_item) * size);
    56cc:	193b      	adds	r3, r7, r4
    56ce:	881b      	ldrh	r3, [r3, #0]
    56d0:	00db      	lsls	r3, r3, #3
    56d2:	0018      	movs	r0, r3
    56d4:	f7fe fba6 	bl	3e24 <rt_malloc>
    56d8:	0002      	movs	r2, r0
    56da:	68fb      	ldr	r3, [r7, #12]
    56dc:	60da      	str	r2, [r3, #12]
    if (queue->queue == RT_NULL)
    56de:	68fb      	ldr	r3, [r7, #12]
    56e0:	68db      	ldr	r3, [r3, #12]
    56e2:	2b00      	cmp	r3, #0
    56e4:	d102      	bne.n	56ec <rt_data_queue_init+0xc4>
    {
        return -RT_ENOMEM;
    56e6:	2305      	movs	r3, #5
    56e8:	425b      	negs	r3, r3
    56ea:	e000      	b.n	56ee <rt_data_queue_init+0xc6>
    }

    return RT_EOK;
    56ec:	2300      	movs	r3, #0
}
    56ee:	0018      	movs	r0, r3
    56f0:	46bd      	mov	sp, r7
    56f2:	b005      	add	sp, #20
    56f4:	bd90      	pop	{r4, r7, pc}
    56f6:	46c0      	nop			; (mov r8, r8)
    56f8:	0000c9d0 	.word	0x0000c9d0
    56fc:	0000c8dc 	.word	0x0000c8dc
    5700:	0000c8f0 	.word	0x0000c8f0
    5704:	bead0e0e 	.word	0xbead0e0e

00005708 <rt_data_queue_push>:
 */
rt_err_t rt_data_queue_push(struct rt_data_queue *queue,
                            const void *data_ptr,
                            rt_size_t data_size,
                            rt_int32_t timeout)
{
    5708:	b580      	push	{r7, lr}
    570a:	b08a      	sub	sp, #40	; 0x28
    570c:	af00      	add	r7, sp, #0
    570e:	60f8      	str	r0, [r7, #12]
    5710:	60b9      	str	r1, [r7, #8]
    5712:	607a      	str	r2, [r7, #4]
    5714:	603b      	str	r3, [r7, #0]
    rt_ubase_t  level;
    rt_thread_t thread;
    rt_err_t    result;

    RT_ASSERT(queue != RT_NULL);
    5716:	68fb      	ldr	r3, [r7, #12]
    5718:	2b00      	cmp	r3, #0
    571a:	d105      	bne.n	5728 <rt_data_queue_push+0x20>
    571c:	4992      	ldr	r1, [pc, #584]	; (5968 <rt_data_queue_push+0x260>)
    571e:	4b93      	ldr	r3, [pc, #588]	; (596c <rt_data_queue_push+0x264>)
    5720:	2262      	movs	r2, #98	; 0x62
    5722:	0018      	movs	r0, r3
    5724:	f7fe fc54 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(queue->magic == DATAQUEUE_MAGIC);
    5728:	68fb      	ldr	r3, [r7, #12]
    572a:	681b      	ldr	r3, [r3, #0]
    572c:	4a90      	ldr	r2, [pc, #576]	; (5970 <rt_data_queue_push+0x268>)
    572e:	4293      	cmp	r3, r2
    5730:	d005      	beq.n	573e <rt_data_queue_push+0x36>
    5732:	498d      	ldr	r1, [pc, #564]	; (5968 <rt_data_queue_push+0x260>)
    5734:	4b8f      	ldr	r3, [pc, #572]	; (5974 <rt_data_queue_push+0x26c>)
    5736:	2263      	movs	r2, #99	; 0x63
    5738:	0018      	movs	r0, r3
    573a:	f7fe fc49 	bl	3fd0 <rt_assert_handler>

    /* current context checking */
    RT_DEBUG_SCHEDULER_AVAILABLE(timeout != 0);
    573e:	683b      	ldr	r3, [r7, #0]
    5740:	2b00      	cmp	r3, #0
    5742:	d047      	beq.n	57d4 <rt_data_queue_push+0xcc>
    5744:	f7ff fec4 	bl	54d0 <rt_hw_interrupt_disable>
    5748:	0003      	movs	r3, r0
    574a:	61fb      	str	r3, [r7, #28]
    574c:	f7fc f9e6 	bl	1b1c <rt_critical_level>
    5750:	1e03      	subs	r3, r0, #0
    5752:	d00b      	beq.n	576c <rt_data_queue_push+0x64>
    5754:	4a84      	ldr	r2, [pc, #528]	; (5968 <rt_data_queue_push+0x260>)
    5756:	4b88      	ldr	r3, [pc, #544]	; (5978 <rt_data_queue_push+0x270>)
    5758:	0011      	movs	r1, r2
    575a:	0018      	movs	r0, r3
    575c:	f7fe fa92 	bl	3c84 <rt_kprintf>
    5760:	4981      	ldr	r1, [pc, #516]	; (5968 <rt_data_queue_push+0x260>)
    5762:	4b86      	ldr	r3, [pc, #536]	; (597c <rt_data_queue_push+0x274>)
    5764:	2266      	movs	r2, #102	; 0x66
    5766:	0018      	movs	r0, r3
    5768:	f7fe fc32 	bl	3fd0 <rt_assert_handler>
    576c:	f7ff feb0 	bl	54d0 <rt_hw_interrupt_disable>
    5770:	0003      	movs	r3, r0
    5772:	61bb      	str	r3, [r7, #24]
    5774:	f7ff fa20 	bl	4bb8 <rt_thread_self>
    5778:	1e03      	subs	r3, r0, #0
    577a:	d10b      	bne.n	5794 <rt_data_queue_push+0x8c>
    577c:	4a7a      	ldr	r2, [pc, #488]	; (5968 <rt_data_queue_push+0x260>)
    577e:	4b80      	ldr	r3, [pc, #512]	; (5980 <rt_data_queue_push+0x278>)
    5780:	0011      	movs	r1, r2
    5782:	0018      	movs	r0, r3
    5784:	f7fe fa7e 	bl	3c84 <rt_kprintf>
    5788:	4977      	ldr	r1, [pc, #476]	; (5968 <rt_data_queue_push+0x260>)
    578a:	4b7c      	ldr	r3, [pc, #496]	; (597c <rt_data_queue_push+0x274>)
    578c:	2266      	movs	r2, #102	; 0x66
    578e:	0018      	movs	r0, r3
    5790:	f7fe fc1e 	bl	3fd0 <rt_assert_handler>
    5794:	f7ff fe9c 	bl	54d0 <rt_hw_interrupt_disable>
    5798:	0003      	movs	r3, r0
    579a:	617b      	str	r3, [r7, #20]
    579c:	f7fb ff0c 	bl	15b8 <rt_interrupt_get_nest>
    57a0:	1e03      	subs	r3, r0, #0
    57a2:	d00b      	beq.n	57bc <rt_data_queue_push+0xb4>
    57a4:	4a70      	ldr	r2, [pc, #448]	; (5968 <rt_data_queue_push+0x260>)
    57a6:	4b77      	ldr	r3, [pc, #476]	; (5984 <rt_data_queue_push+0x27c>)
    57a8:	0011      	movs	r1, r2
    57aa:	0018      	movs	r0, r3
    57ac:	f7fe fa6a 	bl	3c84 <rt_kprintf>
    57b0:	496d      	ldr	r1, [pc, #436]	; (5968 <rt_data_queue_push+0x260>)
    57b2:	4b72      	ldr	r3, [pc, #456]	; (597c <rt_data_queue_push+0x274>)
    57b4:	2266      	movs	r2, #102	; 0x66
    57b6:	0018      	movs	r0, r3
    57b8:	f7fe fc0a 	bl	3fd0 <rt_assert_handler>
    57bc:	697b      	ldr	r3, [r7, #20]
    57be:	0018      	movs	r0, r3
    57c0:	f7ff fe8a 	bl	54d8 <rt_hw_interrupt_enable>
    57c4:	69bb      	ldr	r3, [r7, #24]
    57c6:	0018      	movs	r0, r3
    57c8:	f7ff fe86 	bl	54d8 <rt_hw_interrupt_enable>
    57cc:	69fb      	ldr	r3, [r7, #28]
    57ce:	0018      	movs	r0, r3
    57d0:	f7ff fe82 	bl	54d8 <rt_hw_interrupt_enable>

    result = RT_EOK;
    57d4:	2300      	movs	r3, #0
    57d6:	623b      	str	r3, [r7, #32]
    thread = rt_thread_self();
    57d8:	f7ff f9ee 	bl	4bb8 <rt_thread_self>
    57dc:	0003      	movs	r3, r0
    57de:	613b      	str	r3, [r7, #16]

    level = rt_hw_interrupt_disable();
    57e0:	f7ff fe76 	bl	54d0 <rt_hw_interrupt_disable>
    57e4:	0003      	movs	r3, r0
    57e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (queue->is_full)
    57e8:	e036      	b.n	5858 <rt_data_queue_push+0x150>
    {
        /* queue is full */
        if (timeout == 0)
    57ea:	683b      	ldr	r3, [r7, #0]
    57ec:	2b00      	cmp	r3, #0
    57ee:	d103      	bne.n	57f8 <rt_data_queue_push+0xf0>
        {
            result = -RT_ETIMEOUT;
    57f0:	2302      	movs	r3, #2
    57f2:	425b      	negs	r3, r3
    57f4:	623b      	str	r3, [r7, #32]

            goto __exit;
    57f6:	e0a0      	b.n	593a <rt_data_queue_push+0x232>
        }

        /* reset thread error number */
        thread->error = RT_EOK;
    57f8:	693b      	ldr	r3, [r7, #16]
    57fa:	2200      	movs	r2, #0
    57fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* suspend thread on the push list */
        rt_thread_suspend(thread);
    57fe:	693b      	ldr	r3, [r7, #16]
    5800:	0018      	movs	r0, r3
    5802:	f7ff fc19 	bl	5038 <rt_thread_suspend>
        rt_list_insert_before(&(queue->suspended_push_list), &(thread->tlist));
    5806:	68fb      	ldr	r3, [r7, #12]
    5808:	3310      	adds	r3, #16
    580a:	001a      	movs	r2, r3
    580c:	693b      	ldr	r3, [r7, #16]
    580e:	3314      	adds	r3, #20
    5810:	0019      	movs	r1, r3
    5812:	0010      	movs	r0, r2
    5814:	f7ff fee1 	bl	55da <rt_list_insert_before>
        /* start timer */
        if (timeout > 0)
    5818:	683b      	ldr	r3, [r7, #0]
    581a:	2b00      	cmp	r3, #0
    581c:	dd0b      	ble.n	5836 <rt_data_queue_push+0x12e>
        {
            /* reset the timeout of thread timer and start it */
            rt_timer_control(&(thread->thread_timer),
    581e:	693b      	ldr	r3, [r7, #16]
    5820:	334c      	adds	r3, #76	; 0x4c
    5822:	003a      	movs	r2, r7
    5824:	2100      	movs	r1, #0
    5826:	0018      	movs	r0, r3
    5828:	f7fc fbe6 	bl	1ff8 <rt_timer_control>
                             RT_TIMER_CTRL_SET_TIME,
                             &timeout);
            rt_timer_start(&(thread->thread_timer));
    582c:	693b      	ldr	r3, [r7, #16]
    582e:	334c      	adds	r3, #76	; 0x4c
    5830:	0018      	movs	r0, r3
    5832:	f7fc faa3 	bl	1d7c <rt_timer_start>
        }

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
    5836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5838:	0018      	movs	r0, r3
    583a:	f7ff fe4d 	bl	54d8 <rt_hw_interrupt_enable>

        /* do schedule */
        rt_schedule();
    583e:	f7fb ffc3 	bl	17c8 <rt_schedule>

        /* thread is waked up */
        result = thread->error;
    5842:	693b      	ldr	r3, [r7, #16]
    5844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5846:	623b      	str	r3, [r7, #32]
        level = rt_hw_interrupt_disable();
    5848:	f7ff fe42 	bl	54d0 <rt_hw_interrupt_disable>
    584c:	0003      	movs	r3, r0
    584e:	627b      	str	r3, [r7, #36]	; 0x24
        if (result != RT_EOK) goto __exit;
    5850:	6a3b      	ldr	r3, [r7, #32]
    5852:	2b00      	cmp	r3, #0
    5854:	d000      	beq.n	5858 <rt_data_queue_push+0x150>
    5856:	e06d      	b.n	5934 <rt_data_queue_push+0x22c>
    while (queue->is_full)
    5858:	68fb      	ldr	r3, [r7, #12]
    585a:	7adb      	ldrb	r3, [r3, #11]
    585c:	227f      	movs	r2, #127	; 0x7f
    585e:	4393      	bics	r3, r2
    5860:	b2db      	uxtb	r3, r3
    5862:	2b00      	cmp	r3, #0
    5864:	d1c1      	bne.n	57ea <rt_data_queue_push+0xe2>
    }

    queue->queue[queue->put_index].data_ptr  = data_ptr;
    5866:	68fb      	ldr	r3, [r7, #12]
    5868:	68da      	ldr	r2, [r3, #12]
    586a:	68fb      	ldr	r3, [r7, #12]
    586c:	895b      	ldrh	r3, [r3, #10]
    586e:	045b      	lsls	r3, r3, #17
    5870:	0c5b      	lsrs	r3, r3, #17
    5872:	b29b      	uxth	r3, r3
    5874:	00db      	lsls	r3, r3, #3
    5876:	18d3      	adds	r3, r2, r3
    5878:	68ba      	ldr	r2, [r7, #8]
    587a:	601a      	str	r2, [r3, #0]
    queue->queue[queue->put_index].data_size = data_size;
    587c:	68fb      	ldr	r3, [r7, #12]
    587e:	68da      	ldr	r2, [r3, #12]
    5880:	68fb      	ldr	r3, [r7, #12]
    5882:	895b      	ldrh	r3, [r3, #10]
    5884:	045b      	lsls	r3, r3, #17
    5886:	0c5b      	lsrs	r3, r3, #17
    5888:	b29b      	uxth	r3, r3
    588a:	00db      	lsls	r3, r3, #3
    588c:	18d3      	adds	r3, r2, r3
    588e:	687a      	ldr	r2, [r7, #4]
    5890:	605a      	str	r2, [r3, #4]
    queue->put_index += 1;
    5892:	68fb      	ldr	r3, [r7, #12]
    5894:	895b      	ldrh	r3, [r3, #10]
    5896:	045b      	lsls	r3, r3, #17
    5898:	0c5b      	lsrs	r3, r3, #17
    589a:	b29b      	uxth	r3, r3
    589c:	3301      	adds	r3, #1
    589e:	b29b      	uxth	r3, r3
    58a0:	045b      	lsls	r3, r3, #17
    58a2:	0c5b      	lsrs	r3, r3, #17
    58a4:	b29a      	uxth	r2, r3
    58a6:	68fb      	ldr	r3, [r7, #12]
    58a8:	0452      	lsls	r2, r2, #17
    58aa:	0c50      	lsrs	r0, r2, #17
    58ac:	895a      	ldrh	r2, [r3, #10]
    58ae:	0bd2      	lsrs	r2, r2, #15
    58b0:	03d2      	lsls	r2, r2, #15
    58b2:	1c11      	adds	r1, r2, #0
    58b4:	1c02      	adds	r2, r0, #0
    58b6:	430a      	orrs	r2, r1
    58b8:	815a      	strh	r2, [r3, #10]
    if (queue->put_index == queue->size)
    58ba:	68fb      	ldr	r3, [r7, #12]
    58bc:	895b      	ldrh	r3, [r3, #10]
    58be:	045b      	lsls	r3, r3, #17
    58c0:	0c5b      	lsrs	r3, r3, #17
    58c2:	b29b      	uxth	r3, r3
    58c4:	001a      	movs	r2, r3
    58c6:	68fb      	ldr	r3, [r7, #12]
    58c8:	889b      	ldrh	r3, [r3, #4]
    58ca:	429a      	cmp	r2, r3
    58cc:	d104      	bne.n	58d8 <rt_data_queue_push+0x1d0>
    {
        queue->put_index = 0;
    58ce:	68fb      	ldr	r3, [r7, #12]
    58d0:	895a      	ldrh	r2, [r3, #10]
    58d2:	0bd2      	lsrs	r2, r2, #15
    58d4:	03d2      	lsls	r2, r2, #15
    58d6:	815a      	strh	r2, [r3, #10]
    }
    queue->is_empty = 0;
    58d8:	68fb      	ldr	r3, [r7, #12]
    58da:	7a5a      	ldrb	r2, [r3, #9]
    58dc:	217f      	movs	r1, #127	; 0x7f
    58de:	400a      	ands	r2, r1
    58e0:	725a      	strb	r2, [r3, #9]
    if (queue->put_index == queue->get_index)
    58e2:	68fb      	ldr	r3, [r7, #12]
    58e4:	895b      	ldrh	r3, [r3, #10]
    58e6:	045b      	lsls	r3, r3, #17
    58e8:	0c5b      	lsrs	r3, r3, #17
    58ea:	b29a      	uxth	r2, r3
    58ec:	68fb      	ldr	r3, [r7, #12]
    58ee:	891b      	ldrh	r3, [r3, #8]
    58f0:	045b      	lsls	r3, r3, #17
    58f2:	0c5b      	lsrs	r3, r3, #17
    58f4:	b29b      	uxth	r3, r3
    58f6:	429a      	cmp	r2, r3
    58f8:	d105      	bne.n	5906 <rt_data_queue_push+0x1fe>
    {
        queue->is_full = 1;
    58fa:	68fb      	ldr	r3, [r7, #12]
    58fc:	7ada      	ldrb	r2, [r3, #11]
    58fe:	2180      	movs	r1, #128	; 0x80
    5900:	4249      	negs	r1, r1
    5902:	430a      	orrs	r2, r1
    5904:	72da      	strb	r2, [r3, #11]
    }

    /* there is at least one thread in suspended list */
    if (!rt_list_isempty(&(queue->suspended_pop_list)))
    5906:	68fb      	ldr	r3, [r7, #12]
    5908:	3318      	adds	r3, #24
    590a:	0018      	movs	r0, r3
    590c:	f7ff fe7c 	bl	5608 <rt_list_isempty>
    5910:	1e03      	subs	r3, r0, #0
    5912:	d111      	bne.n	5938 <rt_data_queue_push+0x230>
    {
        /* get thread entry */
        thread = rt_list_entry(queue->suspended_pop_list.next,
    5914:	68fb      	ldr	r3, [r7, #12]
    5916:	699b      	ldr	r3, [r3, #24]
    5918:	3b14      	subs	r3, #20
    591a:	613b      	str	r3, [r7, #16]
                               struct rt_thread,
                               tlist);

        /* resume it */
        rt_thread_resume(thread);
    591c:	693b      	ldr	r3, [r7, #16]
    591e:	0018      	movs	r0, r3
    5920:	f7ff fbf8 	bl	5114 <rt_thread_resume>
        rt_hw_interrupt_enable(level);
    5924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5926:	0018      	movs	r0, r3
    5928:	f7ff fdd6 	bl	54d8 <rt_hw_interrupt_enable>

        /* perform a schedule */
        rt_schedule();
    592c:	f7fb ff4c 	bl	17c8 <rt_schedule>

        return result;
    5930:	6a3b      	ldr	r3, [r7, #32]
    5932:	e014      	b.n	595e <rt_data_queue_push+0x256>
        if (result != RT_EOK) goto __exit;
    5934:	46c0      	nop			; (mov r8, r8)
    5936:	e000      	b.n	593a <rt_data_queue_push+0x232>
    }

__exit:
    5938:	46c0      	nop			; (mov r8, r8)
    rt_hw_interrupt_enable(level);
    593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    593c:	0018      	movs	r0, r3
    593e:	f7ff fdcb 	bl	54d8 <rt_hw_interrupt_enable>
    if ((result == RT_EOK) && queue->evt_notify != RT_NULL)
    5942:	6a3b      	ldr	r3, [r7, #32]
    5944:	2b00      	cmp	r3, #0
    5946:	d109      	bne.n	595c <rt_data_queue_push+0x254>
    5948:	68fb      	ldr	r3, [r7, #12]
    594a:	6a1b      	ldr	r3, [r3, #32]
    594c:	2b00      	cmp	r3, #0
    594e:	d005      	beq.n	595c <rt_data_queue_push+0x254>
    {
        queue->evt_notify(queue, RT_DATAQUEUE_EVENT_PUSH);
    5950:	68fb      	ldr	r3, [r7, #12]
    5952:	6a1b      	ldr	r3, [r3, #32]
    5954:	68fa      	ldr	r2, [r7, #12]
    5956:	2102      	movs	r1, #2
    5958:	0010      	movs	r0, r2
    595a:	4798      	blx	r3
    }

    return result;
    595c:	6a3b      	ldr	r3, [r7, #32]
}
    595e:	0018      	movs	r0, r3
    5960:	46bd      	mov	sp, r7
    5962:	b00a      	add	sp, #40	; 0x28
    5964:	bd80      	pop	{r7, pc}
    5966:	46c0      	nop			; (mov r8, r8)
    5968:	0000c9e4 	.word	0x0000c9e4
    596c:	0000c8dc 	.word	0x0000c8dc
    5970:	bead0e0e 	.word	0xbead0e0e
    5974:	0000c8fc 	.word	0x0000c8fc
    5978:	0000c91c 	.word	0x0000c91c
    597c:	0000c948 	.word	0x0000c948
    5980:	0000c94c 	.word	0x0000c94c
    5984:	0000c984 	.word	0x0000c984

00005988 <rt_data_queue_reset>:
 *           that are hanging and waiting.
 *
 * @param    queue is a pointer to the data queue object.
 */
void rt_data_queue_reset(struct rt_data_queue *queue)
{
    5988:	b580      	push	{r7, lr}
    598a:	b084      	sub	sp, #16
    598c:	af00      	add	r7, sp, #0
    598e:	6078      	str	r0, [r7, #4]
    rt_ubase_t  level;
    struct rt_thread *thread;

    RT_ASSERT(queue != RT_NULL);
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	2b00      	cmp	r3, #0
    5994:	d107      	bne.n	59a6 <rt_data_queue_reset+0x1e>
    5996:	2370      	movs	r3, #112	; 0x70
    5998:	33ff      	adds	r3, #255	; 0xff
    599a:	001a      	movs	r2, r3
    599c:	4937      	ldr	r1, [pc, #220]	; (5a7c <rt_data_queue_reset+0xf4>)
    599e:	4b38      	ldr	r3, [pc, #224]	; (5a80 <rt_data_queue_reset+0xf8>)
    59a0:	0018      	movs	r0, r3
    59a2:	f7fe fb15 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(queue->magic == DATAQUEUE_MAGIC);
    59a6:	687b      	ldr	r3, [r7, #4]
    59a8:	681b      	ldr	r3, [r3, #0]
    59aa:	4a36      	ldr	r2, [pc, #216]	; (5a84 <rt_data_queue_reset+0xfc>)
    59ac:	4293      	cmp	r3, r2
    59ae:	d006      	beq.n	59be <rt_data_queue_reset+0x36>
    59b0:	23b8      	movs	r3, #184	; 0xb8
    59b2:	005a      	lsls	r2, r3, #1
    59b4:	4931      	ldr	r1, [pc, #196]	; (5a7c <rt_data_queue_reset+0xf4>)
    59b6:	4b34      	ldr	r3, [pc, #208]	; (5a88 <rt_data_queue_reset+0x100>)
    59b8:	0018      	movs	r0, r3
    59ba:	f7fe fb09 	bl	3fd0 <rt_assert_handler>

    level = rt_hw_interrupt_disable();
    59be:	f7ff fd87 	bl	54d0 <rt_hw_interrupt_disable>
    59c2:	0003      	movs	r3, r0
    59c4:	60fb      	str	r3, [r7, #12]

    queue->get_index = 0;
    59c6:	687b      	ldr	r3, [r7, #4]
    59c8:	891a      	ldrh	r2, [r3, #8]
    59ca:	0bd2      	lsrs	r2, r2, #15
    59cc:	03d2      	lsls	r2, r2, #15
    59ce:	811a      	strh	r2, [r3, #8]
    queue->put_index = 0;
    59d0:	687b      	ldr	r3, [r7, #4]
    59d2:	895a      	ldrh	r2, [r3, #10]
    59d4:	0bd2      	lsrs	r2, r2, #15
    59d6:	03d2      	lsls	r2, r2, #15
    59d8:	815a      	strh	r2, [r3, #10]
    queue->is_empty = 1;
    59da:	687b      	ldr	r3, [r7, #4]
    59dc:	7a5a      	ldrb	r2, [r3, #9]
    59de:	2180      	movs	r1, #128	; 0x80
    59e0:	4249      	negs	r1, r1
    59e2:	430a      	orrs	r2, r1
    59e4:	725a      	strb	r2, [r3, #9]
    queue->is_full = 0;
    59e6:	687b      	ldr	r3, [r7, #4]
    59e8:	7ada      	ldrb	r2, [r3, #11]
    59ea:	217f      	movs	r1, #127	; 0x7f
    59ec:	400a      	ands	r2, r1
    59ee:	72da      	strb	r2, [r3, #11]

    rt_hw_interrupt_enable(level);
    59f0:	68fb      	ldr	r3, [r7, #12]
    59f2:	0018      	movs	r0, r3
    59f4:	f7ff fd70 	bl	54d8 <rt_hw_interrupt_enable>

    rt_enter_critical();
    59f8:	f7fc f850 	bl	1a9c <rt_enter_critical>
    /* wakeup all suspend threads */

    /* resume on pop list */
    while (!rt_list_isempty(&(queue->suspended_pop_list)))
    59fc:	e013      	b.n	5a26 <rt_data_queue_reset+0x9e>
    {
        /* disable interrupt */
        level = rt_hw_interrupt_disable();
    59fe:	f7ff fd67 	bl	54d0 <rt_hw_interrupt_disable>
    5a02:	0003      	movs	r3, r0
    5a04:	60fb      	str	r3, [r7, #12]

        /* get next suspend thread */
        thread = rt_list_entry(queue->suspended_pop_list.next,
    5a06:	687b      	ldr	r3, [r7, #4]
    5a08:	699b      	ldr	r3, [r3, #24]
    5a0a:	3b14      	subs	r3, #20
    5a0c:	60bb      	str	r3, [r7, #8]
                               struct rt_thread,
                               tlist);
        /* set error code to RT_ERROR */
        thread->error = -RT_ERROR;
    5a0e:	68bb      	ldr	r3, [r7, #8]
    5a10:	2201      	movs	r2, #1
    5a12:	4252      	negs	r2, r2
    5a14:	631a      	str	r2, [r3, #48]	; 0x30
        /*
         * resume thread
         * In rt_thread_resume function, it will remove current thread from
         * suspend list
         */
        rt_thread_resume(thread);
    5a16:	68bb      	ldr	r3, [r7, #8]
    5a18:	0018      	movs	r0, r3
    5a1a:	f7ff fb7b 	bl	5114 <rt_thread_resume>

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
    5a1e:	68fb      	ldr	r3, [r7, #12]
    5a20:	0018      	movs	r0, r3
    5a22:	f7ff fd59 	bl	54d8 <rt_hw_interrupt_enable>
    while (!rt_list_isempty(&(queue->suspended_pop_list)))
    5a26:	687b      	ldr	r3, [r7, #4]
    5a28:	3318      	adds	r3, #24
    5a2a:	0018      	movs	r0, r3
    5a2c:	f7ff fdec 	bl	5608 <rt_list_isempty>
    5a30:	1e03      	subs	r3, r0, #0
    5a32:	d0e4      	beq.n	59fe <rt_data_queue_reset+0x76>
    }

    /* resume on push list */
    while (!rt_list_isempty(&(queue->suspended_push_list)))
    5a34:	e013      	b.n	5a5e <rt_data_queue_reset+0xd6>
    {
        /* disable interrupt */
        level = rt_hw_interrupt_disable();
    5a36:	f7ff fd4b 	bl	54d0 <rt_hw_interrupt_disable>
    5a3a:	0003      	movs	r3, r0
    5a3c:	60fb      	str	r3, [r7, #12]

        /* get next suspend thread */
        thread = rt_list_entry(queue->suspended_push_list.next,
    5a3e:	687b      	ldr	r3, [r7, #4]
    5a40:	691b      	ldr	r3, [r3, #16]
    5a42:	3b14      	subs	r3, #20
    5a44:	60bb      	str	r3, [r7, #8]
                               struct rt_thread,
                               tlist);
        /* set error code to RT_ERROR */
        thread->error = -RT_ERROR;
    5a46:	68bb      	ldr	r3, [r7, #8]
    5a48:	2201      	movs	r2, #1
    5a4a:	4252      	negs	r2, r2
    5a4c:	631a      	str	r2, [r3, #48]	; 0x30
        /*
         * resume thread
         * In rt_thread_resume function, it will remove current thread from
         * suspend list
         */
        rt_thread_resume(thread);
    5a4e:	68bb      	ldr	r3, [r7, #8]
    5a50:	0018      	movs	r0, r3
    5a52:	f7ff fb5f 	bl	5114 <rt_thread_resume>

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
    5a56:	68fb      	ldr	r3, [r7, #12]
    5a58:	0018      	movs	r0, r3
    5a5a:	f7ff fd3d 	bl	54d8 <rt_hw_interrupt_enable>
    while (!rt_list_isempty(&(queue->suspended_push_list)))
    5a5e:	687b      	ldr	r3, [r7, #4]
    5a60:	3310      	adds	r3, #16
    5a62:	0018      	movs	r0, r3
    5a64:	f7ff fdd0 	bl	5608 <rt_list_isempty>
    5a68:	1e03      	subs	r3, r0, #0
    5a6a:	d0e4      	beq.n	5a36 <rt_data_queue_reset+0xae>
    }
    rt_exit_critical();
    5a6c:	f7fc f82c 	bl	1ac8 <rt_exit_critical>

    rt_schedule();
    5a70:	f7fb feaa 	bl	17c8 <rt_schedule>
}
    5a74:	46c0      	nop			; (mov r8, r8)
    5a76:	46bd      	mov	sp, r7
    5a78:	b004      	add	sp, #16
    5a7a:	bd80      	pop	{r7, pc}
    5a7c:	0000c9f8 	.word	0x0000c9f8
    5a80:	0000c8dc 	.word	0x0000c8dc
    5a84:	bead0e0e 	.word	0xbead0e0e
    5a88:	0000c8fc 	.word	0x0000c8fc

00005a8c <rt_data_queue_deinit>:
 * @param    queue is a pointer to the data queue object.
 *
 * @return   Return the operation status. When the return value is RT_EOK, the operation is successful.
 */
rt_err_t rt_data_queue_deinit(struct rt_data_queue *queue)
{
    5a8c:	b580      	push	{r7, lr}
    5a8e:	b084      	sub	sp, #16
    5a90:	af00      	add	r7, sp, #0
    5a92:	6078      	str	r0, [r7, #4]
    rt_ubase_t level;

    RT_ASSERT(queue != RT_NULL);
    5a94:	687b      	ldr	r3, [r7, #4]
    5a96:	2b00      	cmp	r3, #0
    5a98:	d106      	bne.n	5aa8 <rt_data_queue_deinit+0x1c>
    5a9a:	23df      	movs	r3, #223	; 0xdf
    5a9c:	005a      	lsls	r2, r3, #1
    5a9e:	4915      	ldr	r1, [pc, #84]	; (5af4 <rt_data_queue_deinit+0x68>)
    5aa0:	4b15      	ldr	r3, [pc, #84]	; (5af8 <rt_data_queue_deinit+0x6c>)
    5aa2:	0018      	movs	r0, r3
    5aa4:	f7fe fa94 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(queue->magic == DATAQUEUE_MAGIC);
    5aa8:	687b      	ldr	r3, [r7, #4]
    5aaa:	681b      	ldr	r3, [r3, #0]
    5aac:	4a13      	ldr	r2, [pc, #76]	; (5afc <rt_data_queue_deinit+0x70>)
    5aae:	4293      	cmp	r3, r2
    5ab0:	d007      	beq.n	5ac2 <rt_data_queue_deinit+0x36>
    5ab2:	23c0      	movs	r3, #192	; 0xc0
    5ab4:	33ff      	adds	r3, #255	; 0xff
    5ab6:	001a      	movs	r2, r3
    5ab8:	490e      	ldr	r1, [pc, #56]	; (5af4 <rt_data_queue_deinit+0x68>)
    5aba:	4b11      	ldr	r3, [pc, #68]	; (5b00 <rt_data_queue_deinit+0x74>)
    5abc:	0018      	movs	r0, r3
    5abe:	f7fe fa87 	bl	3fd0 <rt_assert_handler>

    /* wakeup all suspend threads */
    rt_data_queue_reset(queue);
    5ac2:	687b      	ldr	r3, [r7, #4]
    5ac4:	0018      	movs	r0, r3
    5ac6:	f7ff ff5f 	bl	5988 <rt_data_queue_reset>

    level = rt_hw_interrupt_disable();
    5aca:	f7ff fd01 	bl	54d0 <rt_hw_interrupt_disable>
    5ace:	0003      	movs	r3, r0
    5ad0:	60fb      	str	r3, [r7, #12]
    queue->magic = 0;
    5ad2:	687b      	ldr	r3, [r7, #4]
    5ad4:	2200      	movs	r2, #0
    5ad6:	601a      	str	r2, [r3, #0]
    rt_hw_interrupt_enable(level);
    5ad8:	68fb      	ldr	r3, [r7, #12]
    5ada:	0018      	movs	r0, r3
    5adc:	f7ff fcfc 	bl	54d8 <rt_hw_interrupt_enable>

    rt_free(queue->queue);
    5ae0:	687b      	ldr	r3, [r7, #4]
    5ae2:	68db      	ldr	r3, [r3, #12]
    5ae4:	0018      	movs	r0, r3
    5ae6:	f7fe fa01 	bl	3eec <rt_free>

    return RT_EOK;
    5aea:	2300      	movs	r3, #0
}
    5aec:	0018      	movs	r0, r3
    5aee:	46bd      	mov	sp, r7
    5af0:	b004      	add	sp, #16
    5af2:	bd80      	pop	{r7, pc}
    5af4:	0000ca0c 	.word	0x0000ca0c
    5af8:	0000c8dc 	.word	0x0000c8dc
    5afc:	bead0e0e 	.word	0xbead0e0e
    5b00:	0000c8fc 	.word	0x0000c8fc

00005b04 <rt_list_init>:
{
    5b04:	b580      	push	{r7, lr}
    5b06:	b082      	sub	sp, #8
    5b08:	af00      	add	r7, sp, #0
    5b0a:	6078      	str	r0, [r7, #4]
    l->next = l->prev = l;
    5b0c:	687b      	ldr	r3, [r7, #4]
    5b0e:	687a      	ldr	r2, [r7, #4]
    5b10:	605a      	str	r2, [r3, #4]
    5b12:	687b      	ldr	r3, [r7, #4]
    5b14:	685a      	ldr	r2, [r3, #4]
    5b16:	687b      	ldr	r3, [r7, #4]
    5b18:	601a      	str	r2, [r3, #0]
}
    5b1a:	46c0      	nop			; (mov r8, r8)
    5b1c:	46bd      	mov	sp, r7
    5b1e:	b002      	add	sp, #8
    5b20:	bd80      	pop	{r7, pc}

00005b22 <rt_list_insert_before>:
{
    5b22:	b580      	push	{r7, lr}
    5b24:	b082      	sub	sp, #8
    5b26:	af00      	add	r7, sp, #0
    5b28:	6078      	str	r0, [r7, #4]
    5b2a:	6039      	str	r1, [r7, #0]
    l->prev->next = n;
    5b2c:	687b      	ldr	r3, [r7, #4]
    5b2e:	685b      	ldr	r3, [r3, #4]
    5b30:	683a      	ldr	r2, [r7, #0]
    5b32:	601a      	str	r2, [r3, #0]
    n->prev = l->prev;
    5b34:	687b      	ldr	r3, [r7, #4]
    5b36:	685a      	ldr	r2, [r3, #4]
    5b38:	683b      	ldr	r3, [r7, #0]
    5b3a:	605a      	str	r2, [r3, #4]
    l->prev = n;
    5b3c:	687b      	ldr	r3, [r7, #4]
    5b3e:	683a      	ldr	r2, [r7, #0]
    5b40:	605a      	str	r2, [r3, #4]
    n->next = l;
    5b42:	683b      	ldr	r3, [r7, #0]
    5b44:	687a      	ldr	r2, [r7, #4]
    5b46:	601a      	str	r2, [r3, #0]
}
    5b48:	46c0      	nop			; (mov r8, r8)
    5b4a:	46bd      	mov	sp, r7
    5b4c:	b002      	add	sp, #8
    5b4e:	bd80      	pop	{r7, pc}

00005b50 <rt_list_isempty>:
{
    5b50:	b580      	push	{r7, lr}
    5b52:	b082      	sub	sp, #8
    5b54:	af00      	add	r7, sp, #0
    5b56:	6078      	str	r0, [r7, #4]
    return l->next == l;
    5b58:	687b      	ldr	r3, [r7, #4]
    5b5a:	681b      	ldr	r3, [r3, #0]
    5b5c:	687a      	ldr	r2, [r7, #4]
    5b5e:	1ad3      	subs	r3, r2, r3
    5b60:	425a      	negs	r2, r3
    5b62:	4153      	adcs	r3, r2
    5b64:	b2db      	uxtb	r3, r3
}
    5b66:	0018      	movs	r0, r3
    5b68:	46bd      	mov	sp, r7
    5b6a:	b002      	add	sp, #8
    5b6c:	bd80      	pop	{r7, pc}
	...

00005b70 <rt_completion_init>:
 * @brief This function will initialize a completion object.
 *
 * @param completion is a pointer to a completion object.
 */
void rt_completion_init(struct rt_completion *completion)
{
    5b70:	b580      	push	{r7, lr}
    5b72:	b084      	sub	sp, #16
    5b74:	af00      	add	r7, sp, #0
    5b76:	6078      	str	r0, [r7, #4]
    rt_base_t level;
    RT_ASSERT(completion != RT_NULL);
    5b78:	687b      	ldr	r3, [r7, #4]
    5b7a:	2b00      	cmp	r3, #0
    5b7c:	d105      	bne.n	5b8a <rt_completion_init+0x1a>
    5b7e:	490d      	ldr	r1, [pc, #52]	; (5bb4 <rt_completion_init+0x44>)
    5b80:	4b0d      	ldr	r3, [pc, #52]	; (5bb8 <rt_completion_init+0x48>)
    5b82:	221b      	movs	r2, #27
    5b84:	0018      	movs	r0, r3
    5b86:	f7fe fa23 	bl	3fd0 <rt_assert_handler>

    level = rt_hw_interrupt_disable();
    5b8a:	f7ff fca1 	bl	54d0 <rt_hw_interrupt_disable>
    5b8e:	0003      	movs	r3, r0
    5b90:	60fb      	str	r3, [r7, #12]
    completion->flag = RT_UNCOMPLETED;
    5b92:	687b      	ldr	r3, [r7, #4]
    5b94:	2200      	movs	r2, #0
    5b96:	601a      	str	r2, [r3, #0]
    rt_list_init(&completion->suspended_list);
    5b98:	687b      	ldr	r3, [r7, #4]
    5b9a:	3304      	adds	r3, #4
    5b9c:	0018      	movs	r0, r3
    5b9e:	f7ff ffb1 	bl	5b04 <rt_list_init>
    rt_hw_interrupt_enable(level);
    5ba2:	68fb      	ldr	r3, [r7, #12]
    5ba4:	0018      	movs	r0, r3
    5ba6:	f7ff fc97 	bl	54d8 <rt_hw_interrupt_enable>
}
    5baa:	46c0      	nop			; (mov r8, r8)
    5bac:	46bd      	mov	sp, r7
    5bae:	b004      	add	sp, #16
    5bb0:	bd80      	pop	{r7, pc}
    5bb2:	46c0      	nop			; (mov r8, r8)
    5bb4:	0000cafc 	.word	0x0000cafc
    5bb8:	0000ca24 	.word	0x0000ca24

00005bbc <rt_completion_wait>:
 *
 * @warning This function can ONLY be called in the thread context. It MUST NOT be called in interrupt context.
 */
rt_err_t rt_completion_wait(struct rt_completion *completion,
                            rt_int32_t            timeout)
{
    5bbc:	b580      	push	{r7, lr}
    5bbe:	b088      	sub	sp, #32
    5bc0:	af00      	add	r7, sp, #0
    5bc2:	6078      	str	r0, [r7, #4]
    5bc4:	6039      	str	r1, [r7, #0]
    rt_err_t result;
    rt_base_t level;
    rt_thread_t thread;
    RT_ASSERT(completion != RT_NULL);
    5bc6:	687b      	ldr	r3, [r7, #4]
    5bc8:	2b00      	cmp	r3, #0
    5bca:	d105      	bne.n	5bd8 <rt_completion_wait+0x1c>
    5bcc:	4954      	ldr	r1, [pc, #336]	; (5d20 <rt_completion_wait+0x164>)
    5bce:	4b55      	ldr	r3, [pc, #340]	; (5d24 <rt_completion_wait+0x168>)
    5bd0:	223a      	movs	r2, #58	; 0x3a
    5bd2:	0018      	movs	r0, r3
    5bd4:	f7fe f9fc 	bl	3fd0 <rt_assert_handler>

    /* current context checking */
    RT_DEBUG_SCHEDULER_AVAILABLE(timeout != 0);
    5bd8:	683b      	ldr	r3, [r7, #0]
    5bda:	2b00      	cmp	r3, #0
    5bdc:	d047      	beq.n	5c6e <rt_completion_wait+0xb2>
    5bde:	f7ff fc77 	bl	54d0 <rt_hw_interrupt_disable>
    5be2:	0003      	movs	r3, r0
    5be4:	617b      	str	r3, [r7, #20]
    5be6:	f7fb ff99 	bl	1b1c <rt_critical_level>
    5bea:	1e03      	subs	r3, r0, #0
    5bec:	d00b      	beq.n	5c06 <rt_completion_wait+0x4a>
    5bee:	4a4c      	ldr	r2, [pc, #304]	; (5d20 <rt_completion_wait+0x164>)
    5bf0:	4b4d      	ldr	r3, [pc, #308]	; (5d28 <rt_completion_wait+0x16c>)
    5bf2:	0011      	movs	r1, r2
    5bf4:	0018      	movs	r0, r3
    5bf6:	f7fe f845 	bl	3c84 <rt_kprintf>
    5bfa:	4949      	ldr	r1, [pc, #292]	; (5d20 <rt_completion_wait+0x164>)
    5bfc:	4b4b      	ldr	r3, [pc, #300]	; (5d2c <rt_completion_wait+0x170>)
    5bfe:	223d      	movs	r2, #61	; 0x3d
    5c00:	0018      	movs	r0, r3
    5c02:	f7fe f9e5 	bl	3fd0 <rt_assert_handler>
    5c06:	f7ff fc63 	bl	54d0 <rt_hw_interrupt_disable>
    5c0a:	0003      	movs	r3, r0
    5c0c:	613b      	str	r3, [r7, #16]
    5c0e:	f7fe ffd3 	bl	4bb8 <rt_thread_self>
    5c12:	1e03      	subs	r3, r0, #0
    5c14:	d10b      	bne.n	5c2e <rt_completion_wait+0x72>
    5c16:	4a42      	ldr	r2, [pc, #264]	; (5d20 <rt_completion_wait+0x164>)
    5c18:	4b45      	ldr	r3, [pc, #276]	; (5d30 <rt_completion_wait+0x174>)
    5c1a:	0011      	movs	r1, r2
    5c1c:	0018      	movs	r0, r3
    5c1e:	f7fe f831 	bl	3c84 <rt_kprintf>
    5c22:	493f      	ldr	r1, [pc, #252]	; (5d20 <rt_completion_wait+0x164>)
    5c24:	4b41      	ldr	r3, [pc, #260]	; (5d2c <rt_completion_wait+0x170>)
    5c26:	223d      	movs	r2, #61	; 0x3d
    5c28:	0018      	movs	r0, r3
    5c2a:	f7fe f9d1 	bl	3fd0 <rt_assert_handler>
    5c2e:	f7ff fc4f 	bl	54d0 <rt_hw_interrupt_disable>
    5c32:	0003      	movs	r3, r0
    5c34:	60fb      	str	r3, [r7, #12]
    5c36:	f7fb fcbf 	bl	15b8 <rt_interrupt_get_nest>
    5c3a:	1e03      	subs	r3, r0, #0
    5c3c:	d00b      	beq.n	5c56 <rt_completion_wait+0x9a>
    5c3e:	4a38      	ldr	r2, [pc, #224]	; (5d20 <rt_completion_wait+0x164>)
    5c40:	4b3c      	ldr	r3, [pc, #240]	; (5d34 <rt_completion_wait+0x178>)
    5c42:	0011      	movs	r1, r2
    5c44:	0018      	movs	r0, r3
    5c46:	f7fe f81d 	bl	3c84 <rt_kprintf>
    5c4a:	4935      	ldr	r1, [pc, #212]	; (5d20 <rt_completion_wait+0x164>)
    5c4c:	4b37      	ldr	r3, [pc, #220]	; (5d2c <rt_completion_wait+0x170>)
    5c4e:	223d      	movs	r2, #61	; 0x3d
    5c50:	0018      	movs	r0, r3
    5c52:	f7fe f9bd 	bl	3fd0 <rt_assert_handler>
    5c56:	68fb      	ldr	r3, [r7, #12]
    5c58:	0018      	movs	r0, r3
    5c5a:	f7ff fc3d 	bl	54d8 <rt_hw_interrupt_enable>
    5c5e:	693b      	ldr	r3, [r7, #16]
    5c60:	0018      	movs	r0, r3
    5c62:	f7ff fc39 	bl	54d8 <rt_hw_interrupt_enable>
    5c66:	697b      	ldr	r3, [r7, #20]
    5c68:	0018      	movs	r0, r3
    5c6a:	f7ff fc35 	bl	54d8 <rt_hw_interrupt_enable>

    result = RT_EOK;
    5c6e:	2300      	movs	r3, #0
    5c70:	61fb      	str	r3, [r7, #28]
    thread = rt_thread_self();
    5c72:	f7fe ffa1 	bl	4bb8 <rt_thread_self>
    5c76:	0003      	movs	r3, r0
    5c78:	60bb      	str	r3, [r7, #8]

    level = rt_hw_interrupt_disable();
    5c7a:	f7ff fc29 	bl	54d0 <rt_hw_interrupt_disable>
    5c7e:	0003      	movs	r3, r0
    5c80:	61bb      	str	r3, [r7, #24]
    if (completion->flag != RT_COMPLETED)
    5c82:	687b      	ldr	r3, [r7, #4]
    5c84:	681b      	ldr	r3, [r3, #0]
    5c86:	2b01      	cmp	r3, #1
    5c88:	d03e      	beq.n	5d08 <rt_completion_wait+0x14c>
    {
        /* only one thread can suspend on complete */
        RT_ASSERT(rt_list_isempty(&(completion->suspended_list)));
    5c8a:	687b      	ldr	r3, [r7, #4]
    5c8c:	3304      	adds	r3, #4
    5c8e:	0018      	movs	r0, r3
    5c90:	f7ff ff5e 	bl	5b50 <rt_list_isempty>
    5c94:	1e03      	subs	r3, r0, #0
    5c96:	d105      	bne.n	5ca4 <rt_completion_wait+0xe8>
    5c98:	4921      	ldr	r1, [pc, #132]	; (5d20 <rt_completion_wait+0x164>)
    5c9a:	4b27      	ldr	r3, [pc, #156]	; (5d38 <rt_completion_wait+0x17c>)
    5c9c:	2246      	movs	r2, #70	; 0x46
    5c9e:	0018      	movs	r0, r3
    5ca0:	f7fe f996 	bl	3fd0 <rt_assert_handler>

        if (timeout == 0)
    5ca4:	683b      	ldr	r3, [r7, #0]
    5ca6:	2b00      	cmp	r3, #0
    5ca8:	d103      	bne.n	5cb2 <rt_completion_wait+0xf6>
        {
            result = -RT_ETIMEOUT;
    5caa:	2302      	movs	r3, #2
    5cac:	425b      	negs	r3, r3
    5cae:	61fb      	str	r3, [r7, #28]
            goto __exit;
    5cb0:	e02d      	b.n	5d0e <rt_completion_wait+0x152>
        }
        else
        {
            /* reset thread error number */
            thread->error = RT_EOK;
    5cb2:	68bb      	ldr	r3, [r7, #8]
    5cb4:	2200      	movs	r2, #0
    5cb6:	631a      	str	r2, [r3, #48]	; 0x30

            /* suspend thread */
            rt_thread_suspend(thread);
    5cb8:	68bb      	ldr	r3, [r7, #8]
    5cba:	0018      	movs	r0, r3
    5cbc:	f7ff f9bc 	bl	5038 <rt_thread_suspend>
            /* add to suspended list */
            rt_list_insert_before(&(completion->suspended_list),
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	1d1a      	adds	r2, r3, #4
    5cc4:	68bb      	ldr	r3, [r7, #8]
    5cc6:	3314      	adds	r3, #20
    5cc8:	0019      	movs	r1, r3
    5cca:	0010      	movs	r0, r2
    5ccc:	f7ff ff29 	bl	5b22 <rt_list_insert_before>
                                  &(thread->tlist));

            /* start timer */
            if (timeout > 0)
    5cd0:	683b      	ldr	r3, [r7, #0]
    5cd2:	2b00      	cmp	r3, #0
    5cd4:	dd0b      	ble.n	5cee <rt_completion_wait+0x132>
            {
                /* reset the timeout of thread timer and start it */
                rt_timer_control(&(thread->thread_timer),
    5cd6:	68bb      	ldr	r3, [r7, #8]
    5cd8:	334c      	adds	r3, #76	; 0x4c
    5cda:	003a      	movs	r2, r7
    5cdc:	2100      	movs	r1, #0
    5cde:	0018      	movs	r0, r3
    5ce0:	f7fc f98a 	bl	1ff8 <rt_timer_control>
                                 RT_TIMER_CTRL_SET_TIME,
                                 &timeout);
                rt_timer_start(&(thread->thread_timer));
    5ce4:	68bb      	ldr	r3, [r7, #8]
    5ce6:	334c      	adds	r3, #76	; 0x4c
    5ce8:	0018      	movs	r0, r3
    5cea:	f7fc f847 	bl	1d7c <rt_timer_start>
            }
            /* enable interrupt */
            rt_hw_interrupt_enable(level);
    5cee:	69bb      	ldr	r3, [r7, #24]
    5cf0:	0018      	movs	r0, r3
    5cf2:	f7ff fbf1 	bl	54d8 <rt_hw_interrupt_enable>

            /* do schedule */
            rt_schedule();
    5cf6:	f7fb fd67 	bl	17c8 <rt_schedule>

            /* thread is waked up */
            result = thread->error;
    5cfa:	68bb      	ldr	r3, [r7, #8]
    5cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5cfe:	61fb      	str	r3, [r7, #28]

            level = rt_hw_interrupt_disable();
    5d00:	f7ff fbe6 	bl	54d0 <rt_hw_interrupt_disable>
    5d04:	0003      	movs	r3, r0
    5d06:	61bb      	str	r3, [r7, #24]
        }
    }
    /* clean completed flag */
    completion->flag = RT_UNCOMPLETED;
    5d08:	687b      	ldr	r3, [r7, #4]
    5d0a:	2200      	movs	r2, #0
    5d0c:	601a      	str	r2, [r3, #0]

__exit:
    rt_hw_interrupt_enable(level);
    5d0e:	69bb      	ldr	r3, [r7, #24]
    5d10:	0018      	movs	r0, r3
    5d12:	f7ff fbe1 	bl	54d8 <rt_hw_interrupt_enable>

    return result;
    5d16:	69fb      	ldr	r3, [r7, #28]
}
    5d18:	0018      	movs	r0, r3
    5d1a:	46bd      	mov	sp, r7
    5d1c:	b008      	add	sp, #32
    5d1e:	bd80      	pop	{r7, pc}
    5d20:	0000cb10 	.word	0x0000cb10
    5d24:	0000ca24 	.word	0x0000ca24
    5d28:	0000ca3c 	.word	0x0000ca3c
    5d2c:	0000ca68 	.word	0x0000ca68
    5d30:	0000ca6c 	.word	0x0000ca6c
    5d34:	0000caa4 	.word	0x0000caa4
    5d38:	0000cacc 	.word	0x0000cacc

00005d3c <_serial_poll_rx>:

/*
 * Serial poll routines
 */
rt_inline int _serial_poll_rx(struct rt_serial_device *serial, rt_uint8_t *data, int length)
{
    5d3c:	b580      	push	{r7, lr}
    5d3e:	b086      	sub	sp, #24
    5d40:	af00      	add	r7, sp, #0
    5d42:	60f8      	str	r0, [r7, #12]
    5d44:	60b9      	str	r1, [r7, #8]
    5d46:	607a      	str	r2, [r7, #4]
    int ch;
    int size;

    RT_ASSERT(serial != RT_NULL);
    5d48:	68fb      	ldr	r3, [r7, #12]
    5d4a:	2b00      	cmp	r3, #0
    5d4c:	d105      	bne.n	5d5a <_serial_poll_rx+0x1e>
    5d4e:	491a      	ldr	r1, [pc, #104]	; (5db8 <_serial_poll_rx+0x7c>)
    5d50:	4b1a      	ldr	r3, [pc, #104]	; (5dbc <_serial_poll_rx+0x80>)
    5d52:	22da      	movs	r2, #218	; 0xda
    5d54:	0018      	movs	r0, r3
    5d56:	f7fe f93b 	bl	3fd0 <rt_assert_handler>
    size = length;
    5d5a:	687b      	ldr	r3, [r7, #4]
    5d5c:	617b      	str	r3, [r7, #20]

    while (length)
    5d5e:	e01d      	b.n	5d9c <_serial_poll_rx+0x60>
    {
        ch = serial->ops->getc(serial);
    5d60:	68fb      	ldr	r3, [r7, #12]
    5d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5d64:	68db      	ldr	r3, [r3, #12]
    5d66:	68fa      	ldr	r2, [r7, #12]
    5d68:	0010      	movs	r0, r2
    5d6a:	4798      	blx	r3
    5d6c:	0003      	movs	r3, r0
    5d6e:	613b      	str	r3, [r7, #16]
        if (ch == -1) break;
    5d70:	693b      	ldr	r3, [r7, #16]
    5d72:	3301      	adds	r3, #1
    5d74:	d016      	beq.n	5da4 <_serial_poll_rx+0x68>

        *data = ch;
    5d76:	693b      	ldr	r3, [r7, #16]
    5d78:	b2da      	uxtb	r2, r3
    5d7a:	68bb      	ldr	r3, [r7, #8]
    5d7c:	701a      	strb	r2, [r3, #0]
        data ++; length --;
    5d7e:	68bb      	ldr	r3, [r7, #8]
    5d80:	3301      	adds	r3, #1
    5d82:	60bb      	str	r3, [r7, #8]
    5d84:	687b      	ldr	r3, [r7, #4]
    5d86:	3b01      	subs	r3, #1
    5d88:	607b      	str	r3, [r7, #4]

        if(serial->parent.open_flag & RT_DEVICE_FLAG_STREAM)
    5d8a:	68fb      	ldr	r3, [r7, #12]
    5d8c:	8b1b      	ldrh	r3, [r3, #24]
    5d8e:	001a      	movs	r2, r3
    5d90:	2340      	movs	r3, #64	; 0x40
    5d92:	4013      	ands	r3, r2
    5d94:	d002      	beq.n	5d9c <_serial_poll_rx+0x60>
        {
            if (ch == '\n') break;
    5d96:	693b      	ldr	r3, [r7, #16]
    5d98:	2b0a      	cmp	r3, #10
    5d9a:	d005      	beq.n	5da8 <_serial_poll_rx+0x6c>
    while (length)
    5d9c:	687b      	ldr	r3, [r7, #4]
    5d9e:	2b00      	cmp	r3, #0
    5da0:	d1de      	bne.n	5d60 <_serial_poll_rx+0x24>
    5da2:	e002      	b.n	5daa <_serial_poll_rx+0x6e>
        if (ch == -1) break;
    5da4:	46c0      	nop			; (mov r8, r8)
    5da6:	e000      	b.n	5daa <_serial_poll_rx+0x6e>
            if (ch == '\n') break;
    5da8:	46c0      	nop			; (mov r8, r8)
        }
    }

    return size - length;
    5daa:	697a      	ldr	r2, [r7, #20]
    5dac:	687b      	ldr	r3, [r7, #4]
    5dae:	1ad3      	subs	r3, r2, r3
}
    5db0:	0018      	movs	r0, r3
    5db2:	46bd      	mov	sp, r7
    5db4:	b006      	add	sp, #24
    5db6:	bd80      	pop	{r7, pc}
    5db8:	0000cd60 	.word	0x0000cd60
    5dbc:	0000cb24 	.word	0x0000cb24

00005dc0 <_serial_poll_tx>:

rt_inline int _serial_poll_tx(struct rt_serial_device *serial, const rt_uint8_t *data, int length)
{
    5dc0:	b580      	push	{r7, lr}
    5dc2:	b086      	sub	sp, #24
    5dc4:	af00      	add	r7, sp, #0
    5dc6:	60f8      	str	r0, [r7, #12]
    5dc8:	60b9      	str	r1, [r7, #8]
    5dca:	607a      	str	r2, [r7, #4]
    int size;
    RT_ASSERT(serial != RT_NULL);
    5dcc:	68fb      	ldr	r3, [r7, #12]
    5dce:	2b00      	cmp	r3, #0
    5dd0:	d105      	bne.n	5dde <_serial_poll_tx+0x1e>
    5dd2:	4919      	ldr	r1, [pc, #100]	; (5e38 <_serial_poll_tx+0x78>)
    5dd4:	4b19      	ldr	r3, [pc, #100]	; (5e3c <_serial_poll_tx+0x7c>)
    5dd6:	22f1      	movs	r2, #241	; 0xf1
    5dd8:	0018      	movs	r0, r3
    5dda:	f7fe f8f9 	bl	3fd0 <rt_assert_handler>

    size = length;
    5dde:	687b      	ldr	r3, [r7, #4]
    5de0:	617b      	str	r3, [r7, #20]
    while (length)
    5de2:	e01e      	b.n	5e22 <_serial_poll_tx+0x62>
    {
        /*
         * to be polite with serial console add a line feed
         * to the carriage return character
         */
        if (*data == '\n' && (serial->parent.open_flag & RT_DEVICE_FLAG_STREAM))
    5de4:	68bb      	ldr	r3, [r7, #8]
    5de6:	781b      	ldrb	r3, [r3, #0]
    5de8:	2b0a      	cmp	r3, #10
    5dea:	d10c      	bne.n	5e06 <_serial_poll_tx+0x46>
    5dec:	68fb      	ldr	r3, [r7, #12]
    5dee:	8b1b      	ldrh	r3, [r3, #24]
    5df0:	001a      	movs	r2, r3
    5df2:	2340      	movs	r3, #64	; 0x40
    5df4:	4013      	ands	r3, r2
    5df6:	d006      	beq.n	5e06 <_serial_poll_tx+0x46>
        {
            serial->ops->putc(serial, '\r');
    5df8:	68fb      	ldr	r3, [r7, #12]
    5dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5dfc:	689b      	ldr	r3, [r3, #8]
    5dfe:	68fa      	ldr	r2, [r7, #12]
    5e00:	210d      	movs	r1, #13
    5e02:	0010      	movs	r0, r2
    5e04:	4798      	blx	r3
        }

        serial->ops->putc(serial, *data);
    5e06:	68fb      	ldr	r3, [r7, #12]
    5e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5e0a:	689b      	ldr	r3, [r3, #8]
    5e0c:	68ba      	ldr	r2, [r7, #8]
    5e0e:	7811      	ldrb	r1, [r2, #0]
    5e10:	68fa      	ldr	r2, [r7, #12]
    5e12:	0010      	movs	r0, r2
    5e14:	4798      	blx	r3

        ++ data;
    5e16:	68bb      	ldr	r3, [r7, #8]
    5e18:	3301      	adds	r3, #1
    5e1a:	60bb      	str	r3, [r7, #8]
        -- length;
    5e1c:	687b      	ldr	r3, [r7, #4]
    5e1e:	3b01      	subs	r3, #1
    5e20:	607b      	str	r3, [r7, #4]
    while (length)
    5e22:	687b      	ldr	r3, [r7, #4]
    5e24:	2b00      	cmp	r3, #0
    5e26:	d1dd      	bne.n	5de4 <_serial_poll_tx+0x24>
    }

    return size - length;
    5e28:	697a      	ldr	r2, [r7, #20]
    5e2a:	687b      	ldr	r3, [r7, #4]
    5e2c:	1ad3      	subs	r3, r2, r3
}
    5e2e:	0018      	movs	r0, r3
    5e30:	46bd      	mov	sp, r7
    5e32:	b006      	add	sp, #24
    5e34:	bd80      	pop	{r7, pc}
    5e36:	46c0      	nop			; (mov r8, r8)
    5e38:	0000cd90 	.word	0x0000cd90
    5e3c:	0000cb24 	.word	0x0000cb24

00005e40 <_serial_int_rx>:

/*
 * Serial interrupt routines
 */
rt_inline int _serial_int_rx(struct rt_serial_device *serial, rt_uint8_t *data, int length)
{
    5e40:	b580      	push	{r7, lr}
    5e42:	b088      	sub	sp, #32
    5e44:	af00      	add	r7, sp, #0
    5e46:	60f8      	str	r0, [r7, #12]
    5e48:	60b9      	str	r1, [r7, #8]
    5e4a:	607a      	str	r2, [r7, #4]
    int size;
    struct rt_serial_rx_fifo* rx_fifo;

    RT_ASSERT(serial != RT_NULL);
    5e4c:	68fb      	ldr	r3, [r7, #12]
    5e4e:	2b00      	cmp	r3, #0
    5e50:	d106      	bne.n	5e60 <_serial_int_rx+0x20>
    5e52:	2388      	movs	r3, #136	; 0x88
    5e54:	005a      	lsls	r2, r3, #1
    5e56:	4930      	ldr	r1, [pc, #192]	; (5f18 <_serial_int_rx+0xd8>)
    5e58:	4b30      	ldr	r3, [pc, #192]	; (5f1c <_serial_int_rx+0xdc>)
    5e5a:	0018      	movs	r0, r3
    5e5c:	f7fe f8b8 	bl	3fd0 <rt_assert_handler>
    size = length;
    5e60:	687b      	ldr	r3, [r7, #4]
    5e62:	61fb      	str	r3, [r7, #28]

    rx_fifo = (struct rt_serial_rx_fifo*) serial->serial_rx;
    5e64:	68fb      	ldr	r3, [r7, #12]
    5e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5e68:	61bb      	str	r3, [r7, #24]
    RT_ASSERT(rx_fifo != RT_NULL);
    5e6a:	69bb      	ldr	r3, [r7, #24]
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d148      	bne.n	5f02 <_serial_int_rx+0xc2>
    5e70:	238a      	movs	r3, #138	; 0x8a
    5e72:	005a      	lsls	r2, r3, #1
    5e74:	4928      	ldr	r1, [pc, #160]	; (5f18 <_serial_int_rx+0xd8>)
    5e76:	4b2a      	ldr	r3, [pc, #168]	; (5f20 <_serial_int_rx+0xe0>)
    5e78:	0018      	movs	r0, r3
    5e7a:	f7fe f8a9 	bl	3fd0 <rt_assert_handler>

    /* read from software FIFO */
    while (length)
    5e7e:	e040      	b.n	5f02 <_serial_int_rx+0xc2>
    {
        int ch;
        rt_base_t level;

        /* disable interrupt */
        level = rt_hw_interrupt_disable();
    5e80:	f7ff fb26 	bl	54d0 <rt_hw_interrupt_disable>
    5e84:	0003      	movs	r3, r0
    5e86:	617b      	str	r3, [r7, #20]

        /* there's no data: */
        if ((rx_fifo->get_index == rx_fifo->put_index) && (rx_fifo->is_full == RT_FALSE))
    5e88:	69bb      	ldr	r3, [r7, #24]
    5e8a:	88da      	ldrh	r2, [r3, #6]
    5e8c:	69bb      	ldr	r3, [r7, #24]
    5e8e:	889b      	ldrh	r3, [r3, #4]
    5e90:	429a      	cmp	r2, r3
    5e92:	d108      	bne.n	5ea6 <_serial_int_rx+0x66>
    5e94:	69bb      	ldr	r3, [r7, #24]
    5e96:	689b      	ldr	r3, [r3, #8]
    5e98:	2b00      	cmp	r3, #0
    5e9a:	d104      	bne.n	5ea6 <_serial_int_rx+0x66>
        {
            /* no data, enable interrupt and break out */
            rt_hw_interrupt_enable(level);
    5e9c:	697b      	ldr	r3, [r7, #20]
    5e9e:	0018      	movs	r0, r3
    5ea0:	f7ff fb1a 	bl	54d8 <rt_hw_interrupt_enable>
            break;
    5ea4:	e030      	b.n	5f08 <_serial_int_rx+0xc8>
        }

        /* otherwise there's the data: */
        ch = rx_fifo->buffer[rx_fifo->get_index];
    5ea6:	69bb      	ldr	r3, [r7, #24]
    5ea8:	681b      	ldr	r3, [r3, #0]
    5eaa:	69ba      	ldr	r2, [r7, #24]
    5eac:	88d2      	ldrh	r2, [r2, #6]
    5eae:	189b      	adds	r3, r3, r2
    5eb0:	781b      	ldrb	r3, [r3, #0]
    5eb2:	613b      	str	r3, [r7, #16]
        rx_fifo->get_index += 1;
    5eb4:	69bb      	ldr	r3, [r7, #24]
    5eb6:	88db      	ldrh	r3, [r3, #6]
    5eb8:	3301      	adds	r3, #1
    5eba:	b29a      	uxth	r2, r3
    5ebc:	69bb      	ldr	r3, [r7, #24]
    5ebe:	80da      	strh	r2, [r3, #6]
        if (rx_fifo->get_index >= serial->config.bufsz) rx_fifo->get_index = 0;
    5ec0:	69bb      	ldr	r3, [r7, #24]
    5ec2:	88da      	ldrh	r2, [r3, #6]
    5ec4:	68fb      	ldr	r3, [r7, #12]
    5ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5ec8:	019b      	lsls	r3, r3, #6
    5eca:	0c1b      	lsrs	r3, r3, #16
    5ecc:	b29b      	uxth	r3, r3
    5ece:	429a      	cmp	r2, r3
    5ed0:	d302      	bcc.n	5ed8 <_serial_int_rx+0x98>
    5ed2:	69bb      	ldr	r3, [r7, #24]
    5ed4:	2200      	movs	r2, #0
    5ed6:	80da      	strh	r2, [r3, #6]

        if (rx_fifo->is_full == RT_TRUE)
    5ed8:	69bb      	ldr	r3, [r7, #24]
    5eda:	689b      	ldr	r3, [r3, #8]
    5edc:	2b01      	cmp	r3, #1
    5ede:	d102      	bne.n	5ee6 <_serial_int_rx+0xa6>
        {
            rx_fifo->is_full = RT_FALSE;
    5ee0:	69bb      	ldr	r3, [r7, #24]
    5ee2:	2200      	movs	r2, #0
    5ee4:	609a      	str	r2, [r3, #8]
        }

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
    5ee6:	697b      	ldr	r3, [r7, #20]
    5ee8:	0018      	movs	r0, r3
    5eea:	f7ff faf5 	bl	54d8 <rt_hw_interrupt_enable>

        *data = ch & 0xff;
    5eee:	693b      	ldr	r3, [r7, #16]
    5ef0:	b2da      	uxtb	r2, r3
    5ef2:	68bb      	ldr	r3, [r7, #8]
    5ef4:	701a      	strb	r2, [r3, #0]
        data ++; length --;
    5ef6:	68bb      	ldr	r3, [r7, #8]
    5ef8:	3301      	adds	r3, #1
    5efa:	60bb      	str	r3, [r7, #8]
    5efc:	687b      	ldr	r3, [r7, #4]
    5efe:	3b01      	subs	r3, #1
    5f00:	607b      	str	r3, [r7, #4]
    while (length)
    5f02:	687b      	ldr	r3, [r7, #4]
    5f04:	2b00      	cmp	r3, #0
    5f06:	d1bb      	bne.n	5e80 <_serial_int_rx+0x40>
    }

    return size - length;
    5f08:	69fa      	ldr	r2, [r7, #28]
    5f0a:	687b      	ldr	r3, [r7, #4]
    5f0c:	1ad3      	subs	r3, r2, r3
}
    5f0e:	0018      	movs	r0, r3
    5f10:	46bd      	mov	sp, r7
    5f12:	b008      	add	sp, #32
    5f14:	bd80      	pop	{r7, pc}
    5f16:	46c0      	nop			; (mov r8, r8)
    5f18:	0000cd40 	.word	0x0000cd40
    5f1c:	0000cb24 	.word	0x0000cb24
    5f20:	0000cb38 	.word	0x0000cb38

00005f24 <_serial_int_tx>:

rt_inline int _serial_int_tx(struct rt_serial_device *serial, const rt_uint8_t *data, int length)
{
    5f24:	b580      	push	{r7, lr}
    5f26:	b086      	sub	sp, #24
    5f28:	af00      	add	r7, sp, #0
    5f2a:	60f8      	str	r0, [r7, #12]
    5f2c:	60b9      	str	r1, [r7, #8]
    5f2e:	607a      	str	r2, [r7, #4]
    int size;
    struct rt_serial_tx_fifo *tx;

    RT_ASSERT(serial != RT_NULL);
    5f30:	68fb      	ldr	r3, [r7, #12]
    5f32:	2b00      	cmp	r3, #0
    5f34:	d106      	bne.n	5f44 <_serial_int_tx+0x20>
    5f36:	23a0      	movs	r3, #160	; 0xa0
    5f38:	005a      	lsls	r2, r3, #1
    5f3a:	492a      	ldr	r1, [pc, #168]	; (5fe4 <_serial_int_tx+0xc0>)
    5f3c:	4b2a      	ldr	r3, [pc, #168]	; (5fe8 <_serial_int_tx+0xc4>)
    5f3e:	0018      	movs	r0, r3
    5f40:	f7fe f846 	bl	3fd0 <rt_assert_handler>

    size = length;
    5f44:	687b      	ldr	r3, [r7, #4]
    5f46:	617b      	str	r3, [r7, #20]
    tx = (struct rt_serial_tx_fifo*) serial->serial_tx;
    5f48:	68fb      	ldr	r3, [r7, #12]
    5f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    5f4c:	613b      	str	r3, [r7, #16]
    RT_ASSERT(tx != RT_NULL);
    5f4e:	693b      	ldr	r3, [r7, #16]
    5f50:	2b00      	cmp	r3, #0
    5f52:	d13c      	bne.n	5fce <_serial_int_tx+0xaa>
    5f54:	23a2      	movs	r3, #162	; 0xa2
    5f56:	005a      	lsls	r2, r3, #1
    5f58:	4922      	ldr	r1, [pc, #136]	; (5fe4 <_serial_int_tx+0xc0>)
    5f5a:	4b24      	ldr	r3, [pc, #144]	; (5fec <_serial_int_tx+0xc8>)
    5f5c:	0018      	movs	r0, r3
    5f5e:	f7fe f837 	bl	3fd0 <rt_assert_handler>

    while (length)
    5f62:	e034      	b.n	5fce <_serial_int_tx+0xaa>
    {
        /*
         * to be polite with serial console add a line feed
         * to the carriage return character
         */
        if (*data == '\n' && (serial->parent.open_flag & RT_DEVICE_FLAG_STREAM))
    5f64:	68bb      	ldr	r3, [r7, #8]
    5f66:	781b      	ldrb	r3, [r3, #0]
    5f68:	2b0a      	cmp	r3, #10
    5f6a:	d117      	bne.n	5f9c <_serial_int_tx+0x78>
    5f6c:	68fb      	ldr	r3, [r7, #12]
    5f6e:	8b1b      	ldrh	r3, [r3, #24]
    5f70:	001a      	movs	r2, r3
    5f72:	2340      	movs	r3, #64	; 0x40
    5f74:	4013      	ands	r3, r2
    5f76:	d011      	beq.n	5f9c <_serial_int_tx+0x78>
        {
            if (serial->ops->putc(serial, '\r') == -1)
    5f78:	68fb      	ldr	r3, [r7, #12]
    5f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5f7c:	689b      	ldr	r3, [r3, #8]
    5f7e:	68fa      	ldr	r2, [r7, #12]
    5f80:	210d      	movs	r1, #13
    5f82:	0010      	movs	r0, r2
    5f84:	4798      	blx	r3
    5f86:	0003      	movs	r3, r0
    5f88:	3301      	adds	r3, #1
    5f8a:	d107      	bne.n	5f9c <_serial_int_tx+0x78>
            {
                rt_completion_wait(&(tx->completion), RT_WAITING_FOREVER);
    5f8c:	693b      	ldr	r3, [r7, #16]
    5f8e:	2201      	movs	r2, #1
    5f90:	4252      	negs	r2, r2
    5f92:	0011      	movs	r1, r2
    5f94:	0018      	movs	r0, r3
    5f96:	f7ff fe11 	bl	5bbc <rt_completion_wait>
                continue;
    5f9a:	e018      	b.n	5fce <_serial_int_tx+0xaa>
            }
        }

        if (serial->ops->putc(serial, *(char*)data) == -1)
    5f9c:	68fb      	ldr	r3, [r7, #12]
    5f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5fa0:	689b      	ldr	r3, [r3, #8]
    5fa2:	68ba      	ldr	r2, [r7, #8]
    5fa4:	7811      	ldrb	r1, [r2, #0]
    5fa6:	68fa      	ldr	r2, [r7, #12]
    5fa8:	0010      	movs	r0, r2
    5faa:	4798      	blx	r3
    5fac:	0003      	movs	r3, r0
    5fae:	3301      	adds	r3, #1
    5fb0:	d107      	bne.n	5fc2 <_serial_int_tx+0x9e>
        {
            rt_completion_wait(&(tx->completion), RT_WAITING_FOREVER);
    5fb2:	693b      	ldr	r3, [r7, #16]
    5fb4:	2201      	movs	r2, #1
    5fb6:	4252      	negs	r2, r2
    5fb8:	0011      	movs	r1, r2
    5fba:	0018      	movs	r0, r3
    5fbc:	f7ff fdfe 	bl	5bbc <rt_completion_wait>
            continue;
    5fc0:	e005      	b.n	5fce <_serial_int_tx+0xaa>
        }

        data ++; length --;
    5fc2:	68bb      	ldr	r3, [r7, #8]
    5fc4:	3301      	adds	r3, #1
    5fc6:	60bb      	str	r3, [r7, #8]
    5fc8:	687b      	ldr	r3, [r7, #4]
    5fca:	3b01      	subs	r3, #1
    5fcc:	607b      	str	r3, [r7, #4]
    while (length)
    5fce:	687b      	ldr	r3, [r7, #4]
    5fd0:	2b00      	cmp	r3, #0
    5fd2:	d1c7      	bne.n	5f64 <_serial_int_tx+0x40>
    }

    return size - length;
    5fd4:	697a      	ldr	r2, [r7, #20]
    5fd6:	687b      	ldr	r3, [r7, #4]
    5fd8:	1ad3      	subs	r3, r2, r3
}
    5fda:	0018      	movs	r0, r3
    5fdc:	46bd      	mov	sp, r7
    5fde:	b006      	add	sp, #24
    5fe0:	bd80      	pop	{r7, pc}
    5fe2:	46c0      	nop			; (mov r8, r8)
    5fe4:	0000cd80 	.word	0x0000cd80
    5fe8:	0000cb24 	.word	0x0000cb24
    5fec:	0000cb4c 	.word	0x0000cb4c

00005ff0 <_serial_fifo_calc_recved_len>:
    }
}

#if defined(RT_USING_POSIX_STDIO) || defined(RT_SERIAL_USING_DMA)
static rt_size_t _serial_fifo_calc_recved_len(struct rt_serial_device *serial)
{
    5ff0:	b580      	push	{r7, lr}
    5ff2:	b084      	sub	sp, #16
    5ff4:	af00      	add	r7, sp, #0
    5ff6:	6078      	str	r0, [r7, #4]
    struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *) serial->serial_rx;
    5ff8:	687b      	ldr	r3, [r7, #4]
    5ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5ffc:	60fb      	str	r3, [r7, #12]

    RT_ASSERT(rx_fifo != RT_NULL);
    5ffe:	68fb      	ldr	r3, [r7, #12]
    6000:	2b00      	cmp	r3, #0
    6002:	d106      	bne.n	6012 <_serial_fifo_calc_recved_len+0x22>
    6004:	23ba      	movs	r3, #186	; 0xba
    6006:	005a      	lsls	r2, r3, #1
    6008:	491a      	ldr	r1, [pc, #104]	; (6074 <_serial_fifo_calc_recved_len+0x84>)
    600a:	4b1b      	ldr	r3, [pc, #108]	; (6078 <_serial_fifo_calc_recved_len+0x88>)
    600c:	0018      	movs	r0, r3
    600e:	f7fd ffdf 	bl	3fd0 <rt_assert_handler>

    if (rx_fifo->put_index == rx_fifo->get_index)
    6012:	68fb      	ldr	r3, [r7, #12]
    6014:	889a      	ldrh	r2, [r3, #4]
    6016:	68fb      	ldr	r3, [r7, #12]
    6018:	88db      	ldrh	r3, [r3, #6]
    601a:	429a      	cmp	r2, r3
    601c:	d10b      	bne.n	6036 <_serial_fifo_calc_recved_len+0x46>
    {
        return (rx_fifo->is_full == RT_FALSE ? 0 : serial->config.bufsz);
    601e:	68fb      	ldr	r3, [r7, #12]
    6020:	689b      	ldr	r3, [r3, #8]
    6022:	2b00      	cmp	r3, #0
    6024:	d005      	beq.n	6032 <_serial_fifo_calc_recved_len+0x42>
    6026:	687b      	ldr	r3, [r7, #4]
    6028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    602a:	019b      	lsls	r3, r3, #6
    602c:	0c1b      	lsrs	r3, r3, #16
    602e:	b29b      	uxth	r3, r3
    6030:	e01b      	b.n	606a <_serial_fifo_calc_recved_len+0x7a>
    6032:	2300      	movs	r3, #0
    6034:	e019      	b.n	606a <_serial_fifo_calc_recved_len+0x7a>
    }
    else
    {
        if (rx_fifo->put_index > rx_fifo->get_index)
    6036:	68fb      	ldr	r3, [r7, #12]
    6038:	889a      	ldrh	r2, [r3, #4]
    603a:	68fb      	ldr	r3, [r7, #12]
    603c:	88db      	ldrh	r3, [r3, #6]
    603e:	429a      	cmp	r2, r3
    6040:	d906      	bls.n	6050 <_serial_fifo_calc_recved_len+0x60>
        {
            return rx_fifo->put_index - rx_fifo->get_index;
    6042:	68fb      	ldr	r3, [r7, #12]
    6044:	889b      	ldrh	r3, [r3, #4]
    6046:	001a      	movs	r2, r3
    6048:	68fb      	ldr	r3, [r7, #12]
    604a:	88db      	ldrh	r3, [r3, #6]
    604c:	1ad3      	subs	r3, r2, r3
    604e:	e00c      	b.n	606a <_serial_fifo_calc_recved_len+0x7a>
        }
        else
        {
            return serial->config.bufsz - (rx_fifo->get_index - rx_fifo->put_index);
    6050:	687b      	ldr	r3, [r7, #4]
    6052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6054:	019b      	lsls	r3, r3, #6
    6056:	0c1b      	lsrs	r3, r3, #16
    6058:	b29b      	uxth	r3, r3
    605a:	001a      	movs	r2, r3
    605c:	68fb      	ldr	r3, [r7, #12]
    605e:	88db      	ldrh	r3, [r3, #6]
    6060:	0019      	movs	r1, r3
    6062:	68fb      	ldr	r3, [r7, #12]
    6064:	889b      	ldrh	r3, [r3, #4]
    6066:	1acb      	subs	r3, r1, r3
    6068:	1ad3      	subs	r3, r2, r3
        }
    }
}
    606a:	0018      	movs	r0, r3
    606c:	46bd      	mov	sp, r7
    606e:	b004      	add	sp, #16
    6070:	bd80      	pop	{r7, pc}
    6072:	46c0      	nop			; (mov r8, r8)
    6074:	0000ccc0 	.word	0x0000ccc0
    6078:	0000cb38 	.word	0x0000cb38

0000607c <rt_dma_calc_recved_len>:
 * @param serial serial device
 *
 * @return length
 */
static rt_size_t rt_dma_calc_recved_len(struct rt_serial_device *serial)
{
    607c:	b580      	push	{r7, lr}
    607e:	b082      	sub	sp, #8
    6080:	af00      	add	r7, sp, #0
    6082:	6078      	str	r0, [r7, #4]
    return _serial_fifo_calc_recved_len(serial);
    6084:	687b      	ldr	r3, [r7, #4]
    6086:	0018      	movs	r0, r3
    6088:	f7ff ffb2 	bl	5ff0 <_serial_fifo_calc_recved_len>
    608c:	0003      	movs	r3, r0
}
    608e:	0018      	movs	r0, r3
    6090:	46bd      	mov	sp, r7
    6092:	b002      	add	sp, #8
    6094:	bd80      	pop	{r7, pc}
	...

00006098 <rt_dma_recv_update_get_index>:
 *
 * @param serial serial device
 * @param len get data length for this operate
 */
static void rt_dma_recv_update_get_index(struct rt_serial_device *serial, rt_size_t len)
{
    6098:	b580      	push	{r7, lr}
    609a:	b084      	sub	sp, #16
    609c:	af00      	add	r7, sp, #0
    609e:	6078      	str	r0, [r7, #4]
    60a0:	6039      	str	r1, [r7, #0]
    struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *) serial->serial_rx;
    60a2:	687b      	ldr	r3, [r7, #4]
    60a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    60a6:	60fb      	str	r3, [r7, #12]

    RT_ASSERT(rx_fifo != RT_NULL);
    60a8:	68fb      	ldr	r3, [r7, #12]
    60aa:	2b00      	cmp	r3, #0
    60ac:	d107      	bne.n	60be <rt_dma_recv_update_get_index+0x26>
    60ae:	23a0      	movs	r3, #160	; 0xa0
    60b0:	33ff      	adds	r3, #255	; 0xff
    60b2:	001a      	movs	r2, r3
    60b4:	4920      	ldr	r1, [pc, #128]	; (6138 <rt_dma_recv_update_get_index+0xa0>)
    60b6:	4b21      	ldr	r3, [pc, #132]	; (613c <rt_dma_recv_update_get_index+0xa4>)
    60b8:	0018      	movs	r0, r3
    60ba:	f7fd ff89 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(len <= rt_dma_calc_recved_len(serial));
    60be:	687b      	ldr	r3, [r7, #4]
    60c0:	0018      	movs	r0, r3
    60c2:	f7ff ffdb 	bl	607c <rt_dma_calc_recved_len>
    60c6:	0002      	movs	r2, r0
    60c8:	683b      	ldr	r3, [r7, #0]
    60ca:	4293      	cmp	r3, r2
    60cc:	d906      	bls.n	60dc <rt_dma_recv_update_get_index+0x44>
    60ce:	23d0      	movs	r3, #208	; 0xd0
    60d0:	005a      	lsls	r2, r3, #1
    60d2:	4919      	ldr	r1, [pc, #100]	; (6138 <rt_dma_recv_update_get_index+0xa0>)
    60d4:	4b1a      	ldr	r3, [pc, #104]	; (6140 <rt_dma_recv_update_get_index+0xa8>)
    60d6:	0018      	movs	r0, r3
    60d8:	f7fd ff7a 	bl	3fd0 <rt_assert_handler>

    if (rx_fifo->is_full && len != 0) rx_fifo->is_full = RT_FALSE;
    60dc:	68fb      	ldr	r3, [r7, #12]
    60de:	689b      	ldr	r3, [r3, #8]
    60e0:	2b00      	cmp	r3, #0
    60e2:	d005      	beq.n	60f0 <rt_dma_recv_update_get_index+0x58>
    60e4:	683b      	ldr	r3, [r7, #0]
    60e6:	2b00      	cmp	r3, #0
    60e8:	d002      	beq.n	60f0 <rt_dma_recv_update_get_index+0x58>
    60ea:	68fb      	ldr	r3, [r7, #12]
    60ec:	2200      	movs	r2, #0
    60ee:	609a      	str	r2, [r3, #8]

    rx_fifo->get_index += len;
    60f0:	68fb      	ldr	r3, [r7, #12]
    60f2:	88da      	ldrh	r2, [r3, #6]
    60f4:	683b      	ldr	r3, [r7, #0]
    60f6:	b29b      	uxth	r3, r3
    60f8:	18d3      	adds	r3, r2, r3
    60fa:	b29a      	uxth	r2, r3
    60fc:	68fb      	ldr	r3, [r7, #12]
    60fe:	80da      	strh	r2, [r3, #6]
    if (rx_fifo->get_index >= serial->config.bufsz)
    6100:	68fb      	ldr	r3, [r7, #12]
    6102:	88da      	ldrh	r2, [r3, #6]
    6104:	687b      	ldr	r3, [r7, #4]
    6106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6108:	019b      	lsls	r3, r3, #6
    610a:	0c1b      	lsrs	r3, r3, #16
    610c:	b29b      	uxth	r3, r3
    610e:	429a      	cmp	r2, r3
    6110:	d30e      	bcc.n	6130 <rt_dma_recv_update_get_index+0x98>
    {
        rx_fifo->get_index %= serial->config.bufsz;
    6112:	68fb      	ldr	r3, [r7, #12]
    6114:	88da      	ldrh	r2, [r3, #6]
    6116:	687b      	ldr	r3, [r7, #4]
    6118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    611a:	019b      	lsls	r3, r3, #6
    611c:	0c1b      	lsrs	r3, r3, #16
    611e:	b29b      	uxth	r3, r3
    6120:	0019      	movs	r1, r3
    6122:	0010      	movs	r0, r2
    6124:	f004 ff42 	bl	afac <__aeabi_uidivmod>
    6128:	000b      	movs	r3, r1
    612a:	b29a      	uxth	r2, r3
    612c:	68fb      	ldr	r3, [r7, #12]
    612e:	80da      	strh	r2, [r3, #6]
    }
}
    6130:	46c0      	nop			; (mov r8, r8)
    6132:	46bd      	mov	sp, r7
    6134:	b004      	add	sp, #16
    6136:	bd80      	pop	{r7, pc}
    6138:	0000cce0 	.word	0x0000cce0
    613c:	0000cb38 	.word	0x0000cb38
    6140:	0000cbd0 	.word	0x0000cbd0

00006144 <_serial_dma_rx>:

/*
 * Serial DMA routines
 */
rt_inline int _serial_dma_rx(struct rt_serial_device *serial, rt_uint8_t *data, int length)
{
    6144:	b590      	push	{r4, r7, lr}
    6146:	b08b      	sub	sp, #44	; 0x2c
    6148:	af00      	add	r7, sp, #0
    614a:	60f8      	str	r0, [r7, #12]
    614c:	60b9      	str	r1, [r7, #8]
    614e:	607a      	str	r2, [r7, #4]
    rt_base_t level;

    RT_ASSERT((serial != RT_NULL) && (data != RT_NULL));
    6150:	68fb      	ldr	r3, [r7, #12]
    6152:	2b00      	cmp	r3, #0
    6154:	d002      	beq.n	615c <_serial_dma_rx+0x18>
    6156:	68bb      	ldr	r3, [r7, #8]
    6158:	2b00      	cmp	r3, #0
    615a:	d106      	bne.n	616a <_serial_dma_rx+0x26>
    615c:	23f1      	movs	r3, #241	; 0xf1
    615e:	005a      	lsls	r2, r3, #1
    6160:	495e      	ldr	r1, [pc, #376]	; (62dc <_serial_dma_rx+0x198>)
    6162:	4b5f      	ldr	r3, [pc, #380]	; (62e0 <_serial_dma_rx+0x19c>)
    6164:	0018      	movs	r0, r3
    6166:	f7fd ff33 	bl	3fd0 <rt_assert_handler>

    level = rt_hw_interrupt_disable();
    616a:	f7ff f9b1 	bl	54d0 <rt_hw_interrupt_disable>
    616e:	0003      	movs	r3, r0
    6170:	61fb      	str	r3, [r7, #28]

    if (serial->config.bufsz == 0)
    6172:	68fb      	ldr	r3, [r7, #12]
    6174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6176:	4a5b      	ldr	r2, [pc, #364]	; (62e4 <_serial_dma_rx+0x1a0>)
    6178:	4013      	ands	r3, r2
    617a:	d13d      	bne.n	61f8 <_serial_dma_rx+0xb4>
    {
        int result = RT_EOK;
    617c:	2300      	movs	r3, #0
    617e:	627b      	str	r3, [r7, #36]	; 0x24
        struct rt_serial_rx_dma *rx_dma;

        rx_dma = (struct rt_serial_rx_dma*)serial->serial_rx;
    6180:	68fb      	ldr	r3, [r7, #12]
    6182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    6184:	613b      	str	r3, [r7, #16]
        RT_ASSERT(rx_dma != RT_NULL);
    6186:	693b      	ldr	r3, [r7, #16]
    6188:	2b00      	cmp	r3, #0
    618a:	d106      	bne.n	619a <_serial_dma_rx+0x56>
    618c:	23f6      	movs	r3, #246	; 0xf6
    618e:	005a      	lsls	r2, r3, #1
    6190:	4952      	ldr	r1, [pc, #328]	; (62dc <_serial_dma_rx+0x198>)
    6192:	4b55      	ldr	r3, [pc, #340]	; (62e8 <_serial_dma_rx+0x1a4>)
    6194:	0018      	movs	r0, r3
    6196:	f7fd ff1b 	bl	3fd0 <rt_assert_handler>

        if (rx_dma->activated != RT_TRUE)
    619a:	693b      	ldr	r3, [r7, #16]
    619c:	681b      	ldr	r3, [r3, #0]
    619e:	2b01      	cmp	r3, #1
    61a0:	d018      	beq.n	61d4 <_serial_dma_rx+0x90>
        {
            rx_dma->activated = RT_TRUE;
    61a2:	693b      	ldr	r3, [r7, #16]
    61a4:	2201      	movs	r2, #1
    61a6:	601a      	str	r2, [r3, #0]
            RT_ASSERT(serial->ops->dma_transmit != RT_NULL);
    61a8:	68fb      	ldr	r3, [r7, #12]
    61aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    61ac:	691b      	ldr	r3, [r3, #16]
    61ae:	2b00      	cmp	r3, #0
    61b0:	d107      	bne.n	61c2 <_serial_dma_rx+0x7e>
    61b2:	23f2      	movs	r3, #242	; 0xf2
    61b4:	33ff      	adds	r3, #255	; 0xff
    61b6:	001a      	movs	r2, r3
    61b8:	4948      	ldr	r1, [pc, #288]	; (62dc <_serial_dma_rx+0x198>)
    61ba:	4b4c      	ldr	r3, [pc, #304]	; (62ec <_serial_dma_rx+0x1a8>)
    61bc:	0018      	movs	r0, r3
    61be:	f7fd ff07 	bl	3fd0 <rt_assert_handler>
            serial->ops->dma_transmit(serial, data, length, RT_SERIAL_DMA_RX);
    61c2:	68fb      	ldr	r3, [r7, #12]
    61c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    61c6:	691c      	ldr	r4, [r3, #16]
    61c8:	687a      	ldr	r2, [r7, #4]
    61ca:	68b9      	ldr	r1, [r7, #8]
    61cc:	68f8      	ldr	r0, [r7, #12]
    61ce:	2301      	movs	r3, #1
    61d0:	47a0      	blx	r4
    61d2:	e002      	b.n	61da <_serial_dma_rx+0x96>
        }
        else result = -RT_EBUSY;
    61d4:	2307      	movs	r3, #7
    61d6:	425b      	negs	r3, r3
    61d8:	627b      	str	r3, [r7, #36]	; 0x24
        rt_hw_interrupt_enable(level);
    61da:	69fb      	ldr	r3, [r7, #28]
    61dc:	0018      	movs	r0, r3
    61de:	f7ff f97b 	bl	54d8 <rt_hw_interrupt_enable>

        if (result == RT_EOK) return length;
    61e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    61e4:	2b00      	cmp	r3, #0
    61e6:	d101      	bne.n	61ec <_serial_dma_rx+0xa8>
    61e8:	687b      	ldr	r3, [r7, #4]
    61ea:	e072      	b.n	62d2 <_serial_dma_rx+0x18e>

        rt_set_errno(result);
    61ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    61ee:	0018      	movs	r0, r3
    61f0:	f7fc ffd2 	bl	3198 <rt_set_errno>
        return 0;
    61f4:	2300      	movs	r3, #0
    61f6:	e06c      	b.n	62d2 <_serial_dma_rx+0x18e>
    }
    else
    {
        struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *) serial->serial_rx;
    61f8:	68fb      	ldr	r3, [r7, #12]
    61fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    61fc:	61bb      	str	r3, [r7, #24]
        rt_size_t recv_len = 0, fifo_recved_len = rt_dma_calc_recved_len(serial);
    61fe:	2300      	movs	r3, #0
    6200:	623b      	str	r3, [r7, #32]
    6202:	68fb      	ldr	r3, [r7, #12]
    6204:	0018      	movs	r0, r3
    6206:	f7ff ff39 	bl	607c <rt_dma_calc_recved_len>
    620a:	0003      	movs	r3, r0
    620c:	617b      	str	r3, [r7, #20]

        RT_ASSERT(rx_fifo != RT_NULL);
    620e:	69bb      	ldr	r3, [r7, #24]
    6210:	2b00      	cmp	r3, #0
    6212:	d105      	bne.n	6220 <_serial_dma_rx+0xdc>
    6214:	4a36      	ldr	r2, [pc, #216]	; (62f0 <_serial_dma_rx+0x1ac>)
    6216:	4931      	ldr	r1, [pc, #196]	; (62dc <_serial_dma_rx+0x198>)
    6218:	4b36      	ldr	r3, [pc, #216]	; (62f4 <_serial_dma_rx+0x1b0>)
    621a:	0018      	movs	r0, r3
    621c:	f7fd fed8 	bl	3fd0 <rt_assert_handler>

        if (length < (int)fifo_recved_len)
    6220:	697b      	ldr	r3, [r7, #20]
    6222:	687a      	ldr	r2, [r7, #4]
    6224:	429a      	cmp	r2, r3
    6226:	da02      	bge.n	622e <_serial_dma_rx+0xea>
            recv_len = length;
    6228:	687b      	ldr	r3, [r7, #4]
    622a:	623b      	str	r3, [r7, #32]
    622c:	e001      	b.n	6232 <_serial_dma_rx+0xee>
        else
            recv_len = fifo_recved_len;
    622e:	697b      	ldr	r3, [r7, #20]
    6230:	623b      	str	r3, [r7, #32]

        if (rx_fifo->get_index + recv_len < serial->config.bufsz)
    6232:	69bb      	ldr	r3, [r7, #24]
    6234:	88db      	ldrh	r3, [r3, #6]
    6236:	001a      	movs	r2, r3
    6238:	6a3b      	ldr	r3, [r7, #32]
    623a:	18d2      	adds	r2, r2, r3
    623c:	68fb      	ldr	r3, [r7, #12]
    623e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6240:	019b      	lsls	r3, r3, #6
    6242:	0c1b      	lsrs	r3, r3, #16
    6244:	b29b      	uxth	r3, r3
    6246:	429a      	cmp	r2, r3
    6248:	d20a      	bcs.n	6260 <_serial_dma_rx+0x11c>
            rt_memcpy(data, rx_fifo->buffer + rx_fifo->get_index, recv_len);
    624a:	69bb      	ldr	r3, [r7, #24]
    624c:	681b      	ldr	r3, [r3, #0]
    624e:	69ba      	ldr	r2, [r7, #24]
    6250:	88d2      	ldrh	r2, [r2, #6]
    6252:	1899      	adds	r1, r3, r2
    6254:	6a3a      	ldr	r2, [r7, #32]
    6256:	68bb      	ldr	r3, [r7, #8]
    6258:	0018      	movs	r0, r3
    625a:	f7fd f816 	bl	328a <rt_memcpy>
    625e:	e02d      	b.n	62bc <_serial_dma_rx+0x178>
        else
        {
            rt_memcpy(data, rx_fifo->buffer + rx_fifo->get_index,
    6260:	69bb      	ldr	r3, [r7, #24]
    6262:	681b      	ldr	r3, [r3, #0]
    6264:	69ba      	ldr	r2, [r7, #24]
    6266:	88d2      	ldrh	r2, [r2, #6]
    6268:	1899      	adds	r1, r3, r2
                    serial->config.bufsz - rx_fifo->get_index);
    626a:	68fb      	ldr	r3, [r7, #12]
    626c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    626e:	019b      	lsls	r3, r3, #6
    6270:	0c1b      	lsrs	r3, r3, #16
    6272:	b29b      	uxth	r3, r3
    6274:	001a      	movs	r2, r3
    6276:	69bb      	ldr	r3, [r7, #24]
    6278:	88db      	ldrh	r3, [r3, #6]
    627a:	1ad3      	subs	r3, r2, r3
            rt_memcpy(data, rx_fifo->buffer + rx_fifo->get_index,
    627c:	001a      	movs	r2, r3
    627e:	68bb      	ldr	r3, [r7, #8]
    6280:	0018      	movs	r0, r3
    6282:	f7fd f802 	bl	328a <rt_memcpy>
            rt_memcpy(data + serial->config.bufsz - rx_fifo->get_index, rx_fifo->buffer,
    6286:	68fb      	ldr	r3, [r7, #12]
    6288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    628a:	019b      	lsls	r3, r3, #6
    628c:	0c1b      	lsrs	r3, r3, #16
    628e:	b29b      	uxth	r3, r3
    6290:	001a      	movs	r2, r3
    6292:	69bb      	ldr	r3, [r7, #24]
    6294:	88db      	ldrh	r3, [r3, #6]
    6296:	1ad3      	subs	r3, r2, r3
    6298:	68ba      	ldr	r2, [r7, #8]
    629a:	18d0      	adds	r0, r2, r3
    629c:	69bb      	ldr	r3, [r7, #24]
    629e:	6819      	ldr	r1, [r3, #0]
                    recv_len + rx_fifo->get_index - serial->config.bufsz);
    62a0:	69bb      	ldr	r3, [r7, #24]
    62a2:	88db      	ldrh	r3, [r3, #6]
    62a4:	001a      	movs	r2, r3
    62a6:	6a3b      	ldr	r3, [r7, #32]
    62a8:	18d2      	adds	r2, r2, r3
    62aa:	68fb      	ldr	r3, [r7, #12]
    62ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    62ae:	019b      	lsls	r3, r3, #6
    62b0:	0c1b      	lsrs	r3, r3, #16
    62b2:	b29b      	uxth	r3, r3
    62b4:	1ad3      	subs	r3, r2, r3
            rt_memcpy(data + serial->config.bufsz - rx_fifo->get_index, rx_fifo->buffer,
    62b6:	001a      	movs	r2, r3
    62b8:	f7fc ffe7 	bl	328a <rt_memcpy>
        }
        rt_dma_recv_update_get_index(serial, recv_len);
    62bc:	6a3a      	ldr	r2, [r7, #32]
    62be:	68fb      	ldr	r3, [r7, #12]
    62c0:	0011      	movs	r1, r2
    62c2:	0018      	movs	r0, r3
    62c4:	f7ff fee8 	bl	6098 <rt_dma_recv_update_get_index>
        rt_hw_interrupt_enable(level);
    62c8:	69fb      	ldr	r3, [r7, #28]
    62ca:	0018      	movs	r0, r3
    62cc:	f7ff f904 	bl	54d8 <rt_hw_interrupt_enable>
        return recv_len;
    62d0:	6a3b      	ldr	r3, [r7, #32]
    }
}
    62d2:	0018      	movs	r0, r3
    62d4:	46bd      	mov	sp, r7
    62d6:	b00b      	add	sp, #44	; 0x2c
    62d8:	bd90      	pop	{r4, r7, pc}
    62da:	46c0      	nop			; (mov r8, r8)
    62dc:	0000cd50 	.word	0x0000cd50
    62e0:	0000cbf8 	.word	0x0000cbf8
    62e4:	03fffc00 	.word	0x03fffc00
    62e8:	0000cc24 	.word	0x0000cc24
    62ec:	0000cc38 	.word	0x0000cc38
    62f0:	00000201 	.word	0x00000201
    62f4:	0000cb38 	.word	0x0000cb38

000062f8 <_serial_dma_tx>:

rt_inline int _serial_dma_tx(struct rt_serial_device *serial, const rt_uint8_t *data, int length)
{
    62f8:	b590      	push	{r4, r7, lr}
    62fa:	b089      	sub	sp, #36	; 0x24
    62fc:	af00      	add	r7, sp, #0
    62fe:	60f8      	str	r0, [r7, #12]
    6300:	60b9      	str	r1, [r7, #8]
    6302:	607a      	str	r2, [r7, #4]
    rt_base_t level;
    rt_err_t result;
    struct rt_serial_tx_dma *tx_dma;

    tx_dma = (struct rt_serial_tx_dma*)(serial->serial_tx);
    6304:	68fb      	ldr	r3, [r7, #12]
    6306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6308:	61fb      	str	r3, [r7, #28]

    result = rt_data_queue_push(&(tx_dma->data_queue), data, length, RT_WAITING_FOREVER);
    630a:	69fb      	ldr	r3, [r7, #28]
    630c:	1d18      	adds	r0, r3, #4
    630e:	687a      	ldr	r2, [r7, #4]
    6310:	2301      	movs	r3, #1
    6312:	425b      	negs	r3, r3
    6314:	68b9      	ldr	r1, [r7, #8]
    6316:	f7ff f9f7 	bl	5708 <rt_data_queue_push>
    631a:	0003      	movs	r3, r0
    631c:	61bb      	str	r3, [r7, #24]
    if (result == RT_EOK)
    631e:	69bb      	ldr	r3, [r7, #24]
    6320:	2b00      	cmp	r3, #0
    6322:	d11d      	bne.n	6360 <_serial_dma_tx+0x68>
    {
        level = rt_hw_interrupt_disable();
    6324:	f7ff f8d4 	bl	54d0 <rt_hw_interrupt_disable>
    6328:	0003      	movs	r3, r0
    632a:	617b      	str	r3, [r7, #20]
        if (tx_dma->activated != RT_TRUE)
    632c:	69fb      	ldr	r3, [r7, #28]
    632e:	681b      	ldr	r3, [r3, #0]
    6330:	2b01      	cmp	r3, #1
    6332:	d00f      	beq.n	6354 <_serial_dma_tx+0x5c>
        {
            tx_dma->activated = RT_TRUE;
    6334:	69fb      	ldr	r3, [r7, #28]
    6336:	2201      	movs	r2, #1
    6338:	601a      	str	r2, [r3, #0]
            rt_hw_interrupt_enable(level);
    633a:	697b      	ldr	r3, [r7, #20]
    633c:	0018      	movs	r0, r3
    633e:	f7ff f8cb 	bl	54d8 <rt_hw_interrupt_enable>

            /* make a DMA transfer */
            serial->ops->dma_transmit(serial, (rt_uint8_t *)data, length, RT_SERIAL_DMA_TX);
    6342:	68fb      	ldr	r3, [r7, #12]
    6344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6346:	691c      	ldr	r4, [r3, #16]
    6348:	687a      	ldr	r2, [r7, #4]
    634a:	68b9      	ldr	r1, [r7, #8]
    634c:	68f8      	ldr	r0, [r7, #12]
    634e:	2302      	movs	r3, #2
    6350:	47a0      	blx	r4
    6352:	e003      	b.n	635c <_serial_dma_tx+0x64>
        }
        else
        {
            rt_hw_interrupt_enable(level);
    6354:	697b      	ldr	r3, [r7, #20]
    6356:	0018      	movs	r0, r3
    6358:	f7ff f8be 	bl	54d8 <rt_hw_interrupt_enable>
        }

        return length;
    635c:	687b      	ldr	r3, [r7, #4]
    635e:	e004      	b.n	636a <_serial_dma_tx+0x72>
    }
    else
    {
        rt_set_errno(result);
    6360:	69bb      	ldr	r3, [r7, #24]
    6362:	0018      	movs	r0, r3
    6364:	f7fc ff18 	bl	3198 <rt_set_errno>
        return 0;
    6368:	2300      	movs	r3, #0
    }
}
    636a:	0018      	movs	r0, r3
    636c:	46bd      	mov	sp, r7
    636e:	b009      	add	sp, #36	; 0x24
    6370:	bd90      	pop	{r4, r7, pc}
	...

00006374 <rt_serial_init>:
/* RT-Thread Device Interface */
/*
 * This function initializes serial device.
 */
static rt_err_t rt_serial_init(struct rt_device *dev)
{
    6374:	b580      	push	{r7, lr}
    6376:	b084      	sub	sp, #16
    6378:	af00      	add	r7, sp, #0
    637a:	6078      	str	r0, [r7, #4]
    rt_err_t result = RT_EOK;
    637c:	2300      	movs	r3, #0
    637e:	60fb      	str	r3, [r7, #12]
    struct rt_serial_device *serial;

    RT_ASSERT(dev != RT_NULL);
    6380:	687b      	ldr	r3, [r7, #4]
    6382:	2b00      	cmp	r3, #0
    6384:	d105      	bne.n	6392 <rt_serial_init+0x1e>
    6386:	4a11      	ldr	r2, [pc, #68]	; (63cc <rt_serial_init+0x58>)
    6388:	4911      	ldr	r1, [pc, #68]	; (63d0 <rt_serial_init+0x5c>)
    638a:	4b12      	ldr	r3, [pc, #72]	; (63d4 <rt_serial_init+0x60>)
    638c:	0018      	movs	r0, r3
    638e:	f7fd fe1f 	bl	3fd0 <rt_assert_handler>
    serial = (struct rt_serial_device *)dev;
    6392:	687b      	ldr	r3, [r7, #4]
    6394:	60bb      	str	r3, [r7, #8]

    /* initialize rx/tx */
    serial->serial_rx = RT_NULL;
    6396:	68bb      	ldr	r3, [r7, #8]
    6398:	2200      	movs	r2, #0
    639a:	64da      	str	r2, [r3, #76]	; 0x4c
    serial->serial_tx = RT_NULL;
    639c:	68bb      	ldr	r3, [r7, #8]
    639e:	2200      	movs	r2, #0
    63a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* apply configuration */
    if (serial->ops->configure)
    63a2:	68bb      	ldr	r3, [r7, #8]
    63a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    63a6:	681b      	ldr	r3, [r3, #0]
    63a8:	2b00      	cmp	r3, #0
    63aa:	d00a      	beq.n	63c2 <rt_serial_init+0x4e>
        result = serial->ops->configure(serial, &serial->config);
    63ac:	68bb      	ldr	r3, [r7, #8]
    63ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    63b0:	681b      	ldr	r3, [r3, #0]
    63b2:	68ba      	ldr	r2, [r7, #8]
    63b4:	3244      	adds	r2, #68	; 0x44
    63b6:	0011      	movs	r1, r2
    63b8:	68ba      	ldr	r2, [r7, #8]
    63ba:	0010      	movs	r0, r2
    63bc:	4798      	blx	r3
    63be:	0003      	movs	r3, r0
    63c0:	60fb      	str	r3, [r7, #12]

    return result;
    63c2:	68fb      	ldr	r3, [r7, #12]
}
    63c4:	0018      	movs	r0, r3
    63c6:	46bd      	mov	sp, r7
    63c8:	b004      	add	sp, #16
    63ca:	bd80      	pop	{r7, pc}
    63cc:	00000243 	.word	0x00000243
    63d0:	0000cd00 	.word	0x0000cd00
    63d4:	0000cc60 	.word	0x0000cc60

000063d8 <rt_serial_open>:

static rt_err_t rt_serial_open(struct rt_device *dev, rt_uint16_t oflag)
{
    63d8:	b580      	push	{r7, lr}
    63da:	b08a      	sub	sp, #40	; 0x28
    63dc:	af00      	add	r7, sp, #0
    63de:	6078      	str	r0, [r7, #4]
    63e0:	000a      	movs	r2, r1
    63e2:	1cbb      	adds	r3, r7, #2
    63e4:	801a      	strh	r2, [r3, #0]
    rt_uint16_t stream_flag = 0;
    63e6:	2326      	movs	r3, #38	; 0x26
    63e8:	18fb      	adds	r3, r7, r3
    63ea:	2200      	movs	r2, #0
    63ec:	801a      	strh	r2, [r3, #0]
    struct rt_serial_device *serial;

    RT_ASSERT(dev != RT_NULL);
    63ee:	687b      	ldr	r3, [r7, #4]
    63f0:	2b00      	cmp	r3, #0
    63f2:	d105      	bne.n	6400 <rt_serial_open+0x28>
    63f4:	4aca      	ldr	r2, [pc, #808]	; (6720 <rt_serial_open+0x348>)
    63f6:	49cb      	ldr	r1, [pc, #812]	; (6724 <rt_serial_open+0x34c>)
    63f8:	4bcb      	ldr	r3, [pc, #812]	; (6728 <rt_serial_open+0x350>)
    63fa:	0018      	movs	r0, r3
    63fc:	f7fd fde8 	bl	3fd0 <rt_assert_handler>
    serial = (struct rt_serial_device *)dev;
    6400:	687b      	ldr	r3, [r7, #4]
    6402:	623b      	str	r3, [r7, #32]

    LOG_D("open serial device: 0x%08x with open flag: 0x%04x",
        dev, oflag);
    /* check device flag with the open flag */
    if ((oflag & RT_DEVICE_FLAG_DMA_RX) && !(dev->flag & RT_DEVICE_FLAG_DMA_RX))
    6404:	1cbb      	adds	r3, r7, #2
    6406:	881a      	ldrh	r2, [r3, #0]
    6408:	2380      	movs	r3, #128	; 0x80
    640a:	009b      	lsls	r3, r3, #2
    640c:	4013      	ands	r3, r2
    640e:	d009      	beq.n	6424 <rt_serial_open+0x4c>
    6410:	687b      	ldr	r3, [r7, #4]
    6412:	8adb      	ldrh	r3, [r3, #22]
    6414:	001a      	movs	r2, r3
    6416:	2380      	movs	r3, #128	; 0x80
    6418:	009b      	lsls	r3, r3, #2
    641a:	4013      	ands	r3, r2
    641c:	d102      	bne.n	6424 <rt_serial_open+0x4c>
        return -RT_EIO;
    641e:	2308      	movs	r3, #8
    6420:	425b      	negs	r3, r3
    6422:	e1ba      	b.n	679a <rt_serial_open+0x3c2>
    if ((oflag & RT_DEVICE_FLAG_DMA_TX) && !(dev->flag & RT_DEVICE_FLAG_DMA_TX))
    6424:	1cbb      	adds	r3, r7, #2
    6426:	881a      	ldrh	r2, [r3, #0]
    6428:	2380      	movs	r3, #128	; 0x80
    642a:	011b      	lsls	r3, r3, #4
    642c:	4013      	ands	r3, r2
    642e:	d009      	beq.n	6444 <rt_serial_open+0x6c>
    6430:	687b      	ldr	r3, [r7, #4]
    6432:	8adb      	ldrh	r3, [r3, #22]
    6434:	001a      	movs	r2, r3
    6436:	2380      	movs	r3, #128	; 0x80
    6438:	011b      	lsls	r3, r3, #4
    643a:	4013      	ands	r3, r2
    643c:	d102      	bne.n	6444 <rt_serial_open+0x6c>
        return -RT_EIO;
    643e:	2308      	movs	r3, #8
    6440:	425b      	negs	r3, r3
    6442:	e1aa      	b.n	679a <rt_serial_open+0x3c2>
    if ((oflag & RT_DEVICE_FLAG_INT_RX) && !(dev->flag & RT_DEVICE_FLAG_INT_RX))
    6444:	1cbb      	adds	r3, r7, #2
    6446:	881a      	ldrh	r2, [r3, #0]
    6448:	2380      	movs	r3, #128	; 0x80
    644a:	005b      	lsls	r3, r3, #1
    644c:	4013      	ands	r3, r2
    644e:	d009      	beq.n	6464 <rt_serial_open+0x8c>
    6450:	687b      	ldr	r3, [r7, #4]
    6452:	8adb      	ldrh	r3, [r3, #22]
    6454:	001a      	movs	r2, r3
    6456:	2380      	movs	r3, #128	; 0x80
    6458:	005b      	lsls	r3, r3, #1
    645a:	4013      	ands	r3, r2
    645c:	d102      	bne.n	6464 <rt_serial_open+0x8c>
        return -RT_EIO;
    645e:	2308      	movs	r3, #8
    6460:	425b      	negs	r3, r3
    6462:	e19a      	b.n	679a <rt_serial_open+0x3c2>
    if ((oflag & RT_DEVICE_FLAG_INT_TX) && !(dev->flag & RT_DEVICE_FLAG_INT_TX))
    6464:	1cbb      	adds	r3, r7, #2
    6466:	881a      	ldrh	r2, [r3, #0]
    6468:	2380      	movs	r3, #128	; 0x80
    646a:	00db      	lsls	r3, r3, #3
    646c:	4013      	ands	r3, r2
    646e:	d009      	beq.n	6484 <rt_serial_open+0xac>
    6470:	687b      	ldr	r3, [r7, #4]
    6472:	8adb      	ldrh	r3, [r3, #22]
    6474:	001a      	movs	r2, r3
    6476:	2380      	movs	r3, #128	; 0x80
    6478:	00db      	lsls	r3, r3, #3
    647a:	4013      	ands	r3, r2
    647c:	d102      	bne.n	6484 <rt_serial_open+0xac>
        return -RT_EIO;
    647e:	2308      	movs	r3, #8
    6480:	425b      	negs	r3, r3
    6482:	e18a      	b.n	679a <rt_serial_open+0x3c2>

    /* keep steam flag */
    if ((oflag & RT_DEVICE_FLAG_STREAM) || (dev->open_flag & RT_DEVICE_FLAG_STREAM))
    6484:	1cbb      	adds	r3, r7, #2
    6486:	881b      	ldrh	r3, [r3, #0]
    6488:	2240      	movs	r2, #64	; 0x40
    648a:	4013      	ands	r3, r2
    648c:	d105      	bne.n	649a <rt_serial_open+0xc2>
    648e:	687b      	ldr	r3, [r7, #4]
    6490:	8b1b      	ldrh	r3, [r3, #24]
    6492:	001a      	movs	r2, r3
    6494:	2340      	movs	r3, #64	; 0x40
    6496:	4013      	ands	r3, r2
    6498:	d003      	beq.n	64a2 <rt_serial_open+0xca>
        stream_flag = RT_DEVICE_FLAG_STREAM;
    649a:	2326      	movs	r3, #38	; 0x26
    649c:	18fb      	adds	r3, r7, r3
    649e:	2240      	movs	r2, #64	; 0x40
    64a0:	801a      	strh	r2, [r3, #0]

    /* get open flags */
    dev->open_flag = oflag & 0xff;
    64a2:	1cbb      	adds	r3, r7, #2
    64a4:	881b      	ldrh	r3, [r3, #0]
    64a6:	22ff      	movs	r2, #255	; 0xff
    64a8:	4013      	ands	r3, r2
    64aa:	b29a      	uxth	r2, r3
    64ac:	687b      	ldr	r3, [r7, #4]
    64ae:	831a      	strh	r2, [r3, #24]

    /* initialize the Rx/Tx structure according to open flag */
    if (serial->serial_rx == RT_NULL)
    64b0:	6a3b      	ldr	r3, [r7, #32]
    64b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    64b4:	2b00      	cmp	r3, #0
    64b6:	d000      	beq.n	64ba <rt_serial_open+0xe2>
    64b8:	e0ac      	b.n	6614 <rt_serial_open+0x23c>
    {
        if (oflag & RT_DEVICE_FLAG_INT_RX)
    64ba:	1cbb      	adds	r3, r7, #2
    64bc:	881a      	ldrh	r2, [r3, #0]
    64be:	2380      	movs	r3, #128	; 0x80
    64c0:	005b      	lsls	r3, r3, #1
    64c2:	4013      	ands	r3, r2
    64c4:	d040      	beq.n	6548 <rt_serial_open+0x170>
        {
            struct rt_serial_rx_fifo* rx_fifo;

            rx_fifo = (struct rt_serial_rx_fifo*) rt_malloc (sizeof(struct rt_serial_rx_fifo) +
                serial->config.bufsz);
    64c6:	6a3b      	ldr	r3, [r7, #32]
    64c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    64ca:	019b      	lsls	r3, r3, #6
    64cc:	0c1b      	lsrs	r3, r3, #16
    64ce:	b29b      	uxth	r3, r3
            rx_fifo = (struct rt_serial_rx_fifo*) rt_malloc (sizeof(struct rt_serial_rx_fifo) +
    64d0:	330c      	adds	r3, #12
    64d2:	0018      	movs	r0, r3
    64d4:	f7fd fca6 	bl	3e24 <rt_malloc>
    64d8:	0003      	movs	r3, r0
    64da:	617b      	str	r3, [r7, #20]
            RT_ASSERT(rx_fifo != RT_NULL);
    64dc:	697b      	ldr	r3, [r7, #20]
    64de:	2b00      	cmp	r3, #0
    64e0:	d105      	bne.n	64ee <rt_serial_open+0x116>
    64e2:	4a92      	ldr	r2, [pc, #584]	; (672c <rt_serial_open+0x354>)
    64e4:	498f      	ldr	r1, [pc, #572]	; (6724 <rt_serial_open+0x34c>)
    64e6:	4b92      	ldr	r3, [pc, #584]	; (6730 <rt_serial_open+0x358>)
    64e8:	0018      	movs	r0, r3
    64ea:	f7fd fd71 	bl	3fd0 <rt_assert_handler>
            rx_fifo->buffer = (rt_uint8_t*) (rx_fifo + 1);
    64ee:	697b      	ldr	r3, [r7, #20]
    64f0:	330c      	adds	r3, #12
    64f2:	001a      	movs	r2, r3
    64f4:	697b      	ldr	r3, [r7, #20]
    64f6:	601a      	str	r2, [r3, #0]
            rt_memset(rx_fifo->buffer, 0, serial->config.bufsz);
    64f8:	697b      	ldr	r3, [r7, #20]
    64fa:	6818      	ldr	r0, [r3, #0]
    64fc:	6a3b      	ldr	r3, [r7, #32]
    64fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6500:	019b      	lsls	r3, r3, #6
    6502:	0c1b      	lsrs	r3, r3, #16
    6504:	b29b      	uxth	r3, r3
    6506:	001a      	movs	r2, r3
    6508:	2100      	movs	r1, #0
    650a:	f7fc fe65 	bl	31d8 <rt_memset>
            rx_fifo->put_index = 0;
    650e:	697b      	ldr	r3, [r7, #20]
    6510:	2200      	movs	r2, #0
    6512:	809a      	strh	r2, [r3, #4]
            rx_fifo->get_index = 0;
    6514:	697b      	ldr	r3, [r7, #20]
    6516:	2200      	movs	r2, #0
    6518:	80da      	strh	r2, [r3, #6]
            rx_fifo->is_full = RT_FALSE;
    651a:	697b      	ldr	r3, [r7, #20]
    651c:	2200      	movs	r2, #0
    651e:	609a      	str	r2, [r3, #8]

            serial->serial_rx = rx_fifo;
    6520:	6a3b      	ldr	r3, [r7, #32]
    6522:	697a      	ldr	r2, [r7, #20]
    6524:	64da      	str	r2, [r3, #76]	; 0x4c
            dev->open_flag |= RT_DEVICE_FLAG_INT_RX;
    6526:	687b      	ldr	r3, [r7, #4]
    6528:	8b1b      	ldrh	r3, [r3, #24]
    652a:	2280      	movs	r2, #128	; 0x80
    652c:	0052      	lsls	r2, r2, #1
    652e:	4313      	orrs	r3, r2
    6530:	b29a      	uxth	r2, r3
    6532:	687b      	ldr	r3, [r7, #4]
    6534:	831a      	strh	r2, [r3, #24]
            /* configure low level device */
            serial->ops->control(serial, RT_DEVICE_CTRL_SET_INT, (void *)RT_DEVICE_FLAG_INT_RX);
    6536:	6a3b      	ldr	r3, [r7, #32]
    6538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    653a:	685b      	ldr	r3, [r3, #4]
    653c:	2280      	movs	r2, #128	; 0x80
    653e:	0052      	lsls	r2, r2, #1
    6540:	6a38      	ldr	r0, [r7, #32]
    6542:	2110      	movs	r1, #16
    6544:	4798      	blx	r3
    6546:	e082      	b.n	664e <rt_serial_open+0x276>
        }
#ifdef RT_SERIAL_USING_DMA
        else if (oflag & RT_DEVICE_FLAG_DMA_RX)
    6548:	1cbb      	adds	r3, r7, #2
    654a:	881a      	ldrh	r2, [r3, #0]
    654c:	2380      	movs	r3, #128	; 0x80
    654e:	009b      	lsls	r3, r3, #2
    6550:	4013      	ands	r3, r2
    6552:	d05b      	beq.n	660c <rt_serial_open+0x234>
        {
            if (serial->config.bufsz == 0) {
    6554:	6a3b      	ldr	r3, [r7, #32]
    6556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6558:	4a76      	ldr	r2, [pc, #472]	; (6734 <rt_serial_open+0x35c>)
    655a:	4013      	ands	r3, r2
    655c:	d115      	bne.n	658a <rt_serial_open+0x1b2>
                struct rt_serial_rx_dma* rx_dma;

                rx_dma = (struct rt_serial_rx_dma*) rt_malloc (sizeof(struct rt_serial_rx_dma));
    655e:	2004      	movs	r0, #4
    6560:	f7fd fc60 	bl	3e24 <rt_malloc>
    6564:	0003      	movs	r3, r0
    6566:	61bb      	str	r3, [r7, #24]
                RT_ASSERT(rx_dma != RT_NULL);
    6568:	69bb      	ldr	r3, [r7, #24]
    656a:	2b00      	cmp	r3, #0
    656c:	d106      	bne.n	657c <rt_serial_open+0x1a4>
    656e:	23a2      	movs	r3, #162	; 0xa2
    6570:	009a      	lsls	r2, r3, #2
    6572:	496c      	ldr	r1, [pc, #432]	; (6724 <rt_serial_open+0x34c>)
    6574:	4b70      	ldr	r3, [pc, #448]	; (6738 <rt_serial_open+0x360>)
    6576:	0018      	movs	r0, r3
    6578:	f7fd fd2a 	bl	3fd0 <rt_assert_handler>
                rx_dma->activated = RT_FALSE;
    657c:	69bb      	ldr	r3, [r7, #24]
    657e:	2200      	movs	r2, #0
    6580:	601a      	str	r2, [r3, #0]

                serial->serial_rx = rx_dma;
    6582:	6a3b      	ldr	r3, [r7, #32]
    6584:	69ba      	ldr	r2, [r7, #24]
    6586:	64da      	str	r2, [r3, #76]	; 0x4c
    6588:	e037      	b.n	65fa <rt_serial_open+0x222>
            } else {
                struct rt_serial_rx_fifo* rx_fifo;

                rx_fifo = (struct rt_serial_rx_fifo*) rt_malloc (sizeof(struct rt_serial_rx_fifo) +
                    serial->config.bufsz);
    658a:	6a3b      	ldr	r3, [r7, #32]
    658c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    658e:	019b      	lsls	r3, r3, #6
    6590:	0c1b      	lsrs	r3, r3, #16
    6592:	b29b      	uxth	r3, r3
                rx_fifo = (struct rt_serial_rx_fifo*) rt_malloc (sizeof(struct rt_serial_rx_fifo) +
    6594:	330c      	adds	r3, #12
    6596:	0018      	movs	r0, r3
    6598:	f7fd fc44 	bl	3e24 <rt_malloc>
    659c:	0003      	movs	r3, r0
    659e:	61fb      	str	r3, [r7, #28]
                RT_ASSERT(rx_fifo != RT_NULL);
    65a0:	69fb      	ldr	r3, [r7, #28]
    65a2:	2b00      	cmp	r3, #0
    65a4:	d105      	bne.n	65b2 <rt_serial_open+0x1da>
    65a6:	4a65      	ldr	r2, [pc, #404]	; (673c <rt_serial_open+0x364>)
    65a8:	495e      	ldr	r1, [pc, #376]	; (6724 <rt_serial_open+0x34c>)
    65aa:	4b61      	ldr	r3, [pc, #388]	; (6730 <rt_serial_open+0x358>)
    65ac:	0018      	movs	r0, r3
    65ae:	f7fd fd0f 	bl	3fd0 <rt_assert_handler>
                rx_fifo->buffer = (rt_uint8_t*) (rx_fifo + 1);
    65b2:	69fb      	ldr	r3, [r7, #28]
    65b4:	330c      	adds	r3, #12
    65b6:	001a      	movs	r2, r3
    65b8:	69fb      	ldr	r3, [r7, #28]
    65ba:	601a      	str	r2, [r3, #0]
                rt_memset(rx_fifo->buffer, 0, serial->config.bufsz);
    65bc:	69fb      	ldr	r3, [r7, #28]
    65be:	6818      	ldr	r0, [r3, #0]
    65c0:	6a3b      	ldr	r3, [r7, #32]
    65c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    65c4:	019b      	lsls	r3, r3, #6
    65c6:	0c1b      	lsrs	r3, r3, #16
    65c8:	b29b      	uxth	r3, r3
    65ca:	001a      	movs	r2, r3
    65cc:	2100      	movs	r1, #0
    65ce:	f7fc fe03 	bl	31d8 <rt_memset>
                rx_fifo->put_index = 0;
    65d2:	69fb      	ldr	r3, [r7, #28]
    65d4:	2200      	movs	r2, #0
    65d6:	809a      	strh	r2, [r3, #4]
                rx_fifo->get_index = 0;
    65d8:	69fb      	ldr	r3, [r7, #28]
    65da:	2200      	movs	r2, #0
    65dc:	80da      	strh	r2, [r3, #6]
                rx_fifo->is_full = RT_FALSE;
    65de:	69fb      	ldr	r3, [r7, #28]
    65e0:	2200      	movs	r2, #0
    65e2:	609a      	str	r2, [r3, #8]
                serial->serial_rx = rx_fifo;
    65e4:	6a3b      	ldr	r3, [r7, #32]
    65e6:	69fa      	ldr	r2, [r7, #28]
    65e8:	64da      	str	r2, [r3, #76]	; 0x4c
                /* configure fifo address and length to low level device */
                serial->ops->control(serial, RT_DEVICE_CTRL_CONFIG, (void *) RT_DEVICE_FLAG_DMA_RX);
    65ea:	6a3b      	ldr	r3, [r7, #32]
    65ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    65ee:	685b      	ldr	r3, [r3, #4]
    65f0:	2280      	movs	r2, #128	; 0x80
    65f2:	0092      	lsls	r2, r2, #2
    65f4:	6a38      	ldr	r0, [r7, #32]
    65f6:	2103      	movs	r1, #3
    65f8:	4798      	blx	r3
            }
            dev->open_flag |= RT_DEVICE_FLAG_DMA_RX;
    65fa:	687b      	ldr	r3, [r7, #4]
    65fc:	8b1b      	ldrh	r3, [r3, #24]
    65fe:	2280      	movs	r2, #128	; 0x80
    6600:	0092      	lsls	r2, r2, #2
    6602:	4313      	orrs	r3, r2
    6604:	b29a      	uxth	r2, r3
    6606:	687b      	ldr	r3, [r7, #4]
    6608:	831a      	strh	r2, [r3, #24]
    660a:	e020      	b.n	664e <rt_serial_open+0x276>
        }
#endif /* RT_SERIAL_USING_DMA */
        else
        {
            serial->serial_rx = RT_NULL;
    660c:	6a3b      	ldr	r3, [r7, #32]
    660e:	2200      	movs	r2, #0
    6610:	64da      	str	r2, [r3, #76]	; 0x4c
    6612:	e01c      	b.n	664e <rt_serial_open+0x276>
        }
    }
    else
    {
        if (oflag & RT_DEVICE_FLAG_INT_RX)
    6614:	1cbb      	adds	r3, r7, #2
    6616:	881a      	ldrh	r2, [r3, #0]
    6618:	2380      	movs	r3, #128	; 0x80
    661a:	005b      	lsls	r3, r3, #1
    661c:	4013      	ands	r3, r2
    661e:	d008      	beq.n	6632 <rt_serial_open+0x25a>
            dev->open_flag |= RT_DEVICE_FLAG_INT_RX;
    6620:	687b      	ldr	r3, [r7, #4]
    6622:	8b1b      	ldrh	r3, [r3, #24]
    6624:	2280      	movs	r2, #128	; 0x80
    6626:	0052      	lsls	r2, r2, #1
    6628:	4313      	orrs	r3, r2
    662a:	b29a      	uxth	r2, r3
    662c:	687b      	ldr	r3, [r7, #4]
    662e:	831a      	strh	r2, [r3, #24]
    6630:	e00d      	b.n	664e <rt_serial_open+0x276>
#ifdef RT_SERIAL_USING_DMA
        else if (oflag & RT_DEVICE_FLAG_DMA_RX)
    6632:	1cbb      	adds	r3, r7, #2
    6634:	881a      	ldrh	r2, [r3, #0]
    6636:	2380      	movs	r3, #128	; 0x80
    6638:	009b      	lsls	r3, r3, #2
    663a:	4013      	ands	r3, r2
    663c:	d007      	beq.n	664e <rt_serial_open+0x276>
            dev->open_flag |= RT_DEVICE_FLAG_DMA_RX;
    663e:	687b      	ldr	r3, [r7, #4]
    6640:	8b1b      	ldrh	r3, [r3, #24]
    6642:	2280      	movs	r2, #128	; 0x80
    6644:	0092      	lsls	r2, r2, #2
    6646:	4313      	orrs	r3, r2
    6648:	b29a      	uxth	r2, r3
    664a:	687b      	ldr	r3, [r7, #4]
    664c:	831a      	strh	r2, [r3, #24]
#endif /* RT_SERIAL_USING_DMA */
    }

    if (serial->serial_tx == RT_NULL)
    664e:	6a3b      	ldr	r3, [r7, #32]
    6650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6652:	2b00      	cmp	r3, #0
    6654:	d000      	beq.n	6658 <rt_serial_open+0x280>
    6656:	e079      	b.n	674c <rt_serial_open+0x374>
    {
        if (oflag & RT_DEVICE_FLAG_INT_TX)
    6658:	1cbb      	adds	r3, r7, #2
    665a:	881a      	ldrh	r2, [r3, #0]
    665c:	2380      	movs	r3, #128	; 0x80
    665e:	00db      	lsls	r3, r3, #3
    6660:	4013      	ands	r3, r2
    6662:	d026      	beq.n	66b2 <rt_serial_open+0x2da>
        {
            struct rt_serial_tx_fifo *tx_fifo;

            tx_fifo = (struct rt_serial_tx_fifo*) rt_malloc(sizeof(struct rt_serial_tx_fifo));
    6664:	200c      	movs	r0, #12
    6666:	f7fd fbdd 	bl	3e24 <rt_malloc>
    666a:	0003      	movs	r3, r0
    666c:	60fb      	str	r3, [r7, #12]
            RT_ASSERT(tx_fifo != RT_NULL);
    666e:	68fb      	ldr	r3, [r7, #12]
    6670:	2b00      	cmp	r3, #0
    6672:	d106      	bne.n	6682 <rt_serial_open+0x2aa>
    6674:	23ad      	movs	r3, #173	; 0xad
    6676:	009a      	lsls	r2, r3, #2
    6678:	492a      	ldr	r1, [pc, #168]	; (6724 <rt_serial_open+0x34c>)
    667a:	4b31      	ldr	r3, [pc, #196]	; (6740 <rt_serial_open+0x368>)
    667c:	0018      	movs	r0, r3
    667e:	f7fd fca7 	bl	3fd0 <rt_assert_handler>

            rt_completion_init(&(tx_fifo->completion));
    6682:	68fb      	ldr	r3, [r7, #12]
    6684:	0018      	movs	r0, r3
    6686:	f7ff fa73 	bl	5b70 <rt_completion_init>
            serial->serial_tx = tx_fifo;
    668a:	6a3b      	ldr	r3, [r7, #32]
    668c:	68fa      	ldr	r2, [r7, #12]
    668e:	651a      	str	r2, [r3, #80]	; 0x50

            dev->open_flag |= RT_DEVICE_FLAG_INT_TX;
    6690:	687b      	ldr	r3, [r7, #4]
    6692:	8b1b      	ldrh	r3, [r3, #24]
    6694:	2280      	movs	r2, #128	; 0x80
    6696:	00d2      	lsls	r2, r2, #3
    6698:	4313      	orrs	r3, r2
    669a:	b29a      	uxth	r2, r3
    669c:	687b      	ldr	r3, [r7, #4]
    669e:	831a      	strh	r2, [r3, #24]
            /* configure low level device */
            serial->ops->control(serial, RT_DEVICE_CTRL_SET_INT, (void *)RT_DEVICE_FLAG_INT_TX);
    66a0:	6a3b      	ldr	r3, [r7, #32]
    66a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    66a4:	685b      	ldr	r3, [r3, #4]
    66a6:	2280      	movs	r2, #128	; 0x80
    66a8:	00d2      	lsls	r2, r2, #3
    66aa:	6a38      	ldr	r0, [r7, #32]
    66ac:	2110      	movs	r1, #16
    66ae:	4798      	blx	r3
    66b0:	e069      	b.n	6786 <rt_serial_open+0x3ae>
        }
#ifdef RT_SERIAL_USING_DMA
        else if (oflag & RT_DEVICE_FLAG_DMA_TX)
    66b2:	1cbb      	adds	r3, r7, #2
    66b4:	881a      	ldrh	r2, [r3, #0]
    66b6:	2380      	movs	r3, #128	; 0x80
    66b8:	011b      	lsls	r3, r3, #4
    66ba:	4013      	ands	r3, r2
    66bc:	d02b      	beq.n	6716 <rt_serial_open+0x33e>
        {
            struct rt_serial_tx_dma* tx_dma;

            tx_dma = (struct rt_serial_tx_dma*) rt_malloc (sizeof(struct rt_serial_tx_dma));
    66be:	2028      	movs	r0, #40	; 0x28
    66c0:	f7fd fbb0 	bl	3e24 <rt_malloc>
    66c4:	0003      	movs	r3, r0
    66c6:	613b      	str	r3, [r7, #16]
            RT_ASSERT(tx_dma != RT_NULL);
    66c8:	693b      	ldr	r3, [r7, #16]
    66ca:	2b00      	cmp	r3, #0
    66cc:	d105      	bne.n	66da <rt_serial_open+0x302>
    66ce:	4a1d      	ldr	r2, [pc, #116]	; (6744 <rt_serial_open+0x36c>)
    66d0:	4914      	ldr	r1, [pc, #80]	; (6724 <rt_serial_open+0x34c>)
    66d2:	4b1d      	ldr	r3, [pc, #116]	; (6748 <rt_serial_open+0x370>)
    66d4:	0018      	movs	r0, r3
    66d6:	f7fd fc7b 	bl	3fd0 <rt_assert_handler>
            tx_dma->activated = RT_FALSE;
    66da:	693b      	ldr	r3, [r7, #16]
    66dc:	2200      	movs	r2, #0
    66de:	601a      	str	r2, [r3, #0]

            rt_data_queue_init(&(tx_dma->data_queue), 8, 4, RT_NULL);
    66e0:	693b      	ldr	r3, [r7, #16]
    66e2:	1d18      	adds	r0, r3, #4
    66e4:	2300      	movs	r3, #0
    66e6:	2204      	movs	r2, #4
    66e8:	2108      	movs	r1, #8
    66ea:	f7fe ff9d 	bl	5628 <rt_data_queue_init>
            serial->serial_tx = tx_dma;
    66ee:	6a3b      	ldr	r3, [r7, #32]
    66f0:	693a      	ldr	r2, [r7, #16]
    66f2:	651a      	str	r2, [r3, #80]	; 0x50

            dev->open_flag |= RT_DEVICE_FLAG_DMA_TX;
    66f4:	687b      	ldr	r3, [r7, #4]
    66f6:	8b1b      	ldrh	r3, [r3, #24]
    66f8:	2280      	movs	r2, #128	; 0x80
    66fa:	0112      	lsls	r2, r2, #4
    66fc:	4313      	orrs	r3, r2
    66fe:	b29a      	uxth	r2, r3
    6700:	687b      	ldr	r3, [r7, #4]
    6702:	831a      	strh	r2, [r3, #24]
            /* configure low level device */
            serial->ops->control(serial, RT_DEVICE_CTRL_CONFIG, (void *)RT_DEVICE_FLAG_DMA_TX);
    6704:	6a3b      	ldr	r3, [r7, #32]
    6706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6708:	685b      	ldr	r3, [r3, #4]
    670a:	2280      	movs	r2, #128	; 0x80
    670c:	0112      	lsls	r2, r2, #4
    670e:	6a38      	ldr	r0, [r7, #32]
    6710:	2103      	movs	r1, #3
    6712:	4798      	blx	r3
    6714:	e037      	b.n	6786 <rt_serial_open+0x3ae>
        }
#endif /* RT_SERIAL_USING_DMA */
        else
        {
            serial->serial_tx = RT_NULL;
    6716:	6a3b      	ldr	r3, [r7, #32]
    6718:	2200      	movs	r2, #0
    671a:	651a      	str	r2, [r3, #80]	; 0x50
    671c:	e033      	b.n	6786 <rt_serial_open+0x3ae>
    671e:	46c0      	nop			; (mov r8, r8)
    6720:	00000256 	.word	0x00000256
    6724:	0000cd10 	.word	0x0000cd10
    6728:	0000cc60 	.word	0x0000cc60
    672c:	00000275 	.word	0x00000275
    6730:	0000cb38 	.word	0x0000cb38
    6734:	03fffc00 	.word	0x03fffc00
    6738:	0000cc24 	.word	0x0000cc24
    673c:	00000291 	.word	0x00000291
    6740:	0000cc70 	.word	0x0000cc70
    6744:	000002c3 	.word	0x000002c3
    6748:	0000cc84 	.word	0x0000cc84
        }
    }
    else
    {
        if (oflag & RT_DEVICE_FLAG_INT_TX)
    674c:	1cbb      	adds	r3, r7, #2
    674e:	881a      	ldrh	r2, [r3, #0]
    6750:	2380      	movs	r3, #128	; 0x80
    6752:	00db      	lsls	r3, r3, #3
    6754:	4013      	ands	r3, r2
    6756:	d008      	beq.n	676a <rt_serial_open+0x392>
            dev->open_flag |= RT_DEVICE_FLAG_INT_TX;
    6758:	687b      	ldr	r3, [r7, #4]
    675a:	8b1b      	ldrh	r3, [r3, #24]
    675c:	2280      	movs	r2, #128	; 0x80
    675e:	00d2      	lsls	r2, r2, #3
    6760:	4313      	orrs	r3, r2
    6762:	b29a      	uxth	r2, r3
    6764:	687b      	ldr	r3, [r7, #4]
    6766:	831a      	strh	r2, [r3, #24]
    6768:	e00d      	b.n	6786 <rt_serial_open+0x3ae>
#ifdef RT_SERIAL_USING_DMA
        else if (oflag & RT_DEVICE_FLAG_DMA_TX)
    676a:	1cbb      	adds	r3, r7, #2
    676c:	881a      	ldrh	r2, [r3, #0]
    676e:	2380      	movs	r3, #128	; 0x80
    6770:	011b      	lsls	r3, r3, #4
    6772:	4013      	ands	r3, r2
    6774:	d007      	beq.n	6786 <rt_serial_open+0x3ae>
            dev->open_flag |= RT_DEVICE_FLAG_DMA_TX;
    6776:	687b      	ldr	r3, [r7, #4]
    6778:	8b1b      	ldrh	r3, [r3, #24]
    677a:	2280      	movs	r2, #128	; 0x80
    677c:	0112      	lsls	r2, r2, #4
    677e:	4313      	orrs	r3, r2
    6780:	b29a      	uxth	r2, r3
    6782:	687b      	ldr	r3, [r7, #4]
    6784:	831a      	strh	r2, [r3, #24]
#endif /* RT_SERIAL_USING_DMA */
    }

    /* set stream flag */
    dev->open_flag |= stream_flag;
    6786:	687b      	ldr	r3, [r7, #4]
    6788:	8b1a      	ldrh	r2, [r3, #24]
    678a:	2326      	movs	r3, #38	; 0x26
    678c:	18fb      	adds	r3, r7, r3
    678e:	881b      	ldrh	r3, [r3, #0]
    6790:	4313      	orrs	r3, r2
    6792:	b29a      	uxth	r2, r3
    6794:	687b      	ldr	r3, [r7, #4]
    6796:	831a      	strh	r2, [r3, #24]

    return RT_EOK;
    6798:	2300      	movs	r3, #0
}
    679a:	0018      	movs	r0, r3
    679c:	46bd      	mov	sp, r7
    679e:	b00a      	add	sp, #40	; 0x28
    67a0:	bd80      	pop	{r7, pc}
    67a2:	46c0      	nop			; (mov r8, r8)

000067a4 <rt_serial_close>:

static rt_err_t rt_serial_close(struct rt_device *dev)
{
    67a4:	b580      	push	{r7, lr}
    67a6:	b088      	sub	sp, #32
    67a8:	af00      	add	r7, sp, #0
    67aa:	6078      	str	r0, [r7, #4]
    struct rt_serial_device *serial;

    RT_ASSERT(dev != RT_NULL);
    67ac:	687b      	ldr	r3, [r7, #4]
    67ae:	2b00      	cmp	r3, #0
    67b0:	d105      	bne.n	67be <rt_serial_close+0x1a>
    67b2:	4a71      	ldr	r2, [pc, #452]	; (6978 <rt_serial_close+0x1d4>)
    67b4:	4971      	ldr	r1, [pc, #452]	; (697c <rt_serial_close+0x1d8>)
    67b6:	4b72      	ldr	r3, [pc, #456]	; (6980 <rt_serial_close+0x1dc>)
    67b8:	0018      	movs	r0, r3
    67ba:	f7fd fc09 	bl	3fd0 <rt_assert_handler>
    serial = (struct rt_serial_device *)dev;
    67be:	687b      	ldr	r3, [r7, #4]
    67c0:	61fb      	str	r3, [r7, #28]

    /* this device has more reference count */
    if (dev->ref_count > 1) return RT_EOK;
    67c2:	687b      	ldr	r3, [r7, #4]
    67c4:	7e9b      	ldrb	r3, [r3, #26]
    67c6:	2b01      	cmp	r3, #1
    67c8:	d901      	bls.n	67ce <rt_serial_close+0x2a>
    67ca:	2300      	movs	r3, #0
    67cc:	e0d0      	b.n	6970 <rt_serial_close+0x1cc>

    if (dev->open_flag & RT_DEVICE_FLAG_INT_RX)
    67ce:	687b      	ldr	r3, [r7, #4]
    67d0:	8b1b      	ldrh	r3, [r3, #24]
    67d2:	001a      	movs	r2, r3
    67d4:	2380      	movs	r3, #128	; 0x80
    67d6:	005b      	lsls	r3, r3, #1
    67d8:	4013      	ands	r3, r2
    67da:	d022      	beq.n	6822 <rt_serial_close+0x7e>
    {
        struct rt_serial_rx_fifo* rx_fifo;

        /* configure low level device */
        serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void*)RT_DEVICE_FLAG_INT_RX);
    67dc:	69fb      	ldr	r3, [r7, #28]
    67de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    67e0:	685b      	ldr	r3, [r3, #4]
    67e2:	2280      	movs	r2, #128	; 0x80
    67e4:	0052      	lsls	r2, r2, #1
    67e6:	69f8      	ldr	r0, [r7, #28]
    67e8:	2111      	movs	r1, #17
    67ea:	4798      	blx	r3
        dev->open_flag &= ~RT_DEVICE_FLAG_INT_RX;
    67ec:	687b      	ldr	r3, [r7, #4]
    67ee:	8b1b      	ldrh	r3, [r3, #24]
    67f0:	4a64      	ldr	r2, [pc, #400]	; (6984 <rt_serial_close+0x1e0>)
    67f2:	4013      	ands	r3, r2
    67f4:	b29a      	uxth	r2, r3
    67f6:	687b      	ldr	r3, [r7, #4]
    67f8:	831a      	strh	r2, [r3, #24]

        rx_fifo = (struct rt_serial_rx_fifo*)serial->serial_rx;
    67fa:	69fb      	ldr	r3, [r7, #28]
    67fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    67fe:	613b      	str	r3, [r7, #16]
        RT_ASSERT(rx_fifo != RT_NULL);
    6800:	693b      	ldr	r3, [r7, #16]
    6802:	2b00      	cmp	r3, #0
    6804:	d105      	bne.n	6812 <rt_serial_close+0x6e>
    6806:	4a60      	ldr	r2, [pc, #384]	; (6988 <rt_serial_close+0x1e4>)
    6808:	495c      	ldr	r1, [pc, #368]	; (697c <rt_serial_close+0x1d8>)
    680a:	4b60      	ldr	r3, [pc, #384]	; (698c <rt_serial_close+0x1e8>)
    680c:	0018      	movs	r0, r3
    680e:	f7fd fbdf 	bl	3fd0 <rt_assert_handler>

        rt_free(rx_fifo);
    6812:	693b      	ldr	r3, [r7, #16]
    6814:	0018      	movs	r0, r3
    6816:	f7fd fb69 	bl	3eec <rt_free>
        serial->serial_rx = RT_NULL;
    681a:	69fb      	ldr	r3, [r7, #28]
    681c:	2200      	movs	r2, #0
    681e:	64da      	str	r2, [r3, #76]	; 0x4c
    6820:	e03f      	b.n	68a2 <rt_serial_close+0xfe>

    }
#ifdef RT_SERIAL_USING_DMA
    else if (dev->open_flag & RT_DEVICE_FLAG_DMA_RX)
    6822:	687b      	ldr	r3, [r7, #4]
    6824:	8b1b      	ldrh	r3, [r3, #24]
    6826:	001a      	movs	r2, r3
    6828:	2380      	movs	r3, #128	; 0x80
    682a:	009b      	lsls	r3, r3, #2
    682c:	4013      	ands	r3, r2
    682e:	d038      	beq.n	68a2 <rt_serial_close+0xfe>
    {
        /* configure low level device */
        serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void *) RT_DEVICE_FLAG_DMA_RX);
    6830:	69fb      	ldr	r3, [r7, #28]
    6832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6834:	685b      	ldr	r3, [r3, #4]
    6836:	2280      	movs	r2, #128	; 0x80
    6838:	0092      	lsls	r2, r2, #2
    683a:	69f8      	ldr	r0, [r7, #28]
    683c:	2111      	movs	r1, #17
    683e:	4798      	blx	r3
        dev->open_flag &= ~RT_DEVICE_FLAG_DMA_RX;
    6840:	687b      	ldr	r3, [r7, #4]
    6842:	8b1b      	ldrh	r3, [r3, #24]
    6844:	4a52      	ldr	r2, [pc, #328]	; (6990 <rt_serial_close+0x1ec>)
    6846:	4013      	ands	r3, r2
    6848:	b29a      	uxth	r2, r3
    684a:	687b      	ldr	r3, [r7, #4]
    684c:	831a      	strh	r2, [r3, #24]

        if (serial->config.bufsz == 0)
    684e:	69fb      	ldr	r3, [r7, #28]
    6850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6852:	4a50      	ldr	r2, [pc, #320]	; (6994 <rt_serial_close+0x1f0>)
    6854:	4013      	ands	r3, r2
    6856:	d111      	bne.n	687c <rt_serial_close+0xd8>
        {
            struct rt_serial_rx_dma* rx_dma;

            rx_dma = (struct rt_serial_rx_dma*)serial->serial_rx;
    6858:	69fb      	ldr	r3, [r7, #28]
    685a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    685c:	617b      	str	r3, [r7, #20]
            RT_ASSERT(rx_dma != RT_NULL);
    685e:	697b      	ldr	r3, [r7, #20]
    6860:	2b00      	cmp	r3, #0
    6862:	d106      	bne.n	6872 <rt_serial_close+0xce>
    6864:	23c2      	movs	r3, #194	; 0xc2
    6866:	009a      	lsls	r2, r3, #2
    6868:	4944      	ldr	r1, [pc, #272]	; (697c <rt_serial_close+0x1d8>)
    686a:	4b4b      	ldr	r3, [pc, #300]	; (6998 <rt_serial_close+0x1f4>)
    686c:	0018      	movs	r0, r3
    686e:	f7fd fbaf 	bl	3fd0 <rt_assert_handler>

            rt_free(rx_dma);
    6872:	697b      	ldr	r3, [r7, #20]
    6874:	0018      	movs	r0, r3
    6876:	f7fd fb39 	bl	3eec <rt_free>
    687a:	e00f      	b.n	689c <rt_serial_close+0xf8>
        }
        else
        {
            struct rt_serial_rx_fifo* rx_fifo;

            rx_fifo = (struct rt_serial_rx_fifo*)serial->serial_rx;
    687c:	69fb      	ldr	r3, [r7, #28]
    687e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    6880:	61bb      	str	r3, [r7, #24]
            RT_ASSERT(rx_fifo != RT_NULL);
    6882:	69bb      	ldr	r3, [r7, #24]
    6884:	2b00      	cmp	r3, #0
    6886:	d105      	bne.n	6894 <rt_serial_close+0xf0>
    6888:	4a44      	ldr	r2, [pc, #272]	; (699c <rt_serial_close+0x1f8>)
    688a:	493c      	ldr	r1, [pc, #240]	; (697c <rt_serial_close+0x1d8>)
    688c:	4b3f      	ldr	r3, [pc, #252]	; (698c <rt_serial_close+0x1e8>)
    688e:	0018      	movs	r0, r3
    6890:	f7fd fb9e 	bl	3fd0 <rt_assert_handler>

            rt_free(rx_fifo);
    6894:	69bb      	ldr	r3, [r7, #24]
    6896:	0018      	movs	r0, r3
    6898:	f7fd fb28 	bl	3eec <rt_free>
        }
        serial->serial_rx = RT_NULL;
    689c:	69fb      	ldr	r3, [r7, #28]
    689e:	2200      	movs	r2, #0
    68a0:	64da      	str	r2, [r3, #76]	; 0x4c

    }
#endif /* RT_SERIAL_USING_DMA */

    if (dev->open_flag & RT_DEVICE_FLAG_INT_TX)
    68a2:	687b      	ldr	r3, [r7, #4]
    68a4:	8b1b      	ldrh	r3, [r3, #24]
    68a6:	001a      	movs	r2, r3
    68a8:	2380      	movs	r3, #128	; 0x80
    68aa:	00db      	lsls	r3, r3, #3
    68ac:	4013      	ands	r3, r2
    68ae:	d022      	beq.n	68f6 <rt_serial_close+0x152>
    {
        struct rt_serial_tx_fifo* tx_fifo;

        serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void*)RT_DEVICE_FLAG_INT_TX);
    68b0:	69fb      	ldr	r3, [r7, #28]
    68b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    68b4:	685b      	ldr	r3, [r3, #4]
    68b6:	2280      	movs	r2, #128	; 0x80
    68b8:	00d2      	lsls	r2, r2, #3
    68ba:	69f8      	ldr	r0, [r7, #28]
    68bc:	2111      	movs	r1, #17
    68be:	4798      	blx	r3
        dev->open_flag &= ~RT_DEVICE_FLAG_INT_TX;
    68c0:	687b      	ldr	r3, [r7, #4]
    68c2:	8b1b      	ldrh	r3, [r3, #24]
    68c4:	4a36      	ldr	r2, [pc, #216]	; (69a0 <rt_serial_close+0x1fc>)
    68c6:	4013      	ands	r3, r2
    68c8:	b29a      	uxth	r2, r3
    68ca:	687b      	ldr	r3, [r7, #4]
    68cc:	831a      	strh	r2, [r3, #24]

        tx_fifo = (struct rt_serial_tx_fifo*)serial->serial_tx;
    68ce:	69fb      	ldr	r3, [r7, #28]
    68d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    68d2:	60bb      	str	r3, [r7, #8]
        RT_ASSERT(tx_fifo != RT_NULL);
    68d4:	68bb      	ldr	r3, [r7, #8]
    68d6:	2b00      	cmp	r3, #0
    68d8:	d105      	bne.n	68e6 <rt_serial_close+0x142>
    68da:	4a32      	ldr	r2, [pc, #200]	; (69a4 <rt_serial_close+0x200>)
    68dc:	4927      	ldr	r1, [pc, #156]	; (697c <rt_serial_close+0x1d8>)
    68de:	4b32      	ldr	r3, [pc, #200]	; (69a8 <rt_serial_close+0x204>)
    68e0:	0018      	movs	r0, r3
    68e2:	f7fd fb75 	bl	3fd0 <rt_assert_handler>

        rt_free(tx_fifo);
    68e6:	68bb      	ldr	r3, [r7, #8]
    68e8:	0018      	movs	r0, r3
    68ea:	f7fd faff 	bl	3eec <rt_free>
        serial->serial_tx = RT_NULL;
    68ee:	69fb      	ldr	r3, [r7, #28]
    68f0:	2200      	movs	r2, #0
    68f2:	651a      	str	r2, [r3, #80]	; 0x50
    68f4:	e02d      	b.n	6952 <rt_serial_close+0x1ae>

        /* configure low level device */
    }
#ifdef RT_SERIAL_USING_DMA
    else if (dev->open_flag & RT_DEVICE_FLAG_DMA_TX)
    68f6:	687b      	ldr	r3, [r7, #4]
    68f8:	8b1b      	ldrh	r3, [r3, #24]
    68fa:	001a      	movs	r2, r3
    68fc:	2380      	movs	r3, #128	; 0x80
    68fe:	011b      	lsls	r3, r3, #4
    6900:	4013      	ands	r3, r2
    6902:	d026      	beq.n	6952 <rt_serial_close+0x1ae>
    {
        struct rt_serial_tx_dma* tx_dma;

        /* configure low level device */
        serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void *) RT_DEVICE_FLAG_DMA_TX);
    6904:	69fb      	ldr	r3, [r7, #28]
    6906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6908:	685b      	ldr	r3, [r3, #4]
    690a:	2280      	movs	r2, #128	; 0x80
    690c:	0112      	lsls	r2, r2, #4
    690e:	69f8      	ldr	r0, [r7, #28]
    6910:	2111      	movs	r1, #17
    6912:	4798      	blx	r3
        dev->open_flag &= ~RT_DEVICE_FLAG_DMA_TX;
    6914:	687b      	ldr	r3, [r7, #4]
    6916:	8b1b      	ldrh	r3, [r3, #24]
    6918:	4a24      	ldr	r2, [pc, #144]	; (69ac <rt_serial_close+0x208>)
    691a:	4013      	ands	r3, r2
    691c:	b29a      	uxth	r2, r3
    691e:	687b      	ldr	r3, [r7, #4]
    6920:	831a      	strh	r2, [r3, #24]

        tx_dma = (struct rt_serial_tx_dma*)serial->serial_tx;
    6922:	69fb      	ldr	r3, [r7, #28]
    6924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6926:	60fb      	str	r3, [r7, #12]
        RT_ASSERT(tx_dma != RT_NULL);
    6928:	68fb      	ldr	r3, [r7, #12]
    692a:	2b00      	cmp	r3, #0
    692c:	d105      	bne.n	693a <rt_serial_close+0x196>
    692e:	4a20      	ldr	r2, [pc, #128]	; (69b0 <rt_serial_close+0x20c>)
    6930:	4912      	ldr	r1, [pc, #72]	; (697c <rt_serial_close+0x1d8>)
    6932:	4b20      	ldr	r3, [pc, #128]	; (69b4 <rt_serial_close+0x210>)
    6934:	0018      	movs	r0, r3
    6936:	f7fd fb4b 	bl	3fd0 <rt_assert_handler>

        rt_data_queue_deinit(&(tx_dma->data_queue));
    693a:	68fb      	ldr	r3, [r7, #12]
    693c:	3304      	adds	r3, #4
    693e:	0018      	movs	r0, r3
    6940:	f7ff f8a4 	bl	5a8c <rt_data_queue_deinit>

        rt_free(tx_dma);
    6944:	68fb      	ldr	r3, [r7, #12]
    6946:	0018      	movs	r0, r3
    6948:	f7fd fad0 	bl	3eec <rt_free>
        serial->serial_tx = RT_NULL;
    694c:	69fb      	ldr	r3, [r7, #28]
    694e:	2200      	movs	r2, #0
    6950:	651a      	str	r2, [r3, #80]	; 0x50

    }
#endif /* RT_SERIAL_USING_DMA */

    serial->ops->control(serial, RT_DEVICE_CTRL_CLOSE, RT_NULL);
    6952:	69fb      	ldr	r3, [r7, #28]
    6954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6956:	685b      	ldr	r3, [r3, #4]
    6958:	69f8      	ldr	r0, [r7, #28]
    695a:	2200      	movs	r2, #0
    695c:	2104      	movs	r1, #4
    695e:	4798      	blx	r3
    dev->flag &= ~RT_DEVICE_FLAG_ACTIVATED;
    6960:	687b      	ldr	r3, [r7, #4]
    6962:	8adb      	ldrh	r3, [r3, #22]
    6964:	2210      	movs	r2, #16
    6966:	4393      	bics	r3, r2
    6968:	b29a      	uxth	r2, r3
    696a:	687b      	ldr	r3, [r7, #4]
    696c:	82da      	strh	r2, [r3, #22]

    return RT_EOK;
    696e:	2300      	movs	r3, #0
}
    6970:	0018      	movs	r0, r3
    6972:	46bd      	mov	sp, r7
    6974:	b008      	add	sp, #32
    6976:	bd80      	pop	{r7, pc}
    6978:	000002e7 	.word	0x000002e7
    697c:	0000cd20 	.word	0x0000cd20
    6980:	0000cc60 	.word	0x0000cc60
    6984:	fffffeff 	.word	0xfffffeff
    6988:	000002f6 	.word	0x000002f6
    698c:	0000cb38 	.word	0x0000cb38
    6990:	fffffdff 	.word	0xfffffdff
    6994:	03fffc00 	.word	0x03fffc00
    6998:	0000cc24 	.word	0x0000cc24
    699c:	00000311 	.word	0x00000311
    69a0:	fffffbff 	.word	0xfffffbff
    69a4:	00000322 	.word	0x00000322
    69a8:	0000cc70 	.word	0x0000cc70
    69ac:	fffff7ff 	.word	0xfffff7ff
    69b0:	00000333 	.word	0x00000333
    69b4:	0000cc84 	.word	0x0000cc84

000069b8 <rt_serial_read>:

static rt_size_t rt_serial_read(struct rt_device *dev,
                                rt_off_t          pos,
                                void             *buffer,
                                rt_size_t         size)
{
    69b8:	b580      	push	{r7, lr}
    69ba:	b086      	sub	sp, #24
    69bc:	af00      	add	r7, sp, #0
    69be:	60f8      	str	r0, [r7, #12]
    69c0:	60b9      	str	r1, [r7, #8]
    69c2:	607a      	str	r2, [r7, #4]
    69c4:	603b      	str	r3, [r7, #0]
    struct rt_serial_device *serial;

    RT_ASSERT(dev != RT_NULL);
    69c6:	68fb      	ldr	r3, [r7, #12]
    69c8:	2b00      	cmp	r3, #0
    69ca:	d105      	bne.n	69d8 <rt_serial_read+0x20>
    69cc:	4a1a      	ldr	r2, [pc, #104]	; (6a38 <rt_serial_read+0x80>)
    69ce:	491b      	ldr	r1, [pc, #108]	; (6a3c <rt_serial_read+0x84>)
    69d0:	4b1b      	ldr	r3, [pc, #108]	; (6a40 <rt_serial_read+0x88>)
    69d2:	0018      	movs	r0, r3
    69d4:	f7fd fafc 	bl	3fd0 <rt_assert_handler>
    if (size == 0) return 0;
    69d8:	683b      	ldr	r3, [r7, #0]
    69da:	2b00      	cmp	r3, #0
    69dc:	d101      	bne.n	69e2 <rt_serial_read+0x2a>
    69de:	2300      	movs	r3, #0
    69e0:	e026      	b.n	6a30 <rt_serial_read+0x78>

    serial = (struct rt_serial_device *)dev;
    69e2:	68fb      	ldr	r3, [r7, #12]
    69e4:	617b      	str	r3, [r7, #20]

    if (dev->open_flag & RT_DEVICE_FLAG_INT_RX)
    69e6:	68fb      	ldr	r3, [r7, #12]
    69e8:	8b1b      	ldrh	r3, [r3, #24]
    69ea:	001a      	movs	r2, r3
    69ec:	2380      	movs	r3, #128	; 0x80
    69ee:	005b      	lsls	r3, r3, #1
    69f0:	4013      	ands	r3, r2
    69f2:	d007      	beq.n	6a04 <rt_serial_read+0x4c>
    {
        return _serial_int_rx(serial, (rt_uint8_t *)buffer, size);
    69f4:	683a      	ldr	r2, [r7, #0]
    69f6:	6879      	ldr	r1, [r7, #4]
    69f8:	697b      	ldr	r3, [r7, #20]
    69fa:	0018      	movs	r0, r3
    69fc:	f7ff fa20 	bl	5e40 <_serial_int_rx>
    6a00:	0003      	movs	r3, r0
    6a02:	e015      	b.n	6a30 <rt_serial_read+0x78>
    }
#ifdef RT_SERIAL_USING_DMA
    else if (dev->open_flag & RT_DEVICE_FLAG_DMA_RX)
    6a04:	68fb      	ldr	r3, [r7, #12]
    6a06:	8b1b      	ldrh	r3, [r3, #24]
    6a08:	001a      	movs	r2, r3
    6a0a:	2380      	movs	r3, #128	; 0x80
    6a0c:	009b      	lsls	r3, r3, #2
    6a0e:	4013      	ands	r3, r2
    6a10:	d007      	beq.n	6a22 <rt_serial_read+0x6a>
    {
        return _serial_dma_rx(serial, (rt_uint8_t *)buffer, size);
    6a12:	683a      	ldr	r2, [r7, #0]
    6a14:	6879      	ldr	r1, [r7, #4]
    6a16:	697b      	ldr	r3, [r7, #20]
    6a18:	0018      	movs	r0, r3
    6a1a:	f7ff fb93 	bl	6144 <_serial_dma_rx>
    6a1e:	0003      	movs	r3, r0
    6a20:	e006      	b.n	6a30 <rt_serial_read+0x78>
    }
#endif /* RT_SERIAL_USING_DMA */

    return _serial_poll_rx(serial, (rt_uint8_t *)buffer, size);
    6a22:	683a      	ldr	r2, [r7, #0]
    6a24:	6879      	ldr	r1, [r7, #4]
    6a26:	697b      	ldr	r3, [r7, #20]
    6a28:	0018      	movs	r0, r3
    6a2a:	f7ff f987 	bl	5d3c <_serial_poll_rx>
    6a2e:	0003      	movs	r3, r0
}
    6a30:	0018      	movs	r0, r3
    6a32:	46bd      	mov	sp, r7
    6a34:	b006      	add	sp, #24
    6a36:	bd80      	pop	{r7, pc}
    6a38:	0000034a 	.word	0x0000034a
    6a3c:	0000cd30 	.word	0x0000cd30
    6a40:	0000cc60 	.word	0x0000cc60

00006a44 <rt_serial_write>:

static rt_size_t rt_serial_write(struct rt_device *dev,
                                 rt_off_t          pos,
                                 const void       *buffer,
                                 rt_size_t         size)
{
    6a44:	b580      	push	{r7, lr}
    6a46:	b086      	sub	sp, #24
    6a48:	af00      	add	r7, sp, #0
    6a4a:	60f8      	str	r0, [r7, #12]
    6a4c:	60b9      	str	r1, [r7, #8]
    6a4e:	607a      	str	r2, [r7, #4]
    6a50:	603b      	str	r3, [r7, #0]
    struct rt_serial_device *serial;

    RT_ASSERT(dev != RT_NULL);
    6a52:	68fb      	ldr	r3, [r7, #12]
    6a54:	2b00      	cmp	r3, #0
    6a56:	d106      	bne.n	6a66 <rt_serial_write+0x22>
    6a58:	23d9      	movs	r3, #217	; 0xd9
    6a5a:	009a      	lsls	r2, r3, #2
    6a5c:	491a      	ldr	r1, [pc, #104]	; (6ac8 <rt_serial_write+0x84>)
    6a5e:	4b1b      	ldr	r3, [pc, #108]	; (6acc <rt_serial_write+0x88>)
    6a60:	0018      	movs	r0, r3
    6a62:	f7fd fab5 	bl	3fd0 <rt_assert_handler>
    if (size == 0) return 0;
    6a66:	683b      	ldr	r3, [r7, #0]
    6a68:	2b00      	cmp	r3, #0
    6a6a:	d101      	bne.n	6a70 <rt_serial_write+0x2c>
    6a6c:	2300      	movs	r3, #0
    6a6e:	e026      	b.n	6abe <rt_serial_write+0x7a>

    serial = (struct rt_serial_device *)dev;
    6a70:	68fb      	ldr	r3, [r7, #12]
    6a72:	617b      	str	r3, [r7, #20]

    if (dev->open_flag & RT_DEVICE_FLAG_INT_TX)
    6a74:	68fb      	ldr	r3, [r7, #12]
    6a76:	8b1b      	ldrh	r3, [r3, #24]
    6a78:	001a      	movs	r2, r3
    6a7a:	2380      	movs	r3, #128	; 0x80
    6a7c:	00db      	lsls	r3, r3, #3
    6a7e:	4013      	ands	r3, r2
    6a80:	d007      	beq.n	6a92 <rt_serial_write+0x4e>
    {
        return _serial_int_tx(serial, (const rt_uint8_t *)buffer, size);
    6a82:	683a      	ldr	r2, [r7, #0]
    6a84:	6879      	ldr	r1, [r7, #4]
    6a86:	697b      	ldr	r3, [r7, #20]
    6a88:	0018      	movs	r0, r3
    6a8a:	f7ff fa4b 	bl	5f24 <_serial_int_tx>
    6a8e:	0003      	movs	r3, r0
    6a90:	e015      	b.n	6abe <rt_serial_write+0x7a>
    }
#ifdef RT_SERIAL_USING_DMA
    else if (dev->open_flag & RT_DEVICE_FLAG_DMA_TX)
    6a92:	68fb      	ldr	r3, [r7, #12]
    6a94:	8b1b      	ldrh	r3, [r3, #24]
    6a96:	001a      	movs	r2, r3
    6a98:	2380      	movs	r3, #128	; 0x80
    6a9a:	011b      	lsls	r3, r3, #4
    6a9c:	4013      	ands	r3, r2
    6a9e:	d007      	beq.n	6ab0 <rt_serial_write+0x6c>
    {
        return _serial_dma_tx(serial, (const rt_uint8_t *)buffer, size);
    6aa0:	683a      	ldr	r2, [r7, #0]
    6aa2:	6879      	ldr	r1, [r7, #4]
    6aa4:	697b      	ldr	r3, [r7, #20]
    6aa6:	0018      	movs	r0, r3
    6aa8:	f7ff fc26 	bl	62f8 <_serial_dma_tx>
    6aac:	0003      	movs	r3, r0
    6aae:	e006      	b.n	6abe <rt_serial_write+0x7a>
    }
#endif /* RT_SERIAL_USING_DMA */
    else
    {
        return _serial_poll_tx(serial, (const rt_uint8_t *)buffer, size);
    6ab0:	683a      	ldr	r2, [r7, #0]
    6ab2:	6879      	ldr	r1, [r7, #4]
    6ab4:	697b      	ldr	r3, [r7, #20]
    6ab6:	0018      	movs	r0, r3
    6ab8:	f7ff f982 	bl	5dc0 <_serial_poll_tx>
    6abc:	0003      	movs	r3, r0
    }
}
    6abe:	0018      	movs	r0, r3
    6ac0:	46bd      	mov	sp, r7
    6ac2:	b006      	add	sp, #24
    6ac4:	bd80      	pop	{r7, pc}
    6ac6:	46c0      	nop			; (mov r8, r8)
    6ac8:	0000cd70 	.word	0x0000cd70
    6acc:	0000cc60 	.word	0x0000cc60

00006ad0 <rt_serial_control>:
#endif /* RT_USING_POSIX_TERMIOS */

static rt_err_t rt_serial_control(struct rt_device *dev,
                                  int              cmd,
                                  void             *args)
{
    6ad0:	b580      	push	{r7, lr}
    6ad2:	b088      	sub	sp, #32
    6ad4:	af00      	add	r7, sp, #0
    6ad6:	60f8      	str	r0, [r7, #12]
    6ad8:	60b9      	str	r1, [r7, #8]
    6ada:	607a      	str	r2, [r7, #4]
    rt_err_t ret = RT_EOK;
    6adc:	2300      	movs	r3, #0
    6ade:	61fb      	str	r3, [r7, #28]
    struct rt_serial_device *serial;

    RT_ASSERT(dev != RT_NULL);
    6ae0:	68fb      	ldr	r3, [r7, #12]
    6ae2:	2b00      	cmp	r3, #0
    6ae4:	d105      	bne.n	6af2 <rt_serial_control+0x22>
    6ae6:	4a2e      	ldr	r2, [pc, #184]	; (6ba0 <rt_serial_control+0xd0>)
    6ae8:	492e      	ldr	r1, [pc, #184]	; (6ba4 <rt_serial_control+0xd4>)
    6aea:	4b2f      	ldr	r3, [pc, #188]	; (6ba8 <rt_serial_control+0xd8>)
    6aec:	0018      	movs	r0, r3
    6aee:	f7fd fa6f 	bl	3fd0 <rt_assert_handler>
    serial = (struct rt_serial_device *)dev;
    6af2:	68fb      	ldr	r3, [r7, #12]
    6af4:	61bb      	str	r3, [r7, #24]

    switch (cmd)
    6af6:	68bb      	ldr	r3, [r7, #8]
    6af8:	2b03      	cmp	r3, #3
    6afa:	d018      	beq.n	6b2e <rt_serial_control+0x5e>
    6afc:	68bb      	ldr	r3, [r7, #8]
    6afe:	2b03      	cmp	r3, #3
    6b00:	dc3d      	bgt.n	6b7e <rt_serial_control+0xae>
    6b02:	68bb      	ldr	r3, [r7, #8]
    6b04:	2b01      	cmp	r3, #1
    6b06:	d00a      	beq.n	6b1e <rt_serial_control+0x4e>
    6b08:	68bb      	ldr	r3, [r7, #8]
    6b0a:	2b02      	cmp	r3, #2
    6b0c:	d137      	bne.n	6b7e <rt_serial_control+0xae>
    {
        case RT_DEVICE_CTRL_SUSPEND:
            /* suspend device */
            dev->flag |= RT_DEVICE_FLAG_SUSPENDED;
    6b0e:	68fb      	ldr	r3, [r7, #12]
    6b10:	8adb      	ldrh	r3, [r3, #22]
    6b12:	2220      	movs	r2, #32
    6b14:	4313      	orrs	r3, r2
    6b16:	b29a      	uxth	r2, r3
    6b18:	68fb      	ldr	r3, [r7, #12]
    6b1a:	82da      	strh	r2, [r3, #22]
            break;
    6b1c:	e03a      	b.n	6b94 <rt_serial_control+0xc4>

        case RT_DEVICE_CTRL_RESUME:
            /* resume device */
            dev->flag &= ~RT_DEVICE_FLAG_SUSPENDED;
    6b1e:	68fb      	ldr	r3, [r7, #12]
    6b20:	8adb      	ldrh	r3, [r3, #22]
    6b22:	2220      	movs	r2, #32
    6b24:	4393      	bics	r3, r2
    6b26:	b29a      	uxth	r2, r3
    6b28:	68fb      	ldr	r3, [r7, #12]
    6b2a:	82da      	strh	r2, [r3, #22]
            break;
    6b2c:	e032      	b.n	6b94 <rt_serial_control+0xc4>

        case RT_DEVICE_CTRL_CONFIG:
            if (args)
    6b2e:	687b      	ldr	r3, [r7, #4]
    6b30:	2b00      	cmp	r3, #0
    6b32:	d02e      	beq.n	6b92 <rt_serial_control+0xc2>
            {
                struct serial_configure *pconfig = (struct serial_configure *) args;
    6b34:	687b      	ldr	r3, [r7, #4]
    6b36:	617b      	str	r3, [r7, #20]
                if (pconfig->bufsz != serial->config.bufsz && serial->parent.ref_count)
    6b38:	697b      	ldr	r3, [r7, #20]
    6b3a:	685b      	ldr	r3, [r3, #4]
    6b3c:	019b      	lsls	r3, r3, #6
    6b3e:	0c1b      	lsrs	r3, r3, #16
    6b40:	b29a      	uxth	r2, r3
    6b42:	69bb      	ldr	r3, [r7, #24]
    6b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6b46:	019b      	lsls	r3, r3, #6
    6b48:	0c1b      	lsrs	r3, r3, #16
    6b4a:	b29b      	uxth	r3, r3
    6b4c:	429a      	cmp	r2, r3
    6b4e:	d005      	beq.n	6b5c <rt_serial_control+0x8c>
    6b50:	69bb      	ldr	r3, [r7, #24]
    6b52:	7e9b      	ldrb	r3, [r3, #26]
    6b54:	2b00      	cmp	r3, #0
    6b56:	d001      	beq.n	6b5c <rt_serial_control+0x8c>
                {
                    /*can not change buffer size*/
                    return RT_EBUSY;
    6b58:	2307      	movs	r3, #7
    6b5a:	e01c      	b.n	6b96 <rt_serial_control+0xc6>
                }
                /* set serial configure */
                serial->config = *pconfig;
    6b5c:	69bb      	ldr	r3, [r7, #24]
    6b5e:	697a      	ldr	r2, [r7, #20]
    6b60:	3344      	adds	r3, #68	; 0x44
    6b62:	ca03      	ldmia	r2!, {r0, r1}
    6b64:	c303      	stmia	r3!, {r0, r1}
                if (serial->parent.ref_count)
    6b66:	69bb      	ldr	r3, [r7, #24]
    6b68:	7e9b      	ldrb	r3, [r3, #26]
    6b6a:	2b00      	cmp	r3, #0
    6b6c:	d011      	beq.n	6b92 <rt_serial_control+0xc2>
                {
                    /* serial device has been opened, to configure it */
                    serial->ops->configure(serial, (struct serial_configure *) args);
    6b6e:	69bb      	ldr	r3, [r7, #24]
    6b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6b72:	681b      	ldr	r3, [r3, #0]
    6b74:	6879      	ldr	r1, [r7, #4]
    6b76:	69ba      	ldr	r2, [r7, #24]
    6b78:	0010      	movs	r0, r2
    6b7a:	4798      	blx	r3
                }
            }

            break;
    6b7c:	e009      	b.n	6b92 <rt_serial_control+0xc2>
            }
            break;
#endif /* RT_USING_POSIX_STDIO */
        default :
            /* control device */
            ret = serial->ops->control(serial, cmd, args);
    6b7e:	69bb      	ldr	r3, [r7, #24]
    6b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6b82:	685b      	ldr	r3, [r3, #4]
    6b84:	687a      	ldr	r2, [r7, #4]
    6b86:	68b9      	ldr	r1, [r7, #8]
    6b88:	69b8      	ldr	r0, [r7, #24]
    6b8a:	4798      	blx	r3
    6b8c:	0003      	movs	r3, r0
    6b8e:	61fb      	str	r3, [r7, #28]
            break;
    6b90:	e000      	b.n	6b94 <rt_serial_control+0xc4>
            break;
    6b92:	46c0      	nop			; (mov r8, r8)
    }

    return ret;
    6b94:	69fb      	ldr	r3, [r7, #28]
}
    6b96:	0018      	movs	r0, r3
    6b98:	46bd      	mov	sp, r7
    6b9a:	b008      	add	sp, #32
    6b9c:	bd80      	pop	{r7, pc}
    6b9e:	46c0      	nop			; (mov r8, r8)
    6ba0:	000003de 	.word	0x000003de
    6ba4:	0000cda0 	.word	0x0000cda0
    6ba8:	0000cc60 	.word	0x0000cc60

00006bac <rt_hw_serial_register>:
 */
rt_err_t rt_hw_serial_register(struct rt_serial_device *serial,
                               const char              *name,
                               rt_uint32_t              flag,
                               void                    *data)
{
    6bac:	b580      	push	{r7, lr}
    6bae:	b086      	sub	sp, #24
    6bb0:	af00      	add	r7, sp, #0
    6bb2:	60f8      	str	r0, [r7, #12]
    6bb4:	60b9      	str	r1, [r7, #8]
    6bb6:	607a      	str	r2, [r7, #4]
    6bb8:	603b      	str	r3, [r7, #0]
    rt_err_t ret;
    struct rt_device *device;
    RT_ASSERT(serial != RT_NULL);
    6bba:	68fb      	ldr	r3, [r7, #12]
    6bbc:	2b00      	cmp	r3, #0
    6bbe:	d105      	bne.n	6bcc <rt_hw_serial_register+0x20>
    6bc0:	4a19      	ldr	r2, [pc, #100]	; (6c28 <rt_hw_serial_register+0x7c>)
    6bc2:	491a      	ldr	r1, [pc, #104]	; (6c2c <rt_hw_serial_register+0x80>)
    6bc4:	4b1a      	ldr	r3, [pc, #104]	; (6c30 <rt_hw_serial_register+0x84>)
    6bc6:	0018      	movs	r0, r3
    6bc8:	f7fd fa02 	bl	3fd0 <rt_assert_handler>

    device = &(serial->parent);
    6bcc:	68fb      	ldr	r3, [r7, #12]
    6bce:	617b      	str	r3, [r7, #20]

    device->type        = RT_Device_Class_Char;
    6bd0:	697b      	ldr	r3, [r7, #20]
    6bd2:	2200      	movs	r2, #0
    6bd4:	751a      	strb	r2, [r3, #20]
    device->rx_indicate = RT_NULL;
    6bd6:	697b      	ldr	r3, [r7, #20]
    6bd8:	2200      	movs	r2, #0
    6bda:	61da      	str	r2, [r3, #28]
    device->tx_complete = RT_NULL;
    6bdc:	697b      	ldr	r3, [r7, #20]
    6bde:	2200      	movs	r2, #0
    6be0:	621a      	str	r2, [r3, #32]

#ifdef RT_USING_DEVICE_OPS
    device->ops         = &serial_ops;
#else
    device->init        = rt_serial_init;
    6be2:	697b      	ldr	r3, [r7, #20]
    6be4:	4a13      	ldr	r2, [pc, #76]	; (6c34 <rt_hw_serial_register+0x88>)
    6be6:	625a      	str	r2, [r3, #36]	; 0x24
    device->open        = rt_serial_open;
    6be8:	697b      	ldr	r3, [r7, #20]
    6bea:	4a13      	ldr	r2, [pc, #76]	; (6c38 <rt_hw_serial_register+0x8c>)
    6bec:	629a      	str	r2, [r3, #40]	; 0x28
    device->close       = rt_serial_close;
    6bee:	697b      	ldr	r3, [r7, #20]
    6bf0:	4a12      	ldr	r2, [pc, #72]	; (6c3c <rt_hw_serial_register+0x90>)
    6bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    device->read        = rt_serial_read;
    6bf4:	697b      	ldr	r3, [r7, #20]
    6bf6:	4a12      	ldr	r2, [pc, #72]	; (6c40 <rt_hw_serial_register+0x94>)
    6bf8:	631a      	str	r2, [r3, #48]	; 0x30
    device->write       = rt_serial_write;
    6bfa:	697b      	ldr	r3, [r7, #20]
    6bfc:	4a11      	ldr	r2, [pc, #68]	; (6c44 <rt_hw_serial_register+0x98>)
    6bfe:	635a      	str	r2, [r3, #52]	; 0x34
    device->control     = rt_serial_control;
    6c00:	697b      	ldr	r3, [r7, #20]
    6c02:	4a11      	ldr	r2, [pc, #68]	; (6c48 <rt_hw_serial_register+0x9c>)
    6c04:	639a      	str	r2, [r3, #56]	; 0x38
#endif
    device->user_data   = data;
    6c06:	697b      	ldr	r3, [r7, #20]
    6c08:	683a      	ldr	r2, [r7, #0]
    6c0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* register a character device */
    ret = rt_device_register(device, name, flag);
    6c0c:	687b      	ldr	r3, [r7, #4]
    6c0e:	b29a      	uxth	r2, r3
    6c10:	68b9      	ldr	r1, [r7, #8]
    6c12:	697b      	ldr	r3, [r7, #20]
    6c14:	0018      	movs	r0, r3
    6c16:	f7fb fa88 	bl	212a <rt_device_register>
    6c1a:	0003      	movs	r3, r0
    6c1c:	613b      	str	r3, [r7, #16]
#ifdef RT_USING_POSIX_STDIO
    /* set fops */
    device->fops        = &_serial_fops;
#endif

    return ret;
    6c1e:	693b      	ldr	r3, [r7, #16]
}
    6c20:	0018      	movs	r0, r3
    6c22:	46bd      	mov	sp, r7
    6c24:	b006      	add	sp, #24
    6c26:	bd80      	pop	{r7, pc}
    6c28:	000004e4 	.word	0x000004e4
    6c2c:	0000cdb4 	.word	0x0000cdb4
    6c30:	0000cb24 	.word	0x0000cb24
    6c34:	00006375 	.word	0x00006375
    6c38:	000063d9 	.word	0x000063d9
    6c3c:	000067a5 	.word	0x000067a5
    6c40:	000069b9 	.word	0x000069b9
    6c44:	00006a45 	.word	0x00006a45
    6c48:	00006ad1 	.word	0x00006ad1

00006c4c <__rt_libc_exit>:
#define DBG_TAG    "stdlib"
#define DBG_LVL    DBG_INFO
#include <rtdbg.h>

void __rt_libc_exit(int status)
{
    6c4c:	b580      	push	{r7, lr}
    6c4e:	b084      	sub	sp, #16
    6c50:	af00      	add	r7, sp, #0
    6c52:	6078      	str	r0, [r7, #4]
    rt_thread_t self = rt_thread_self();
    6c54:	f7fd ffb0 	bl	4bb8 <rt_thread_self>
    6c58:	0003      	movs	r3, r0
    6c5a:	60fb      	str	r3, [r7, #12]

    if (self != RT_NULL)
    6c5c:	68fb      	ldr	r3, [r7, #12]
    6c5e:	2b00      	cmp	r3, #0
    6c60:	d013      	beq.n	6c8a <__rt_libc_exit+0x3e>
    {
        LOG_E("thread:%s exit:%d!", self->name, status);
    6c62:	4b0c      	ldr	r3, [pc, #48]	; (6c94 <__rt_libc_exit+0x48>)
    6c64:	0018      	movs	r0, r3
    6c66:	f7fd f80d 	bl	3c84 <rt_kprintf>
    6c6a:	68f9      	ldr	r1, [r7, #12]
    6c6c:	687a      	ldr	r2, [r7, #4]
    6c6e:	4b0a      	ldr	r3, [pc, #40]	; (6c98 <__rt_libc_exit+0x4c>)
    6c70:	0018      	movs	r0, r3
    6c72:	f7fd f807 	bl	3c84 <rt_kprintf>
    6c76:	4b09      	ldr	r3, [pc, #36]	; (6c9c <__rt_libc_exit+0x50>)
    6c78:	0018      	movs	r0, r3
    6c7a:	f7fd f803 	bl	3c84 <rt_kprintf>
        rt_thread_control(self, RT_THREAD_CTRL_CLOSE, RT_NULL);
    6c7e:	68fb      	ldr	r3, [r7, #12]
    6c80:	2200      	movs	r2, #0
    6c82:	2101      	movs	r1, #1
    6c84:	0018      	movs	r0, r3
    6c86:	f7fe f94b 	bl	4f20 <rt_thread_control>
    }
}
    6c8a:	46c0      	nop			; (mov r8, r8)
    6c8c:	46bd      	mov	sp, r7
    6c8e:	b004      	add	sp, #16
    6c90:	bd80      	pop	{r7, pc}
    6c92:	46c0      	nop			; (mov r8, r8)
    6c94:	0000cdcc 	.word	0x0000cdcc
    6c98:	0000cdd8 	.word	0x0000cdd8
    6c9c:	0000cdec 	.word	0x0000cdec

00006ca0 <_malloc_r>:
#define DBG_LVL    DBG_INFO
#include <rtdbg.h>

#ifdef RT_USING_HEAP /* Memory routine */
void *_malloc_r (struct _reent *ptr, size_t size)
{
    6ca0:	b580      	push	{r7, lr}
    6ca2:	b084      	sub	sp, #16
    6ca4:	af00      	add	r7, sp, #0
    6ca6:	6078      	str	r0, [r7, #4]
    6ca8:	6039      	str	r1, [r7, #0]
    void* result;

    result = (void*)rt_malloc (size);
    6caa:	683b      	ldr	r3, [r7, #0]
    6cac:	0018      	movs	r0, r3
    6cae:	f7fd f8b9 	bl	3e24 <rt_malloc>
    6cb2:	0003      	movs	r3, r0
    6cb4:	60fb      	str	r3, [r7, #12]
    if (result == RT_NULL)
    6cb6:	68fb      	ldr	r3, [r7, #12]
    6cb8:	2b00      	cmp	r3, #0
    6cba:	d102      	bne.n	6cc2 <_malloc_r+0x22>
    {
        ptr->_errno = ENOMEM;
    6cbc:	687b      	ldr	r3, [r7, #4]
    6cbe:	220c      	movs	r2, #12
    6cc0:	601a      	str	r2, [r3, #0]
    }

    return result;
    6cc2:	68fb      	ldr	r3, [r7, #12]
}
    6cc4:	0018      	movs	r0, r3
    6cc6:	46bd      	mov	sp, r7
    6cc8:	b004      	add	sp, #16
    6cca:	bd80      	pop	{r7, pc}

00006ccc <_realloc_r>:

void *_realloc_r (struct _reent *ptr, void *old, size_t newlen)
{
    6ccc:	b580      	push	{r7, lr}
    6cce:	b086      	sub	sp, #24
    6cd0:	af00      	add	r7, sp, #0
    6cd2:	60f8      	str	r0, [r7, #12]
    6cd4:	60b9      	str	r1, [r7, #8]
    6cd6:	607a      	str	r2, [r7, #4]
    void* result;

    result = (void*)rt_realloc (old, newlen);
    6cd8:	687a      	ldr	r2, [r7, #4]
    6cda:	68bb      	ldr	r3, [r7, #8]
    6cdc:	0011      	movs	r1, r2
    6cde:	0018      	movs	r0, r3
    6ce0:	f7fd f8c8 	bl	3e74 <rt_realloc>
    6ce4:	0003      	movs	r3, r0
    6ce6:	617b      	str	r3, [r7, #20]
    if (result == RT_NULL)
    6ce8:	697b      	ldr	r3, [r7, #20]
    6cea:	2b00      	cmp	r3, #0
    6cec:	d102      	bne.n	6cf4 <_realloc_r+0x28>
    {
        ptr->_errno = ENOMEM;
    6cee:	68fb      	ldr	r3, [r7, #12]
    6cf0:	220c      	movs	r2, #12
    6cf2:	601a      	str	r2, [r3, #0]
    }

    return result;
    6cf4:	697b      	ldr	r3, [r7, #20]
}
    6cf6:	0018      	movs	r0, r3
    6cf8:	46bd      	mov	sp, r7
    6cfa:	b006      	add	sp, #24
    6cfc:	bd80      	pop	{r7, pc}

00006cfe <_free_r>:

    return result;
}

void _free_r (struct _reent *ptr, void *addr)
{
    6cfe:	b580      	push	{r7, lr}
    6d00:	b082      	sub	sp, #8
    6d02:	af00      	add	r7, sp, #0
    6d04:	6078      	str	r0, [r7, #4]
    6d06:	6039      	str	r1, [r7, #0]
    rt_free (addr);
    6d08:	683b      	ldr	r3, [r7, #0]
    6d0a:	0018      	movs	r0, r3
    6d0c:	f7fd f8ee 	bl	3eec <rt_free>
}
    6d10:	46c0      	nop			; (mov r8, r8)
    6d12:	46bd      	mov	sp, r7
    6d14:	b002      	add	sp, #8
    6d16:	bd80      	pop	{r7, pc}

00006d18 <_getpid_r>:
  return _rt_errno();
}
#endif

int _getpid_r(struct _reent *ptr)
{
    6d18:	b580      	push	{r7, lr}
    6d1a:	b082      	sub	sp, #8
    6d1c:	af00      	add	r7, sp, #0
    6d1e:	6078      	str	r0, [r7, #4]
    return 0;
    6d20:	2300      	movs	r3, #0
}
    6d22:	0018      	movs	r0, r3
    6d24:	46bd      	mov	sp, r7
    6d26:	b002      	add	sp, #8
    6d28:	bd80      	pop	{r7, pc}
	...

00006d2c <_close_r>:

int _close_r(struct _reent *ptr, int fd)
{
    6d2c:	b580      	push	{r7, lr}
    6d2e:	b082      	sub	sp, #8
    6d30:	af00      	add	r7, sp, #0
    6d32:	6078      	str	r0, [r7, #4]
    6d34:	6039      	str	r1, [r7, #0]
#ifdef DFS_USING_POSIX
    return close(fd);
#else
    LOG_W("%s: %s", __func__, _WARNING_WITHOUT_FS);
    6d36:	4b0b      	ldr	r3, [pc, #44]	; (6d64 <_close_r+0x38>)
    6d38:	0018      	movs	r0, r3
    6d3a:	f7fc ffa3 	bl	3c84 <rt_kprintf>
    6d3e:	4a0a      	ldr	r2, [pc, #40]	; (6d68 <_close_r+0x3c>)
    6d40:	490a      	ldr	r1, [pc, #40]	; (6d6c <_close_r+0x40>)
    6d42:	4b0b      	ldr	r3, [pc, #44]	; (6d70 <_close_r+0x44>)
    6d44:	0018      	movs	r0, r3
    6d46:	f7fc ff9d 	bl	3c84 <rt_kprintf>
    6d4a:	4b0a      	ldr	r3, [pc, #40]	; (6d74 <_close_r+0x48>)
    6d4c:	0018      	movs	r0, r3
    6d4e:	f7fc ff99 	bl	3c84 <rt_kprintf>
    ptr->_errno = ENOTSUP;
    6d52:	687b      	ldr	r3, [r7, #4]
    6d54:	2286      	movs	r2, #134	; 0x86
    6d56:	601a      	str	r2, [r3, #0]
    return -1;
    6d58:	2301      	movs	r3, #1
    6d5a:	425b      	negs	r3, r3
#endif /* DFS_USING_POSIX */
}
    6d5c:	0018      	movs	r0, r3
    6d5e:	46bd      	mov	sp, r7
    6d60:	b002      	add	sp, #8
    6d62:	bd80      	pop	{r7, pc}
    6d64:	0000cdf0 	.word	0x0000cdf0
    6d68:	0000ce08 	.word	0x0000ce08
    6d6c:	0000ce34 	.word	0x0000ce34
    6d70:	0000ce28 	.word	0x0000ce28
    6d74:	0000ce30 	.word	0x0000ce30

00006d78 <_fstat_r>:
    ptr->_errno = ENOTSUP;
    return -1;
}

int _fstat_r(struct _reent *ptr, int fd, struct stat *pstat)
{
    6d78:	b580      	push	{r7, lr}
    6d7a:	b084      	sub	sp, #16
    6d7c:	af00      	add	r7, sp, #0
    6d7e:	60f8      	str	r0, [r7, #12]
    6d80:	60b9      	str	r1, [r7, #8]
    6d82:	607a      	str	r2, [r7, #4]
    ptr->_errno = ENOTSUP;
    6d84:	68fb      	ldr	r3, [r7, #12]
    6d86:	2286      	movs	r2, #134	; 0x86
    6d88:	601a      	str	r2, [r3, #0]
    return -1;
    6d8a:	2301      	movs	r3, #1
    6d8c:	425b      	negs	r3, r3
}
    6d8e:	0018      	movs	r0, r3
    6d90:	46bd      	mov	sp, r7
    6d92:	b004      	add	sp, #16
    6d94:	bd80      	pop	{r7, pc}

00006d96 <_isatty_r>:

int _isatty_r(struct _reent *ptr, int fd)
{
    6d96:	b580      	push	{r7, lr}
    6d98:	b082      	sub	sp, #8
    6d9a:	af00      	add	r7, sp, #0
    6d9c:	6078      	str	r0, [r7, #4]
    6d9e:	6039      	str	r1, [r7, #0]
    if (fd >=0 && fd < 3)
    6da0:	683b      	ldr	r3, [r7, #0]
    6da2:	2b00      	cmp	r3, #0
    6da4:	db04      	blt.n	6db0 <_isatty_r+0x1a>
    6da6:	683b      	ldr	r3, [r7, #0]
    6da8:	2b02      	cmp	r3, #2
    6daa:	dc01      	bgt.n	6db0 <_isatty_r+0x1a>
    {
        return 1;
    6dac:	2301      	movs	r3, #1
    6dae:	e000      	b.n	6db2 <_isatty_r+0x1c>
    }
    else
    {
        return 0;
    6db0:	2300      	movs	r3, #0
    }
}
    6db2:	0018      	movs	r0, r3
    6db4:	46bd      	mov	sp, r7
    6db6:	b002      	add	sp, #8
    6db8:	bd80      	pop	{r7, pc}

00006dba <_kill_r>:

int _kill_r(struct _reent *ptr, int pid, int sig)
{
    6dba:	b580      	push	{r7, lr}
    6dbc:	b084      	sub	sp, #16
    6dbe:	af00      	add	r7, sp, #0
    6dc0:	60f8      	str	r0, [r7, #12]
    6dc2:	60b9      	str	r1, [r7, #8]
    6dc4:	607a      	str	r2, [r7, #4]
    ptr->_errno = ENOTSUP;
    6dc6:	68fb      	ldr	r3, [r7, #12]
    6dc8:	2286      	movs	r2, #134	; 0x86
    6dca:	601a      	str	r2, [r3, #0]
    return -1;
    6dcc:	2301      	movs	r3, #1
    6dce:	425b      	negs	r3, r3
}
    6dd0:	0018      	movs	r0, r3
    6dd2:	46bd      	mov	sp, r7
    6dd4:	b004      	add	sp, #16
    6dd6:	bd80      	pop	{r7, pc}

00006dd8 <_lseek_r>:
{
    return 0;
}

_off_t _lseek_r(struct _reent *ptr, int fd, _off_t pos, int whence)
{
    6dd8:	b580      	push	{r7, lr}
    6dda:	b084      	sub	sp, #16
    6ddc:	af00      	add	r7, sp, #0
    6dde:	60f8      	str	r0, [r7, #12]
    6de0:	60b9      	str	r1, [r7, #8]
    6de2:	607a      	str	r2, [r7, #4]
    6de4:	603b      	str	r3, [r7, #0]
#ifdef DFS_USING_POSIX
    _off_t rc;
    rc = lseek(fd, pos, whence);
    return rc;
#else
    LOG_W("%s: %s", __func__, _WARNING_WITHOUT_FS);
    6de6:	4b0b      	ldr	r3, [pc, #44]	; (6e14 <_lseek_r+0x3c>)
    6de8:	0018      	movs	r0, r3
    6dea:	f7fc ff4b 	bl	3c84 <rt_kprintf>
    6dee:	4a0a      	ldr	r2, [pc, #40]	; (6e18 <_lseek_r+0x40>)
    6df0:	490a      	ldr	r1, [pc, #40]	; (6e1c <_lseek_r+0x44>)
    6df2:	4b0b      	ldr	r3, [pc, #44]	; (6e20 <_lseek_r+0x48>)
    6df4:	0018      	movs	r0, r3
    6df6:	f7fc ff45 	bl	3c84 <rt_kprintf>
    6dfa:	4b0a      	ldr	r3, [pc, #40]	; (6e24 <_lseek_r+0x4c>)
    6dfc:	0018      	movs	r0, r3
    6dfe:	f7fc ff41 	bl	3c84 <rt_kprintf>
    ptr->_errno = ENOTSUP;
    6e02:	68fb      	ldr	r3, [r7, #12]
    6e04:	2286      	movs	r2, #134	; 0x86
    6e06:	601a      	str	r2, [r3, #0]
    return -1;
    6e08:	2301      	movs	r3, #1
    6e0a:	425b      	negs	r3, r3
#endif /* DFS_USING_POSIX */
}
    6e0c:	0018      	movs	r0, r3
    6e0e:	46bd      	mov	sp, r7
    6e10:	b004      	add	sp, #16
    6e12:	bd80      	pop	{r7, pc}
    6e14:	0000cdf0 	.word	0x0000cdf0
    6e18:	0000ce08 	.word	0x0000ce08
    6e1c:	0000ce40 	.word	0x0000ce40
    6e20:	0000ce28 	.word	0x0000ce28
    6e24:	0000ce30 	.word	0x0000ce30

00006e28 <_read_r>:
    return -1;
#endif /* DFS_USING_POSIX */
}

_ssize_t _read_r(struct _reent *ptr, int fd, void *buf, size_t nbytes)
{
    6e28:	b580      	push	{r7, lr}
    6e2a:	b084      	sub	sp, #16
    6e2c:	af00      	add	r7, sp, #0
    6e2e:	60f8      	str	r0, [r7, #12]
    6e30:	60b9      	str	r1, [r7, #8]
    6e32:	607a      	str	r2, [r7, #4]
    6e34:	603b      	str	r3, [r7, #0]
    }

    rc = read(fd, buf, nbytes);
    return rc;
#else
    LOG_W("%s: %s", __func__, _WARNING_WITHOUT_FS);
    6e36:	4b0b      	ldr	r3, [pc, #44]	; (6e64 <_read_r+0x3c>)
    6e38:	0018      	movs	r0, r3
    6e3a:	f7fc ff23 	bl	3c84 <rt_kprintf>
    6e3e:	4a0a      	ldr	r2, [pc, #40]	; (6e68 <_read_r+0x40>)
    6e40:	490a      	ldr	r1, [pc, #40]	; (6e6c <_read_r+0x44>)
    6e42:	4b0b      	ldr	r3, [pc, #44]	; (6e70 <_read_r+0x48>)
    6e44:	0018      	movs	r0, r3
    6e46:	f7fc ff1d 	bl	3c84 <rt_kprintf>
    6e4a:	4b0a      	ldr	r3, [pc, #40]	; (6e74 <_read_r+0x4c>)
    6e4c:	0018      	movs	r0, r3
    6e4e:	f7fc ff19 	bl	3c84 <rt_kprintf>
    ptr->_errno = ENOTSUP;
    6e52:	68fb      	ldr	r3, [r7, #12]
    6e54:	2286      	movs	r2, #134	; 0x86
    6e56:	601a      	str	r2, [r3, #0]
    return -1;
    6e58:	2301      	movs	r3, #1
    6e5a:	425b      	negs	r3, r3
#endif /* DFS_USING_POSIX */
}
    6e5c:	0018      	movs	r0, r3
    6e5e:	46bd      	mov	sp, r7
    6e60:	b004      	add	sp, #16
    6e62:	bd80      	pop	{r7, pc}
    6e64:	0000cdf0 	.word	0x0000cdf0
    6e68:	0000ce08 	.word	0x0000ce08
    6e6c:	0000ce4c 	.word	0x0000ce4c
    6e70:	0000ce28 	.word	0x0000ce28
    6e74:	0000ce30 	.word	0x0000ce30

00006e78 <_write_r>:
    return -1;
#endif /* DFS_USING_POSIX */
}

_ssize_t _write_r(struct _reent *ptr, int fd, const void *buf, size_t nbytes)
{
    6e78:	b580      	push	{r7, lr}
    6e7a:	b086      	sub	sp, #24
    6e7c:	af00      	add	r7, sp, #0
    6e7e:	60f8      	str	r0, [r7, #12]
    6e80:	60b9      	str	r1, [r7, #8]
    6e82:	607a      	str	r2, [r7, #4]
    6e84:	603b      	str	r3, [r7, #0]
#ifdef DFS_USING_POSIX
    _ssize_t rc;
#endif /* DFS_USING_POSIX */

    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
    6e86:	68bb      	ldr	r3, [r7, #8]
    6e88:	2b01      	cmp	r3, #1
    6e8a:	d002      	beq.n	6e92 <_write_r+0x1a>
    6e8c:	68bb      	ldr	r3, [r7, #8]
    6e8e:	2b02      	cmp	r3, #2
    6e90:	d10f      	bne.n	6eb2 <_write_r+0x3a>
    {
#if defined(RT_USING_CONSOLE) && defined(RT_USING_DEVICE)
        rt_device_t console;

        console = rt_console_get_device();
    6e92:	f7fc febf 	bl	3c14 <rt_console_get_device>
    6e96:	0003      	movs	r3, r0
    6e98:	617b      	str	r3, [r7, #20]
        if (console)
    6e9a:	697b      	ldr	r3, [r7, #20]
    6e9c:	2b00      	cmp	r3, #0
    6e9e:	d011      	beq.n	6ec4 <_write_r+0x4c>
            return rt_device_write(console, -1, buf, nbytes);
    6ea0:	683b      	ldr	r3, [r7, #0]
    6ea2:	687a      	ldr	r2, [r7, #4]
    6ea4:	2101      	movs	r1, #1
    6ea6:	4249      	negs	r1, r1
    6ea8:	6978      	ldr	r0, [r7, #20]
    6eaa:	f7fb fa9d 	bl	23e8 <rt_device_write>
    6eae:	0003      	movs	r3, r0
    6eb0:	e01c      	b.n	6eec <_write_r+0x74>
#else
        ptr->_errno = ENOTSUP;
        return -1;
#endif /* defined(RT_USING_CONSOLE) && defined(RT_USING_DEVICE) */
    }
    else if (fd == STDIN_FILENO)
    6eb2:	68bb      	ldr	r3, [r7, #8]
    6eb4:	2b00      	cmp	r3, #0
    6eb6:	d106      	bne.n	6ec6 <_write_r+0x4e>
    {
        ptr->_errno = ENOTSUP;
    6eb8:	68fb      	ldr	r3, [r7, #12]
    6eba:	2286      	movs	r2, #134	; 0x86
    6ebc:	601a      	str	r2, [r3, #0]
        return -1;
    6ebe:	2301      	movs	r3, #1
    6ec0:	425b      	negs	r3, r3
    6ec2:	e013      	b.n	6eec <_write_r+0x74>
    {
    6ec4:	46c0      	nop			; (mov r8, r8)

#ifdef DFS_USING_POSIX
    rc = write(fd, buf, nbytes);
    return rc;
#else
    LOG_W("%s: %s", __func__, _WARNING_WITHOUT_FS);
    6ec6:	4b0b      	ldr	r3, [pc, #44]	; (6ef4 <_write_r+0x7c>)
    6ec8:	0018      	movs	r0, r3
    6eca:	f7fc fedb 	bl	3c84 <rt_kprintf>
    6ece:	4a0a      	ldr	r2, [pc, #40]	; (6ef8 <_write_r+0x80>)
    6ed0:	490a      	ldr	r1, [pc, #40]	; (6efc <_write_r+0x84>)
    6ed2:	4b0b      	ldr	r3, [pc, #44]	; (6f00 <_write_r+0x88>)
    6ed4:	0018      	movs	r0, r3
    6ed6:	f7fc fed5 	bl	3c84 <rt_kprintf>
    6eda:	4b0a      	ldr	r3, [pc, #40]	; (6f04 <_write_r+0x8c>)
    6edc:	0018      	movs	r0, r3
    6ede:	f7fc fed1 	bl	3c84 <rt_kprintf>
    ptr->_errno = ENOTSUP;
    6ee2:	68fb      	ldr	r3, [r7, #12]
    6ee4:	2286      	movs	r2, #134	; 0x86
    6ee6:	601a      	str	r2, [r3, #0]
    return -1;
    6ee8:	2301      	movs	r3, #1
    6eea:	425b      	negs	r3, r3
#endif /* DFS_USING_POSIX */
}
    6eec:	0018      	movs	r0, r3
    6eee:	46bd      	mov	sp, r7
    6ef0:	b006      	add	sp, #24
    6ef2:	bd80      	pop	{r7, pc}
    6ef4:	0000cdf0 	.word	0x0000cdf0
    6ef8:	0000ce08 	.word	0x0000ce08
    6efc:	0000ce54 	.word	0x0000ce54
    6f00:	0000ce28 	.word	0x0000ce28
    6f04:	0000ce30 	.word	0x0000ce30

00006f08 <_exit>:

/* for exit() and abort() */
__attribute__ ((noreturn)) void _exit (int status)
{
    6f08:	b580      	push	{r7, lr}
    6f0a:	b082      	sub	sp, #8
    6f0c:	af00      	add	r7, sp, #0
    6f0e:	6078      	str	r0, [r7, #4]
    extern void __rt_libc_exit(int status);
    __rt_libc_exit(status);
    6f10:	687b      	ldr	r3, [r7, #4]
    6f12:	0018      	movs	r0, r3
    6f14:	f7ff fe9a 	bl	6c4c <__rt_libc_exit>
    while(1);
    6f18:	e7fe      	b.n	6f18 <_exit+0x10>
	...

00006f1c <finsh_get_prompt>:
#endif /* RT_USING_HEAP */

#define _MSH_PROMPT "msh "

const char *finsh_get_prompt(void)
{
    6f1c:	b580      	push	{r7, lr}
    6f1e:	af00      	add	r7, sp, #0
    static char finsh_prompt[RT_CONSOLEBUF_SIZE + 1] = {0};

    /* check prompt mode */
    if (!shell->prompt_mode)
    6f20:	4b19      	ldr	r3, [pc, #100]	; (6f88 <finsh_get_prompt+0x6c>)
    6f22:	681b      	ldr	r3, [r3, #0]
    6f24:	2221      	movs	r2, #33	; 0x21
    6f26:	5c9b      	ldrb	r3, [r3, r2]
    6f28:	2202      	movs	r2, #2
    6f2a:	4013      	ands	r3, r2
    6f2c:	b2db      	uxtb	r3, r3
    6f2e:	2b00      	cmp	r3, #0
    6f30:	d104      	bne.n	6f3c <finsh_get_prompt+0x20>
    {
        finsh_prompt[0] = '\0';
    6f32:	4b16      	ldr	r3, [pc, #88]	; (6f8c <finsh_get_prompt+0x70>)
    6f34:	2200      	movs	r2, #0
    6f36:	701a      	strb	r2, [r3, #0]
        return finsh_prompt;
    6f38:	4b14      	ldr	r3, [pc, #80]	; (6f8c <finsh_get_prompt+0x70>)
    6f3a:	e022      	b.n	6f82 <finsh_get_prompt+0x66>
    }

    if (finsh_prompt_custom)
    6f3c:	4b14      	ldr	r3, [pc, #80]	; (6f90 <finsh_get_prompt+0x74>)
    6f3e:	681b      	ldr	r3, [r3, #0]
    6f40:	2b00      	cmp	r3, #0
    6f42:	d008      	beq.n	6f56 <finsh_get_prompt+0x3a>
    {
        strncpy(finsh_prompt, finsh_prompt_custom, sizeof(finsh_prompt) - 1);
    6f44:	4b12      	ldr	r3, [pc, #72]	; (6f90 <finsh_get_prompt+0x74>)
    6f46:	6819      	ldr	r1, [r3, #0]
    6f48:	4b10      	ldr	r3, [pc, #64]	; (6f8c <finsh_get_prompt+0x70>)
    6f4a:	2280      	movs	r2, #128	; 0x80
    6f4c:	0018      	movs	r0, r3
    6f4e:	f002 f89b 	bl	9088 <strncpy>
        return finsh_prompt;
    6f52:	4b0e      	ldr	r3, [pc, #56]	; (6f8c <finsh_get_prompt+0x70>)
    6f54:	e015      	b.n	6f82 <finsh_get_prompt+0x66>
    }
    strcpy(finsh_prompt, _MSH_PROMPT);
    6f56:	4b0d      	ldr	r3, [pc, #52]	; (6f8c <finsh_get_prompt+0x70>)
    6f58:	4a0e      	ldr	r2, [pc, #56]	; (6f94 <finsh_get_prompt+0x78>)
    6f5a:	6811      	ldr	r1, [r2, #0]
    6f5c:	6019      	str	r1, [r3, #0]
    6f5e:	7912      	ldrb	r2, [r2, #4]
    6f60:	711a      	strb	r2, [r3, #4]
#if defined(DFS_USING_POSIX) && defined(DFS_USING_WORKDIR)
    /* get current working directory */
    getcwd(&finsh_prompt[rt_strlen(finsh_prompt)], RT_CONSOLEBUF_SIZE - rt_strlen(finsh_prompt));
#endif

    strcat(finsh_prompt, ">");
    6f62:	4b0a      	ldr	r3, [pc, #40]	; (6f8c <finsh_get_prompt+0x70>)
    6f64:	0018      	movs	r0, r3
    6f66:	f002 f827 	bl	8fb8 <strlen>
    6f6a:	0003      	movs	r3, r0
    6f6c:	001a      	movs	r2, r3
    6f6e:	4b07      	ldr	r3, [pc, #28]	; (6f8c <finsh_get_prompt+0x70>)
    6f70:	18d2      	adds	r2, r2, r3
    6f72:	4b09      	ldr	r3, [pc, #36]	; (6f98 <finsh_get_prompt+0x7c>)
    6f74:	0010      	movs	r0, r2
    6f76:	0019      	movs	r1, r3
    6f78:	2302      	movs	r3, #2
    6f7a:	001a      	movs	r2, r3
    6f7c:	f001 ff76 	bl	8e6c <memcpy>

    return finsh_prompt;
    6f80:	4b02      	ldr	r3, [pc, #8]	; (6f8c <finsh_get_prompt+0x70>)
}
    6f82:	0018      	movs	r0, r3
    6f84:	46bd      	mov	sp, r7
    6f86:	bd80      	pop	{r7, pc}
    6f88:	2000029c 	.word	0x2000029c
    6f8c:	200002a4 	.word	0x200002a4
    6f90:	200002a0 	.word	0x200002a0
    6f94:	0000ce60 	.word	0x0000ce60
    6f98:	0000ce68 	.word	0x0000ce68

00006f9c <finsh_set_prompt_mode>:
 * The parameter 0 disable prompt mode, other values enable prompt mode.
 *
 * @param prompt the prompt mode
 */
void finsh_set_prompt_mode(rt_uint32_t prompt_mode)
{
    6f9c:	b590      	push	{r4, r7, lr}
    6f9e:	b083      	sub	sp, #12
    6fa0:	af00      	add	r7, sp, #0
    6fa2:	6078      	str	r0, [r7, #4]
    RT_ASSERT(shell != RT_NULL);
    6fa4:	4b0f      	ldr	r3, [pc, #60]	; (6fe4 <finsh_set_prompt_mode+0x48>)
    6fa6:	681b      	ldr	r3, [r3, #0]
    6fa8:	2b00      	cmp	r3, #0
    6faa:	d105      	bne.n	6fb8 <finsh_set_prompt_mode+0x1c>
    6fac:	490e      	ldr	r1, [pc, #56]	; (6fe8 <finsh_set_prompt_mode+0x4c>)
    6fae:	4b0f      	ldr	r3, [pc, #60]	; (6fec <finsh_set_prompt_mode+0x50>)
    6fb0:	228e      	movs	r2, #142	; 0x8e
    6fb2:	0018      	movs	r0, r3
    6fb4:	f7fd f80c 	bl	3fd0 <rt_assert_handler>
    shell->prompt_mode = prompt_mode;
    6fb8:	4b0a      	ldr	r3, [pc, #40]	; (6fe4 <finsh_set_prompt_mode+0x48>)
    6fba:	681b      	ldr	r3, [r3, #0]
    6fbc:	687a      	ldr	r2, [r7, #4]
    6fbe:	1c11      	adds	r1, r2, #0
    6fc0:	2201      	movs	r2, #1
    6fc2:	400a      	ands	r2, r1
    6fc4:	b2d1      	uxtb	r1, r2
    6fc6:	2221      	movs	r2, #33	; 0x21
    6fc8:	2001      	movs	r0, #1
    6fca:	4001      	ands	r1, r0
    6fcc:	184c      	adds	r4, r1, r1
    6fce:	5c99      	ldrb	r1, [r3, r2]
    6fd0:	2002      	movs	r0, #2
    6fd2:	4381      	bics	r1, r0
    6fd4:	1c08      	adds	r0, r1, #0
    6fd6:	1c21      	adds	r1, r4, #0
    6fd8:	4301      	orrs	r1, r0
    6fda:	5499      	strb	r1, [r3, r2]
}
    6fdc:	46c0      	nop			; (mov r8, r8)
    6fde:	46bd      	mov	sp, r7
    6fe0:	b003      	add	sp, #12
    6fe2:	bd90      	pop	{r4, r7, pc}
    6fe4:	2000029c 	.word	0x2000029c
    6fe8:	0000cef4 	.word	0x0000cef4
    6fec:	0000ce6c 	.word	0x0000ce6c

00006ff0 <finsh_getchar>:

int finsh_getchar(void)
{
    6ff0:	b580      	push	{r7, lr}
    6ff2:	b082      	sub	sp, #8
    6ff4:	af00      	add	r7, sp, #0
#ifdef RT_USING_DEVICE
    char ch = 0;
    6ff6:	1cfb      	adds	r3, r7, #3
    6ff8:	2200      	movs	r2, #0
    6ffa:	701a      	strb	r2, [r3, #0]
        return -1; /* EOF */
    }
#else
    rt_device_t device;

    RT_ASSERT(shell != RT_NULL);
    6ffc:	4b21      	ldr	r3, [pc, #132]	; (7084 <finsh_getchar+0x94>)
    6ffe:	681b      	ldr	r3, [r3, #0]
    7000:	2b00      	cmp	r3, #0
    7002:	d105      	bne.n	7010 <finsh_getchar+0x20>
    7004:	4920      	ldr	r1, [pc, #128]	; (7088 <finsh_getchar+0x98>)
    7006:	4b21      	ldr	r3, [pc, #132]	; (708c <finsh_getchar+0x9c>)
    7008:	22a2      	movs	r2, #162	; 0xa2
    700a:	0018      	movs	r0, r3
    700c:	f7fc ffe0 	bl	3fd0 <rt_assert_handler>

    device = shell->device;
    7010:	4b1c      	ldr	r3, [pc, #112]	; (7084 <finsh_getchar+0x94>)
    7012:	681a      	ldr	r2, [r3, #0]
    7014:	2383      	movs	r3, #131	; 0x83
    7016:	009b      	lsls	r3, r3, #2
    7018:	58d3      	ldr	r3, [r2, r3]
    701a:	607b      	str	r3, [r7, #4]
    if (device == RT_NULL)
    701c:	687b      	ldr	r3, [r7, #4]
    701e:	2b00      	cmp	r3, #0
    7020:	d11f      	bne.n	7062 <finsh_getchar+0x72>
    {
        return -1; /* EOF */
    7022:	2301      	movs	r3, #1
    7024:	425b      	negs	r3, r3
    7026:	e028      	b.n	707a <finsh_getchar+0x8a>
    }

    while (rt_device_read(device, -1, &ch, 1) != 1)
    {
        rt_sem_take(&shell->rx_sem, RT_WAITING_FOREVER);
    7028:	4b16      	ldr	r3, [pc, #88]	; (7084 <finsh_getchar+0x94>)
    702a:	681b      	ldr	r3, [r3, #0]
    702c:	001a      	movs	r2, r3
    702e:	2301      	movs	r3, #1
    7030:	425b      	negs	r3, r3
    7032:	0019      	movs	r1, r3
    7034:	0010      	movs	r0, r2
    7036:	f7fd f8f3 	bl	4220 <rt_sem_take>
        if (shell->device != device)
    703a:	4b12      	ldr	r3, [pc, #72]	; (7084 <finsh_getchar+0x94>)
    703c:	681a      	ldr	r2, [r3, #0]
    703e:	2383      	movs	r3, #131	; 0x83
    7040:	009b      	lsls	r3, r3, #2
    7042:	58d3      	ldr	r3, [r2, r3]
    7044:	687a      	ldr	r2, [r7, #4]
    7046:	429a      	cmp	r2, r3
    7048:	d00b      	beq.n	7062 <finsh_getchar+0x72>
        {
            device = shell->device;
    704a:	4b0e      	ldr	r3, [pc, #56]	; (7084 <finsh_getchar+0x94>)
    704c:	681a      	ldr	r2, [r3, #0]
    704e:	2383      	movs	r3, #131	; 0x83
    7050:	009b      	lsls	r3, r3, #2
    7052:	58d3      	ldr	r3, [r2, r3]
    7054:	607b      	str	r3, [r7, #4]
            if (device == RT_NULL)
    7056:	687b      	ldr	r3, [r7, #4]
    7058:	2b00      	cmp	r3, #0
    705a:	d102      	bne.n	7062 <finsh_getchar+0x72>
            {
                return -1;
    705c:	2301      	movs	r3, #1
    705e:	425b      	negs	r3, r3
    7060:	e00b      	b.n	707a <finsh_getchar+0x8a>
    while (rt_device_read(device, -1, &ch, 1) != 1)
    7062:	1cfa      	adds	r2, r7, #3
    7064:	2301      	movs	r3, #1
    7066:	4259      	negs	r1, r3
    7068:	6878      	ldr	r0, [r7, #4]
    706a:	2301      	movs	r3, #1
    706c:	f7fb f974 	bl	2358 <rt_device_read>
    7070:	0003      	movs	r3, r0
    7072:	2b01      	cmp	r3, #1
    7074:	d1d8      	bne.n	7028 <finsh_getchar+0x38>
            }
        }
    }
    return ch;
    7076:	1cfb      	adds	r3, r7, #3
    7078:	781b      	ldrb	r3, [r3, #0]
#endif /* RT_USING_POSIX_STDIO */
#else
    extern char rt_hw_console_getchar(void);
    return rt_hw_console_getchar();
#endif /* RT_USING_DEVICE */
}
    707a:	0018      	movs	r0, r3
    707c:	46bd      	mov	sp, r7
    707e:	b002      	add	sp, #8
    7080:	bd80      	pop	{r7, pc}
    7082:	46c0      	nop			; (mov r8, r8)
    7084:	2000029c 	.word	0x2000029c
    7088:	0000cf0c 	.word	0x0000cf0c
    708c:	0000ce6c 	.word	0x0000ce6c

00007090 <finsh_rx_ind>:

#if !defined(RT_USING_POSIX_STDIO) && defined(RT_USING_DEVICE)
static rt_err_t finsh_rx_ind(rt_device_t dev, rt_size_t size)
{
    7090:	b580      	push	{r7, lr}
    7092:	b082      	sub	sp, #8
    7094:	af00      	add	r7, sp, #0
    7096:	6078      	str	r0, [r7, #4]
    7098:	6039      	str	r1, [r7, #0]
    RT_ASSERT(shell != RT_NULL);
    709a:	4b0a      	ldr	r3, [pc, #40]	; (70c4 <finsh_rx_ind+0x34>)
    709c:	681b      	ldr	r3, [r3, #0]
    709e:	2b00      	cmp	r3, #0
    70a0:	d105      	bne.n	70ae <finsh_rx_ind+0x1e>
    70a2:	4909      	ldr	r1, [pc, #36]	; (70c8 <finsh_rx_ind+0x38>)
    70a4:	4b09      	ldr	r3, [pc, #36]	; (70cc <finsh_rx_ind+0x3c>)
    70a6:	22c1      	movs	r2, #193	; 0xc1
    70a8:	0018      	movs	r0, r3
    70aa:	f7fc ff91 	bl	3fd0 <rt_assert_handler>

    /* release semaphore to let finsh thread rx data */
    rt_sem_release(&shell->rx_sem);
    70ae:	4b05      	ldr	r3, [pc, #20]	; (70c4 <finsh_rx_ind+0x34>)
    70b0:	681b      	ldr	r3, [r3, #0]
    70b2:	0018      	movs	r0, r3
    70b4:	f7fd f98a 	bl	43cc <rt_sem_release>

    return RT_EOK;
    70b8:	2300      	movs	r3, #0
}
    70ba:	0018      	movs	r0, r3
    70bc:	46bd      	mov	sp, r7
    70be:	b002      	add	sp, #8
    70c0:	bd80      	pop	{r7, pc}
    70c2:	46c0      	nop			; (mov r8, r8)
    70c4:	2000029c 	.word	0x2000029c
    70c8:	0000cf1c 	.word	0x0000cf1c
    70cc:	0000ce6c 	.word	0x0000ce6c

000070d0 <finsh_set_device>:
 * This function sets the input device of finsh shell.
 *
 * @param device_name the name of new input device.
 */
void finsh_set_device(const char *device_name)
{
    70d0:	b580      	push	{r7, lr}
    70d2:	b084      	sub	sp, #16
    70d4:	af00      	add	r7, sp, #0
    70d6:	6078      	str	r0, [r7, #4]
    rt_device_t dev = RT_NULL;
    70d8:	2300      	movs	r3, #0
    70da:	60fb      	str	r3, [r7, #12]

    RT_ASSERT(shell != RT_NULL);
    70dc:	4b35      	ldr	r3, [pc, #212]	; (71b4 <finsh_set_device+0xe4>)
    70de:	681b      	ldr	r3, [r3, #0]
    70e0:	2b00      	cmp	r3, #0
    70e2:	d105      	bne.n	70f0 <finsh_set_device+0x20>
    70e4:	4934      	ldr	r1, [pc, #208]	; (71b8 <finsh_set_device+0xe8>)
    70e6:	4b35      	ldr	r3, [pc, #212]	; (71bc <finsh_set_device+0xec>)
    70e8:	22d4      	movs	r2, #212	; 0xd4
    70ea:	0018      	movs	r0, r3
    70ec:	f7fc ff70 	bl	3fd0 <rt_assert_handler>
    dev = rt_device_find(device_name);
    70f0:	687b      	ldr	r3, [r7, #4]
    70f2:	0018      	movs	r0, r3
    70f4:	f7fb f844 	bl	2180 <rt_device_find>
    70f8:	0003      	movs	r3, r0
    70fa:	60fb      	str	r3, [r7, #12]
    if (dev == RT_NULL)
    70fc:	68fb      	ldr	r3, [r7, #12]
    70fe:	2b00      	cmp	r3, #0
    7100:	d106      	bne.n	7110 <finsh_set_device+0x40>
    {
        rt_kprintf("finsh: can not find device: %s\n", device_name);
    7102:	687a      	ldr	r2, [r7, #4]
    7104:	4b2e      	ldr	r3, [pc, #184]	; (71c0 <finsh_set_device+0xf0>)
    7106:	0011      	movs	r1, r2
    7108:	0018      	movs	r0, r3
    710a:	f7fc fdbb 	bl	3c84 <rt_kprintf>
        return;
    710e:	e04d      	b.n	71ac <finsh_set_device+0xdc>
    }

    /* check whether it's a same device */
    if (dev == shell->device) return;
    7110:	4b28      	ldr	r3, [pc, #160]	; (71b4 <finsh_set_device+0xe4>)
    7112:	681a      	ldr	r2, [r3, #0]
    7114:	2383      	movs	r3, #131	; 0x83
    7116:	009b      	lsls	r3, r3, #2
    7118:	58d3      	ldr	r3, [r2, r3]
    711a:	68fa      	ldr	r2, [r7, #12]
    711c:	429a      	cmp	r2, r3
    711e:	d044      	beq.n	71aa <finsh_set_device+0xda>
    /* open this device and set the new device in finsh shell */
    if (rt_device_open(dev, RT_DEVICE_OFLAG_RDWR | RT_DEVICE_FLAG_INT_RX | \
    7120:	2344      	movs	r3, #68	; 0x44
    7122:	33ff      	adds	r3, #255	; 0xff
    7124:	001a      	movs	r2, r3
    7126:	68fb      	ldr	r3, [r7, #12]
    7128:	0011      	movs	r1, r2
    712a:	0018      	movs	r0, r3
    712c:	f7fb f836 	bl	219c <rt_device_open>
    7130:	1e03      	subs	r3, r0, #0
    7132:	d13b      	bne.n	71ac <finsh_set_device+0xdc>
                       RT_DEVICE_FLAG_STREAM) == RT_EOK)
    {
        if (shell->device != RT_NULL)
    7134:	4b1f      	ldr	r3, [pc, #124]	; (71b4 <finsh_set_device+0xe4>)
    7136:	681a      	ldr	r2, [r3, #0]
    7138:	2383      	movs	r3, #131	; 0x83
    713a:	009b      	lsls	r3, r3, #2
    713c:	58d3      	ldr	r3, [r2, r3]
    713e:	2b00      	cmp	r3, #0
    7140:	d010      	beq.n	7164 <finsh_set_device+0x94>
        {
            /* close old finsh device */
            rt_device_close(shell->device);
    7142:	4b1c      	ldr	r3, [pc, #112]	; (71b4 <finsh_set_device+0xe4>)
    7144:	681a      	ldr	r2, [r3, #0]
    7146:	2383      	movs	r3, #131	; 0x83
    7148:	009b      	lsls	r3, r3, #2
    714a:	58d3      	ldr	r3, [r2, r3]
    714c:	0018      	movs	r0, r3
    714e:	f7fb f8b1 	bl	22b4 <rt_device_close>
            rt_device_set_rx_indicate(shell->device, RT_NULL);
    7152:	4b18      	ldr	r3, [pc, #96]	; (71b4 <finsh_set_device+0xe4>)
    7154:	681a      	ldr	r2, [r3, #0]
    7156:	2383      	movs	r3, #131	; 0x83
    7158:	009b      	lsls	r3, r3, #2
    715a:	58d3      	ldr	r3, [r2, r3]
    715c:	2100      	movs	r1, #0
    715e:	0018      	movs	r0, r3
    7160:	f7fb f98a 	bl	2478 <rt_device_set_rx_indicate>
        }

        /* clear line buffer before switch to new device */
        rt_memset(shell->line, 0, sizeof(shell->line));
    7164:	4b13      	ldr	r3, [pc, #76]	; (71b4 <finsh_set_device+0xe4>)
    7166:	681b      	ldr	r3, [r3, #0]
    7168:	33b7      	adds	r3, #183	; 0xb7
    716a:	33ff      	adds	r3, #255	; 0xff
    716c:	2251      	movs	r2, #81	; 0x51
    716e:	2100      	movs	r1, #0
    7170:	0018      	movs	r0, r3
    7172:	f7fc f831 	bl	31d8 <rt_memset>
        shell->line_curpos = shell->line_position = 0;
    7176:	4b0f      	ldr	r3, [pc, #60]	; (71b4 <finsh_set_device+0xe4>)
    7178:	681b      	ldr	r3, [r3, #0]
    717a:	2282      	movs	r2, #130	; 0x82
    717c:	0092      	lsls	r2, r2, #2
    717e:	2100      	movs	r1, #0
    7180:	5299      	strh	r1, [r3, r2]
    7182:	4a0c      	ldr	r2, [pc, #48]	; (71b4 <finsh_set_device+0xe4>)
    7184:	6812      	ldr	r2, [r2, #0]
    7186:	2182      	movs	r1, #130	; 0x82
    7188:	0089      	lsls	r1, r1, #2
    718a:	5a59      	ldrh	r1, [r3, r1]
    718c:	4b0d      	ldr	r3, [pc, #52]	; (71c4 <finsh_set_device+0xf4>)
    718e:	52d1      	strh	r1, [r2, r3]

        shell->device = dev;
    7190:	4b08      	ldr	r3, [pc, #32]	; (71b4 <finsh_set_device+0xe4>)
    7192:	681a      	ldr	r2, [r3, #0]
    7194:	2383      	movs	r3, #131	; 0x83
    7196:	009b      	lsls	r3, r3, #2
    7198:	68f9      	ldr	r1, [r7, #12]
    719a:	50d1      	str	r1, [r2, r3]
        rt_device_set_rx_indicate(dev, finsh_rx_ind);
    719c:	4a0a      	ldr	r2, [pc, #40]	; (71c8 <finsh_set_device+0xf8>)
    719e:	68fb      	ldr	r3, [r7, #12]
    71a0:	0011      	movs	r1, r2
    71a2:	0018      	movs	r0, r3
    71a4:	f7fb f968 	bl	2478 <rt_device_set_rx_indicate>
    71a8:	e000      	b.n	71ac <finsh_set_device+0xdc>
    if (dev == shell->device) return;
    71aa:	46c0      	nop			; (mov r8, r8)
    }
}
    71ac:	46bd      	mov	sp, r7
    71ae:	b004      	add	sp, #16
    71b0:	bd80      	pop	{r7, pc}
    71b2:	46c0      	nop			; (mov r8, r8)
    71b4:	2000029c 	.word	0x2000029c
    71b8:	0000cf2c 	.word	0x0000cf2c
    71bc:	0000ce6c 	.word	0x0000ce6c
    71c0:	0000ce80 	.word	0x0000ce80
    71c4:	0000020a 	.word	0x0000020a
    71c8:	00007091 	.word	0x00007091

000071cc <shell_auto_complete>:
    }
}
#endif /* FINSH_USING_AUTH */

static void shell_auto_complete(char *prefix)
{
    71cc:	b580      	push	{r7, lr}
    71ce:	b082      	sub	sp, #8
    71d0:	af00      	add	r7, sp, #0
    71d2:	6078      	str	r0, [r7, #4]
    rt_kprintf("\n");
    71d4:	4b09      	ldr	r3, [pc, #36]	; (71fc <shell_auto_complete+0x30>)
    71d6:	0018      	movs	r0, r3
    71d8:	f7fc fd54 	bl	3c84 <rt_kprintf>
    msh_auto_complete(prefix);
    71dc:	687b      	ldr	r3, [r7, #4]
    71de:	0018      	movs	r0, r3
    71e0:	f000 fe9e 	bl	7f20 <msh_auto_complete>

    rt_kprintf("%s%s", FINSH_PROMPT, prefix);
    71e4:	f7ff fe9a 	bl	6f1c <finsh_get_prompt>
    71e8:	0001      	movs	r1, r0
    71ea:	687a      	ldr	r2, [r7, #4]
    71ec:	4b04      	ldr	r3, [pc, #16]	; (7200 <shell_auto_complete+0x34>)
    71ee:	0018      	movs	r0, r3
    71f0:	f7fc fd48 	bl	3c84 <rt_kprintf>
}
    71f4:	46c0      	nop			; (mov r8, r8)
    71f6:	46bd      	mov	sp, r7
    71f8:	b002      	add	sp, #8
    71fa:	bd80      	pop	{r7, pc}
    71fc:	0000cea0 	.word	0x0000cea0
    7200:	0000cea4 	.word	0x0000cea4

00007204 <shell_handle_history>:

#ifdef FINSH_USING_HISTORY
static rt_bool_t shell_handle_history(struct finsh_shell *shell)
{
    7204:	b580      	push	{r7, lr}
    7206:	b082      	sub	sp, #8
    7208:	af00      	add	r7, sp, #0
    720a:	6078      	str	r0, [r7, #4]
    for (i = 0; i <= 60; i++)
        putchar(' ');
    rt_kprintf("\r");

#else
    rt_kprintf("\033[2K\r");
    720c:	4b09      	ldr	r3, [pc, #36]	; (7234 <shell_handle_history+0x30>)
    720e:	0018      	movs	r0, r3
    7210:	f7fc fd38 	bl	3c84 <rt_kprintf>
#endif
    rt_kprintf("%s%s", FINSH_PROMPT, shell->line);
    7214:	f7ff fe82 	bl	6f1c <finsh_get_prompt>
    7218:	0001      	movs	r1, r0
    721a:	687b      	ldr	r3, [r7, #4]
    721c:	33b7      	adds	r3, #183	; 0xb7
    721e:	33ff      	adds	r3, #255	; 0xff
    7220:	001a      	movs	r2, r3
    7222:	4b05      	ldr	r3, [pc, #20]	; (7238 <shell_handle_history+0x34>)
    7224:	0018      	movs	r0, r3
    7226:	f7fc fd2d 	bl	3c84 <rt_kprintf>
    return RT_FALSE;
    722a:	2300      	movs	r3, #0
}
    722c:	0018      	movs	r0, r3
    722e:	46bd      	mov	sp, r7
    7230:	b002      	add	sp, #8
    7232:	bd80      	pop	{r7, pc}
    7234:	0000ceac 	.word	0x0000ceac
    7238:	0000cea4 	.word	0x0000cea4

0000723c <shell_push_history>:

static void shell_push_history(struct finsh_shell *shell)
{
    723c:	b580      	push	{r7, lr}
    723e:	b084      	sub	sp, #16
    7240:	af00      	add	r7, sp, #0
    7242:	6078      	str	r0, [r7, #4]
    if (shell->line_position != 0)
    7244:	687a      	ldr	r2, [r7, #4]
    7246:	2382      	movs	r3, #130	; 0x82
    7248:	009b      	lsls	r3, r3, #2
    724a:	5ad3      	ldrh	r3, [r2, r3]
    724c:	2b00      	cmp	r3, #0
    724e:	d100      	bne.n	7252 <shell_push_history+0x16>
    7250:	e09f      	b.n	7392 <shell_push_history+0x156>
    {
        /* push history */
        if (shell->history_count >= FINSH_HISTORY_LINES)
    7252:	687b      	ldr	r3, [r7, #4]
    7254:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    7256:	2b04      	cmp	r3, #4
    7258:	d953      	bls.n	7302 <shell_push_history+0xc6>
        {
            /* if current cmd is same as last cmd, don't push */
            if (memcmp(&shell->cmd_history[FINSH_HISTORY_LINES - 1], shell->line, FINSH_CMD_SIZE))
    725a:	687b      	ldr	r3, [r7, #4]
    725c:	3367      	adds	r3, #103	; 0x67
    725e:	33ff      	adds	r3, #255	; 0xff
    7260:	0018      	movs	r0, r3
    7262:	687b      	ldr	r3, [r7, #4]
    7264:	33b7      	adds	r3, #183	; 0xb7
    7266:	33ff      	adds	r3, #255	; 0xff
    7268:	2250      	movs	r2, #80	; 0x50
    726a:	0019      	movs	r1, r3
    726c:	f001 fdda 	bl	8e24 <memcmp>
    7270:	1e03      	subs	r3, r0, #0
    7272:	d100      	bne.n	7276 <shell_push_history+0x3a>
    7274:	e08d      	b.n	7392 <shell_push_history+0x156>
            {
                /* move history */
                int index;
                for (index = 0; index < FINSH_HISTORY_LINES - 1; index ++)
    7276:	2300      	movs	r3, #0
    7278:	60fb      	str	r3, [r7, #12]
    727a:	e019      	b.n	72b0 <shell_push_history+0x74>
                {
                    rt_memcpy(&shell->cmd_history[index][0],
    727c:	68fa      	ldr	r2, [r7, #12]
    727e:	0013      	movs	r3, r2
    7280:	009b      	lsls	r3, r3, #2
    7282:	189b      	adds	r3, r3, r2
    7284:	011b      	lsls	r3, r3, #4
    7286:	3320      	adds	r3, #32
    7288:	687a      	ldr	r2, [r7, #4]
    728a:	18d3      	adds	r3, r2, r3
    728c:	1d98      	adds	r0, r3, #6
                           &shell->cmd_history[index + 1][0], FINSH_CMD_SIZE);
    728e:	68fb      	ldr	r3, [r7, #12]
    7290:	1c5a      	adds	r2, r3, #1
    7292:	0013      	movs	r3, r2
    7294:	009b      	lsls	r3, r3, #2
    7296:	189b      	adds	r3, r3, r2
    7298:	011b      	lsls	r3, r3, #4
    729a:	3320      	adds	r3, #32
    729c:	687a      	ldr	r2, [r7, #4]
    729e:	18d3      	adds	r3, r2, r3
    72a0:	3306      	adds	r3, #6
                    rt_memcpy(&shell->cmd_history[index][0],
    72a2:	2250      	movs	r2, #80	; 0x50
    72a4:	0019      	movs	r1, r3
    72a6:	f7fb fff0 	bl	328a <rt_memcpy>
                for (index = 0; index < FINSH_HISTORY_LINES - 1; index ++)
    72aa:	68fb      	ldr	r3, [r7, #12]
    72ac:	3301      	adds	r3, #1
    72ae:	60fb      	str	r3, [r7, #12]
    72b0:	68fb      	ldr	r3, [r7, #12]
    72b2:	2b03      	cmp	r3, #3
    72b4:	dde2      	ble.n	727c <shell_push_history+0x40>
                }
                rt_memset(&shell->cmd_history[index][0], 0, FINSH_CMD_SIZE);
    72b6:	68fa      	ldr	r2, [r7, #12]
    72b8:	0013      	movs	r3, r2
    72ba:	009b      	lsls	r3, r3, #2
    72bc:	189b      	adds	r3, r3, r2
    72be:	011b      	lsls	r3, r3, #4
    72c0:	3320      	adds	r3, #32
    72c2:	687a      	ldr	r2, [r7, #4]
    72c4:	18d3      	adds	r3, r2, r3
    72c6:	3306      	adds	r3, #6
    72c8:	2250      	movs	r2, #80	; 0x50
    72ca:	2100      	movs	r1, #0
    72cc:	0018      	movs	r0, r3
    72ce:	f7fb ff83 	bl	31d8 <rt_memset>
                rt_memcpy(&shell->cmd_history[index][0], shell->line, shell->line_position);
    72d2:	68fa      	ldr	r2, [r7, #12]
    72d4:	0013      	movs	r3, r2
    72d6:	009b      	lsls	r3, r3, #2
    72d8:	189b      	adds	r3, r3, r2
    72da:	011b      	lsls	r3, r3, #4
    72dc:	3320      	adds	r3, #32
    72de:	687a      	ldr	r2, [r7, #4]
    72e0:	18d3      	adds	r3, r2, r3
    72e2:	1d98      	adds	r0, r3, #6
    72e4:	687b      	ldr	r3, [r7, #4]
    72e6:	33b7      	adds	r3, #183	; 0xb7
    72e8:	33ff      	adds	r3, #255	; 0xff
    72ea:	0019      	movs	r1, r3
    72ec:	687a      	ldr	r2, [r7, #4]
    72ee:	2382      	movs	r3, #130	; 0x82
    72f0:	009b      	lsls	r3, r3, #2
    72f2:	5ad3      	ldrh	r3, [r2, r3]
    72f4:	001a      	movs	r2, r3
    72f6:	f7fb ffc8 	bl	328a <rt_memcpy>

                /* it's the maximum history */
                shell->history_count = FINSH_HISTORY_LINES;
    72fa:	687b      	ldr	r3, [r7, #4]
    72fc:	2205      	movs	r2, #5
    72fe:	849a      	strh	r2, [r3, #36]	; 0x24
    7300:	e047      	b.n	7392 <shell_push_history+0x156>
            }
        }
        else
        {
            /* if current cmd is same as last cmd, don't push */
            if (shell->history_count == 0 || memcmp(&shell->cmd_history[shell->history_count - 1], shell->line, FINSH_CMD_SIZE))
    7302:	687b      	ldr	r3, [r7, #4]
    7304:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    7306:	2b00      	cmp	r3, #0
    7308:	d013      	beq.n	7332 <shell_push_history+0xf6>
    730a:	687b      	ldr	r3, [r7, #4]
    730c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    730e:	1e5a      	subs	r2, r3, #1
    7310:	0013      	movs	r3, r2
    7312:	009b      	lsls	r3, r3, #2
    7314:	189b      	adds	r3, r3, r2
    7316:	011b      	lsls	r3, r3, #4
    7318:	3320      	adds	r3, #32
    731a:	687a      	ldr	r2, [r7, #4]
    731c:	18d3      	adds	r3, r2, r3
    731e:	1d98      	adds	r0, r3, #6
    7320:	687b      	ldr	r3, [r7, #4]
    7322:	33b7      	adds	r3, #183	; 0xb7
    7324:	33ff      	adds	r3, #255	; 0xff
    7326:	2250      	movs	r2, #80	; 0x50
    7328:	0019      	movs	r1, r3
    732a:	f001 fd7b 	bl	8e24 <memcmp>
    732e:	1e03      	subs	r3, r0, #0
    7330:	d02f      	beq.n	7392 <shell_push_history+0x156>
            {
                shell->current_history = shell->history_count;
    7332:	687b      	ldr	r3, [r7, #4]
    7334:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    7336:	687b      	ldr	r3, [r7, #4]
    7338:	845a      	strh	r2, [r3, #34]	; 0x22
                rt_memset(&shell->cmd_history[shell->history_count][0], 0, FINSH_CMD_SIZE);
    733a:	687b      	ldr	r3, [r7, #4]
    733c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    733e:	001a      	movs	r2, r3
    7340:	0013      	movs	r3, r2
    7342:	009b      	lsls	r3, r3, #2
    7344:	189b      	adds	r3, r3, r2
    7346:	011b      	lsls	r3, r3, #4
    7348:	3320      	adds	r3, #32
    734a:	687a      	ldr	r2, [r7, #4]
    734c:	18d3      	adds	r3, r2, r3
    734e:	3306      	adds	r3, #6
    7350:	2250      	movs	r2, #80	; 0x50
    7352:	2100      	movs	r1, #0
    7354:	0018      	movs	r0, r3
    7356:	f7fb ff3f 	bl	31d8 <rt_memset>
                rt_memcpy(&shell->cmd_history[shell->history_count][0], shell->line, shell->line_position);
    735a:	687b      	ldr	r3, [r7, #4]
    735c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    735e:	001a      	movs	r2, r3
    7360:	0013      	movs	r3, r2
    7362:	009b      	lsls	r3, r3, #2
    7364:	189b      	adds	r3, r3, r2
    7366:	011b      	lsls	r3, r3, #4
    7368:	3320      	adds	r3, #32
    736a:	687a      	ldr	r2, [r7, #4]
    736c:	18d3      	adds	r3, r2, r3
    736e:	1d98      	adds	r0, r3, #6
    7370:	687b      	ldr	r3, [r7, #4]
    7372:	33b7      	adds	r3, #183	; 0xb7
    7374:	33ff      	adds	r3, #255	; 0xff
    7376:	0019      	movs	r1, r3
    7378:	687a      	ldr	r2, [r7, #4]
    737a:	2382      	movs	r3, #130	; 0x82
    737c:	009b      	lsls	r3, r3, #2
    737e:	5ad3      	ldrh	r3, [r2, r3]
    7380:	001a      	movs	r2, r3
    7382:	f7fb ff82 	bl	328a <rt_memcpy>

                /* increase count and set current history position */
                shell->history_count ++;
    7386:	687b      	ldr	r3, [r7, #4]
    7388:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    738a:	3301      	adds	r3, #1
    738c:	b29a      	uxth	r2, r3
    738e:	687b      	ldr	r3, [r7, #4]
    7390:	849a      	strh	r2, [r3, #36]	; 0x24
            }
        }
    }
    shell->current_history = shell->history_count;
    7392:	687b      	ldr	r3, [r7, #4]
    7394:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    7396:	687b      	ldr	r3, [r7, #4]
    7398:	845a      	strh	r2, [r3, #34]	; 0x22
}
    739a:	46c0      	nop			; (mov r8, r8)
    739c:	46bd      	mov	sp, r7
    739e:	b004      	add	sp, #16
    73a0:	bd80      	pop	{r7, pc}
	...

000073a4 <finsh_thread_entry>:
#endif

void finsh_thread_entry(void *parameter)
{
    73a4:	b590      	push	{r4, r7, lr}
    73a6:	b089      	sub	sp, #36	; 0x24
    73a8:	af00      	add	r7, sp, #0
    73aa:	6078      	str	r0, [r7, #4]
    int ch;

    /* normal is echo mode */
#ifndef FINSH_ECHO_DISABLE_DEFAULT
    shell->echo_mode = 1;
    73ac:	4bb1      	ldr	r3, [pc, #708]	; (7674 <finsh_thread_entry+0x2d0>)
    73ae:	681b      	ldr	r3, [r3, #0]
    73b0:	2221      	movs	r2, #33	; 0x21
    73b2:	5c99      	ldrb	r1, [r3, r2]
    73b4:	2001      	movs	r0, #1
    73b6:	4301      	orrs	r1, r0
    73b8:	5499      	strb	r1, [r3, r2]
    shell->echo_mode = 0;
#endif

#if !defined(RT_USING_POSIX_STDIO) && defined(RT_USING_DEVICE)
    /* set console device as shell device */
    if (shell->device == RT_NULL)
    73ba:	4bae      	ldr	r3, [pc, #696]	; (7674 <finsh_thread_entry+0x2d0>)
    73bc:	681a      	ldr	r2, [r3, #0]
    73be:	2383      	movs	r3, #131	; 0x83
    73c0:	009b      	lsls	r3, r3, #2
    73c2:	58d3      	ldr	r3, [r2, r3]
    73c4:	2b00      	cmp	r3, #0
    73c6:	d10a      	bne.n	73de <finsh_thread_entry+0x3a>
    {
        rt_device_t console = rt_console_get_device();
    73c8:	f7fc fc24 	bl	3c14 <rt_console_get_device>
    73cc:	0003      	movs	r3, r0
    73ce:	613b      	str	r3, [r7, #16]
        if (console)
    73d0:	693b      	ldr	r3, [r7, #16]
    73d2:	2b00      	cmp	r3, #0
    73d4:	d003      	beq.n	73de <finsh_thread_entry+0x3a>
        {
            finsh_set_device(console->parent.name);
    73d6:	693b      	ldr	r3, [r7, #16]
    73d8:	0018      	movs	r0, r3
    73da:	f7ff fe79 	bl	70d0 <finsh_set_device>
    }
    /* waiting authenticate success */
    finsh_wait_auth();
#endif

    rt_kprintf(FINSH_PROMPT);
    73de:	f7ff fd9d 	bl	6f1c <finsh_get_prompt>
    73e2:	0003      	movs	r3, r0
    73e4:	0018      	movs	r0, r3
    73e6:	f7fc fc4d 	bl	3c84 <rt_kprintf>

    while (1)
    {
        ch = (int)finsh_getchar();
    73ea:	f7ff fe01 	bl	6ff0 <finsh_getchar>
    73ee:	0003      	movs	r3, r0
    73f0:	60fb      	str	r3, [r7, #12]
        if (ch < 0)
    73f2:	68fb      	ldr	r3, [r7, #12]
    73f4:	2b00      	cmp	r3, #0
    73f6:	da00      	bge.n	73fa <finsh_thread_entry+0x56>
    73f8:	e2db      	b.n	79b2 <finsh_thread_entry+0x60e>
         * up key  : 0x1b 0x5b 0x41
         * down key: 0x1b 0x5b 0x42
         * right key:0x1b 0x5b 0x43
         * left key: 0x1b 0x5b 0x44
         */
        if (ch == 0x1b)
    73fa:	68fb      	ldr	r3, [r7, #12]
    73fc:	2b1b      	cmp	r3, #27
    73fe:	d105      	bne.n	740c <finsh_thread_entry+0x68>
        {
            shell->stat = WAIT_SPEC_KEY;
    7400:	4b9c      	ldr	r3, [pc, #624]	; (7674 <finsh_thread_entry+0x2d0>)
    7402:	681b      	ldr	r3, [r3, #0]
    7404:	2220      	movs	r2, #32
    7406:	2101      	movs	r1, #1
    7408:	5499      	strb	r1, [r3, r2]
            continue;
    740a:	e2dd      	b.n	79c8 <finsh_thread_entry+0x624>
        }
        else if (shell->stat == WAIT_SPEC_KEY)
    740c:	4b99      	ldr	r3, [pc, #612]	; (7674 <finsh_thread_entry+0x2d0>)
    740e:	681b      	ldr	r3, [r3, #0]
    7410:	2220      	movs	r2, #32
    7412:	5c9b      	ldrb	r3, [r3, r2]
    7414:	2b01      	cmp	r3, #1
    7416:	d10e      	bne.n	7436 <finsh_thread_entry+0x92>
        {
            if (ch == 0x5b)
    7418:	68fb      	ldr	r3, [r7, #12]
    741a:	2b5b      	cmp	r3, #91	; 0x5b
    741c:	d105      	bne.n	742a <finsh_thread_entry+0x86>
            {
                shell->stat = WAIT_FUNC_KEY;
    741e:	4b95      	ldr	r3, [pc, #596]	; (7674 <finsh_thread_entry+0x2d0>)
    7420:	681b      	ldr	r3, [r3, #0]
    7422:	2220      	movs	r2, #32
    7424:	2102      	movs	r1, #2
    7426:	5499      	strb	r1, [r3, r2]
                continue;
    7428:	e2ce      	b.n	79c8 <finsh_thread_entry+0x624>
            }

            shell->stat = WAIT_NORMAL;
    742a:	4b92      	ldr	r3, [pc, #584]	; (7674 <finsh_thread_entry+0x2d0>)
    742c:	681b      	ldr	r3, [r3, #0]
    742e:	2220      	movs	r2, #32
    7430:	2100      	movs	r1, #0
    7432:	5499      	strb	r1, [r3, r2]
    7434:	e0e3      	b.n	75fe <finsh_thread_entry+0x25a>
        }
        else if (shell->stat == WAIT_FUNC_KEY)
    7436:	4b8f      	ldr	r3, [pc, #572]	; (7674 <finsh_thread_entry+0x2d0>)
    7438:	681b      	ldr	r3, [r3, #0]
    743a:	2220      	movs	r2, #32
    743c:	5c9b      	ldrb	r3, [r3, r2]
    743e:	2b02      	cmp	r3, #2
    7440:	d000      	beq.n	7444 <finsh_thread_entry+0xa0>
    7442:	e0dc      	b.n	75fe <finsh_thread_entry+0x25a>
        {
            shell->stat = WAIT_NORMAL;
    7444:	4b8b      	ldr	r3, [pc, #556]	; (7674 <finsh_thread_entry+0x2d0>)
    7446:	681b      	ldr	r3, [r3, #0]
    7448:	2220      	movs	r2, #32
    744a:	2100      	movs	r1, #0
    744c:	5499      	strb	r1, [r3, r2]

            if (ch == 0x41) /* up key */
    744e:	68fb      	ldr	r3, [r7, #12]
    7450:	2b41      	cmp	r3, #65	; 0x41
    7452:	d140      	bne.n	74d6 <finsh_thread_entry+0x132>
            {
#ifdef FINSH_USING_HISTORY
                /* prev history */
                if (shell->current_history > 0)
    7454:	4b87      	ldr	r3, [pc, #540]	; (7674 <finsh_thread_entry+0x2d0>)
    7456:	681b      	ldr	r3, [r3, #0]
    7458:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    745a:	2b00      	cmp	r3, #0
    745c:	d036      	beq.n	74cc <finsh_thread_entry+0x128>
                    shell->current_history --;
    745e:	4b85      	ldr	r3, [pc, #532]	; (7674 <finsh_thread_entry+0x2d0>)
    7460:	681b      	ldr	r3, [r3, #0]
    7462:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    7464:	3a01      	subs	r2, #1
    7466:	b292      	uxth	r2, r2
    7468:	845a      	strh	r2, [r3, #34]	; 0x22
                    shell->current_history = 0;
                    continue;
                }

                /* copy the history command */
                rt_memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
    746a:	4b82      	ldr	r3, [pc, #520]	; (7674 <finsh_thread_entry+0x2d0>)
    746c:	681b      	ldr	r3, [r3, #0]
    746e:	33b7      	adds	r3, #183	; 0xb7
    7470:	33ff      	adds	r3, #255	; 0xff
    7472:	0018      	movs	r0, r3
    7474:	4b7f      	ldr	r3, [pc, #508]	; (7674 <finsh_thread_entry+0x2d0>)
    7476:	681a      	ldr	r2, [r3, #0]
    7478:	4b7e      	ldr	r3, [pc, #504]	; (7674 <finsh_thread_entry+0x2d0>)
    747a:	681b      	ldr	r3, [r3, #0]
    747c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    747e:	0019      	movs	r1, r3
    7480:	000b      	movs	r3, r1
    7482:	009b      	lsls	r3, r3, #2
    7484:	185b      	adds	r3, r3, r1
    7486:	011b      	lsls	r3, r3, #4
    7488:	3320      	adds	r3, #32
    748a:	18d3      	adds	r3, r2, r3
    748c:	3306      	adds	r3, #6
    748e:	2250      	movs	r2, #80	; 0x50
    7490:	0019      	movs	r1, r3
    7492:	f7fb fefa 	bl	328a <rt_memcpy>
                       FINSH_CMD_SIZE);
                shell->line_curpos = shell->line_position = strlen(shell->line);
    7496:	4b77      	ldr	r3, [pc, #476]	; (7674 <finsh_thread_entry+0x2d0>)
    7498:	681b      	ldr	r3, [r3, #0]
    749a:	33b7      	adds	r3, #183	; 0xb7
    749c:	33ff      	adds	r3, #255	; 0xff
    749e:	0018      	movs	r0, r3
    74a0:	f001 fd8a 	bl	8fb8 <strlen>
    74a4:	0002      	movs	r2, r0
    74a6:	4b73      	ldr	r3, [pc, #460]	; (7674 <finsh_thread_entry+0x2d0>)
    74a8:	681b      	ldr	r3, [r3, #0]
    74aa:	b291      	uxth	r1, r2
    74ac:	2282      	movs	r2, #130	; 0x82
    74ae:	0092      	lsls	r2, r2, #2
    74b0:	5299      	strh	r1, [r3, r2]
    74b2:	4a70      	ldr	r2, [pc, #448]	; (7674 <finsh_thread_entry+0x2d0>)
    74b4:	6812      	ldr	r2, [r2, #0]
    74b6:	2182      	movs	r1, #130	; 0x82
    74b8:	0089      	lsls	r1, r1, #2
    74ba:	5a59      	ldrh	r1, [r3, r1]
    74bc:	4b6e      	ldr	r3, [pc, #440]	; (7678 <finsh_thread_entry+0x2d4>)
    74be:	52d1      	strh	r1, [r2, r3]
                shell_handle_history(shell);
    74c0:	4b6c      	ldr	r3, [pc, #432]	; (7674 <finsh_thread_entry+0x2d0>)
    74c2:	681b      	ldr	r3, [r3, #0]
    74c4:	0018      	movs	r0, r3
    74c6:	f7ff fe9d 	bl	7204 <shell_handle_history>
#endif
                continue;
    74ca:	e27d      	b.n	79c8 <finsh_thread_entry+0x624>
                    shell->current_history = 0;
    74cc:	4b69      	ldr	r3, [pc, #420]	; (7674 <finsh_thread_entry+0x2d0>)
    74ce:	681b      	ldr	r3, [r3, #0]
    74d0:	2200      	movs	r2, #0
    74d2:	845a      	strh	r2, [r3, #34]	; 0x22
                    continue;
    74d4:	e278      	b.n	79c8 <finsh_thread_entry+0x624>
            }
            else if (ch == 0x42) /* down key */
    74d6:	68fb      	ldr	r3, [r7, #12]
    74d8:	2b42      	cmp	r3, #66	; 0x42
    74da:	d14f      	bne.n	757c <finsh_thread_entry+0x1d8>
            {
#ifdef FINSH_USING_HISTORY
                /* next history */
                if (shell->current_history < shell->history_count - 1)
    74dc:	4b65      	ldr	r3, [pc, #404]	; (7674 <finsh_thread_entry+0x2d0>)
    74de:	681b      	ldr	r3, [r3, #0]
    74e0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    74e2:	001a      	movs	r2, r3
    74e4:	4b63      	ldr	r3, [pc, #396]	; (7674 <finsh_thread_entry+0x2d0>)
    74e6:	681b      	ldr	r3, [r3, #0]
    74e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    74ea:	3b01      	subs	r3, #1
    74ec:	429a      	cmp	r2, r3
    74ee:	da06      	bge.n	74fe <finsh_thread_entry+0x15a>
                    shell->current_history ++;
    74f0:	4b60      	ldr	r3, [pc, #384]	; (7674 <finsh_thread_entry+0x2d0>)
    74f2:	681b      	ldr	r3, [r3, #0]
    74f4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    74f6:	3201      	adds	r2, #1
    74f8:	b292      	uxth	r2, r2
    74fa:	845a      	strh	r2, [r3, #34]	; 0x22
    74fc:	e00d      	b.n	751a <finsh_thread_entry+0x176>
                else
                {
                    /* set to the end of history */
                    if (shell->history_count != 0)
    74fe:	4b5d      	ldr	r3, [pc, #372]	; (7674 <finsh_thread_entry+0x2d0>)
    7500:	681b      	ldr	r3, [r3, #0]
    7502:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    7504:	2b00      	cmp	r3, #0
    7506:	d100      	bne.n	750a <finsh_thread_entry+0x166>
    7508:	e255      	b.n	79b6 <finsh_thread_entry+0x612>
                        shell->current_history = shell->history_count - 1;
    750a:	4b5a      	ldr	r3, [pc, #360]	; (7674 <finsh_thread_entry+0x2d0>)
    750c:	681b      	ldr	r3, [r3, #0]
    750e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    7510:	4b58      	ldr	r3, [pc, #352]	; (7674 <finsh_thread_entry+0x2d0>)
    7512:	681b      	ldr	r3, [r3, #0]
    7514:	3a01      	subs	r2, #1
    7516:	b292      	uxth	r2, r2
    7518:	845a      	strh	r2, [r3, #34]	; 0x22
                    else
                        continue;
                }

                rt_memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
    751a:	4b56      	ldr	r3, [pc, #344]	; (7674 <finsh_thread_entry+0x2d0>)
    751c:	681b      	ldr	r3, [r3, #0]
    751e:	33b7      	adds	r3, #183	; 0xb7
    7520:	33ff      	adds	r3, #255	; 0xff
    7522:	0018      	movs	r0, r3
    7524:	4b53      	ldr	r3, [pc, #332]	; (7674 <finsh_thread_entry+0x2d0>)
    7526:	681a      	ldr	r2, [r3, #0]
    7528:	4b52      	ldr	r3, [pc, #328]	; (7674 <finsh_thread_entry+0x2d0>)
    752a:	681b      	ldr	r3, [r3, #0]
    752c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    752e:	0019      	movs	r1, r3
    7530:	000b      	movs	r3, r1
    7532:	009b      	lsls	r3, r3, #2
    7534:	185b      	adds	r3, r3, r1
    7536:	011b      	lsls	r3, r3, #4
    7538:	3320      	adds	r3, #32
    753a:	18d3      	adds	r3, r2, r3
    753c:	3306      	adds	r3, #6
    753e:	2250      	movs	r2, #80	; 0x50
    7540:	0019      	movs	r1, r3
    7542:	f7fb fea2 	bl	328a <rt_memcpy>
                       FINSH_CMD_SIZE);
                shell->line_curpos = shell->line_position = strlen(shell->line);
    7546:	4b4b      	ldr	r3, [pc, #300]	; (7674 <finsh_thread_entry+0x2d0>)
    7548:	681b      	ldr	r3, [r3, #0]
    754a:	33b7      	adds	r3, #183	; 0xb7
    754c:	33ff      	adds	r3, #255	; 0xff
    754e:	0018      	movs	r0, r3
    7550:	f001 fd32 	bl	8fb8 <strlen>
    7554:	0002      	movs	r2, r0
    7556:	4b47      	ldr	r3, [pc, #284]	; (7674 <finsh_thread_entry+0x2d0>)
    7558:	681b      	ldr	r3, [r3, #0]
    755a:	b291      	uxth	r1, r2
    755c:	2282      	movs	r2, #130	; 0x82
    755e:	0092      	lsls	r2, r2, #2
    7560:	5299      	strh	r1, [r3, r2]
    7562:	4a44      	ldr	r2, [pc, #272]	; (7674 <finsh_thread_entry+0x2d0>)
    7564:	6812      	ldr	r2, [r2, #0]
    7566:	2182      	movs	r1, #130	; 0x82
    7568:	0089      	lsls	r1, r1, #2
    756a:	5a59      	ldrh	r1, [r3, r1]
    756c:	4b42      	ldr	r3, [pc, #264]	; (7678 <finsh_thread_entry+0x2d4>)
    756e:	52d1      	strh	r1, [r2, r3]
                shell_handle_history(shell);
    7570:	4b40      	ldr	r3, [pc, #256]	; (7674 <finsh_thread_entry+0x2d0>)
    7572:	681b      	ldr	r3, [r3, #0]
    7574:	0018      	movs	r0, r3
    7576:	f7ff fe45 	bl	7204 <shell_handle_history>
#endif
                continue;
    757a:	e225      	b.n	79c8 <finsh_thread_entry+0x624>
            }
            else if (ch == 0x44) /* left key */
    757c:	68fb      	ldr	r3, [r7, #12]
    757e:	2b44      	cmp	r3, #68	; 0x44
    7580:	d113      	bne.n	75aa <finsh_thread_entry+0x206>
            {
                if (shell->line_curpos)
    7582:	4b3c      	ldr	r3, [pc, #240]	; (7674 <finsh_thread_entry+0x2d0>)
    7584:	681b      	ldr	r3, [r3, #0]
    7586:	4a3c      	ldr	r2, [pc, #240]	; (7678 <finsh_thread_entry+0x2d4>)
    7588:	5a9b      	ldrh	r3, [r3, r2]
    758a:	2b00      	cmp	r3, #0
    758c:	d100      	bne.n	7590 <finsh_thread_entry+0x1ec>
    758e:	e214      	b.n	79ba <finsh_thread_entry+0x616>
                {
                    rt_kprintf("\b");
    7590:	4b3a      	ldr	r3, [pc, #232]	; (767c <finsh_thread_entry+0x2d8>)
    7592:	0018      	movs	r0, r3
    7594:	f7fc fb76 	bl	3c84 <rt_kprintf>
                    shell->line_curpos --;
    7598:	4b36      	ldr	r3, [pc, #216]	; (7674 <finsh_thread_entry+0x2d0>)
    759a:	681b      	ldr	r3, [r3, #0]
    759c:	4a36      	ldr	r2, [pc, #216]	; (7678 <finsh_thread_entry+0x2d4>)
    759e:	5a9a      	ldrh	r2, [r3, r2]
    75a0:	3a01      	subs	r2, #1
    75a2:	b291      	uxth	r1, r2
    75a4:	4a34      	ldr	r2, [pc, #208]	; (7678 <finsh_thread_entry+0x2d4>)
    75a6:	5299      	strh	r1, [r3, r2]
                }

                continue;
    75a8:	e207      	b.n	79ba <finsh_thread_entry+0x616>
            }
            else if (ch == 0x43) /* right key */
    75aa:	68fb      	ldr	r3, [r7, #12]
    75ac:	2b43      	cmp	r3, #67	; 0x43
    75ae:	d126      	bne.n	75fe <finsh_thread_entry+0x25a>
            {
                if (shell->line_curpos < shell->line_position)
    75b0:	4b30      	ldr	r3, [pc, #192]	; (7674 <finsh_thread_entry+0x2d0>)
    75b2:	681b      	ldr	r3, [r3, #0]
    75b4:	4a30      	ldr	r2, [pc, #192]	; (7678 <finsh_thread_entry+0x2d4>)
    75b6:	5a9a      	ldrh	r2, [r3, r2]
    75b8:	4b2e      	ldr	r3, [pc, #184]	; (7674 <finsh_thread_entry+0x2d0>)
    75ba:	6819      	ldr	r1, [r3, #0]
    75bc:	2382      	movs	r3, #130	; 0x82
    75be:	009b      	lsls	r3, r3, #2
    75c0:	5acb      	ldrh	r3, [r1, r3]
    75c2:	429a      	cmp	r2, r3
    75c4:	d300      	bcc.n	75c8 <finsh_thread_entry+0x224>
    75c6:	e1fa      	b.n	79be <finsh_thread_entry+0x61a>
                {
                    rt_kprintf("%c", shell->line[shell->line_curpos]);
    75c8:	4b2a      	ldr	r3, [pc, #168]	; (7674 <finsh_thread_entry+0x2d0>)
    75ca:	681a      	ldr	r2, [r3, #0]
    75cc:	4b29      	ldr	r3, [pc, #164]	; (7674 <finsh_thread_entry+0x2d0>)
    75ce:	681b      	ldr	r3, [r3, #0]
    75d0:	4929      	ldr	r1, [pc, #164]	; (7678 <finsh_thread_entry+0x2d4>)
    75d2:	5a5b      	ldrh	r3, [r3, r1]
    75d4:	0019      	movs	r1, r3
    75d6:	23db      	movs	r3, #219	; 0xdb
    75d8:	005b      	lsls	r3, r3, #1
    75da:	1852      	adds	r2, r2, r1
    75dc:	18d3      	adds	r3, r2, r3
    75de:	781b      	ldrb	r3, [r3, #0]
    75e0:	001a      	movs	r2, r3
    75e2:	4b27      	ldr	r3, [pc, #156]	; (7680 <finsh_thread_entry+0x2dc>)
    75e4:	0011      	movs	r1, r2
    75e6:	0018      	movs	r0, r3
    75e8:	f7fc fb4c 	bl	3c84 <rt_kprintf>
                    shell->line_curpos ++;
    75ec:	4b21      	ldr	r3, [pc, #132]	; (7674 <finsh_thread_entry+0x2d0>)
    75ee:	681b      	ldr	r3, [r3, #0]
    75f0:	4a21      	ldr	r2, [pc, #132]	; (7678 <finsh_thread_entry+0x2d4>)
    75f2:	5a9a      	ldrh	r2, [r3, r2]
    75f4:	3201      	adds	r2, #1
    75f6:	b291      	uxth	r1, r2
    75f8:	4a1f      	ldr	r2, [pc, #124]	; (7678 <finsh_thread_entry+0x2d4>)
    75fa:	5299      	strh	r1, [r3, r2]
                }

                continue;
    75fc:	e1df      	b.n	79be <finsh_thread_entry+0x61a>
            }
        }

        /* received null or error */
        if (ch == '\0' || ch == 0xFF) continue;
    75fe:	68fb      	ldr	r3, [r7, #12]
    7600:	2b00      	cmp	r3, #0
    7602:	d100      	bne.n	7606 <finsh_thread_entry+0x262>
    7604:	e1dd      	b.n	79c2 <finsh_thread_entry+0x61e>
    7606:	68fb      	ldr	r3, [r7, #12]
    7608:	2bff      	cmp	r3, #255	; 0xff
    760a:	d100      	bne.n	760e <finsh_thread_entry+0x26a>
    760c:	e1d9      	b.n	79c2 <finsh_thread_entry+0x61e>
        /* handle tab key */
        else if (ch == '\t')
    760e:	68fb      	ldr	r3, [r7, #12]
    7610:	2b09      	cmp	r3, #9
    7612:	d137      	bne.n	7684 <finsh_thread_entry+0x2e0>
        {
            int i;
            /* move the cursor to the beginning of line */
            for (i = 0; i < shell->line_curpos; i++)
    7614:	2300      	movs	r3, #0
    7616:	61fb      	str	r3, [r7, #28]
    7618:	e006      	b.n	7628 <finsh_thread_entry+0x284>
                rt_kprintf("\b");
    761a:	4b18      	ldr	r3, [pc, #96]	; (767c <finsh_thread_entry+0x2d8>)
    761c:	0018      	movs	r0, r3
    761e:	f7fc fb31 	bl	3c84 <rt_kprintf>
            for (i = 0; i < shell->line_curpos; i++)
    7622:	69fb      	ldr	r3, [r7, #28]
    7624:	3301      	adds	r3, #1
    7626:	61fb      	str	r3, [r7, #28]
    7628:	4b12      	ldr	r3, [pc, #72]	; (7674 <finsh_thread_entry+0x2d0>)
    762a:	681b      	ldr	r3, [r3, #0]
    762c:	4a12      	ldr	r2, [pc, #72]	; (7678 <finsh_thread_entry+0x2d4>)
    762e:	5a9b      	ldrh	r3, [r3, r2]
    7630:	001a      	movs	r2, r3
    7632:	69fb      	ldr	r3, [r7, #28]
    7634:	4293      	cmp	r3, r2
    7636:	dbf0      	blt.n	761a <finsh_thread_entry+0x276>

            /* auto complete */
            shell_auto_complete(&shell->line[0]);
    7638:	4b0e      	ldr	r3, [pc, #56]	; (7674 <finsh_thread_entry+0x2d0>)
    763a:	681b      	ldr	r3, [r3, #0]
    763c:	33b7      	adds	r3, #183	; 0xb7
    763e:	33ff      	adds	r3, #255	; 0xff
    7640:	0018      	movs	r0, r3
    7642:	f7ff fdc3 	bl	71cc <shell_auto_complete>
            /* re-calculate position */
            shell->line_curpos = shell->line_position = strlen(shell->line);
    7646:	4b0b      	ldr	r3, [pc, #44]	; (7674 <finsh_thread_entry+0x2d0>)
    7648:	681b      	ldr	r3, [r3, #0]
    764a:	33b7      	adds	r3, #183	; 0xb7
    764c:	33ff      	adds	r3, #255	; 0xff
    764e:	0018      	movs	r0, r3
    7650:	f001 fcb2 	bl	8fb8 <strlen>
    7654:	0002      	movs	r2, r0
    7656:	4b07      	ldr	r3, [pc, #28]	; (7674 <finsh_thread_entry+0x2d0>)
    7658:	681b      	ldr	r3, [r3, #0]
    765a:	b291      	uxth	r1, r2
    765c:	2282      	movs	r2, #130	; 0x82
    765e:	0092      	lsls	r2, r2, #2
    7660:	5299      	strh	r1, [r3, r2]
    7662:	4a04      	ldr	r2, [pc, #16]	; (7674 <finsh_thread_entry+0x2d0>)
    7664:	6812      	ldr	r2, [r2, #0]
    7666:	2182      	movs	r1, #130	; 0x82
    7668:	0089      	lsls	r1, r1, #2
    766a:	5a59      	ldrh	r1, [r3, r1]
    766c:	4b02      	ldr	r3, [pc, #8]	; (7678 <finsh_thread_entry+0x2d4>)
    766e:	52d1      	strh	r1, [r2, r3]

            continue;
    7670:	e1aa      	b.n	79c8 <finsh_thread_entry+0x624>
    7672:	46c0      	nop			; (mov r8, r8)
    7674:	2000029c 	.word	0x2000029c
    7678:	0000020a 	.word	0x0000020a
    767c:	0000ceb4 	.word	0x0000ceb4
    7680:	0000ceb8 	.word	0x0000ceb8
        }
        /* handle backspace key */
        else if (ch == 0x7f || ch == 0x08)
    7684:	68fb      	ldr	r3, [r7, #12]
    7686:	2b7f      	cmp	r3, #127	; 0x7f
    7688:	d003      	beq.n	7692 <finsh_thread_entry+0x2ee>
    768a:	68fb      	ldr	r3, [r7, #12]
    768c:	2b08      	cmp	r3, #8
    768e:	d000      	beq.n	7692 <finsh_thread_entry+0x2ee>
    7690:	e08d      	b.n	77ae <finsh_thread_entry+0x40a>
        {
            /* note that shell->line_curpos >= 0 */
            if (shell->line_curpos == 0)
    7692:	4bce      	ldr	r3, [pc, #824]	; (79cc <finsh_thread_entry+0x628>)
    7694:	681b      	ldr	r3, [r3, #0]
    7696:	4ace      	ldr	r2, [pc, #824]	; (79d0 <finsh_thread_entry+0x62c>)
    7698:	5a9b      	ldrh	r3, [r3, r2]
    769a:	2b00      	cmp	r3, #0
    769c:	d100      	bne.n	76a0 <finsh_thread_entry+0x2fc>
    769e:	e192      	b.n	79c6 <finsh_thread_entry+0x622>
                continue;

            shell->line_position--;
    76a0:	4bca      	ldr	r3, [pc, #808]	; (79cc <finsh_thread_entry+0x628>)
    76a2:	681b      	ldr	r3, [r3, #0]
    76a4:	2282      	movs	r2, #130	; 0x82
    76a6:	0092      	lsls	r2, r2, #2
    76a8:	5a9a      	ldrh	r2, [r3, r2]
    76aa:	3a01      	subs	r2, #1
    76ac:	b291      	uxth	r1, r2
    76ae:	2282      	movs	r2, #130	; 0x82
    76b0:	0092      	lsls	r2, r2, #2
    76b2:	5299      	strh	r1, [r3, r2]
            shell->line_curpos--;
    76b4:	4bc5      	ldr	r3, [pc, #788]	; (79cc <finsh_thread_entry+0x628>)
    76b6:	681b      	ldr	r3, [r3, #0]
    76b8:	4ac5      	ldr	r2, [pc, #788]	; (79d0 <finsh_thread_entry+0x62c>)
    76ba:	5a9a      	ldrh	r2, [r3, r2]
    76bc:	3a01      	subs	r2, #1
    76be:	b291      	uxth	r1, r2
    76c0:	4ac3      	ldr	r2, [pc, #780]	; (79d0 <finsh_thread_entry+0x62c>)
    76c2:	5299      	strh	r1, [r3, r2]

            if (shell->line_position > shell->line_curpos)
    76c4:	4bc1      	ldr	r3, [pc, #772]	; (79cc <finsh_thread_entry+0x628>)
    76c6:	681a      	ldr	r2, [r3, #0]
    76c8:	2382      	movs	r3, #130	; 0x82
    76ca:	009b      	lsls	r3, r3, #2
    76cc:	5ad2      	ldrh	r2, [r2, r3]
    76ce:	4bbf      	ldr	r3, [pc, #764]	; (79cc <finsh_thread_entry+0x628>)
    76d0:	681b      	ldr	r3, [r3, #0]
    76d2:	49bf      	ldr	r1, [pc, #764]	; (79d0 <finsh_thread_entry+0x62c>)
    76d4:	5a5b      	ldrh	r3, [r3, r1]
    76d6:	429a      	cmp	r2, r3
    76d8:	d956      	bls.n	7788 <finsh_thread_entry+0x3e4>
            {
                int i;

                rt_memmove(&shell->line[shell->line_curpos],
    76da:	4bbc      	ldr	r3, [pc, #752]	; (79cc <finsh_thread_entry+0x628>)
    76dc:	681a      	ldr	r2, [r3, #0]
    76de:	4bbb      	ldr	r3, [pc, #748]	; (79cc <finsh_thread_entry+0x628>)
    76e0:	681b      	ldr	r3, [r3, #0]
    76e2:	49bb      	ldr	r1, [pc, #748]	; (79d0 <finsh_thread_entry+0x62c>)
    76e4:	5a5b      	ldrh	r3, [r3, r1]
    76e6:	33b1      	adds	r3, #177	; 0xb1
    76e8:	33ff      	adds	r3, #255	; 0xff
    76ea:	18d3      	adds	r3, r2, r3
    76ec:	1d98      	adds	r0, r3, #6
                           &shell->line[shell->line_curpos + 1],
    76ee:	4bb7      	ldr	r3, [pc, #732]	; (79cc <finsh_thread_entry+0x628>)
    76f0:	681a      	ldr	r2, [r3, #0]
    76f2:	4bb6      	ldr	r3, [pc, #728]	; (79cc <finsh_thread_entry+0x628>)
    76f4:	681b      	ldr	r3, [r3, #0]
    76f6:	49b6      	ldr	r1, [pc, #728]	; (79d0 <finsh_thread_entry+0x62c>)
    76f8:	5a5b      	ldrh	r3, [r3, r1]
    76fa:	3301      	adds	r3, #1
    76fc:	33b1      	adds	r3, #177	; 0xb1
    76fe:	33ff      	adds	r3, #255	; 0xff
    7700:	18d3      	adds	r3, r2, r3
    7702:	1d99      	adds	r1, r3, #6
                           shell->line_position - shell->line_curpos);
    7704:	4bb1      	ldr	r3, [pc, #708]	; (79cc <finsh_thread_entry+0x628>)
    7706:	681a      	ldr	r2, [r3, #0]
    7708:	2382      	movs	r3, #130	; 0x82
    770a:	009b      	lsls	r3, r3, #2
    770c:	5ad3      	ldrh	r3, [r2, r3]
    770e:	001c      	movs	r4, r3
    7710:	4bae      	ldr	r3, [pc, #696]	; (79cc <finsh_thread_entry+0x628>)
    7712:	681b      	ldr	r3, [r3, #0]
    7714:	4aae      	ldr	r2, [pc, #696]	; (79d0 <finsh_thread_entry+0x62c>)
    7716:	5a9b      	ldrh	r3, [r3, r2]
    7718:	1ae3      	subs	r3, r4, r3
                rt_memmove(&shell->line[shell->line_curpos],
    771a:	001a      	movs	r2, r3
    771c:	f7fb fe1b 	bl	3356 <rt_memmove>
                shell->line[shell->line_position] = 0;
    7720:	4baa      	ldr	r3, [pc, #680]	; (79cc <finsh_thread_entry+0x628>)
    7722:	681a      	ldr	r2, [r3, #0]
    7724:	4ba9      	ldr	r3, [pc, #676]	; (79cc <finsh_thread_entry+0x628>)
    7726:	6819      	ldr	r1, [r3, #0]
    7728:	2382      	movs	r3, #130	; 0x82
    772a:	009b      	lsls	r3, r3, #2
    772c:	5acb      	ldrh	r3, [r1, r3]
    772e:	0019      	movs	r1, r3
    7730:	23db      	movs	r3, #219	; 0xdb
    7732:	005b      	lsls	r3, r3, #1
    7734:	1852      	adds	r2, r2, r1
    7736:	18d3      	adds	r3, r2, r3
    7738:	2200      	movs	r2, #0
    773a:	701a      	strb	r2, [r3, #0]

                rt_kprintf("\b%s  \b", &shell->line[shell->line_curpos]);
    773c:	4ba3      	ldr	r3, [pc, #652]	; (79cc <finsh_thread_entry+0x628>)
    773e:	681a      	ldr	r2, [r3, #0]
    7740:	4ba2      	ldr	r3, [pc, #648]	; (79cc <finsh_thread_entry+0x628>)
    7742:	681b      	ldr	r3, [r3, #0]
    7744:	49a2      	ldr	r1, [pc, #648]	; (79d0 <finsh_thread_entry+0x62c>)
    7746:	5a5b      	ldrh	r3, [r3, r1]
    7748:	33b1      	adds	r3, #177	; 0xb1
    774a:	33ff      	adds	r3, #255	; 0xff
    774c:	18d3      	adds	r3, r2, r3
    774e:	1d9a      	adds	r2, r3, #6
    7750:	4ba0      	ldr	r3, [pc, #640]	; (79d4 <finsh_thread_entry+0x630>)
    7752:	0011      	movs	r1, r2
    7754:	0018      	movs	r0, r3
    7756:	f7fc fa95 	bl	3c84 <rt_kprintf>

                /* move the cursor to the origin position */
                for (i = shell->line_curpos; i <= shell->line_position; i++)
    775a:	4b9c      	ldr	r3, [pc, #624]	; (79cc <finsh_thread_entry+0x628>)
    775c:	681b      	ldr	r3, [r3, #0]
    775e:	4a9c      	ldr	r2, [pc, #624]	; (79d0 <finsh_thread_entry+0x62c>)
    7760:	5a9b      	ldrh	r3, [r3, r2]
    7762:	61bb      	str	r3, [r7, #24]
    7764:	e006      	b.n	7774 <finsh_thread_entry+0x3d0>
                    rt_kprintf("\b");
    7766:	4b9c      	ldr	r3, [pc, #624]	; (79d8 <finsh_thread_entry+0x634>)
    7768:	0018      	movs	r0, r3
    776a:	f7fc fa8b 	bl	3c84 <rt_kprintf>
                for (i = shell->line_curpos; i <= shell->line_position; i++)
    776e:	69bb      	ldr	r3, [r7, #24]
    7770:	3301      	adds	r3, #1
    7772:	61bb      	str	r3, [r7, #24]
    7774:	4b95      	ldr	r3, [pc, #596]	; (79cc <finsh_thread_entry+0x628>)
    7776:	681a      	ldr	r2, [r3, #0]
    7778:	2382      	movs	r3, #130	; 0x82
    777a:	009b      	lsls	r3, r3, #2
    777c:	5ad3      	ldrh	r3, [r2, r3]
    777e:	001a      	movs	r2, r3
    7780:	69bb      	ldr	r3, [r7, #24]
    7782:	4293      	cmp	r3, r2
    7784:	ddef      	ble.n	7766 <finsh_thread_entry+0x3c2>
            {
                rt_kprintf("\b \b");
                shell->line[shell->line_position] = 0;
            }

            continue;
    7786:	e11f      	b.n	79c8 <finsh_thread_entry+0x624>
                rt_kprintf("\b \b");
    7788:	4b94      	ldr	r3, [pc, #592]	; (79dc <finsh_thread_entry+0x638>)
    778a:	0018      	movs	r0, r3
    778c:	f7fc fa7a 	bl	3c84 <rt_kprintf>
                shell->line[shell->line_position] = 0;
    7790:	4b8e      	ldr	r3, [pc, #568]	; (79cc <finsh_thread_entry+0x628>)
    7792:	681a      	ldr	r2, [r3, #0]
    7794:	4b8d      	ldr	r3, [pc, #564]	; (79cc <finsh_thread_entry+0x628>)
    7796:	6819      	ldr	r1, [r3, #0]
    7798:	2382      	movs	r3, #130	; 0x82
    779a:	009b      	lsls	r3, r3, #2
    779c:	5acb      	ldrh	r3, [r1, r3]
    779e:	0019      	movs	r1, r3
    77a0:	23db      	movs	r3, #219	; 0xdb
    77a2:	005b      	lsls	r3, r3, #1
    77a4:	1852      	adds	r2, r2, r1
    77a6:	18d3      	adds	r3, r2, r3
    77a8:	2200      	movs	r2, #0
    77aa:	701a      	strb	r2, [r3, #0]
            continue;
    77ac:	e10c      	b.n	79c8 <finsh_thread_entry+0x624>
        }

        /* handle end of line, break */
        if (ch == '\r' || ch == '\n')
    77ae:	68fb      	ldr	r3, [r7, #12]
    77b0:	2b0d      	cmp	r3, #13
    77b2:	d002      	beq.n	77ba <finsh_thread_entry+0x416>
    77b4:	68fb      	ldr	r3, [r7, #12]
    77b6:	2b0a      	cmp	r3, #10
    77b8:	d13b      	bne.n	7832 <finsh_thread_entry+0x48e>
        {
#ifdef FINSH_USING_HISTORY
            shell_push_history(shell);
    77ba:	4b84      	ldr	r3, [pc, #528]	; (79cc <finsh_thread_entry+0x628>)
    77bc:	681b      	ldr	r3, [r3, #0]
    77be:	0018      	movs	r0, r3
    77c0:	f7ff fd3c 	bl	723c <shell_push_history>
#endif
            if (shell->echo_mode)
    77c4:	4b81      	ldr	r3, [pc, #516]	; (79cc <finsh_thread_entry+0x628>)
    77c6:	681b      	ldr	r3, [r3, #0]
    77c8:	2221      	movs	r2, #33	; 0x21
    77ca:	5c9b      	ldrb	r3, [r3, r2]
    77cc:	2201      	movs	r2, #1
    77ce:	4013      	ands	r3, r2
    77d0:	b2db      	uxtb	r3, r3
    77d2:	2b00      	cmp	r3, #0
    77d4:	d003      	beq.n	77de <finsh_thread_entry+0x43a>
                rt_kprintf("\n");
    77d6:	4b82      	ldr	r3, [pc, #520]	; (79e0 <finsh_thread_entry+0x63c>)
    77d8:	0018      	movs	r0, r3
    77da:	f7fc fa53 	bl	3c84 <rt_kprintf>
            msh_exec(shell->line, shell->line_position);
    77de:	4b7b      	ldr	r3, [pc, #492]	; (79cc <finsh_thread_entry+0x628>)
    77e0:	681b      	ldr	r3, [r3, #0]
    77e2:	33b7      	adds	r3, #183	; 0xb7
    77e4:	33ff      	adds	r3, #255	; 0xff
    77e6:	0018      	movs	r0, r3
    77e8:	4b78      	ldr	r3, [pc, #480]	; (79cc <finsh_thread_entry+0x628>)
    77ea:	681a      	ldr	r2, [r3, #0]
    77ec:	2382      	movs	r3, #130	; 0x82
    77ee:	009b      	lsls	r3, r3, #2
    77f0:	5ad3      	ldrh	r3, [r2, r3]
    77f2:	0019      	movs	r1, r3
    77f4:	f000 fb2a 	bl	7e4c <msh_exec>

            rt_kprintf(FINSH_PROMPT);
    77f8:	f7ff fb90 	bl	6f1c <finsh_get_prompt>
    77fc:	0003      	movs	r3, r0
    77fe:	0018      	movs	r0, r3
    7800:	f7fc fa40 	bl	3c84 <rt_kprintf>
            rt_memset(shell->line, 0, sizeof(shell->line));
    7804:	4b71      	ldr	r3, [pc, #452]	; (79cc <finsh_thread_entry+0x628>)
    7806:	681b      	ldr	r3, [r3, #0]
    7808:	33b7      	adds	r3, #183	; 0xb7
    780a:	33ff      	adds	r3, #255	; 0xff
    780c:	2251      	movs	r2, #81	; 0x51
    780e:	2100      	movs	r1, #0
    7810:	0018      	movs	r0, r3
    7812:	f7fb fce1 	bl	31d8 <rt_memset>
            shell->line_curpos = shell->line_position = 0;
    7816:	4b6d      	ldr	r3, [pc, #436]	; (79cc <finsh_thread_entry+0x628>)
    7818:	681b      	ldr	r3, [r3, #0]
    781a:	2282      	movs	r2, #130	; 0x82
    781c:	0092      	lsls	r2, r2, #2
    781e:	2100      	movs	r1, #0
    7820:	5299      	strh	r1, [r3, r2]
    7822:	4a6a      	ldr	r2, [pc, #424]	; (79cc <finsh_thread_entry+0x628>)
    7824:	6812      	ldr	r2, [r2, #0]
    7826:	2182      	movs	r1, #130	; 0x82
    7828:	0089      	lsls	r1, r1, #2
    782a:	5a59      	ldrh	r1, [r3, r1]
    782c:	4b68      	ldr	r3, [pc, #416]	; (79d0 <finsh_thread_entry+0x62c>)
    782e:	52d1      	strh	r1, [r2, r3]
            continue;
    7830:	e0ca      	b.n	79c8 <finsh_thread_entry+0x624>
        }

        /* it's a large line, discard it */
        if (shell->line_position >= FINSH_CMD_SIZE)
    7832:	4b66      	ldr	r3, [pc, #408]	; (79cc <finsh_thread_entry+0x628>)
    7834:	681a      	ldr	r2, [r3, #0]
    7836:	2382      	movs	r3, #130	; 0x82
    7838:	009b      	lsls	r3, r3, #2
    783a:	5ad3      	ldrh	r3, [r2, r3]
    783c:	2b4f      	cmp	r3, #79	; 0x4f
    783e:	d905      	bls.n	784c <finsh_thread_entry+0x4a8>
            shell->line_position = 0;
    7840:	4b62      	ldr	r3, [pc, #392]	; (79cc <finsh_thread_entry+0x628>)
    7842:	681a      	ldr	r2, [r3, #0]
    7844:	2382      	movs	r3, #130	; 0x82
    7846:	009b      	lsls	r3, r3, #2
    7848:	2100      	movs	r1, #0
    784a:	52d1      	strh	r1, [r2, r3]

        /* normal character */
        if (shell->line_curpos < shell->line_position)
    784c:	4b5f      	ldr	r3, [pc, #380]	; (79cc <finsh_thread_entry+0x628>)
    784e:	681b      	ldr	r3, [r3, #0]
    7850:	4a5f      	ldr	r2, [pc, #380]	; (79d0 <finsh_thread_entry+0x62c>)
    7852:	5a9a      	ldrh	r2, [r3, r2]
    7854:	4b5d      	ldr	r3, [pc, #372]	; (79cc <finsh_thread_entry+0x628>)
    7856:	6819      	ldr	r1, [r3, #0]
    7858:	2382      	movs	r3, #130	; 0x82
    785a:	009b      	lsls	r3, r3, #2
    785c:	5acb      	ldrh	r3, [r1, r3]
    785e:	429a      	cmp	r2, r3
    7860:	d260      	bcs.n	7924 <finsh_thread_entry+0x580>
        {
            int i;

            rt_memmove(&shell->line[shell->line_curpos + 1],
    7862:	4b5a      	ldr	r3, [pc, #360]	; (79cc <finsh_thread_entry+0x628>)
    7864:	681a      	ldr	r2, [r3, #0]
    7866:	4b59      	ldr	r3, [pc, #356]	; (79cc <finsh_thread_entry+0x628>)
    7868:	681b      	ldr	r3, [r3, #0]
    786a:	4959      	ldr	r1, [pc, #356]	; (79d0 <finsh_thread_entry+0x62c>)
    786c:	5a5b      	ldrh	r3, [r3, r1]
    786e:	3301      	adds	r3, #1
    7870:	33b1      	adds	r3, #177	; 0xb1
    7872:	33ff      	adds	r3, #255	; 0xff
    7874:	18d3      	adds	r3, r2, r3
    7876:	1d98      	adds	r0, r3, #6
                       &shell->line[shell->line_curpos],
    7878:	4b54      	ldr	r3, [pc, #336]	; (79cc <finsh_thread_entry+0x628>)
    787a:	681a      	ldr	r2, [r3, #0]
    787c:	4b53      	ldr	r3, [pc, #332]	; (79cc <finsh_thread_entry+0x628>)
    787e:	681b      	ldr	r3, [r3, #0]
    7880:	4953      	ldr	r1, [pc, #332]	; (79d0 <finsh_thread_entry+0x62c>)
    7882:	5a5b      	ldrh	r3, [r3, r1]
    7884:	33b1      	adds	r3, #177	; 0xb1
    7886:	33ff      	adds	r3, #255	; 0xff
    7888:	18d3      	adds	r3, r2, r3
    788a:	1d99      	adds	r1, r3, #6
                       shell->line_position - shell->line_curpos);
    788c:	4b4f      	ldr	r3, [pc, #316]	; (79cc <finsh_thread_entry+0x628>)
    788e:	681a      	ldr	r2, [r3, #0]
    7890:	2382      	movs	r3, #130	; 0x82
    7892:	009b      	lsls	r3, r3, #2
    7894:	5ad3      	ldrh	r3, [r2, r3]
    7896:	001c      	movs	r4, r3
    7898:	4b4c      	ldr	r3, [pc, #304]	; (79cc <finsh_thread_entry+0x628>)
    789a:	681b      	ldr	r3, [r3, #0]
    789c:	4a4c      	ldr	r2, [pc, #304]	; (79d0 <finsh_thread_entry+0x62c>)
    789e:	5a9b      	ldrh	r3, [r3, r2]
    78a0:	1ae3      	subs	r3, r4, r3
            rt_memmove(&shell->line[shell->line_curpos + 1],
    78a2:	001a      	movs	r2, r3
    78a4:	f7fb fd57 	bl	3356 <rt_memmove>
            shell->line[shell->line_curpos] = ch;
    78a8:	4b48      	ldr	r3, [pc, #288]	; (79cc <finsh_thread_entry+0x628>)
    78aa:	681a      	ldr	r2, [r3, #0]
    78ac:	4b47      	ldr	r3, [pc, #284]	; (79cc <finsh_thread_entry+0x628>)
    78ae:	681b      	ldr	r3, [r3, #0]
    78b0:	4947      	ldr	r1, [pc, #284]	; (79d0 <finsh_thread_entry+0x62c>)
    78b2:	5a5b      	ldrh	r3, [r3, r1]
    78b4:	0018      	movs	r0, r3
    78b6:	68fb      	ldr	r3, [r7, #12]
    78b8:	b2d9      	uxtb	r1, r3
    78ba:	23db      	movs	r3, #219	; 0xdb
    78bc:	005b      	lsls	r3, r3, #1
    78be:	1812      	adds	r2, r2, r0
    78c0:	18d3      	adds	r3, r2, r3
    78c2:	1c0a      	adds	r2, r1, #0
    78c4:	701a      	strb	r2, [r3, #0]
            if (shell->echo_mode)
    78c6:	4b41      	ldr	r3, [pc, #260]	; (79cc <finsh_thread_entry+0x628>)
    78c8:	681b      	ldr	r3, [r3, #0]
    78ca:	2221      	movs	r2, #33	; 0x21
    78cc:	5c9b      	ldrb	r3, [r3, r2]
    78ce:	2201      	movs	r2, #1
    78d0:	4013      	ands	r3, r2
    78d2:	b2db      	uxtb	r3, r3
    78d4:	2b00      	cmp	r3, #0
    78d6:	d00e      	beq.n	78f6 <finsh_thread_entry+0x552>
                rt_kprintf("%s", &shell->line[shell->line_curpos]);
    78d8:	4b3c      	ldr	r3, [pc, #240]	; (79cc <finsh_thread_entry+0x628>)
    78da:	681a      	ldr	r2, [r3, #0]
    78dc:	4b3b      	ldr	r3, [pc, #236]	; (79cc <finsh_thread_entry+0x628>)
    78de:	681b      	ldr	r3, [r3, #0]
    78e0:	493b      	ldr	r1, [pc, #236]	; (79d0 <finsh_thread_entry+0x62c>)
    78e2:	5a5b      	ldrh	r3, [r3, r1]
    78e4:	33b1      	adds	r3, #177	; 0xb1
    78e6:	33ff      	adds	r3, #255	; 0xff
    78e8:	18d3      	adds	r3, r2, r3
    78ea:	1d9a      	adds	r2, r3, #6
    78ec:	4b3d      	ldr	r3, [pc, #244]	; (79e4 <finsh_thread_entry+0x640>)
    78ee:	0011      	movs	r1, r2
    78f0:	0018      	movs	r0, r3
    78f2:	f7fc f9c7 	bl	3c84 <rt_kprintf>

            /* move the cursor to new position */
            for (i = shell->line_curpos; i < shell->line_position; i++)
    78f6:	4b35      	ldr	r3, [pc, #212]	; (79cc <finsh_thread_entry+0x628>)
    78f8:	681b      	ldr	r3, [r3, #0]
    78fa:	4a35      	ldr	r2, [pc, #212]	; (79d0 <finsh_thread_entry+0x62c>)
    78fc:	5a9b      	ldrh	r3, [r3, r2]
    78fe:	617b      	str	r3, [r7, #20]
    7900:	e006      	b.n	7910 <finsh_thread_entry+0x56c>
                rt_kprintf("\b");
    7902:	4b35      	ldr	r3, [pc, #212]	; (79d8 <finsh_thread_entry+0x634>)
    7904:	0018      	movs	r0, r3
    7906:	f7fc f9bd 	bl	3c84 <rt_kprintf>
            for (i = shell->line_curpos; i < shell->line_position; i++)
    790a:	697b      	ldr	r3, [r7, #20]
    790c:	3301      	adds	r3, #1
    790e:	617b      	str	r3, [r7, #20]
    7910:	4b2e      	ldr	r3, [pc, #184]	; (79cc <finsh_thread_entry+0x628>)
    7912:	681a      	ldr	r2, [r3, #0]
    7914:	2382      	movs	r3, #130	; 0x82
    7916:	009b      	lsls	r3, r3, #2
    7918:	5ad3      	ldrh	r3, [r2, r3]
    791a:	001a      	movs	r2, r3
    791c:	697b      	ldr	r3, [r7, #20]
    791e:	4293      	cmp	r3, r2
    7920:	dbef      	blt.n	7902 <finsh_thread_entry+0x55e>
    7922:	e01e      	b.n	7962 <finsh_thread_entry+0x5be>
        }
        else
        {
            shell->line[shell->line_position] = ch;
    7924:	4b29      	ldr	r3, [pc, #164]	; (79cc <finsh_thread_entry+0x628>)
    7926:	681a      	ldr	r2, [r3, #0]
    7928:	4b28      	ldr	r3, [pc, #160]	; (79cc <finsh_thread_entry+0x628>)
    792a:	6819      	ldr	r1, [r3, #0]
    792c:	2382      	movs	r3, #130	; 0x82
    792e:	009b      	lsls	r3, r3, #2
    7930:	5acb      	ldrh	r3, [r1, r3]
    7932:	0018      	movs	r0, r3
    7934:	68fb      	ldr	r3, [r7, #12]
    7936:	b2d9      	uxtb	r1, r3
    7938:	23db      	movs	r3, #219	; 0xdb
    793a:	005b      	lsls	r3, r3, #1
    793c:	1812      	adds	r2, r2, r0
    793e:	18d3      	adds	r3, r2, r3
    7940:	1c0a      	adds	r2, r1, #0
    7942:	701a      	strb	r2, [r3, #0]
            if (shell->echo_mode)
    7944:	4b21      	ldr	r3, [pc, #132]	; (79cc <finsh_thread_entry+0x628>)
    7946:	681b      	ldr	r3, [r3, #0]
    7948:	2221      	movs	r2, #33	; 0x21
    794a:	5c9b      	ldrb	r3, [r3, r2]
    794c:	2201      	movs	r2, #1
    794e:	4013      	ands	r3, r2
    7950:	b2db      	uxtb	r3, r3
    7952:	2b00      	cmp	r3, #0
    7954:	d005      	beq.n	7962 <finsh_thread_entry+0x5be>
                rt_kprintf("%c", ch);
    7956:	68fa      	ldr	r2, [r7, #12]
    7958:	4b23      	ldr	r3, [pc, #140]	; (79e8 <finsh_thread_entry+0x644>)
    795a:	0011      	movs	r1, r2
    795c:	0018      	movs	r0, r3
    795e:	f7fc f991 	bl	3c84 <rt_kprintf>
        }

        ch = 0;
    7962:	2300      	movs	r3, #0
    7964:	60fb      	str	r3, [r7, #12]
        shell->line_position ++;
    7966:	4b19      	ldr	r3, [pc, #100]	; (79cc <finsh_thread_entry+0x628>)
    7968:	681b      	ldr	r3, [r3, #0]
    796a:	2282      	movs	r2, #130	; 0x82
    796c:	0092      	lsls	r2, r2, #2
    796e:	5a9a      	ldrh	r2, [r3, r2]
    7970:	3201      	adds	r2, #1
    7972:	b291      	uxth	r1, r2
    7974:	2282      	movs	r2, #130	; 0x82
    7976:	0092      	lsls	r2, r2, #2
    7978:	5299      	strh	r1, [r3, r2]
        shell->line_curpos++;
    797a:	4b14      	ldr	r3, [pc, #80]	; (79cc <finsh_thread_entry+0x628>)
    797c:	681b      	ldr	r3, [r3, #0]
    797e:	4a14      	ldr	r2, [pc, #80]	; (79d0 <finsh_thread_entry+0x62c>)
    7980:	5a9a      	ldrh	r2, [r3, r2]
    7982:	3201      	adds	r2, #1
    7984:	b291      	uxth	r1, r2
    7986:	4a12      	ldr	r2, [pc, #72]	; (79d0 <finsh_thread_entry+0x62c>)
    7988:	5299      	strh	r1, [r3, r2]
        if (shell->line_position >= FINSH_CMD_SIZE)
    798a:	4b10      	ldr	r3, [pc, #64]	; (79cc <finsh_thread_entry+0x628>)
    798c:	681a      	ldr	r2, [r3, #0]
    798e:	2382      	movs	r3, #130	; 0x82
    7990:	009b      	lsls	r3, r3, #2
    7992:	5ad3      	ldrh	r3, [r2, r3]
    7994:	2b4f      	cmp	r3, #79	; 0x4f
    7996:	d800      	bhi.n	799a <finsh_thread_entry+0x5f6>
    7998:	e527      	b.n	73ea <finsh_thread_entry+0x46>
        {
            /* clear command line */
            shell->line_position = 0;
    799a:	4b0c      	ldr	r3, [pc, #48]	; (79cc <finsh_thread_entry+0x628>)
    799c:	681a      	ldr	r2, [r3, #0]
    799e:	2382      	movs	r3, #130	; 0x82
    79a0:	009b      	lsls	r3, r3, #2
    79a2:	2100      	movs	r1, #0
    79a4:	52d1      	strh	r1, [r2, r3]
            shell->line_curpos = 0;
    79a6:	4b09      	ldr	r3, [pc, #36]	; (79cc <finsh_thread_entry+0x628>)
    79a8:	681b      	ldr	r3, [r3, #0]
    79aa:	4a09      	ldr	r2, [pc, #36]	; (79d0 <finsh_thread_entry+0x62c>)
    79ac:	2100      	movs	r1, #0
    79ae:	5299      	strh	r1, [r3, r2]
    79b0:	e51b      	b.n	73ea <finsh_thread_entry+0x46>
            continue;
    79b2:	46c0      	nop			; (mov r8, r8)
    79b4:	e519      	b.n	73ea <finsh_thread_entry+0x46>
                        continue;
    79b6:	46c0      	nop			; (mov r8, r8)
    79b8:	e517      	b.n	73ea <finsh_thread_entry+0x46>
                continue;
    79ba:	46c0      	nop			; (mov r8, r8)
    79bc:	e515      	b.n	73ea <finsh_thread_entry+0x46>
                continue;
    79be:	46c0      	nop			; (mov r8, r8)
    79c0:	e513      	b.n	73ea <finsh_thread_entry+0x46>
        if (ch == '\0' || ch == 0xFF) continue;
    79c2:	46c0      	nop			; (mov r8, r8)
    79c4:	e511      	b.n	73ea <finsh_thread_entry+0x46>
                continue;
    79c6:	46c0      	nop			; (mov r8, r8)
        ch = (int)finsh_getchar();
    79c8:	e50f      	b.n	73ea <finsh_thread_entry+0x46>
    79ca:	46c0      	nop			; (mov r8, r8)
    79cc:	2000029c 	.word	0x2000029c
    79d0:	0000020a 	.word	0x0000020a
    79d4:	0000cebc 	.word	0x0000cebc
    79d8:	0000ceb4 	.word	0x0000ceb4
    79dc:	0000cec4 	.word	0x0000cec4
    79e0:	0000cea0 	.word	0x0000cea0
    79e4:	0000cec8 	.word	0x0000cec8
    79e8:	0000ceb8 	.word	0x0000ceb8

000079ec <finsh_system_function_init>:
        }
    } /* end of device read */
}

void finsh_system_function_init(const void *begin, const void *end)
{
    79ec:	b580      	push	{r7, lr}
    79ee:	b082      	sub	sp, #8
    79f0:	af00      	add	r7, sp, #0
    79f2:	6078      	str	r0, [r7, #4]
    79f4:	6039      	str	r1, [r7, #0]
    _syscall_table_begin = (struct finsh_syscall *) begin;
    79f6:	4b05      	ldr	r3, [pc, #20]	; (7a0c <finsh_system_function_init+0x20>)
    79f8:	687a      	ldr	r2, [r7, #4]
    79fa:	601a      	str	r2, [r3, #0]
    _syscall_table_end = (struct finsh_syscall *) end;
    79fc:	4b04      	ldr	r3, [pc, #16]	; (7a10 <finsh_system_function_init+0x24>)
    79fe:	683a      	ldr	r2, [r7, #0]
    7a00:	601a      	str	r2, [r3, #0]
}
    7a02:	46c0      	nop			; (mov r8, r8)
    7a04:	46bd      	mov	sp, r7
    7a06:	b002      	add	sp, #8
    7a08:	bd80      	pop	{r7, pc}
    7a0a:	46c0      	nop			; (mov r8, r8)
    7a0c:	20000294 	.word	0x20000294
    7a10:	20000298 	.word	0x20000298

00007a14 <finsh_system_init>:
 * @ingroup finsh
 *
 * This function will initialize finsh shell
 */
int finsh_system_init(void)
{
    7a14:	b580      	push	{r7, lr}
    7a16:	b084      	sub	sp, #16
    7a18:	af02      	add	r7, sp, #8
    rt_err_t result = RT_EOK;
    7a1a:	2300      	movs	r3, #0
    7a1c:	607b      	str	r3, [r7, #4]
                               __section_end("FSymTab"));
#elif defined (__GNUC__) || defined(__TI_COMPILER_VERSION__) || defined(__TASKING__)
    /* GNU GCC Compiler and TI CCS */
    extern const int __fsymtab_start;
    extern const int __fsymtab_end;
    finsh_system_function_init(&__fsymtab_start, &__fsymtab_end);
    7a1e:	4a20      	ldr	r2, [pc, #128]	; (7aa0 <finsh_system_init+0x8c>)
    7a20:	4b20      	ldr	r3, [pc, #128]	; (7aa4 <finsh_system_init+0x90>)
    7a22:	0011      	movs	r1, r2
    7a24:	0018      	movs	r0, r3
    7a26:	f7ff ffe1 	bl	79ec <finsh_system_function_init>
#endif
#endif

#ifdef RT_USING_HEAP
    /* create or set shell structure */
    shell = (struct finsh_shell *)rt_calloc(1, sizeof(struct finsh_shell));
    7a2a:	2384      	movs	r3, #132	; 0x84
    7a2c:	009b      	lsls	r3, r3, #2
    7a2e:	0019      	movs	r1, r3
    7a30:	2001      	movs	r0, #1
    7a32:	f7fc fa3d 	bl	3eb0 <rt_calloc>
    7a36:	0002      	movs	r2, r0
    7a38:	4b1b      	ldr	r3, [pc, #108]	; (7aa8 <finsh_system_init+0x94>)
    7a3a:	601a      	str	r2, [r3, #0]
    if (shell == RT_NULL)
    7a3c:	4b1a      	ldr	r3, [pc, #104]	; (7aa8 <finsh_system_init+0x94>)
    7a3e:	681b      	ldr	r3, [r3, #0]
    7a40:	2b00      	cmp	r3, #0
    7a42:	d106      	bne.n	7a52 <finsh_system_init+0x3e>
    {
        rt_kprintf("no memory for shell\n");
    7a44:	4b19      	ldr	r3, [pc, #100]	; (7aac <finsh_system_init+0x98>)
    7a46:	0018      	movs	r0, r3
    7a48:	f7fc f91c 	bl	3c84 <rt_kprintf>
        return -1;
    7a4c:	2301      	movs	r3, #1
    7a4e:	425b      	negs	r3, r3
    7a50:	e022      	b.n	7a98 <finsh_system_init+0x84>
    }
    tid = rt_thread_create(FINSH_THREAD_NAME,
    7a52:	2380      	movs	r3, #128	; 0x80
    7a54:	015b      	lsls	r3, r3, #5
    7a56:	4916      	ldr	r1, [pc, #88]	; (7ab0 <finsh_system_init+0x9c>)
    7a58:	4816      	ldr	r0, [pc, #88]	; (7ab4 <finsh_system_init+0xa0>)
    7a5a:	220a      	movs	r2, #10
    7a5c:	9201      	str	r2, [sp, #4]
    7a5e:	2214      	movs	r2, #20
    7a60:	9200      	str	r2, [sp, #0]
    7a62:	2200      	movs	r2, #0
    7a64:	f7fd f964 	bl	4d30 <rt_thread_create>
    7a68:	0003      	movs	r3, r0
    7a6a:	603b      	str	r3, [r7, #0]
                            finsh_thread_entry, RT_NULL,
                            &finsh_thread_stack[0], sizeof(finsh_thread_stack),
                            FINSH_THREAD_PRIORITY, 10);
#endif /* RT_USING_HEAP */

    rt_sem_init(&(shell->rx_sem), "shrx", 0, 0);
    7a6c:	4b0e      	ldr	r3, [pc, #56]	; (7aa8 <finsh_system_init+0x94>)
    7a6e:	681b      	ldr	r3, [r3, #0]
    7a70:	0018      	movs	r0, r3
    7a72:	4911      	ldr	r1, [pc, #68]	; (7ab8 <finsh_system_init+0xa4>)
    7a74:	2300      	movs	r3, #0
    7a76:	2200      	movs	r2, #0
    7a78:	f7fc fb84 	bl	4184 <rt_sem_init>
    finsh_set_prompt_mode(1);
    7a7c:	2001      	movs	r0, #1
    7a7e:	f7ff fa8d 	bl	6f9c <finsh_set_prompt_mode>

    if (tid != NULL && result == RT_EOK)
    7a82:	683b      	ldr	r3, [r7, #0]
    7a84:	2b00      	cmp	r3, #0
    7a86:	d006      	beq.n	7a96 <finsh_system_init+0x82>
    7a88:	687b      	ldr	r3, [r7, #4]
    7a8a:	2b00      	cmp	r3, #0
    7a8c:	d103      	bne.n	7a96 <finsh_system_init+0x82>
        rt_thread_startup(tid);
    7a8e:	683b      	ldr	r3, [r7, #0]
    7a90:	0018      	movs	r0, r3
    7a92:	f7fd f89b 	bl	4bcc <rt_thread_startup>
    return 0;
    7a96:	2300      	movs	r3, #0
}
    7a98:	0018      	movs	r0, r3
    7a9a:	46bd      	mov	sp, r7
    7a9c:	b002      	add	sp, #8
    7a9e:	bd80      	pop	{r7, pc}
    7aa0:	0000dd20 	.word	0x0000dd20
    7aa4:	0000dc78 	.word	0x0000dc78
    7aa8:	2000029c 	.word	0x2000029c
    7aac:	0000cecc 	.word	0x0000cecc
    7ab0:	000073a5 	.word	0x000073a5
    7ab4:	0000cee4 	.word	0x0000cee4
    7ab8:	0000ceec 	.word	0x0000ceec

00007abc <msh_help>:
#endif /* RT_USING_MODULE */

typedef int (*cmd_function_t)(int argc, char **argv);

int msh_help(int argc, char **argv)
{
    7abc:	b580      	push	{r7, lr}
    7abe:	b084      	sub	sp, #16
    7ac0:	af00      	add	r7, sp, #0
    7ac2:	6078      	str	r0, [r7, #4]
    7ac4:	6039      	str	r1, [r7, #0]
    rt_kprintf("RT-Thread shell commands:\n");
    7ac6:	4b10      	ldr	r3, [pc, #64]	; (7b08 <msh_help+0x4c>)
    7ac8:	0018      	movs	r0, r3
    7aca:	f7fc f8db 	bl	3c84 <rt_kprintf>
    {
        struct finsh_syscall *index;

        for (index = _syscall_table_begin;
    7ace:	4b0f      	ldr	r3, [pc, #60]	; (7b0c <msh_help+0x50>)
    7ad0:	681b      	ldr	r3, [r3, #0]
    7ad2:	60fb      	str	r3, [r7, #12]
    7ad4:	e00a      	b.n	7aec <msh_help+0x30>
                index < _syscall_table_end;
                FINSH_NEXT_SYSCALL(index))
        {
#if defined(FINSH_USING_DESCRIPTION) && defined(FINSH_USING_SYMTAB)
            rt_kprintf("%-16s - %s\n", index->name, index->desc);
    7ad6:	68fb      	ldr	r3, [r7, #12]
    7ad8:	6819      	ldr	r1, [r3, #0]
    7ada:	68fb      	ldr	r3, [r7, #12]
    7adc:	685a      	ldr	r2, [r3, #4]
    7ade:	4b0c      	ldr	r3, [pc, #48]	; (7b10 <msh_help+0x54>)
    7ae0:	0018      	movs	r0, r3
    7ae2:	f7fc f8cf 	bl	3c84 <rt_kprintf>
                FINSH_NEXT_SYSCALL(index))
    7ae6:	68fb      	ldr	r3, [r7, #12]
    7ae8:	330c      	adds	r3, #12
    7aea:	60fb      	str	r3, [r7, #12]
                index < _syscall_table_end;
    7aec:	4b09      	ldr	r3, [pc, #36]	; (7b14 <msh_help+0x58>)
    7aee:	681b      	ldr	r3, [r3, #0]
    7af0:	68fa      	ldr	r2, [r7, #12]
    7af2:	429a      	cmp	r2, r3
    7af4:	d3ef      	bcc.n	7ad6 <msh_help+0x1a>
#else
            rt_kprintf("%s ", index->name);
#endif
        }
    }
    rt_kprintf("\n");
    7af6:	4b08      	ldr	r3, [pc, #32]	; (7b18 <msh_help+0x5c>)
    7af8:	0018      	movs	r0, r3
    7afa:	f7fc f8c3 	bl	3c84 <rt_kprintf>

    return 0;
    7afe:	2300      	movs	r3, #0
}
    7b00:	0018      	movs	r0, r3
    7b02:	46bd      	mov	sp, r7
    7b04:	b004      	add	sp, #16
    7b06:	bd80      	pop	{r7, pc}
    7b08:	0000cf40 	.word	0x0000cf40
    7b0c:	20000294 	.word	0x20000294
    7b10:	0000cf5c 	.word	0x0000cf5c
    7b14:	20000298 	.word	0x20000298
    7b18:	0000cf68 	.word	0x0000cf68

00007b1c <cmd_ps>:
MSH_CMD_EXPORT_ALIAS(msh_help, help, RT-Thread shell help.);

#ifdef MSH_USING_BUILT_IN_COMMANDS
int cmd_ps(int argc, char **argv)
{
    7b1c:	b580      	push	{r7, lr}
    7b1e:	b082      	sub	sp, #8
    7b20:	af00      	add	r7, sp, #0
    7b22:	6078      	str	r0, [r7, #4]
    7b24:	6039      	str	r1, [r7, #0]
#ifdef RT_USING_MODULE
    if ((argc == 2) && (strcmp(argv[1], "-m") == 0))
        list_module();
    else
#endif
        list_thread();
    7b26:	f000 fb39 	bl	819c <list_thread>
    return 0;
    7b2a:	2300      	movs	r3, #0
}
    7b2c:	0018      	movs	r0, r3
    7b2e:	46bd      	mov	sp, r7
    7b30:	b002      	add	sp, #8
    7b32:	bd80      	pop	{r7, pc}

00007b34 <cmd_free>:
MSH_CMD_EXPORT_ALIAS(cmd_ps, ps, List threads in the system.);

#ifdef RT_USING_HEAP
int cmd_free(int argc, char **argv)
{
    7b34:	b580      	push	{r7, lr}
    7b36:	b086      	sub	sp, #24
    7b38:	af00      	add	r7, sp, #0
    7b3a:	6078      	str	r0, [r7, #4]
    7b3c:	6039      	str	r1, [r7, #0]
    rt_size_t total = 0, used = 0, max_used = 0;
    7b3e:	2300      	movs	r3, #0
    7b40:	617b      	str	r3, [r7, #20]
    7b42:	2300      	movs	r3, #0
    7b44:	613b      	str	r3, [r7, #16]
    7b46:	2300      	movs	r3, #0
    7b48:	60fb      	str	r3, [r7, #12]

    rt_memory_info(&total, &used, &max_used);
    7b4a:	230c      	movs	r3, #12
    7b4c:	18fa      	adds	r2, r7, r3
    7b4e:	2310      	movs	r3, #16
    7b50:	18f9      	adds	r1, r7, r3
    7b52:	2314      	movs	r3, #20
    7b54:	18fb      	adds	r3, r7, r3
    7b56:	0018      	movs	r0, r3
    7b58:	f7fc f9e8 	bl	3f2c <rt_memory_info>
    rt_kprintf("total   : %d\n", total);
    7b5c:	697a      	ldr	r2, [r7, #20]
    7b5e:	4b0b      	ldr	r3, [pc, #44]	; (7b8c <cmd_free+0x58>)
    7b60:	0011      	movs	r1, r2
    7b62:	0018      	movs	r0, r3
    7b64:	f7fc f88e 	bl	3c84 <rt_kprintf>
    rt_kprintf("used    : %d\n", used);
    7b68:	693a      	ldr	r2, [r7, #16]
    7b6a:	4b09      	ldr	r3, [pc, #36]	; (7b90 <cmd_free+0x5c>)
    7b6c:	0011      	movs	r1, r2
    7b6e:	0018      	movs	r0, r3
    7b70:	f7fc f888 	bl	3c84 <rt_kprintf>
    rt_kprintf("maximum : %d\n", max_used);
    7b74:	68fa      	ldr	r2, [r7, #12]
    7b76:	4b07      	ldr	r3, [pc, #28]	; (7b94 <cmd_free+0x60>)
    7b78:	0011      	movs	r1, r2
    7b7a:	0018      	movs	r0, r3
    7b7c:	f7fc f882 	bl	3c84 <rt_kprintf>
    return 0;
    7b80:	2300      	movs	r3, #0
}
    7b82:	0018      	movs	r0, r3
    7b84:	46bd      	mov	sp, r7
    7b86:	b006      	add	sp, #24
    7b88:	bd80      	pop	{r7, pc}
    7b8a:	46c0      	nop			; (mov r8, r8)
    7b8c:	0000cf6c 	.word	0x0000cf6c
    7b90:	0000cf7c 	.word	0x0000cf7c
    7b94:	0000cf8c 	.word	0x0000cf8c

00007b98 <msh_split>:
MSH_CMD_EXPORT_ALIAS(cmd_free, free, Show the memory usage in the system.);
#endif /* RT_USING_HEAP */
#endif /* MSH_USING_BUILT_IN_COMMANDS */

static int msh_split(char *cmd, rt_size_t length, char *argv[FINSH_ARG_MAX])
{
    7b98:	b580      	push	{r7, lr}
    7b9a:	b088      	sub	sp, #32
    7b9c:	af00      	add	r7, sp, #0
    7b9e:	60f8      	str	r0, [r7, #12]
    7ba0:	60b9      	str	r1, [r7, #8]
    7ba2:	607a      	str	r2, [r7, #4]
    char *ptr;
    rt_size_t position;
    rt_size_t argc;
    rt_size_t i;

    ptr = cmd;
    7ba4:	68fb      	ldr	r3, [r7, #12]
    7ba6:	61fb      	str	r3, [r7, #28]
    position = 0;
    7ba8:	2300      	movs	r3, #0
    7baa:	61bb      	str	r3, [r7, #24]
    argc = 0;
    7bac:	2300      	movs	r3, #0
    7bae:	617b      	str	r3, [r7, #20]

    while (position < length)
    7bb0:	e097      	b.n	7ce2 <msh_split+0x14a>
    {
        /* strip bank and tab */
        while ((*ptr == ' ' || *ptr == '\t') && position < length)
        {
            *ptr = '\0';
    7bb2:	69fb      	ldr	r3, [r7, #28]
    7bb4:	2200      	movs	r2, #0
    7bb6:	701a      	strb	r2, [r3, #0]
            ptr ++;
    7bb8:	69fb      	ldr	r3, [r7, #28]
    7bba:	3301      	adds	r3, #1
    7bbc:	61fb      	str	r3, [r7, #28]
            position ++;
    7bbe:	69bb      	ldr	r3, [r7, #24]
    7bc0:	3301      	adds	r3, #1
    7bc2:	61bb      	str	r3, [r7, #24]
        while ((*ptr == ' ' || *ptr == '\t') && position < length)
    7bc4:	69fb      	ldr	r3, [r7, #28]
    7bc6:	781b      	ldrb	r3, [r3, #0]
    7bc8:	2b20      	cmp	r3, #32
    7bca:	d003      	beq.n	7bd4 <msh_split+0x3c>
    7bcc:	69fb      	ldr	r3, [r7, #28]
    7bce:	781b      	ldrb	r3, [r3, #0]
    7bd0:	2b09      	cmp	r3, #9
    7bd2:	d103      	bne.n	7bdc <msh_split+0x44>
    7bd4:	69ba      	ldr	r2, [r7, #24]
    7bd6:	68bb      	ldr	r3, [r7, #8]
    7bd8:	429a      	cmp	r2, r3
    7bda:	d3ea      	bcc.n	7bb2 <msh_split+0x1a>
        }

        if (argc >= FINSH_ARG_MAX)
    7bdc:	697b      	ldr	r3, [r7, #20]
    7bde:	2b09      	cmp	r3, #9
    7be0:	d91c      	bls.n	7c1c <msh_split+0x84>
        {
            rt_kprintf("Too many args ! We only Use:\n");
    7be2:	4b48      	ldr	r3, [pc, #288]	; (7d04 <msh_split+0x16c>)
    7be4:	0018      	movs	r0, r3
    7be6:	f7fc f84d 	bl	3c84 <rt_kprintf>
            for (i = 0; i < argc; i++)
    7bea:	2300      	movs	r3, #0
    7bec:	613b      	str	r3, [r7, #16]
    7bee:	e00c      	b.n	7c0a <msh_split+0x72>
            {
                rt_kprintf("%s ", argv[i]);
    7bf0:	693b      	ldr	r3, [r7, #16]
    7bf2:	009b      	lsls	r3, r3, #2
    7bf4:	687a      	ldr	r2, [r7, #4]
    7bf6:	18d3      	adds	r3, r2, r3
    7bf8:	681a      	ldr	r2, [r3, #0]
    7bfa:	4b43      	ldr	r3, [pc, #268]	; (7d08 <msh_split+0x170>)
    7bfc:	0011      	movs	r1, r2
    7bfe:	0018      	movs	r0, r3
    7c00:	f7fc f840 	bl	3c84 <rt_kprintf>
            for (i = 0; i < argc; i++)
    7c04:	693b      	ldr	r3, [r7, #16]
    7c06:	3301      	adds	r3, #1
    7c08:	613b      	str	r3, [r7, #16]
    7c0a:	693a      	ldr	r2, [r7, #16]
    7c0c:	697b      	ldr	r3, [r7, #20]
    7c0e:	429a      	cmp	r2, r3
    7c10:	d3ee      	bcc.n	7bf0 <msh_split+0x58>
            }
            rt_kprintf("\n");
    7c12:	4b3e      	ldr	r3, [pc, #248]	; (7d0c <msh_split+0x174>)
    7c14:	0018      	movs	r0, r3
    7c16:	f7fc f835 	bl	3c84 <rt_kprintf>
            break;
    7c1a:	e06d      	b.n	7cf8 <msh_split+0x160>
        }

        if (position >= length) break;
    7c1c:	69ba      	ldr	r2, [r7, #24]
    7c1e:	68bb      	ldr	r3, [r7, #8]
    7c20:	429a      	cmp	r2, r3
    7c22:	d264      	bcs.n	7cee <msh_split+0x156>

        /* handle string */
        if (*ptr == '"')
    7c24:	69fb      	ldr	r3, [r7, #28]
    7c26:	781b      	ldrb	r3, [r3, #0]
    7c28:	2b22      	cmp	r3, #34	; 0x22
    7c2a:	d13a      	bne.n	7ca2 <msh_split+0x10a>
        {
            ptr ++;
    7c2c:	69fb      	ldr	r3, [r7, #28]
    7c2e:	3301      	adds	r3, #1
    7c30:	61fb      	str	r3, [r7, #28]
            position ++;
    7c32:	69bb      	ldr	r3, [r7, #24]
    7c34:	3301      	adds	r3, #1
    7c36:	61bb      	str	r3, [r7, #24]
            argv[argc] = ptr;
    7c38:	697b      	ldr	r3, [r7, #20]
    7c3a:	009b      	lsls	r3, r3, #2
    7c3c:	687a      	ldr	r2, [r7, #4]
    7c3e:	18d3      	adds	r3, r2, r3
    7c40:	69fa      	ldr	r2, [r7, #28]
    7c42:	601a      	str	r2, [r3, #0]
            argc ++;
    7c44:	697b      	ldr	r3, [r7, #20]
    7c46:	3301      	adds	r3, #1
    7c48:	617b      	str	r3, [r7, #20]

            /* skip this string */
            while (*ptr != '"' && position < length)
    7c4a:	e014      	b.n	7c76 <msh_split+0xde>
            {
                if (*ptr == '\\')
    7c4c:	69fb      	ldr	r3, [r7, #28]
    7c4e:	781b      	ldrb	r3, [r3, #0]
    7c50:	2b5c      	cmp	r3, #92	; 0x5c
    7c52:	d10a      	bne.n	7c6a <msh_split+0xd2>
                {
                    if (*(ptr + 1) == '"')
    7c54:	69fb      	ldr	r3, [r7, #28]
    7c56:	3301      	adds	r3, #1
    7c58:	781b      	ldrb	r3, [r3, #0]
    7c5a:	2b22      	cmp	r3, #34	; 0x22
    7c5c:	d105      	bne.n	7c6a <msh_split+0xd2>
                    {
                        ptr ++;
    7c5e:	69fb      	ldr	r3, [r7, #28]
    7c60:	3301      	adds	r3, #1
    7c62:	61fb      	str	r3, [r7, #28]
                        position ++;
    7c64:	69bb      	ldr	r3, [r7, #24]
    7c66:	3301      	adds	r3, #1
    7c68:	61bb      	str	r3, [r7, #24]
                    }
                }
                ptr ++;
    7c6a:	69fb      	ldr	r3, [r7, #28]
    7c6c:	3301      	adds	r3, #1
    7c6e:	61fb      	str	r3, [r7, #28]
                position ++;
    7c70:	69bb      	ldr	r3, [r7, #24]
    7c72:	3301      	adds	r3, #1
    7c74:	61bb      	str	r3, [r7, #24]
            while (*ptr != '"' && position < length)
    7c76:	69fb      	ldr	r3, [r7, #28]
    7c78:	781b      	ldrb	r3, [r3, #0]
    7c7a:	2b22      	cmp	r3, #34	; 0x22
    7c7c:	d003      	beq.n	7c86 <msh_split+0xee>
    7c7e:	69ba      	ldr	r2, [r7, #24]
    7c80:	68bb      	ldr	r3, [r7, #8]
    7c82:	429a      	cmp	r2, r3
    7c84:	d3e2      	bcc.n	7c4c <msh_split+0xb4>
            }
            if (position >= length) break;
    7c86:	69ba      	ldr	r2, [r7, #24]
    7c88:	68bb      	ldr	r3, [r7, #8]
    7c8a:	429a      	cmp	r2, r3
    7c8c:	d231      	bcs.n	7cf2 <msh_split+0x15a>

            /* skip '"' */
            *ptr = '\0';
    7c8e:	69fb      	ldr	r3, [r7, #28]
    7c90:	2200      	movs	r2, #0
    7c92:	701a      	strb	r2, [r3, #0]
            ptr ++;
    7c94:	69fb      	ldr	r3, [r7, #28]
    7c96:	3301      	adds	r3, #1
    7c98:	61fb      	str	r3, [r7, #28]
            position ++;
    7c9a:	69bb      	ldr	r3, [r7, #24]
    7c9c:	3301      	adds	r3, #1
    7c9e:	61bb      	str	r3, [r7, #24]
    7ca0:	e01f      	b.n	7ce2 <msh_split+0x14a>
        }
        else
        {
            argv[argc] = ptr;
    7ca2:	697b      	ldr	r3, [r7, #20]
    7ca4:	009b      	lsls	r3, r3, #2
    7ca6:	687a      	ldr	r2, [r7, #4]
    7ca8:	18d3      	adds	r3, r2, r3
    7caa:	69fa      	ldr	r2, [r7, #28]
    7cac:	601a      	str	r2, [r3, #0]
            argc ++;
    7cae:	697b      	ldr	r3, [r7, #20]
    7cb0:	3301      	adds	r3, #1
    7cb2:	617b      	str	r3, [r7, #20]
            while ((*ptr != ' ' && *ptr != '\t') && position < length)
    7cb4:	e005      	b.n	7cc2 <msh_split+0x12a>
            {
                ptr ++;
    7cb6:	69fb      	ldr	r3, [r7, #28]
    7cb8:	3301      	adds	r3, #1
    7cba:	61fb      	str	r3, [r7, #28]
                position ++;
    7cbc:	69bb      	ldr	r3, [r7, #24]
    7cbe:	3301      	adds	r3, #1
    7cc0:	61bb      	str	r3, [r7, #24]
            while ((*ptr != ' ' && *ptr != '\t') && position < length)
    7cc2:	69fb      	ldr	r3, [r7, #28]
    7cc4:	781b      	ldrb	r3, [r3, #0]
    7cc6:	2b20      	cmp	r3, #32
    7cc8:	d007      	beq.n	7cda <msh_split+0x142>
    7cca:	69fb      	ldr	r3, [r7, #28]
    7ccc:	781b      	ldrb	r3, [r3, #0]
    7cce:	2b09      	cmp	r3, #9
    7cd0:	d003      	beq.n	7cda <msh_split+0x142>
    7cd2:	69ba      	ldr	r2, [r7, #24]
    7cd4:	68bb      	ldr	r3, [r7, #8]
    7cd6:	429a      	cmp	r2, r3
    7cd8:	d3ed      	bcc.n	7cb6 <msh_split+0x11e>
            }
            if (position >= length) break;
    7cda:	69ba      	ldr	r2, [r7, #24]
    7cdc:	68bb      	ldr	r3, [r7, #8]
    7cde:	429a      	cmp	r2, r3
    7ce0:	d209      	bcs.n	7cf6 <msh_split+0x15e>
    while (position < length)
    7ce2:	69ba      	ldr	r2, [r7, #24]
    7ce4:	68bb      	ldr	r3, [r7, #8]
    7ce6:	429a      	cmp	r2, r3
    7ce8:	d200      	bcs.n	7cec <msh_split+0x154>
    7cea:	e76b      	b.n	7bc4 <msh_split+0x2c>
    7cec:	e004      	b.n	7cf8 <msh_split+0x160>
        if (position >= length) break;
    7cee:	46c0      	nop			; (mov r8, r8)
    7cf0:	e002      	b.n	7cf8 <msh_split+0x160>
            if (position >= length) break;
    7cf2:	46c0      	nop			; (mov r8, r8)
    7cf4:	e000      	b.n	7cf8 <msh_split+0x160>
            if (position >= length) break;
    7cf6:	46c0      	nop			; (mov r8, r8)
        }
    }

    return argc;
    7cf8:	697b      	ldr	r3, [r7, #20]
}
    7cfa:	0018      	movs	r0, r3
    7cfc:	46bd      	mov	sp, r7
    7cfe:	b008      	add	sp, #32
    7d00:	bd80      	pop	{r7, pc}
    7d02:	46c0      	nop			; (mov r8, r8)
    7d04:	0000cf9c 	.word	0x0000cf9c
    7d08:	0000cfbc 	.word	0x0000cfbc
    7d0c:	0000cf68 	.word	0x0000cf68

00007d10 <msh_get_cmd>:

static cmd_function_t msh_get_cmd(char *cmd, int size)
{
    7d10:	b580      	push	{r7, lr}
    7d12:	b084      	sub	sp, #16
    7d14:	af00      	add	r7, sp, #0
    7d16:	6078      	str	r0, [r7, #4]
    7d18:	6039      	str	r1, [r7, #0]
    struct finsh_syscall *index;
    cmd_function_t cmd_func = RT_NULL;
    7d1a:	2300      	movs	r3, #0
    7d1c:	60bb      	str	r3, [r7, #8]

    for (index = _syscall_table_begin;
    7d1e:	4b12      	ldr	r3, [pc, #72]	; (7d68 <msh_get_cmd+0x58>)
    7d20:	681b      	ldr	r3, [r3, #0]
    7d22:	60fb      	str	r3, [r7, #12]
    7d24:	e016      	b.n	7d54 <msh_get_cmd+0x44>
            index < _syscall_table_end;
            FINSH_NEXT_SYSCALL(index))
    {
        if (strncmp(index->name, cmd, size) == 0 &&
    7d26:	68fb      	ldr	r3, [r7, #12]
    7d28:	681b      	ldr	r3, [r3, #0]
    7d2a:	683a      	ldr	r2, [r7, #0]
    7d2c:	6879      	ldr	r1, [r7, #4]
    7d2e:	0018      	movs	r0, r3
    7d30:	f001 f970 	bl	9014 <strncmp>
    7d34:	1e03      	subs	r3, r0, #0
    7d36:	d10a      	bne.n	7d4e <msh_get_cmd+0x3e>
                index->name[size] == '\0')
    7d38:	68fb      	ldr	r3, [r7, #12]
    7d3a:	681a      	ldr	r2, [r3, #0]
    7d3c:	683b      	ldr	r3, [r7, #0]
    7d3e:	18d3      	adds	r3, r2, r3
    7d40:	781b      	ldrb	r3, [r3, #0]
        if (strncmp(index->name, cmd, size) == 0 &&
    7d42:	2b00      	cmp	r3, #0
    7d44:	d103      	bne.n	7d4e <msh_get_cmd+0x3e>
        {
            cmd_func = (cmd_function_t)index->func;
    7d46:	68fb      	ldr	r3, [r7, #12]
    7d48:	689b      	ldr	r3, [r3, #8]
    7d4a:	60bb      	str	r3, [r7, #8]
            break;
    7d4c:	e007      	b.n	7d5e <msh_get_cmd+0x4e>
            FINSH_NEXT_SYSCALL(index))
    7d4e:	68fb      	ldr	r3, [r7, #12]
    7d50:	330c      	adds	r3, #12
    7d52:	60fb      	str	r3, [r7, #12]
            index < _syscall_table_end;
    7d54:	4b05      	ldr	r3, [pc, #20]	; (7d6c <msh_get_cmd+0x5c>)
    7d56:	681b      	ldr	r3, [r3, #0]
    7d58:	68fa      	ldr	r2, [r7, #12]
    7d5a:	429a      	cmp	r2, r3
    7d5c:	d3e3      	bcc.n	7d26 <msh_get_cmd+0x16>
        }
    }

    return cmd_func;
    7d5e:	68bb      	ldr	r3, [r7, #8]
}
    7d60:	0018      	movs	r0, r3
    7d62:	46bd      	mov	sp, r7
    7d64:	b004      	add	sp, #16
    7d66:	bd80      	pop	{r7, pc}
    7d68:	20000294 	.word	0x20000294
    7d6c:	20000298 	.word	0x20000298

00007d70 <_msh_exec_cmd>:
    return ret;
}
#endif /* defined(RT_USING_MODULE) && defined(DFS_USING_POSIX) */

static int _msh_exec_cmd(char *cmd, rt_size_t length, int *retp)
{
    7d70:	b590      	push	{r4, r7, lr}
    7d72:	b093      	sub	sp, #76	; 0x4c
    7d74:	af00      	add	r7, sp, #0
    7d76:	60f8      	str	r0, [r7, #12]
    7d78:	60b9      	str	r1, [r7, #8]
    7d7a:	607a      	str	r2, [r7, #4]
    int argc;
    rt_size_t cmd0_size = 0;
    7d7c:	2300      	movs	r3, #0
    7d7e:	647b      	str	r3, [r7, #68]	; 0x44
    cmd_function_t cmd_func;
    char *argv[FINSH_ARG_MAX];

    RT_ASSERT(cmd);
    7d80:	68fb      	ldr	r3, [r7, #12]
    7d82:	2b00      	cmp	r3, #0
    7d84:	d107      	bne.n	7d96 <_msh_exec_cmd+0x26>
    7d86:	230c      	movs	r3, #12
    7d88:	33ff      	adds	r3, #255	; 0xff
    7d8a:	001a      	movs	r2, r3
    7d8c:	492c      	ldr	r1, [pc, #176]	; (7e40 <_msh_exec_cmd+0xd0>)
    7d8e:	4b2d      	ldr	r3, [pc, #180]	; (7e44 <_msh_exec_cmd+0xd4>)
    7d90:	0018      	movs	r0, r3
    7d92:	f7fc f91d 	bl	3fd0 <rt_assert_handler>
    RT_ASSERT(retp);
    7d96:	687b      	ldr	r3, [r7, #4]
    7d98:	2b00      	cmp	r3, #0
    7d9a:	d10a      	bne.n	7db2 <_msh_exec_cmd+0x42>
    7d9c:	2386      	movs	r3, #134	; 0x86
    7d9e:	005a      	lsls	r2, r3, #1
    7da0:	4927      	ldr	r1, [pc, #156]	; (7e40 <_msh_exec_cmd+0xd0>)
    7da2:	4b29      	ldr	r3, [pc, #164]	; (7e48 <_msh_exec_cmd+0xd8>)
    7da4:	0018      	movs	r0, r3
    7da6:	f7fc f913 	bl	3fd0 <rt_assert_handler>

    /* find the size of first command */
    while ((cmd[cmd0_size] != ' ' && cmd[cmd0_size] != '\t') && cmd0_size < length)
    7daa:	e002      	b.n	7db2 <_msh_exec_cmd+0x42>
        cmd0_size ++;
    7dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7dae:	3301      	adds	r3, #1
    7db0:	647b      	str	r3, [r7, #68]	; 0x44
    while ((cmd[cmd0_size] != ' ' && cmd[cmd0_size] != '\t') && cmd0_size < length)
    7db2:	68fa      	ldr	r2, [r7, #12]
    7db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7db6:	18d3      	adds	r3, r2, r3
    7db8:	781b      	ldrb	r3, [r3, #0]
    7dba:	2b20      	cmp	r3, #32
    7dbc:	d009      	beq.n	7dd2 <_msh_exec_cmd+0x62>
    7dbe:	68fa      	ldr	r2, [r7, #12]
    7dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7dc2:	18d3      	adds	r3, r2, r3
    7dc4:	781b      	ldrb	r3, [r3, #0]
    7dc6:	2b09      	cmp	r3, #9
    7dc8:	d003      	beq.n	7dd2 <_msh_exec_cmd+0x62>
    7dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    7dcc:	68bb      	ldr	r3, [r7, #8]
    7dce:	429a      	cmp	r2, r3
    7dd0:	d3ec      	bcc.n	7dac <_msh_exec_cmd+0x3c>
    if (cmd0_size == 0)
    7dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7dd4:	2b00      	cmp	r3, #0
    7dd6:	d102      	bne.n	7dde <_msh_exec_cmd+0x6e>
        return -RT_ERROR;
    7dd8:	2301      	movs	r3, #1
    7dda:	425b      	negs	r3, r3
    7ddc:	e02c      	b.n	7e38 <_msh_exec_cmd+0xc8>

    cmd_func = msh_get_cmd(cmd, cmd0_size);
    7dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    7de0:	68fb      	ldr	r3, [r7, #12]
    7de2:	0011      	movs	r1, r2
    7de4:	0018      	movs	r0, r3
    7de6:	f7ff ff93 	bl	7d10 <msh_get_cmd>
    7dea:	0003      	movs	r3, r0
    7dec:	643b      	str	r3, [r7, #64]	; 0x40
    if (cmd_func == RT_NULL)
    7dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7df0:	2b00      	cmp	r3, #0
    7df2:	d102      	bne.n	7dfa <_msh_exec_cmd+0x8a>
        return -RT_ERROR;
    7df4:	2301      	movs	r3, #1
    7df6:	425b      	negs	r3, r3
    7df8:	e01e      	b.n	7e38 <_msh_exec_cmd+0xc8>

    /* split arguments */
    rt_memset(argv, 0x00, sizeof(argv));
    7dfa:	2414      	movs	r4, #20
    7dfc:	193b      	adds	r3, r7, r4
    7dfe:	2228      	movs	r2, #40	; 0x28
    7e00:	2100      	movs	r1, #0
    7e02:	0018      	movs	r0, r3
    7e04:	f7fb f9e8 	bl	31d8 <rt_memset>
    argc = msh_split(cmd, length, argv);
    7e08:	193a      	adds	r2, r7, r4
    7e0a:	68b9      	ldr	r1, [r7, #8]
    7e0c:	68fb      	ldr	r3, [r7, #12]
    7e0e:	0018      	movs	r0, r3
    7e10:	f7ff fec2 	bl	7b98 <msh_split>
    7e14:	0003      	movs	r3, r0
    7e16:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (argc == 0)
    7e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7e1a:	2b00      	cmp	r3, #0
    7e1c:	d102      	bne.n	7e24 <_msh_exec_cmd+0xb4>
        return -RT_ERROR;
    7e1e:	2301      	movs	r3, #1
    7e20:	425b      	negs	r3, r3
    7e22:	e009      	b.n	7e38 <_msh_exec_cmd+0xc8>

    /* exec this command */
    *retp = cmd_func(argc, argv);
    7e24:	2314      	movs	r3, #20
    7e26:	18f9      	adds	r1, r7, r3
    7e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7e2c:	0010      	movs	r0, r2
    7e2e:	4798      	blx	r3
    7e30:	0002      	movs	r2, r0
    7e32:	687b      	ldr	r3, [r7, #4]
    7e34:	601a      	str	r2, [r3, #0]
    return 0;
    7e36:	2300      	movs	r3, #0
}
    7e38:	0018      	movs	r0, r3
    7e3a:	46bd      	mov	sp, r7
    7e3c:	b013      	add	sp, #76	; 0x4c
    7e3e:	bd90      	pop	{r4, r7, pc}
    7e40:	0000d058 	.word	0x0000d058
    7e44:	0000cfc0 	.word	0x0000cfc0
    7e48:	0000cfc4 	.word	0x0000cfc4

00007e4c <msh_exec>:
    return 0;
}
#endif /* defined(RT_USING_LWP) && defined(DFS_USING_POSIX) */

int msh_exec(char *cmd, rt_size_t length)
{
    7e4c:	b580      	push	{r7, lr}
    7e4e:	b084      	sub	sp, #16
    7e50:	af00      	add	r7, sp, #0
    7e52:	6078      	str	r0, [r7, #4]
    7e54:	6039      	str	r1, [r7, #0]
    int cmd_ret;

    /* strim the beginning of command */
    while ((length > 0) && (*cmd  == ' ' || *cmd == '\t'))
    7e56:	e005      	b.n	7e64 <msh_exec+0x18>
    {
        cmd++;
    7e58:	687b      	ldr	r3, [r7, #4]
    7e5a:	3301      	adds	r3, #1
    7e5c:	607b      	str	r3, [r7, #4]
        length--;
    7e5e:	683b      	ldr	r3, [r7, #0]
    7e60:	3b01      	subs	r3, #1
    7e62:	603b      	str	r3, [r7, #0]
    while ((length > 0) && (*cmd  == ' ' || *cmd == '\t'))
    7e64:	683b      	ldr	r3, [r7, #0]
    7e66:	2b00      	cmp	r3, #0
    7e68:	d007      	beq.n	7e7a <msh_exec+0x2e>
    7e6a:	687b      	ldr	r3, [r7, #4]
    7e6c:	781b      	ldrb	r3, [r3, #0]
    7e6e:	2b20      	cmp	r3, #32
    7e70:	d0f2      	beq.n	7e58 <msh_exec+0xc>
    7e72:	687b      	ldr	r3, [r7, #4]
    7e74:	781b      	ldrb	r3, [r3, #0]
    7e76:	2b09      	cmp	r3, #9
    7e78:	d0ee      	beq.n	7e58 <msh_exec+0xc>
    }

    if (length == 0)
    7e7a:	683b      	ldr	r3, [r7, #0]
    7e7c:	2b00      	cmp	r3, #0
    7e7e:	d101      	bne.n	7e84 <msh_exec+0x38>
        return 0;
    7e80:	2300      	movs	r3, #0
    7e82:	e023      	b.n	7ecc <msh_exec+0x80>

    /* Exec sequence:
     * 1. built-in command
     * 2. module(if enabled)
     */
    if (_msh_exec_cmd(cmd, length, &cmd_ret) == 0)
    7e84:	2308      	movs	r3, #8
    7e86:	18fa      	adds	r2, r7, r3
    7e88:	6839      	ldr	r1, [r7, #0]
    7e8a:	687b      	ldr	r3, [r7, #4]
    7e8c:	0018      	movs	r0, r3
    7e8e:	f7ff ff6f 	bl	7d70 <_msh_exec_cmd>
    7e92:	1e03      	subs	r3, r0, #0
    7e94:	d101      	bne.n	7e9a <msh_exec+0x4e>
    {
        return cmd_ret;
    7e96:	68bb      	ldr	r3, [r7, #8]
    7e98:	e018      	b.n	7ecc <msh_exec+0x80>
#endif /* DFS_USING_POSIX */

    /* truncate the cmd at the first space. */
    {
        char *tcmd;
        tcmd = cmd;
    7e9a:	687b      	ldr	r3, [r7, #4]
    7e9c:	60fb      	str	r3, [r7, #12]
        while (*tcmd != ' ' && *tcmd != '\0')
    7e9e:	e002      	b.n	7ea6 <msh_exec+0x5a>
        {
            tcmd++;
    7ea0:	68fb      	ldr	r3, [r7, #12]
    7ea2:	3301      	adds	r3, #1
    7ea4:	60fb      	str	r3, [r7, #12]
        while (*tcmd != ' ' && *tcmd != '\0')
    7ea6:	68fb      	ldr	r3, [r7, #12]
    7ea8:	781b      	ldrb	r3, [r3, #0]
    7eaa:	2b20      	cmp	r3, #32
    7eac:	d003      	beq.n	7eb6 <msh_exec+0x6a>
    7eae:	68fb      	ldr	r3, [r7, #12]
    7eb0:	781b      	ldrb	r3, [r3, #0]
    7eb2:	2b00      	cmp	r3, #0
    7eb4:	d1f4      	bne.n	7ea0 <msh_exec+0x54>
        }
        *tcmd = '\0';
    7eb6:	68fb      	ldr	r3, [r7, #12]
    7eb8:	2200      	movs	r2, #0
    7eba:	701a      	strb	r2, [r3, #0]
    }
    rt_kprintf("%s: command not found.\n", cmd);
    7ebc:	687a      	ldr	r2, [r7, #4]
    7ebe:	4b05      	ldr	r3, [pc, #20]	; (7ed4 <msh_exec+0x88>)
    7ec0:	0011      	movs	r1, r2
    7ec2:	0018      	movs	r0, r3
    7ec4:	f7fb fede 	bl	3c84 <rt_kprintf>
    return -1;
    7ec8:	2301      	movs	r3, #1
    7eca:	425b      	negs	r3, r3
}
    7ecc:	0018      	movs	r0, r3
    7ece:	46bd      	mov	sp, r7
    7ed0:	b004      	add	sp, #16
    7ed2:	bd80      	pop	{r7, pc}
    7ed4:	0000cfcc 	.word	0x0000cfcc

00007ed8 <str_common>:

static int str_common(const char *str1, const char *str2)
{
    7ed8:	b580      	push	{r7, lr}
    7eda:	b084      	sub	sp, #16
    7edc:	af00      	add	r7, sp, #0
    7ede:	6078      	str	r0, [r7, #4]
    7ee0:	6039      	str	r1, [r7, #0]
    const char *str = str1;
    7ee2:	687b      	ldr	r3, [r7, #4]
    7ee4:	60fb      	str	r3, [r7, #12]

    while ((*str != 0) && (*str2 != 0) && (*str == *str2))
    7ee6:	e005      	b.n	7ef4 <str_common+0x1c>
    {
        str ++;
    7ee8:	68fb      	ldr	r3, [r7, #12]
    7eea:	3301      	adds	r3, #1
    7eec:	60fb      	str	r3, [r7, #12]
        str2 ++;
    7eee:	683b      	ldr	r3, [r7, #0]
    7ef0:	3301      	adds	r3, #1
    7ef2:	603b      	str	r3, [r7, #0]
    while ((*str != 0) && (*str2 != 0) && (*str == *str2))
    7ef4:	68fb      	ldr	r3, [r7, #12]
    7ef6:	781b      	ldrb	r3, [r3, #0]
    7ef8:	2b00      	cmp	r3, #0
    7efa:	d009      	beq.n	7f10 <str_common+0x38>
    7efc:	683b      	ldr	r3, [r7, #0]
    7efe:	781b      	ldrb	r3, [r3, #0]
    7f00:	2b00      	cmp	r3, #0
    7f02:	d005      	beq.n	7f10 <str_common+0x38>
    7f04:	68fb      	ldr	r3, [r7, #12]
    7f06:	781a      	ldrb	r2, [r3, #0]
    7f08:	683b      	ldr	r3, [r7, #0]
    7f0a:	781b      	ldrb	r3, [r3, #0]
    7f0c:	429a      	cmp	r2, r3
    7f0e:	d0eb      	beq.n	7ee8 <str_common+0x10>
    }

    return (str - str1);
    7f10:	68fa      	ldr	r2, [r7, #12]
    7f12:	687b      	ldr	r3, [r7, #4]
    7f14:	1ad3      	subs	r3, r2, r3
}
    7f16:	0018      	movs	r0, r3
    7f18:	46bd      	mov	sp, r7
    7f1a:	b004      	add	sp, #16
    7f1c:	bd80      	pop	{r7, pc}
	...

00007f20 <msh_auto_complete>:
    rt_free(full_path);
}
#endif /* DFS_USING_POSIX */

void msh_auto_complete(char *prefix)
{
    7f20:	b580      	push	{r7, lr}
    7f22:	b088      	sub	sp, #32
    7f24:	af00      	add	r7, sp, #0
    7f26:	6078      	str	r0, [r7, #4]
    int length, min_length;
    const char *name_ptr, *cmd_name;
    struct finsh_syscall *index;

    min_length = 0;
    7f28:	2300      	movs	r3, #0
    7f2a:	61fb      	str	r3, [r7, #28]
    name_ptr = RT_NULL;
    7f2c:	2300      	movs	r3, #0
    7f2e:	61bb      	str	r3, [r7, #24]

    if (*prefix == '\0')
    7f30:	687b      	ldr	r3, [r7, #4]
    7f32:	781b      	ldrb	r3, [r3, #0]
    7f34:	2b00      	cmp	r3, #0
    7f36:	d104      	bne.n	7f42 <msh_auto_complete+0x22>
    {
        msh_help(0, RT_NULL);
    7f38:	2100      	movs	r1, #0
    7f3a:	2000      	movs	r0, #0
    7f3c:	f7ff fdbe 	bl	7abc <msh_help>
        return;
    7f40:	e043      	b.n	7fca <msh_auto_complete+0xaa>
    }
#endif /* DFS_USING_POSIX */

    /* checks in internal command */
    {
        for (index = _syscall_table_begin; index < _syscall_table_end; FINSH_NEXT_SYSCALL(index))
    7f42:	4b23      	ldr	r3, [pc, #140]	; (7fd0 <msh_auto_complete+0xb0>)
    7f44:	681b      	ldr	r3, [r3, #0]
    7f46:	617b      	str	r3, [r7, #20]
    7f48:	e030      	b.n	7fac <msh_auto_complete+0x8c>
        {
            /* skip finsh shell function */
            cmd_name = (const char *) index->name;
    7f4a:	697b      	ldr	r3, [r7, #20]
    7f4c:	681b      	ldr	r3, [r3, #0]
    7f4e:	613b      	str	r3, [r7, #16]
            if (strncmp(prefix, cmd_name, strlen(prefix)) == 0)
    7f50:	687b      	ldr	r3, [r7, #4]
    7f52:	0018      	movs	r0, r3
    7f54:	f001 f830 	bl	8fb8 <strlen>
    7f58:	0002      	movs	r2, r0
    7f5a:	6939      	ldr	r1, [r7, #16]
    7f5c:	687b      	ldr	r3, [r7, #4]
    7f5e:	0018      	movs	r0, r3
    7f60:	f001 f858 	bl	9014 <strncmp>
    7f64:	1e03      	subs	r3, r0, #0
    7f66:	d11e      	bne.n	7fa6 <msh_auto_complete+0x86>
            {
                if (min_length == 0)
    7f68:	69fb      	ldr	r3, [r7, #28]
    7f6a:	2b00      	cmp	r3, #0
    7f6c:	d107      	bne.n	7f7e <msh_auto_complete+0x5e>
                {
                    /* set name_ptr */
                    name_ptr = cmd_name;
    7f6e:	693b      	ldr	r3, [r7, #16]
    7f70:	61bb      	str	r3, [r7, #24]
                    /* set initial length */
                    min_length = strlen(name_ptr);
    7f72:	69bb      	ldr	r3, [r7, #24]
    7f74:	0018      	movs	r0, r3
    7f76:	f001 f81f 	bl	8fb8 <strlen>
    7f7a:	0003      	movs	r3, r0
    7f7c:	61fb      	str	r3, [r7, #28]
                }

                length = str_common(name_ptr, cmd_name);
    7f7e:	693a      	ldr	r2, [r7, #16]
    7f80:	69bb      	ldr	r3, [r7, #24]
    7f82:	0011      	movs	r1, r2
    7f84:	0018      	movs	r0, r3
    7f86:	f7ff ffa7 	bl	7ed8 <str_common>
    7f8a:	0003      	movs	r3, r0
    7f8c:	60fb      	str	r3, [r7, #12]
                if (length < min_length)
    7f8e:	68fa      	ldr	r2, [r7, #12]
    7f90:	69fb      	ldr	r3, [r7, #28]
    7f92:	429a      	cmp	r2, r3
    7f94:	da01      	bge.n	7f9a <msh_auto_complete+0x7a>
                    min_length = length;
    7f96:	68fb      	ldr	r3, [r7, #12]
    7f98:	61fb      	str	r3, [r7, #28]

                rt_kprintf("%s\n", cmd_name);
    7f9a:	693a      	ldr	r2, [r7, #16]
    7f9c:	4b0d      	ldr	r3, [pc, #52]	; (7fd4 <msh_auto_complete+0xb4>)
    7f9e:	0011      	movs	r1, r2
    7fa0:	0018      	movs	r0, r3
    7fa2:	f7fb fe6f 	bl	3c84 <rt_kprintf>
        for (index = _syscall_table_begin; index < _syscall_table_end; FINSH_NEXT_SYSCALL(index))
    7fa6:	697b      	ldr	r3, [r7, #20]
    7fa8:	330c      	adds	r3, #12
    7faa:	617b      	str	r3, [r7, #20]
    7fac:	4b0a      	ldr	r3, [pc, #40]	; (7fd8 <msh_auto_complete+0xb8>)
    7fae:	681b      	ldr	r3, [r3, #0]
    7fb0:	697a      	ldr	r2, [r7, #20]
    7fb2:	429a      	cmp	r2, r3
    7fb4:	d3c9      	bcc.n	7f4a <msh_auto_complete+0x2a>
            }
        }
    }

    /* auto complete string */
    if (name_ptr != NULL)
    7fb6:	69bb      	ldr	r3, [r7, #24]
    7fb8:	2b00      	cmp	r3, #0
    7fba:	d005      	beq.n	7fc8 <msh_auto_complete+0xa8>
    {
        rt_strncpy(prefix, name_ptr, min_length);
    7fbc:	69fa      	ldr	r2, [r7, #28]
    7fbe:	69b9      	ldr	r1, [r7, #24]
    7fc0:	687b      	ldr	r3, [r7, #4]
    7fc2:	0018      	movs	r0, r3
    7fc4:	f7fb fa06 	bl	33d4 <rt_strncpy>
    }

    return ;
    7fc8:	46c0      	nop			; (mov r8, r8)
}
    7fca:	46bd      	mov	sp, r7
    7fcc:	b008      	add	sp, #32
    7fce:	bd80      	pop	{r7, pc}
    7fd0:	20000294 	.word	0x20000294
    7fd4:	0000cfe4 	.word	0x0000cfe4
    7fd8:	20000298 	.word	0x20000298

00007fdc <rt_list_isempty>:
{
    7fdc:	b580      	push	{r7, lr}
    7fde:	b082      	sub	sp, #8
    7fe0:	af00      	add	r7, sp, #0
    7fe2:	6078      	str	r0, [r7, #4]
    return l->next == l;
    7fe4:	687b      	ldr	r3, [r7, #4]
    7fe6:	681b      	ldr	r3, [r3, #0]
    7fe8:	687a      	ldr	r2, [r7, #4]
    7fea:	1ad3      	subs	r3, r2, r3
    7fec:	425a      	negs	r2, r3
    7fee:	4153      	adcs	r3, r2
    7ff0:	b2db      	uxtb	r3, r3
}
    7ff2:	0018      	movs	r0, r3
    7ff4:	46bd      	mov	sp, r7
    7ff6:	b002      	add	sp, #8
    7ff8:	bd80      	pop	{r7, pc}

00007ffa <rt_list_len>:
/**
 * @brief get the list length
 * @param l the list to get.
 */
rt_inline unsigned int rt_list_len(const rt_list_t *l)
{
    7ffa:	b580      	push	{r7, lr}
    7ffc:	b084      	sub	sp, #16
    7ffe:	af00      	add	r7, sp, #0
    8000:	6078      	str	r0, [r7, #4]
    unsigned int len = 0;
    8002:	2300      	movs	r3, #0
    8004:	60fb      	str	r3, [r7, #12]
    const rt_list_t *p = l;
    8006:	687b      	ldr	r3, [r7, #4]
    8008:	60bb      	str	r3, [r7, #8]
    while (p->next != l)
    800a:	e005      	b.n	8018 <rt_list_len+0x1e>
    {
        p = p->next;
    800c:	68bb      	ldr	r3, [r7, #8]
    800e:	681b      	ldr	r3, [r3, #0]
    8010:	60bb      	str	r3, [r7, #8]
        len ++;
    8012:	68fb      	ldr	r3, [r7, #12]
    8014:	3301      	adds	r3, #1
    8016:	60fb      	str	r3, [r7, #12]
    while (p->next != l)
    8018:	68bb      	ldr	r3, [r7, #8]
    801a:	681b      	ldr	r3, [r3, #0]
    801c:	687a      	ldr	r2, [r7, #4]
    801e:	429a      	cmp	r2, r3
    8020:	d1f4      	bne.n	800c <rt_list_len+0x12>
    }

    return len;
    8022:	68fb      	ldr	r3, [r7, #12]
}
    8024:	0018      	movs	r0, r3
    8026:	46bd      	mov	sp, r7
    8028:	b004      	add	sp, #16
    802a:	bd80      	pop	{r7, pc}

0000802c <clear>:
#include <finsh.h>

#define LIST_FIND_OBJ_NR 8

static long clear(void)
{
    802c:	b580      	push	{r7, lr}
    802e:	af00      	add	r7, sp, #0
    rt_kprintf("\x1b[2J\x1b[H");
    8030:	4b03      	ldr	r3, [pc, #12]	; (8040 <clear+0x14>)
    8032:	0018      	movs	r0, r3
    8034:	f7fb fe26 	bl	3c84 <rt_kprintf>

    return 0;
    8038:	2300      	movs	r3, #0
}
    803a:	0018      	movs	r0, r3
    803c:	46bd      	mov	sp, r7
    803e:	bd80      	pop	{r7, pc}
    8040:	0000d068 	.word	0x0000d068

00008044 <version>:
MSH_CMD_EXPORT(clear, clear the terminal screen);

extern void rt_show_version(void);
long version(void)
{
    8044:	b580      	push	{r7, lr}
    8046:	af00      	add	r7, sp, #0
    rt_show_version();
    8048:	f7fb fa18 	bl	347c <rt_show_version>

    return 0;
    804c:	2300      	movs	r3, #0
}
    804e:	0018      	movs	r0, r3
    8050:	46bd      	mov	sp, r7
    8052:	bd80      	pop	{r7, pc}

00008054 <object_split>:
MSH_CMD_EXPORT(version, show RT-Thread version information);

rt_inline void object_split(int len)
{
    8054:	b580      	push	{r7, lr}
    8056:	b082      	sub	sp, #8
    8058:	af00      	add	r7, sp, #0
    805a:	6078      	str	r0, [r7, #4]
    while (len--) rt_kprintf("-");
    805c:	e003      	b.n	8066 <object_split+0x12>
    805e:	4b07      	ldr	r3, [pc, #28]	; (807c <object_split+0x28>)
    8060:	0018      	movs	r0, r3
    8062:	f7fb fe0f 	bl	3c84 <rt_kprintf>
    8066:	687b      	ldr	r3, [r7, #4]
    8068:	1e5a      	subs	r2, r3, #1
    806a:	607a      	str	r2, [r7, #4]
    806c:	2b00      	cmp	r3, #0
    806e:	d1f6      	bne.n	805e <object_split+0xa>
}
    8070:	46c0      	nop			; (mov r8, r8)
    8072:	46c0      	nop			; (mov r8, r8)
    8074:	46bd      	mov	sp, r7
    8076:	b002      	add	sp, #8
    8078:	bd80      	pop	{r7, pc}
    807a:	46c0      	nop			; (mov r8, r8)
    807c:	0000d070 	.word	0x0000d070

00008080 <list_find_init>:
    int nr;             /* input: max nr, can't be 0 */
    int nr_out;         /* out: got nr */
} list_get_next_t;

static void list_find_init(list_get_next_t *p, rt_uint8_t type, rt_list_t **array, int nr)
{
    8080:	b590      	push	{r4, r7, lr}
    8082:	b087      	sub	sp, #28
    8084:	af00      	add	r7, sp, #0
    8086:	60f8      	str	r0, [r7, #12]
    8088:	607a      	str	r2, [r7, #4]
    808a:	603b      	str	r3, [r7, #0]
    808c:	240b      	movs	r4, #11
    808e:	193b      	adds	r3, r7, r4
    8090:	1c0a      	adds	r2, r1, #0
    8092:	701a      	strb	r2, [r3, #0]
    struct rt_object_information *info;
    rt_list_t *list;

    info = rt_object_get_information((enum rt_object_class_type)type);
    8094:	193b      	adds	r3, r7, r4
    8096:	781b      	ldrb	r3, [r3, #0]
    8098:	0018      	movs	r0, r3
    809a:	f7fa fe63 	bl	2d64 <rt_object_get_information>
    809e:	0003      	movs	r3, r0
    80a0:	617b      	str	r3, [r7, #20]
    list = &info->object_list;
    80a2:	697b      	ldr	r3, [r7, #20]
    80a4:	3304      	adds	r3, #4
    80a6:	613b      	str	r3, [r7, #16]

    p->list = list;
    80a8:	68fb      	ldr	r3, [r7, #12]
    80aa:	693a      	ldr	r2, [r7, #16]
    80ac:	601a      	str	r2, [r3, #0]
    p->type = type;
    80ae:	68fb      	ldr	r3, [r7, #12]
    80b0:	193a      	adds	r2, r7, r4
    80b2:	7812      	ldrb	r2, [r2, #0]
    80b4:	721a      	strb	r2, [r3, #8]
    p->array = array;
    80b6:	68fb      	ldr	r3, [r7, #12]
    80b8:	687a      	ldr	r2, [r7, #4]
    80ba:	605a      	str	r2, [r3, #4]
    p->nr = nr;
    80bc:	68fb      	ldr	r3, [r7, #12]
    80be:	683a      	ldr	r2, [r7, #0]
    80c0:	60da      	str	r2, [r3, #12]
    p->nr_out = 0;
    80c2:	68fb      	ldr	r3, [r7, #12]
    80c4:	2200      	movs	r2, #0
    80c6:	611a      	str	r2, [r3, #16]
}
    80c8:	46c0      	nop			; (mov r8, r8)
    80ca:	46bd      	mov	sp, r7
    80cc:	b007      	add	sp, #28
    80ce:	bd90      	pop	{r4, r7, pc}

000080d0 <list_get_next>:

static rt_list_t *list_get_next(rt_list_t *current, list_get_next_t *arg)
{
    80d0:	b580      	push	{r7, lr}
    80d2:	b08a      	sub	sp, #40	; 0x28
    80d4:	af00      	add	r7, sp, #0
    80d6:	6078      	str	r0, [r7, #4]
    80d8:	6039      	str	r1, [r7, #0]
    int first_flag = 0;
    80da:	2300      	movs	r3, #0
    80dc:	627b      	str	r3, [r7, #36]	; 0x24
    rt_ubase_t level;
    rt_list_t *node, *list;
    rt_list_t **array;
    int nr;

    arg->nr_out = 0;
    80de:	683b      	ldr	r3, [r7, #0]
    80e0:	2200      	movs	r2, #0
    80e2:	611a      	str	r2, [r3, #16]

    if (!arg->nr || !arg->type)
    80e4:	683b      	ldr	r3, [r7, #0]
    80e6:	68db      	ldr	r3, [r3, #12]
    80e8:	2b00      	cmp	r3, #0
    80ea:	d003      	beq.n	80f4 <list_get_next+0x24>
    80ec:	683b      	ldr	r3, [r7, #0]
    80ee:	7a1b      	ldrb	r3, [r3, #8]
    80f0:	2b00      	cmp	r3, #0
    80f2:	d101      	bne.n	80f8 <list_get_next+0x28>
    {
        return (rt_list_t *)RT_NULL;
    80f4:	2300      	movs	r3, #0
    80f6:	e04c      	b.n	8192 <list_get_next+0xc2>
    }

    list = arg->list;
    80f8:	683b      	ldr	r3, [r7, #0]
    80fa:	681b      	ldr	r3, [r3, #0]
    80fc:	617b      	str	r3, [r7, #20]

    if (!current) /* find first */
    80fe:	687b      	ldr	r3, [r7, #4]
    8100:	2b00      	cmp	r3, #0
    8102:	d104      	bne.n	810e <list_get_next+0x3e>
    {
        node = list;
    8104:	697b      	ldr	r3, [r7, #20]
    8106:	623b      	str	r3, [r7, #32]
        first_flag = 1;
    8108:	2301      	movs	r3, #1
    810a:	627b      	str	r3, [r7, #36]	; 0x24
    810c:	e001      	b.n	8112 <list_get_next+0x42>
    }
    else
    {
        node = current;
    810e:	687b      	ldr	r3, [r7, #4]
    8110:	623b      	str	r3, [r7, #32]
    }

    level = rt_hw_interrupt_disable();
    8112:	f7fd f9dd 	bl	54d0 <rt_hw_interrupt_disable>
    8116:	0003      	movs	r3, r0
    8118:	613b      	str	r3, [r7, #16]

    if (!first_flag)
    811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    811c:	2b00      	cmp	r3, #0
    811e:	d112      	bne.n	8146 <list_get_next+0x76>
    {
        struct rt_object *obj;
        /* The node in the list? */
        obj = rt_list_entry(node, struct rt_object, list);
    8120:	6a3b      	ldr	r3, [r7, #32]
    8122:	3b0c      	subs	r3, #12
    8124:	60fb      	str	r3, [r7, #12]
        if ((obj->type & ~RT_Object_Class_Static) != arg->type)
    8126:	68fb      	ldr	r3, [r7, #12]
    8128:	7a1b      	ldrb	r3, [r3, #8]
    812a:	001a      	movs	r2, r3
    812c:	2380      	movs	r3, #128	; 0x80
    812e:	439a      	bics	r2, r3
    8130:	0013      	movs	r3, r2
    8132:	683a      	ldr	r2, [r7, #0]
    8134:	7a12      	ldrb	r2, [r2, #8]
    8136:	4293      	cmp	r3, r2
    8138:	d005      	beq.n	8146 <list_get_next+0x76>
        {
            rt_hw_interrupt_enable(level);
    813a:	693b      	ldr	r3, [r7, #16]
    813c:	0018      	movs	r0, r3
    813e:	f7fd f9cb 	bl	54d8 <rt_hw_interrupt_enable>
            return (rt_list_t *)RT_NULL;
    8142:	2300      	movs	r3, #0
    8144:	e025      	b.n	8192 <list_get_next+0xc2>
        }
    }

    nr = 0;
    8146:	2300      	movs	r3, #0
    8148:	61bb      	str	r3, [r7, #24]
    array = arg->array;
    814a:	683b      	ldr	r3, [r7, #0]
    814c:	685b      	ldr	r3, [r3, #4]
    814e:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        node = node->next;
    8150:	6a3b      	ldr	r3, [r7, #32]
    8152:	681b      	ldr	r3, [r3, #0]
    8154:	623b      	str	r3, [r7, #32]

        if (node == list)
    8156:	6a3a      	ldr	r2, [r7, #32]
    8158:	697b      	ldr	r3, [r7, #20]
    815a:	429a      	cmp	r2, r3
    815c:	d102      	bne.n	8164 <list_get_next+0x94>
        {
            node = (rt_list_t *)RT_NULL;
    815e:	2300      	movs	r3, #0
    8160:	623b      	str	r3, [r7, #32]
            break;
    8162:	e00e      	b.n	8182 <list_get_next+0xb2>
        }
        nr++;
    8164:	69bb      	ldr	r3, [r7, #24]
    8166:	3301      	adds	r3, #1
    8168:	61bb      	str	r3, [r7, #24]
        *array++ = node;
    816a:	69fb      	ldr	r3, [r7, #28]
    816c:	1d1a      	adds	r2, r3, #4
    816e:	61fa      	str	r2, [r7, #28]
    8170:	6a3a      	ldr	r2, [r7, #32]
    8172:	601a      	str	r2, [r3, #0]
        if (nr == arg->nr)
    8174:	683b      	ldr	r3, [r7, #0]
    8176:	68db      	ldr	r3, [r3, #12]
    8178:	69ba      	ldr	r2, [r7, #24]
    817a:	429a      	cmp	r2, r3
    817c:	d000      	beq.n	8180 <list_get_next+0xb0>
        node = node->next;
    817e:	e7e7      	b.n	8150 <list_get_next+0x80>
        {
            break;
    8180:	46c0      	nop			; (mov r8, r8)
        }
    }

    rt_hw_interrupt_enable(level);
    8182:	693b      	ldr	r3, [r7, #16]
    8184:	0018      	movs	r0, r3
    8186:	f7fd f9a7 	bl	54d8 <rt_hw_interrupt_enable>
    arg->nr_out = nr;
    818a:	683b      	ldr	r3, [r7, #0]
    818c:	69ba      	ldr	r2, [r7, #24]
    818e:	611a      	str	r2, [r3, #16]
    return node;
    8190:	6a3b      	ldr	r3, [r7, #32]
}
    8192:	0018      	movs	r0, r3
    8194:	46bd      	mov	sp, r7
    8196:	b00a      	add	sp, #40	; 0x28
    8198:	bd80      	pop	{r7, pc}
	...

0000819c <list_thread>:

long list_thread(void)
{
    819c:	b5f0      	push	{r4, r5, r6, r7, lr}
    819e:	b0b9      	sub	sp, #228	; 0xe4
    81a0:	af02      	add	r7, sp, #8
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
    81a2:	2300      	movs	r3, #0
    81a4:	22d4      	movs	r2, #212	; 0xd4
    81a6:	18ba      	adds	r2, r7, r2
    81a8:	6013      	str	r3, [r2, #0]
    const char *item_title = "thread";
    81aa:	4b8a      	ldr	r3, [pc, #552]	; (83d4 <list_thread+0x238>)
    81ac:	24c8      	movs	r4, #200	; 0xc8
    81ae:	193a      	adds	r2, r7, r4
    81b0:	6013      	str	r3, [r2, #0]
    int maxlen;

    list_find_init(&find_arg, RT_Object_Class_Thread, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
    81b2:	2380      	movs	r3, #128	; 0x80
    81b4:	18fa      	adds	r2, r7, r3
    81b6:	23a0      	movs	r3, #160	; 0xa0
    81b8:	18f8      	adds	r0, r7, r3
    81ba:	2308      	movs	r3, #8
    81bc:	2101      	movs	r1, #1
    81be:	f7ff ff5f 	bl	8080 <list_find_init>

    maxlen = RT_NAME_MAX;
    81c2:	2308      	movs	r3, #8
    81c4:	21c4      	movs	r1, #196	; 0xc4
    81c6:	187a      	adds	r2, r7, r1
    81c8:	6013      	str	r3, [r2, #0]
#ifdef RT_USING_SMP
    rt_kprintf("%-*.s cpu bind pri  status      sp     stack size max used left tick  error\n", maxlen, item_title);
    object_split(maxlen);
    rt_kprintf(" --- ---- ---  ------- ---------- ----------  ------  ---------- ---\n");
#else
    rt_kprintf("%-*.s pri  status      sp     stack size max used left tick  error\n", maxlen, item_title);
    81ca:	193b      	adds	r3, r7, r4
    81cc:	681a      	ldr	r2, [r3, #0]
    81ce:	000c      	movs	r4, r1
    81d0:	187b      	adds	r3, r7, r1
    81d2:	6819      	ldr	r1, [r3, #0]
    81d4:	4b80      	ldr	r3, [pc, #512]	; (83d8 <list_thread+0x23c>)
    81d6:	0018      	movs	r0, r3
    81d8:	f7fb fd54 	bl	3c84 <rt_kprintf>
    object_split(maxlen);
    81dc:	193b      	adds	r3, r7, r4
    81de:	681b      	ldr	r3, [r3, #0]
    81e0:	0018      	movs	r0, r3
    81e2:	f7ff ff37 	bl	8054 <object_split>
    rt_kprintf(" ---  ------- ---------- ----------  ------  ---------- ---\n");
    81e6:	4b7d      	ldr	r3, [pc, #500]	; (83dc <list_thread+0x240>)
    81e8:	0018      	movs	r0, r3
    81ea:	f7fb fd4b 	bl	3c84 <rt_kprintf>
#endif /*RT_USING_SMP*/

    do
    {
        next = list_get_next(next, &find_arg);
    81ee:	23a0      	movs	r3, #160	; 0xa0
    81f0:	18fa      	adds	r2, r7, r3
    81f2:	24d4      	movs	r4, #212	; 0xd4
    81f4:	193b      	adds	r3, r7, r4
    81f6:	681b      	ldr	r3, [r3, #0]
    81f8:	0011      	movs	r1, r2
    81fa:	0018      	movs	r0, r3
    81fc:	f7ff ff68 	bl	80d0 <list_get_next>
    8200:	0003      	movs	r3, r0
    8202:	193a      	adds	r2, r7, r4
    8204:	6013      	str	r3, [r2, #0]
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
    8206:	2300      	movs	r3, #0
    8208:	22d0      	movs	r2, #208	; 0xd0
    820a:	18ba      	adds	r2, r7, r2
    820c:	6013      	str	r3, [r2, #0]
    820e:	e0cc      	b.n	83aa <list_thread+0x20e>
            {
                struct rt_object *obj;
                struct rt_thread thread_info, *thread;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
    8210:	2380      	movs	r3, #128	; 0x80
    8212:	18fb      	adds	r3, r7, r3
    8214:	22d0      	movs	r2, #208	; 0xd0
    8216:	18ba      	adds	r2, r7, r2
    8218:	6812      	ldr	r2, [r2, #0]
    821a:	0092      	lsls	r2, r2, #2
    821c:	58d3      	ldr	r3, [r2, r3]
    821e:	3b0c      	subs	r3, #12
    8220:	24c0      	movs	r4, #192	; 0xc0
    8222:	193a      	adds	r2, r7, r4
    8224:	6013      	str	r3, [r2, #0]
                level = rt_hw_interrupt_disable();
    8226:	f7fd f953 	bl	54d0 <rt_hw_interrupt_disable>
    822a:	0003      	movs	r3, r0
    822c:	21bc      	movs	r1, #188	; 0xbc
    822e:	187a      	adds	r2, r7, r1
    8230:	6013      	str	r3, [r2, #0]

                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
    8232:	193b      	adds	r3, r7, r4
    8234:	681b      	ldr	r3, [r3, #0]
    8236:	7a1b      	ldrb	r3, [r3, #8]
    8238:	001a      	movs	r2, r3
    823a:	2380      	movs	r3, #128	; 0x80
    823c:	439a      	bics	r2, r3
    823e:	0013      	movs	r3, r2
    8240:	22a0      	movs	r2, #160	; 0xa0
    8242:	18ba      	adds	r2, r7, r2
    8244:	7a12      	ldrb	r2, [r2, #8]
    8246:	4293      	cmp	r3, r2
    8248:	d005      	beq.n	8256 <list_thread+0xba>
                {
                    rt_hw_interrupt_enable(level);
    824a:	187b      	adds	r3, r7, r1
    824c:	681b      	ldr	r3, [r3, #0]
    824e:	0018      	movs	r0, r3
    8250:	f7fd f942 	bl	54d8 <rt_hw_interrupt_enable>
    8254:	e0a3      	b.n	839e <list_thread+0x202>
                    continue;
                }
                /* copy info */
                rt_memcpy(&thread_info, obj, sizeof thread_info);
    8256:	24c0      	movs	r4, #192	; 0xc0
    8258:	193b      	adds	r3, r7, r4
    825a:	6819      	ldr	r1, [r3, #0]
    825c:	003b      	movs	r3, r7
    825e:	2280      	movs	r2, #128	; 0x80
    8260:	0018      	movs	r0, r3
    8262:	f7fb f812 	bl	328a <rt_memcpy>
                rt_hw_interrupt_enable(level);
    8266:	23bc      	movs	r3, #188	; 0xbc
    8268:	18fb      	adds	r3, r7, r3
    826a:	681b      	ldr	r3, [r3, #0]
    826c:	0018      	movs	r0, r3
    826e:	f7fd f933 	bl	54d8 <rt_hw_interrupt_enable>

                thread = (struct rt_thread *)obj;
    8272:	193b      	adds	r3, r7, r4
    8274:	681b      	ldr	r3, [r3, #0]
    8276:	24b8      	movs	r4, #184	; 0xb8
    8278:	193a      	adds	r2, r7, r4
    827a:	6013      	str	r3, [r2, #0]
                        rt_kprintf("%-*.*s %3d %3d %4d ", maxlen, RT_NAME_MAX, thread->name, thread->oncpu, thread->bind_cpu, thread->current_priority);
                    else
                        rt_kprintf("%-*.*s N/A %3d %4d ", maxlen, RT_NAME_MAX, thread->name, thread->bind_cpu, thread->current_priority);

#else
                    rt_kprintf("%-*.*s %3d ", maxlen, RT_NAME_MAX, thread->name, thread->current_priority);
    827c:	193b      	adds	r3, r7, r4
    827e:	681a      	ldr	r2, [r3, #0]
    8280:	193b      	adds	r3, r7, r4
    8282:	681b      	ldr	r3, [r3, #0]
    8284:	2135      	movs	r1, #53	; 0x35
    8286:	5c5b      	ldrb	r3, [r3, r1]
    8288:	21c4      	movs	r1, #196	; 0xc4
    828a:	1879      	adds	r1, r7, r1
    828c:	6809      	ldr	r1, [r1, #0]
    828e:	4854      	ldr	r0, [pc, #336]	; (83e0 <list_thread+0x244>)
    8290:	9300      	str	r3, [sp, #0]
    8292:	0013      	movs	r3, r2
    8294:	2208      	movs	r2, #8
    8296:	f7fb fcf5 	bl	3c84 <rt_kprintf>
#endif /*RT_USING_SMP*/
                    stat = (thread->stat & RT_THREAD_STAT_MASK);
    829a:	193b      	adds	r3, r7, r4
    829c:	681b      	ldr	r3, [r3, #0]
    829e:	2234      	movs	r2, #52	; 0x34
    82a0:	5c9a      	ldrb	r2, [r3, r2]
    82a2:	20b7      	movs	r0, #183	; 0xb7
    82a4:	183b      	adds	r3, r7, r0
    82a6:	2107      	movs	r1, #7
    82a8:	400a      	ands	r2, r1
    82aa:	701a      	strb	r2, [r3, #0]
                    if (stat == RT_THREAD_READY)        rt_kprintf(" ready  ");
    82ac:	183b      	adds	r3, r7, r0
    82ae:	781b      	ldrb	r3, [r3, #0]
    82b0:	2b01      	cmp	r3, #1
    82b2:	d104      	bne.n	82be <list_thread+0x122>
    82b4:	4b4b      	ldr	r3, [pc, #300]	; (83e4 <list_thread+0x248>)
    82b6:	0018      	movs	r0, r3
    82b8:	f7fb fce4 	bl	3c84 <rt_kprintf>
    82bc:	e026      	b.n	830c <list_thread+0x170>
                    else if (stat == RT_THREAD_SUSPEND) rt_kprintf(" suspend");
    82be:	23b7      	movs	r3, #183	; 0xb7
    82c0:	18fb      	adds	r3, r7, r3
    82c2:	781b      	ldrb	r3, [r3, #0]
    82c4:	2b02      	cmp	r3, #2
    82c6:	d104      	bne.n	82d2 <list_thread+0x136>
    82c8:	4b47      	ldr	r3, [pc, #284]	; (83e8 <list_thread+0x24c>)
    82ca:	0018      	movs	r0, r3
    82cc:	f7fb fcda 	bl	3c84 <rt_kprintf>
    82d0:	e01c      	b.n	830c <list_thread+0x170>
                    else if (stat == RT_THREAD_INIT)    rt_kprintf(" init   ");
    82d2:	23b7      	movs	r3, #183	; 0xb7
    82d4:	18fb      	adds	r3, r7, r3
    82d6:	781b      	ldrb	r3, [r3, #0]
    82d8:	2b00      	cmp	r3, #0
    82da:	d104      	bne.n	82e6 <list_thread+0x14a>
    82dc:	4b43      	ldr	r3, [pc, #268]	; (83ec <list_thread+0x250>)
    82de:	0018      	movs	r0, r3
    82e0:	f7fb fcd0 	bl	3c84 <rt_kprintf>
    82e4:	e012      	b.n	830c <list_thread+0x170>
                    else if (stat == RT_THREAD_CLOSE)   rt_kprintf(" close  ");
    82e6:	23b7      	movs	r3, #183	; 0xb7
    82e8:	18fb      	adds	r3, r7, r3
    82ea:	781b      	ldrb	r3, [r3, #0]
    82ec:	2b04      	cmp	r3, #4
    82ee:	d104      	bne.n	82fa <list_thread+0x15e>
    82f0:	4b3f      	ldr	r3, [pc, #252]	; (83f0 <list_thread+0x254>)
    82f2:	0018      	movs	r0, r3
    82f4:	f7fb fcc6 	bl	3c84 <rt_kprintf>
    82f8:	e008      	b.n	830c <list_thread+0x170>
                    else if (stat == RT_THREAD_RUNNING) rt_kprintf(" running");
    82fa:	23b7      	movs	r3, #183	; 0xb7
    82fc:	18fb      	adds	r3, r7, r3
    82fe:	781b      	ldrb	r3, [r3, #0]
    8300:	2b03      	cmp	r3, #3
    8302:	d103      	bne.n	830c <list_thread+0x170>
    8304:	4b3b      	ldr	r3, [pc, #236]	; (83f4 <list_thread+0x258>)
    8306:	0018      	movs	r0, r3
    8308:	f7fb fcbc 	bl	3c84 <rt_kprintf>
                               thread->stack_size,
                               ((rt_ubase_t)ptr - (rt_ubase_t)thread->stack_addr) * 100 / thread->stack_size,
                               thread->remaining_tick,
                               thread->error);
#else
                    ptr = (rt_uint8_t *)thread->stack_addr;
    830c:	23b8      	movs	r3, #184	; 0xb8
    830e:	18fb      	adds	r3, r7, r3
    8310:	681b      	ldr	r3, [r3, #0]
    8312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8314:	22cc      	movs	r2, #204	; 0xcc
    8316:	18ba      	adds	r2, r7, r2
    8318:	6013      	str	r3, [r2, #0]
                    while (*ptr == '#')ptr ++;
    831a:	e005      	b.n	8328 <list_thread+0x18c>
    831c:	22cc      	movs	r2, #204	; 0xcc
    831e:	18bb      	adds	r3, r7, r2
    8320:	681b      	ldr	r3, [r3, #0]
    8322:	3301      	adds	r3, #1
    8324:	18ba      	adds	r2, r7, r2
    8326:	6013      	str	r3, [r2, #0]
    8328:	26cc      	movs	r6, #204	; 0xcc
    832a:	19bb      	adds	r3, r7, r6
    832c:	681b      	ldr	r3, [r3, #0]
    832e:	781b      	ldrb	r3, [r3, #0]
    8330:	2b23      	cmp	r3, #35	; 0x23
    8332:	d0f3      	beq.n	831c <list_thread+0x180>

                    rt_kprintf(" 0x%08x 0x%08x    %02d%%   0x%08x %03d\n",
                               thread->stack_size + ((rt_ubase_t)thread->stack_addr - (rt_ubase_t)thread->sp),
    8334:	20b8      	movs	r0, #184	; 0xb8
    8336:	183b      	adds	r3, r7, r0
    8338:	681b      	ldr	r3, [r3, #0]
    833a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    833c:	183b      	adds	r3, r7, r0
    833e:	681b      	ldr	r3, [r3, #0]
    8340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8342:	0019      	movs	r1, r3
    8344:	183b      	adds	r3, r7, r0
    8346:	681b      	ldr	r3, [r3, #0]
    8348:	69db      	ldr	r3, [r3, #28]
    834a:	1acb      	subs	r3, r1, r3
                    rt_kprintf(" 0x%08x 0x%08x    %02d%%   0x%08x %03d\n",
    834c:	18d4      	adds	r4, r2, r3
    834e:	183b      	adds	r3, r7, r0
    8350:	681b      	ldr	r3, [r3, #0]
    8352:	6add      	ldr	r5, [r3, #44]	; 0x2c
                               thread->stack_size,
                               (thread->stack_size - ((rt_ubase_t) ptr - (rt_ubase_t) thread->stack_addr)) * 100
    8354:	183b      	adds	r3, r7, r0
    8356:	681b      	ldr	r3, [r3, #0]
    8358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    835a:	183b      	adds	r3, r7, r0
    835c:	681b      	ldr	r3, [r3, #0]
    835e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8360:	0019      	movs	r1, r3
    8362:	19bb      	adds	r3, r7, r6
    8364:	681b      	ldr	r3, [r3, #0]
    8366:	1acb      	subs	r3, r1, r3
    8368:	18d3      	adds	r3, r2, r3
    836a:	2264      	movs	r2, #100	; 0x64
    836c:	435a      	muls	r2, r3
                               / thread->stack_size,
    836e:	0006      	movs	r6, r0
    8370:	183b      	adds	r3, r7, r0
    8372:	681b      	ldr	r3, [r3, #0]
    8374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    rt_kprintf(" 0x%08x 0x%08x    %02d%%   0x%08x %03d\n",
    8376:	0019      	movs	r1, r3
    8378:	0010      	movs	r0, r2
    837a:	f002 fd91 	bl	aea0 <__udivsi3>
    837e:	0003      	movs	r3, r0
    8380:	0019      	movs	r1, r3
    8382:	19bb      	adds	r3, r7, r6
    8384:	681b      	ldr	r3, [r3, #0]
    8386:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    8388:	19bb      	adds	r3, r7, r6
    838a:	681b      	ldr	r3, [r3, #0]
    838c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    838e:	481a      	ldr	r0, [pc, #104]	; (83f8 <list_thread+0x25c>)
    8390:	9301      	str	r3, [sp, #4]
    8392:	9200      	str	r2, [sp, #0]
    8394:	000b      	movs	r3, r1
    8396:	002a      	movs	r2, r5
    8398:	0021      	movs	r1, r4
    839a:	f7fb fc73 	bl	3c84 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
    839e:	22d0      	movs	r2, #208	; 0xd0
    83a0:	18bb      	adds	r3, r7, r2
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	3301      	adds	r3, #1
    83a6:	18ba      	adds	r2, r7, r2
    83a8:	6013      	str	r3, [r2, #0]
    83aa:	23a0      	movs	r3, #160	; 0xa0
    83ac:	18fb      	adds	r3, r7, r3
    83ae:	691b      	ldr	r3, [r3, #16]
    83b0:	22d0      	movs	r2, #208	; 0xd0
    83b2:	18ba      	adds	r2, r7, r2
    83b4:	6812      	ldr	r2, [r2, #0]
    83b6:	429a      	cmp	r2, r3
    83b8:	da00      	bge.n	83bc <list_thread+0x220>
    83ba:	e729      	b.n	8210 <list_thread+0x74>
#endif
                }
            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
    83bc:	23d4      	movs	r3, #212	; 0xd4
    83be:	18fb      	adds	r3, r7, r3
    83c0:	681b      	ldr	r3, [r3, #0]
    83c2:	2b00      	cmp	r3, #0
    83c4:	d000      	beq.n	83c8 <list_thread+0x22c>
    83c6:	e712      	b.n	81ee <list_thread+0x52>

    return 0;
    83c8:	2300      	movs	r3, #0
}
    83ca:	0018      	movs	r0, r3
    83cc:	46bd      	mov	sp, r7
    83ce:	b037      	add	sp, #220	; 0xdc
    83d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83d2:	46c0      	nop			; (mov r8, r8)
    83d4:	0000d074 	.word	0x0000d074
    83d8:	0000d07c 	.word	0x0000d07c
    83dc:	0000d0c0 	.word	0x0000d0c0
    83e0:	0000d100 	.word	0x0000d100
    83e4:	0000d10c 	.word	0x0000d10c
    83e8:	0000d118 	.word	0x0000d118
    83ec:	0000d124 	.word	0x0000d124
    83f0:	0000d130 	.word	0x0000d130
    83f4:	0000d13c 	.word	0x0000d13c
    83f8:	0000d148 	.word	0x0000d148

000083fc <show_wait_queue>:
MSH_CMD_EXPORT(list_thread, list thread);

static void show_wait_queue(struct rt_list_node *list)
{
    83fc:	b580      	push	{r7, lr}
    83fe:	b084      	sub	sp, #16
    8400:	af00      	add	r7, sp, #0
    8402:	6078      	str	r0, [r7, #4]
    struct rt_thread *thread;
    struct rt_list_node *node;

    for (node = list->next; node != list; node = node->next)
    8404:	687b      	ldr	r3, [r7, #4]
    8406:	681b      	ldr	r3, [r3, #0]
    8408:	60fb      	str	r3, [r7, #12]
    840a:	e014      	b.n	8436 <show_wait_queue+0x3a>
    {
        thread = rt_list_entry(node, struct rt_thread, tlist);
    840c:	68fb      	ldr	r3, [r7, #12]
    840e:	3b14      	subs	r3, #20
    8410:	60bb      	str	r3, [r7, #8]
        rt_kprintf("%.*s", RT_NAME_MAX, thread->name);
    8412:	68ba      	ldr	r2, [r7, #8]
    8414:	4b0c      	ldr	r3, [pc, #48]	; (8448 <show_wait_queue+0x4c>)
    8416:	2108      	movs	r1, #8
    8418:	0018      	movs	r0, r3
    841a:	f7fb fc33 	bl	3c84 <rt_kprintf>

        if (node->next != list)
    841e:	68fb      	ldr	r3, [r7, #12]
    8420:	681b      	ldr	r3, [r3, #0]
    8422:	687a      	ldr	r2, [r7, #4]
    8424:	429a      	cmp	r2, r3
    8426:	d003      	beq.n	8430 <show_wait_queue+0x34>
            rt_kprintf("/");
    8428:	4b08      	ldr	r3, [pc, #32]	; (844c <show_wait_queue+0x50>)
    842a:	0018      	movs	r0, r3
    842c:	f7fb fc2a 	bl	3c84 <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    8430:	68fb      	ldr	r3, [r7, #12]
    8432:	681b      	ldr	r3, [r3, #0]
    8434:	60fb      	str	r3, [r7, #12]
    8436:	68fa      	ldr	r2, [r7, #12]
    8438:	687b      	ldr	r3, [r7, #4]
    843a:	429a      	cmp	r2, r3
    843c:	d1e6      	bne.n	840c <show_wait_queue+0x10>
    }
}
    843e:	46c0      	nop			; (mov r8, r8)
    8440:	46c0      	nop			; (mov r8, r8)
    8442:	46bd      	mov	sp, r7
    8444:	b004      	add	sp, #16
    8446:	bd80      	pop	{r7, pc}
    8448:	0000d170 	.word	0x0000d170
    844c:	0000d178 	.word	0x0000d178

00008450 <list_sem>:

#ifdef RT_USING_SEMAPHORE
long list_sem(void)
{
    8450:	b5b0      	push	{r4, r5, r7, lr}
    8452:	b096      	sub	sp, #88	; 0x58
    8454:	af02      	add	r7, sp, #8
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
    8456:	2300      	movs	r3, #0
    8458:	64fb      	str	r3, [r7, #76]	; 0x4c

    int maxlen;
    const char *item_title = "semaphore";
    845a:	4b45      	ldr	r3, [pc, #276]	; (8570 <list_sem+0x120>)
    845c:	647b      	str	r3, [r7, #68]	; 0x44

    list_find_init(&find_arg, RT_Object_Class_Semaphore, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
    845e:	003a      	movs	r2, r7
    8460:	2320      	movs	r3, #32
    8462:	18f8      	adds	r0, r7, r3
    8464:	2308      	movs	r3, #8
    8466:	2102      	movs	r1, #2
    8468:	f7ff fe0a 	bl	8080 <list_find_init>

    maxlen = RT_NAME_MAX;
    846c:	2308      	movs	r3, #8
    846e:	643b      	str	r3, [r7, #64]	; 0x40

    rt_kprintf("%-*.s v   suspend thread\n", maxlen, item_title);
    8470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8472:	6c39      	ldr	r1, [r7, #64]	; 0x40
    8474:	4b3f      	ldr	r3, [pc, #252]	; (8574 <list_sem+0x124>)
    8476:	0018      	movs	r0, r3
    8478:	f7fb fc04 	bl	3c84 <rt_kprintf>
    object_split(maxlen);
    847c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    847e:	0018      	movs	r0, r3
    8480:	f7ff fde8 	bl	8054 <object_split>
    rt_kprintf(" --- --------------\n");
    8484:	4b3c      	ldr	r3, [pc, #240]	; (8578 <list_sem+0x128>)
    8486:	0018      	movs	r0, r3
    8488:	f7fb fbfc 	bl	3c84 <rt_kprintf>

    do
    {
        next = list_get_next(next, &find_arg);
    848c:	2320      	movs	r3, #32
    848e:	18fa      	adds	r2, r7, r3
    8490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8492:	0011      	movs	r1, r2
    8494:	0018      	movs	r0, r3
    8496:	f7ff fe1b 	bl	80d0 <list_get_next>
    849a:	0003      	movs	r3, r0
    849c:	64fb      	str	r3, [r7, #76]	; 0x4c
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
    849e:	2300      	movs	r3, #0
    84a0:	64bb      	str	r3, [r7, #72]	; 0x48
    84a2:	e057      	b.n	8554 <list_sem+0x104>
            {
                struct rt_object *obj;
                struct rt_semaphore *sem;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
    84a4:	003b      	movs	r3, r7
    84a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    84a8:	0092      	lsls	r2, r2, #2
    84aa:	58d3      	ldr	r3, [r2, r3]
    84ac:	3b0c      	subs	r3, #12
    84ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                level = rt_hw_interrupt_disable();
    84b0:	f7fd f80e 	bl	54d0 <rt_hw_interrupt_disable>
    84b4:	0003      	movs	r3, r0
    84b6:	63bb      	str	r3, [r7, #56]	; 0x38
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
    84b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    84ba:	7a1b      	ldrb	r3, [r3, #8]
    84bc:	001a      	movs	r2, r3
    84be:	2380      	movs	r3, #128	; 0x80
    84c0:	439a      	bics	r2, r3
    84c2:	0013      	movs	r3, r2
    84c4:	2220      	movs	r2, #32
    84c6:	18ba      	adds	r2, r7, r2
    84c8:	7a12      	ldrb	r2, [r2, #8]
    84ca:	4293      	cmp	r3, r2
    84cc:	d004      	beq.n	84d8 <list_sem+0x88>
                {
                    rt_hw_interrupt_enable(level);
    84ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    84d0:	0018      	movs	r0, r3
    84d2:	f7fd f801 	bl	54d8 <rt_hw_interrupt_enable>
                    continue;
    84d6:	e03a      	b.n	854e <list_sem+0xfe>
                }
                rt_hw_interrupt_enable(level);
    84d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    84da:	0018      	movs	r0, r3
    84dc:	f7fc fffc 	bl	54d8 <rt_hw_interrupt_enable>

                sem = (struct rt_semaphore *)obj;
    84e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    84e2:	637b      	str	r3, [r7, #52]	; 0x34
                if (!rt_list_isempty(&sem->parent.suspend_thread))
    84e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    84e6:	3314      	adds	r3, #20
    84e8:	0018      	movs	r0, r3
    84ea:	f7ff fd77 	bl	7fdc <rt_list_isempty>
    84ee:	1e03      	subs	r3, r0, #0
    84f0:	d11b      	bne.n	852a <list_sem+0xda>
                {
                    rt_kprintf("%-*.*s %03d %d:",
                               maxlen, RT_NAME_MAX,
                               sem->parent.parent.name,
    84f2:	6b7c      	ldr	r4, [r7, #52]	; 0x34
                               sem->value,
    84f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    84f6:	8b9b      	ldrh	r3, [r3, #28]
                    rt_kprintf("%-*.*s %03d %d:",
    84f8:	001d      	movs	r5, r3
                               rt_list_len(&sem->parent.suspend_thread));
    84fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    84fc:	3314      	adds	r3, #20
                    rt_kprintf("%-*.*s %03d %d:",
    84fe:	0018      	movs	r0, r3
    8500:	f7ff fd7b 	bl	7ffa <rt_list_len>
    8504:	0003      	movs	r3, r0
    8506:	6c39      	ldr	r1, [r7, #64]	; 0x40
    8508:	481c      	ldr	r0, [pc, #112]	; (857c <list_sem+0x12c>)
    850a:	9301      	str	r3, [sp, #4]
    850c:	9500      	str	r5, [sp, #0]
    850e:	0023      	movs	r3, r4
    8510:	2208      	movs	r2, #8
    8512:	f7fb fbb7 	bl	3c84 <rt_kprintf>
                    show_wait_queue(&(sem->parent.suspend_thread));
    8516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8518:	3314      	adds	r3, #20
    851a:	0018      	movs	r0, r3
    851c:	f7ff ff6e 	bl	83fc <show_wait_queue>
                    rt_kprintf("\n");
    8520:	4b17      	ldr	r3, [pc, #92]	; (8580 <list_sem+0x130>)
    8522:	0018      	movs	r0, r3
    8524:	f7fb fbae 	bl	3c84 <rt_kprintf>
    8528:	e011      	b.n	854e <list_sem+0xfe>
                }
                else
                {
                    rt_kprintf("%-*.*s %03d %d\n",
                               maxlen, RT_NAME_MAX,
                               sem->parent.parent.name,
    852a:	6b7c      	ldr	r4, [r7, #52]	; 0x34
                               sem->value,
    852c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    852e:	8b9b      	ldrh	r3, [r3, #28]
                    rt_kprintf("%-*.*s %03d %d\n",
    8530:	001d      	movs	r5, r3
                               rt_list_len(&sem->parent.suspend_thread));
    8532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8534:	3314      	adds	r3, #20
                    rt_kprintf("%-*.*s %03d %d\n",
    8536:	0018      	movs	r0, r3
    8538:	f7ff fd5f 	bl	7ffa <rt_list_len>
    853c:	0003      	movs	r3, r0
    853e:	6c39      	ldr	r1, [r7, #64]	; 0x40
    8540:	4810      	ldr	r0, [pc, #64]	; (8584 <list_sem+0x134>)
    8542:	9301      	str	r3, [sp, #4]
    8544:	9500      	str	r5, [sp, #0]
    8546:	0023      	movs	r3, r4
    8548:	2208      	movs	r2, #8
    854a:	f7fb fb9b 	bl	3c84 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
    854e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8550:	3301      	adds	r3, #1
    8552:	64bb      	str	r3, [r7, #72]	; 0x48
    8554:	2320      	movs	r3, #32
    8556:	18fb      	adds	r3, r7, r3
    8558:	691b      	ldr	r3, [r3, #16]
    855a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    855c:	429a      	cmp	r2, r3
    855e:	dba1      	blt.n	84a4 <list_sem+0x54>
                }
            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
    8560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8562:	2b00      	cmp	r3, #0
    8564:	d192      	bne.n	848c <list_sem+0x3c>

    return 0;
    8566:	2300      	movs	r3, #0
}
    8568:	0018      	movs	r0, r3
    856a:	46bd      	mov	sp, r7
    856c:	b014      	add	sp, #80	; 0x50
    856e:	bdb0      	pop	{r4, r5, r7, pc}
    8570:	0000d17c 	.word	0x0000d17c
    8574:	0000d188 	.word	0x0000d188
    8578:	0000d1a4 	.word	0x0000d1a4
    857c:	0000d1bc 	.word	0x0000d1bc
    8580:	0000d1cc 	.word	0x0000d1cc
    8584:	0000d1d0 	.word	0x0000d1d0

00008588 <list_event>:
MSH_CMD_EXPORT(list_sem, list semaphore in system);
#endif

#ifdef RT_USING_EVENT
long list_event(void)
{
    8588:	b5b0      	push	{r4, r5, r7, lr}
    858a:	b096      	sub	sp, #88	; 0x58
    858c:	af02      	add	r7, sp, #8
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
    858e:	2300      	movs	r3, #0
    8590:	64fb      	str	r3, [r7, #76]	; 0x4c

    int maxlen;
    const char *item_title = "event";
    8592:	4b41      	ldr	r3, [pc, #260]	; (8698 <list_event+0x110>)
    8594:	647b      	str	r3, [r7, #68]	; 0x44

    list_find_init(&find_arg, RT_Object_Class_Event, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
    8596:	003a      	movs	r2, r7
    8598:	2320      	movs	r3, #32
    859a:	18f8      	adds	r0, r7, r3
    859c:	2308      	movs	r3, #8
    859e:	2104      	movs	r1, #4
    85a0:	f7ff fd6e 	bl	8080 <list_find_init>

    maxlen = RT_NAME_MAX;
    85a4:	2308      	movs	r3, #8
    85a6:	643b      	str	r3, [r7, #64]	; 0x40

    rt_kprintf("%-*.s      set    suspend thread\n", maxlen, item_title);
    85a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    85aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
    85ac:	4b3b      	ldr	r3, [pc, #236]	; (869c <list_event+0x114>)
    85ae:	0018      	movs	r0, r3
    85b0:	f7fb fb68 	bl	3c84 <rt_kprintf>
    object_split(maxlen);
    85b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    85b6:	0018      	movs	r0, r3
    85b8:	f7ff fd4c 	bl	8054 <object_split>
    rt_kprintf("  ---------- --------------\n");
    85bc:	4b38      	ldr	r3, [pc, #224]	; (86a0 <list_event+0x118>)
    85be:	0018      	movs	r0, r3
    85c0:	f7fb fb60 	bl	3c84 <rt_kprintf>

    do
    {
        next = list_get_next(next, &find_arg);
    85c4:	2320      	movs	r3, #32
    85c6:	18fa      	adds	r2, r7, r3
    85c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    85ca:	0011      	movs	r1, r2
    85cc:	0018      	movs	r0, r3
    85ce:	f7ff fd7f 	bl	80d0 <list_get_next>
    85d2:	0003      	movs	r3, r0
    85d4:	64fb      	str	r3, [r7, #76]	; 0x4c
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
    85d6:	2300      	movs	r3, #0
    85d8:	64bb      	str	r3, [r7, #72]	; 0x48
    85da:	e04e      	b.n	867a <list_event+0xf2>
            {
                struct rt_object *obj;
                struct rt_event *e;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
    85dc:	003b      	movs	r3, r7
    85de:	6cba      	ldr	r2, [r7, #72]	; 0x48
    85e0:	0092      	lsls	r2, r2, #2
    85e2:	58d3      	ldr	r3, [r2, r3]
    85e4:	3b0c      	subs	r3, #12
    85e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                level = rt_hw_interrupt_disable();
    85e8:	f7fc ff72 	bl	54d0 <rt_hw_interrupt_disable>
    85ec:	0003      	movs	r3, r0
    85ee:	63bb      	str	r3, [r7, #56]	; 0x38
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
    85f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    85f2:	7a1b      	ldrb	r3, [r3, #8]
    85f4:	001a      	movs	r2, r3
    85f6:	2380      	movs	r3, #128	; 0x80
    85f8:	439a      	bics	r2, r3
    85fa:	0013      	movs	r3, r2
    85fc:	2220      	movs	r2, #32
    85fe:	18ba      	adds	r2, r7, r2
    8600:	7a12      	ldrb	r2, [r2, #8]
    8602:	4293      	cmp	r3, r2
    8604:	d004      	beq.n	8610 <list_event+0x88>
                {
                    rt_hw_interrupt_enable(level);
    8606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8608:	0018      	movs	r0, r3
    860a:	f7fc ff65 	bl	54d8 <rt_hw_interrupt_enable>
                    continue;
    860e:	e031      	b.n	8674 <list_event+0xec>
                }

                rt_hw_interrupt_enable(level);
    8610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8612:	0018      	movs	r0, r3
    8614:	f7fc ff60 	bl	54d8 <rt_hw_interrupt_enable>

                e = (struct rt_event *)obj;
    8618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    861a:	637b      	str	r3, [r7, #52]	; 0x34
                if (!rt_list_isempty(&e->parent.suspend_thread))
    861c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    861e:	3314      	adds	r3, #20
    8620:	0018      	movs	r0, r3
    8622:	f7ff fcdb 	bl	7fdc <rt_list_isempty>
    8626:	1e03      	subs	r3, r0, #0
    8628:	d11a      	bne.n	8660 <list_event+0xd8>
                {
                    rt_kprintf("%-*.*s  0x%08x %03d:",
                               maxlen, RT_NAME_MAX,
                               e->parent.parent.name,
    862a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
                    rt_kprintf("%-*.*s  0x%08x %03d:",
    862c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    862e:	69dc      	ldr	r4, [r3, #28]
                               e->set,
                               rt_list_len(&e->parent.suspend_thread));
    8630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8632:	3314      	adds	r3, #20
                    rt_kprintf("%-*.*s  0x%08x %03d:",
    8634:	0018      	movs	r0, r3
    8636:	f7ff fce0 	bl	7ffa <rt_list_len>
    863a:	0003      	movs	r3, r0
    863c:	6c39      	ldr	r1, [r7, #64]	; 0x40
    863e:	4819      	ldr	r0, [pc, #100]	; (86a4 <list_event+0x11c>)
    8640:	9301      	str	r3, [sp, #4]
    8642:	9400      	str	r4, [sp, #0]
    8644:	002b      	movs	r3, r5
    8646:	2208      	movs	r2, #8
    8648:	f7fb fb1c 	bl	3c84 <rt_kprintf>
                    show_wait_queue(&(e->parent.suspend_thread));
    864c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    864e:	3314      	adds	r3, #20
    8650:	0018      	movs	r0, r3
    8652:	f7ff fed3 	bl	83fc <show_wait_queue>
                    rt_kprintf("\n");
    8656:	4b14      	ldr	r3, [pc, #80]	; (86a8 <list_event+0x120>)
    8658:	0018      	movs	r0, r3
    865a:	f7fb fb13 	bl	3c84 <rt_kprintf>
    865e:	e009      	b.n	8674 <list_event+0xec>
                }
                else
                {
                    rt_kprintf("%-*.*s  0x%08x 0\n",
                               maxlen, RT_NAME_MAX, e->parent.parent.name, e->set);
    8660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                    rt_kprintf("%-*.*s  0x%08x 0\n",
    8662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8664:	69db      	ldr	r3, [r3, #28]
    8666:	6c39      	ldr	r1, [r7, #64]	; 0x40
    8668:	4810      	ldr	r0, [pc, #64]	; (86ac <list_event+0x124>)
    866a:	9300      	str	r3, [sp, #0]
    866c:	0013      	movs	r3, r2
    866e:	2208      	movs	r2, #8
    8670:	f7fb fb08 	bl	3c84 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
    8674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8676:	3301      	adds	r3, #1
    8678:	64bb      	str	r3, [r7, #72]	; 0x48
    867a:	2320      	movs	r3, #32
    867c:	18fb      	adds	r3, r7, r3
    867e:	691b      	ldr	r3, [r3, #16]
    8680:	6cba      	ldr	r2, [r7, #72]	; 0x48
    8682:	429a      	cmp	r2, r3
    8684:	dbaa      	blt.n	85dc <list_event+0x54>
                }
            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
    8686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8688:	2b00      	cmp	r3, #0
    868a:	d19b      	bne.n	85c4 <list_event+0x3c>

    return 0;
    868c:	2300      	movs	r3, #0
}
    868e:	0018      	movs	r0, r3
    8690:	46bd      	mov	sp, r7
    8692:	b014      	add	sp, #80	; 0x50
    8694:	bdb0      	pop	{r4, r5, r7, pc}
    8696:	46c0      	nop			; (mov r8, r8)
    8698:	0000d1e0 	.word	0x0000d1e0
    869c:	0000d1e8 	.word	0x0000d1e8
    86a0:	0000d20c 	.word	0x0000d20c
    86a4:	0000d22c 	.word	0x0000d22c
    86a8:	0000d1cc 	.word	0x0000d1cc
    86ac:	0000d244 	.word	0x0000d244

000086b0 <list_mutex>:
MSH_CMD_EXPORT(list_event, list event in system);
#endif

#ifdef RT_USING_MUTEX
long list_mutex(void)
{
    86b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    86b2:	b099      	sub	sp, #100	; 0x64
    86b4:	af04      	add	r7, sp, #16
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
    86b6:	2300      	movs	r3, #0
    86b8:	64fb      	str	r3, [r7, #76]	; 0x4c

    int maxlen;
    const char *item_title = "mutex";
    86ba:	4b37      	ldr	r3, [pc, #220]	; (8798 <list_mutex+0xe8>)
    86bc:	647b      	str	r3, [r7, #68]	; 0x44

    list_find_init(&find_arg, RT_Object_Class_Mutex, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
    86be:	003a      	movs	r2, r7
    86c0:	2320      	movs	r3, #32
    86c2:	18f8      	adds	r0, r7, r3
    86c4:	2308      	movs	r3, #8
    86c6:	2103      	movs	r1, #3
    86c8:	f7ff fcda 	bl	8080 <list_find_init>

    maxlen = RT_NAME_MAX;
    86cc:	2308      	movs	r3, #8
    86ce:	643b      	str	r3, [r7, #64]	; 0x40

    rt_kprintf("%-*.s   owner  hold suspend thread\n", maxlen, item_title);
    86d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    86d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
    86d4:	4b31      	ldr	r3, [pc, #196]	; (879c <list_mutex+0xec>)
    86d6:	0018      	movs	r0, r3
    86d8:	f7fb fad4 	bl	3c84 <rt_kprintf>
    object_split(maxlen);
    86dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    86de:	0018      	movs	r0, r3
    86e0:	f7ff fcb8 	bl	8054 <object_split>
    rt_kprintf(" -------- ---- --------------\n");
    86e4:	4b2e      	ldr	r3, [pc, #184]	; (87a0 <list_mutex+0xf0>)
    86e6:	0018      	movs	r0, r3
    86e8:	f7fb facc 	bl	3c84 <rt_kprintf>

    do
    {
        next = list_get_next(next, &find_arg);
    86ec:	2320      	movs	r3, #32
    86ee:	18fa      	adds	r2, r7, r3
    86f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    86f2:	0011      	movs	r1, r2
    86f4:	0018      	movs	r0, r3
    86f6:	f7ff fceb 	bl	80d0 <list_get_next>
    86fa:	0003      	movs	r3, r0
    86fc:	64fb      	str	r3, [r7, #76]	; 0x4c
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
    86fe:	2300      	movs	r3, #0
    8700:	64bb      	str	r3, [r7, #72]	; 0x48
    8702:	e03a      	b.n	877a <list_mutex+0xca>
            {
                struct rt_object *obj;
                struct rt_mutex *m;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
    8704:	003b      	movs	r3, r7
    8706:	6cba      	ldr	r2, [r7, #72]	; 0x48
    8708:	0092      	lsls	r2, r2, #2
    870a:	58d3      	ldr	r3, [r2, r3]
    870c:	3b0c      	subs	r3, #12
    870e:	63fb      	str	r3, [r7, #60]	; 0x3c
                level = rt_hw_interrupt_disable();
    8710:	f7fc fede 	bl	54d0 <rt_hw_interrupt_disable>
    8714:	0003      	movs	r3, r0
    8716:	63bb      	str	r3, [r7, #56]	; 0x38
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
    8718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    871a:	7a1b      	ldrb	r3, [r3, #8]
    871c:	001a      	movs	r2, r3
    871e:	2380      	movs	r3, #128	; 0x80
    8720:	439a      	bics	r2, r3
    8722:	0013      	movs	r3, r2
    8724:	2220      	movs	r2, #32
    8726:	18ba      	adds	r2, r7, r2
    8728:	7a12      	ldrb	r2, [r2, #8]
    872a:	4293      	cmp	r3, r2
    872c:	d004      	beq.n	8738 <list_mutex+0x88>
                {
                    rt_hw_interrupt_enable(level);
    872e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8730:	0018      	movs	r0, r3
    8732:	f7fc fed1 	bl	54d8 <rt_hw_interrupt_enable>
                    continue;
    8736:	e01d      	b.n	8774 <list_mutex+0xc4>
                }

                rt_hw_interrupt_enable(level);
    8738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    873a:	0018      	movs	r0, r3
    873c:	f7fc fecc 	bl	54d8 <rt_hw_interrupt_enable>

                m = (struct rt_mutex *)obj;
    8740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8742:	637b      	str	r3, [r7, #52]	; 0x34
                rt_kprintf("%-*.*s %-8.*s %04d %d\n",
                           maxlen, RT_NAME_MAX,
                           m->parent.parent.name,
    8744:	6b7c      	ldr	r4, [r7, #52]	; 0x34
                           RT_NAME_MAX,
                           m->owner->name,
    8746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8748:	6a1b      	ldr	r3, [r3, #32]
    874a:	001d      	movs	r5, r3
                           m->hold,
    874c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    874e:	7fdb      	ldrb	r3, [r3, #31]
                rt_kprintf("%-*.*s %-8.*s %04d %d\n",
    8750:	001e      	movs	r6, r3
                           rt_list_len(&m->parent.suspend_thread));
    8752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8754:	3314      	adds	r3, #20
                rt_kprintf("%-*.*s %-8.*s %04d %d\n",
    8756:	0018      	movs	r0, r3
    8758:	f7ff fc4f 	bl	7ffa <rt_list_len>
    875c:	0003      	movs	r3, r0
    875e:	6c39      	ldr	r1, [r7, #64]	; 0x40
    8760:	4810      	ldr	r0, [pc, #64]	; (87a4 <list_mutex+0xf4>)
    8762:	9303      	str	r3, [sp, #12]
    8764:	9602      	str	r6, [sp, #8]
    8766:	9501      	str	r5, [sp, #4]
    8768:	2308      	movs	r3, #8
    876a:	9300      	str	r3, [sp, #0]
    876c:	0023      	movs	r3, r4
    876e:	2208      	movs	r2, #8
    8770:	f7fb fa88 	bl	3c84 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
    8774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8776:	3301      	adds	r3, #1
    8778:	64bb      	str	r3, [r7, #72]	; 0x48
    877a:	2320      	movs	r3, #32
    877c:	18fb      	adds	r3, r7, r3
    877e:	691b      	ldr	r3, [r3, #16]
    8780:	6cba      	ldr	r2, [r7, #72]	; 0x48
    8782:	429a      	cmp	r2, r3
    8784:	dbbe      	blt.n	8704 <list_mutex+0x54>

            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
    8786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8788:	2b00      	cmp	r3, #0
    878a:	d1af      	bne.n	86ec <list_mutex+0x3c>

    return 0;
    878c:	2300      	movs	r3, #0
}
    878e:	0018      	movs	r0, r3
    8790:	46bd      	mov	sp, r7
    8792:	b015      	add	sp, #84	; 0x54
    8794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8796:	46c0      	nop			; (mov r8, r8)
    8798:	0000d258 	.word	0x0000d258
    879c:	0000d260 	.word	0x0000d260
    87a0:	0000d284 	.word	0x0000d284
    87a4:	0000d2a4 	.word	0x0000d2a4

000087a8 <list_mailbox>:
MSH_CMD_EXPORT(list_mutex, list mutex in system);
#endif

#ifdef RT_USING_MAILBOX
long list_mailbox(void)
{
    87a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    87aa:	b099      	sub	sp, #100	; 0x64
    87ac:	af04      	add	r7, sp, #16
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
    87ae:	2300      	movs	r3, #0
    87b0:	64fb      	str	r3, [r7, #76]	; 0x4c

    int maxlen;
    const char *item_title = "mailbox";
    87b2:	4b49      	ldr	r3, [pc, #292]	; (88d8 <list_mailbox+0x130>)
    87b4:	647b      	str	r3, [r7, #68]	; 0x44

    list_find_init(&find_arg, RT_Object_Class_MailBox, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
    87b6:	003a      	movs	r2, r7
    87b8:	2320      	movs	r3, #32
    87ba:	18f8      	adds	r0, r7, r3
    87bc:	2308      	movs	r3, #8
    87be:	2105      	movs	r1, #5
    87c0:	f7ff fc5e 	bl	8080 <list_find_init>

    maxlen = RT_NAME_MAX;
    87c4:	2308      	movs	r3, #8
    87c6:	643b      	str	r3, [r7, #64]	; 0x40

    rt_kprintf("%-*.s entry size suspend thread\n", maxlen, item_title);
    87c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    87ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
    87cc:	4b43      	ldr	r3, [pc, #268]	; (88dc <list_mailbox+0x134>)
    87ce:	0018      	movs	r0, r3
    87d0:	f7fb fa58 	bl	3c84 <rt_kprintf>
    object_split(maxlen);
    87d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    87d6:	0018      	movs	r0, r3
    87d8:	f7ff fc3c 	bl	8054 <object_split>
    rt_kprintf(" ----  ---- --------------\n");
    87dc:	4b40      	ldr	r3, [pc, #256]	; (88e0 <list_mailbox+0x138>)
    87de:	0018      	movs	r0, r3
    87e0:	f7fb fa50 	bl	3c84 <rt_kprintf>

    do
    {
        next = list_get_next(next, &find_arg);
    87e4:	2320      	movs	r3, #32
    87e6:	18fa      	adds	r2, r7, r3
    87e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    87ea:	0011      	movs	r1, r2
    87ec:	0018      	movs	r0, r3
    87ee:	f7ff fc6f 	bl	80d0 <list_get_next>
    87f2:	0003      	movs	r3, r0
    87f4:	64fb      	str	r3, [r7, #76]	; 0x4c
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
    87f6:	2300      	movs	r3, #0
    87f8:	64bb      	str	r3, [r7, #72]	; 0x48
    87fa:	e05f      	b.n	88bc <list_mailbox+0x114>
            {
                struct rt_object *obj;
                struct rt_mailbox *m;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
    87fc:	003b      	movs	r3, r7
    87fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
    8800:	0092      	lsls	r2, r2, #2
    8802:	58d3      	ldr	r3, [r2, r3]
    8804:	3b0c      	subs	r3, #12
    8806:	63fb      	str	r3, [r7, #60]	; 0x3c
                level = rt_hw_interrupt_disable();
    8808:	f7fc fe62 	bl	54d0 <rt_hw_interrupt_disable>
    880c:	0003      	movs	r3, r0
    880e:	63bb      	str	r3, [r7, #56]	; 0x38
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
    8810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8812:	7a1b      	ldrb	r3, [r3, #8]
    8814:	001a      	movs	r2, r3
    8816:	2380      	movs	r3, #128	; 0x80
    8818:	439a      	bics	r2, r3
    881a:	0013      	movs	r3, r2
    881c:	2220      	movs	r2, #32
    881e:	18ba      	adds	r2, r7, r2
    8820:	7a12      	ldrb	r2, [r2, #8]
    8822:	4293      	cmp	r3, r2
    8824:	d004      	beq.n	8830 <list_mailbox+0x88>
                {
                    rt_hw_interrupt_enable(level);
    8826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8828:	0018      	movs	r0, r3
    882a:	f7fc fe55 	bl	54d8 <rt_hw_interrupt_enable>
                    continue;
    882e:	e042      	b.n	88b6 <list_mailbox+0x10e>
                }

                rt_hw_interrupt_enable(level);
    8830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8832:	0018      	movs	r0, r3
    8834:	f7fc fe50 	bl	54d8 <rt_hw_interrupt_enable>

                m = (struct rt_mailbox *)obj;
    8838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    883a:	637b      	str	r3, [r7, #52]	; 0x34
                if (!rt_list_isempty(&m->parent.suspend_thread))
    883c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    883e:	3314      	adds	r3, #20
    8840:	0018      	movs	r0, r3
    8842:	f7ff fbcb 	bl	7fdc <rt_list_isempty>
    8846:	1e03      	subs	r3, r0, #0
    8848:	d11f      	bne.n	888a <list_mailbox+0xe2>
                {
                    rt_kprintf("%-*.*s %04d  %04d %d:",
                               maxlen, RT_NAME_MAX,
                               m->parent.parent.name,
    884a:	6b7c      	ldr	r4, [r7, #52]	; 0x34
                               m->entry,
    884c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    884e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    rt_kprintf("%-*.*s %04d  %04d %d:",
    8850:	001d      	movs	r5, r3
                               m->size,
    8852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8854:	8c1b      	ldrh	r3, [r3, #32]
                    rt_kprintf("%-*.*s %04d  %04d %d:",
    8856:	001e      	movs	r6, r3
                               rt_list_len(&m->parent.suspend_thread));
    8858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    885a:	3314      	adds	r3, #20
                    rt_kprintf("%-*.*s %04d  %04d %d:",
    885c:	0018      	movs	r0, r3
    885e:	f7ff fbcc 	bl	7ffa <rt_list_len>
    8862:	0003      	movs	r3, r0
    8864:	6c39      	ldr	r1, [r7, #64]	; 0x40
    8866:	481f      	ldr	r0, [pc, #124]	; (88e4 <list_mailbox+0x13c>)
    8868:	9302      	str	r3, [sp, #8]
    886a:	9601      	str	r6, [sp, #4]
    886c:	9500      	str	r5, [sp, #0]
    886e:	0023      	movs	r3, r4
    8870:	2208      	movs	r2, #8
    8872:	f7fb fa07 	bl	3c84 <rt_kprintf>
                    show_wait_queue(&(m->parent.suspend_thread));
    8876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8878:	3314      	adds	r3, #20
    887a:	0018      	movs	r0, r3
    887c:	f7ff fdbe 	bl	83fc <show_wait_queue>
                    rt_kprintf("\n");
    8880:	4b19      	ldr	r3, [pc, #100]	; (88e8 <list_mailbox+0x140>)
    8882:	0018      	movs	r0, r3
    8884:	f7fb f9fe 	bl	3c84 <rt_kprintf>
    8888:	e015      	b.n	88b6 <list_mailbox+0x10e>
                }
                else
                {
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
                               maxlen, RT_NAME_MAX,
                               m->parent.parent.name,
    888a:	6b7c      	ldr	r4, [r7, #52]	; 0x34
                               m->entry,
    888c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    888e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
    8890:	001d      	movs	r5, r3
                               m->size,
    8892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8894:	8c1b      	ldrh	r3, [r3, #32]
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
    8896:	001e      	movs	r6, r3
                               rt_list_len(&m->parent.suspend_thread));
    8898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    889a:	3314      	adds	r3, #20
                    rt_kprintf("%-*.*s %04d  %04d %d\n",
    889c:	0018      	movs	r0, r3
    889e:	f7ff fbac 	bl	7ffa <rt_list_len>
    88a2:	0003      	movs	r3, r0
    88a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
    88a6:	4811      	ldr	r0, [pc, #68]	; (88ec <list_mailbox+0x144>)
    88a8:	9302      	str	r3, [sp, #8]
    88aa:	9601      	str	r6, [sp, #4]
    88ac:	9500      	str	r5, [sp, #0]
    88ae:	0023      	movs	r3, r4
    88b0:	2208      	movs	r2, #8
    88b2:	f7fb f9e7 	bl	3c84 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
    88b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    88b8:	3301      	adds	r3, #1
    88ba:	64bb      	str	r3, [r7, #72]	; 0x48
    88bc:	2320      	movs	r3, #32
    88be:	18fb      	adds	r3, r7, r3
    88c0:	691b      	ldr	r3, [r3, #16]
    88c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
    88c4:	429a      	cmp	r2, r3
    88c6:	db99      	blt.n	87fc <list_mailbox+0x54>
                }

            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
    88c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    88ca:	2b00      	cmp	r3, #0
    88cc:	d18a      	bne.n	87e4 <list_mailbox+0x3c>

    return 0;
    88ce:	2300      	movs	r3, #0
}
    88d0:	0018      	movs	r0, r3
    88d2:	46bd      	mov	sp, r7
    88d4:	b015      	add	sp, #84	; 0x54
    88d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    88d8:	0000d2bc 	.word	0x0000d2bc
    88dc:	0000d2c4 	.word	0x0000d2c4
    88e0:	0000d2e8 	.word	0x0000d2e8
    88e4:	0000d304 	.word	0x0000d304
    88e8:	0000d1cc 	.word	0x0000d1cc
    88ec:	0000d31c 	.word	0x0000d31c

000088f0 <list_msgqueue>:
MSH_CMD_EXPORT(list_mailbox, list mail box in system);
#endif

#ifdef RT_USING_MESSAGEQUEUE
long list_msgqueue(void)
{
    88f0:	b5b0      	push	{r4, r5, r7, lr}
    88f2:	b096      	sub	sp, #88	; 0x58
    88f4:	af02      	add	r7, sp, #8
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
    88f6:	2300      	movs	r3, #0
    88f8:	64fb      	str	r3, [r7, #76]	; 0x4c

    int maxlen;
    const char *item_title = "msgqueue";
    88fa:	4b45      	ldr	r3, [pc, #276]	; (8a10 <list_msgqueue+0x120>)
    88fc:	647b      	str	r3, [r7, #68]	; 0x44

    list_find_init(&find_arg, RT_Object_Class_MessageQueue, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
    88fe:	003a      	movs	r2, r7
    8900:	2320      	movs	r3, #32
    8902:	18f8      	adds	r0, r7, r3
    8904:	2308      	movs	r3, #8
    8906:	2106      	movs	r1, #6
    8908:	f7ff fbba 	bl	8080 <list_find_init>

    maxlen = RT_NAME_MAX;
    890c:	2308      	movs	r3, #8
    890e:	643b      	str	r3, [r7, #64]	; 0x40

    rt_kprintf("%-*.s entry suspend thread\n", maxlen, item_title);
    8910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8912:	6c39      	ldr	r1, [r7, #64]	; 0x40
    8914:	4b3f      	ldr	r3, [pc, #252]	; (8a14 <list_msgqueue+0x124>)
    8916:	0018      	movs	r0, r3
    8918:	f7fb f9b4 	bl	3c84 <rt_kprintf>
    object_split(maxlen);
    891c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    891e:	0018      	movs	r0, r3
    8920:	f7ff fb98 	bl	8054 <object_split>
    rt_kprintf(" ----  --------------\n");
    8924:	4b3c      	ldr	r3, [pc, #240]	; (8a18 <list_msgqueue+0x128>)
    8926:	0018      	movs	r0, r3
    8928:	f7fb f9ac 	bl	3c84 <rt_kprintf>
    do
    {
        next = list_get_next(next, &find_arg);
    892c:	2320      	movs	r3, #32
    892e:	18fa      	adds	r2, r7, r3
    8930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8932:	0011      	movs	r1, r2
    8934:	0018      	movs	r0, r3
    8936:	f7ff fbcb 	bl	80d0 <list_get_next>
    893a:	0003      	movs	r3, r0
    893c:	64fb      	str	r3, [r7, #76]	; 0x4c
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
    893e:	2300      	movs	r3, #0
    8940:	64bb      	str	r3, [r7, #72]	; 0x48
    8942:	e057      	b.n	89f4 <list_msgqueue+0x104>
            {
                struct rt_object *obj;
                struct rt_messagequeue *m;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
    8944:	003b      	movs	r3, r7
    8946:	6cba      	ldr	r2, [r7, #72]	; 0x48
    8948:	0092      	lsls	r2, r2, #2
    894a:	58d3      	ldr	r3, [r2, r3]
    894c:	3b0c      	subs	r3, #12
    894e:	63fb      	str	r3, [r7, #60]	; 0x3c
                level = rt_hw_interrupt_disable();
    8950:	f7fc fdbe 	bl	54d0 <rt_hw_interrupt_disable>
    8954:	0003      	movs	r3, r0
    8956:	63bb      	str	r3, [r7, #56]	; 0x38
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
    8958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    895a:	7a1b      	ldrb	r3, [r3, #8]
    895c:	001a      	movs	r2, r3
    895e:	2380      	movs	r3, #128	; 0x80
    8960:	439a      	bics	r2, r3
    8962:	0013      	movs	r3, r2
    8964:	2220      	movs	r2, #32
    8966:	18ba      	adds	r2, r7, r2
    8968:	7a12      	ldrb	r2, [r2, #8]
    896a:	4293      	cmp	r3, r2
    896c:	d004      	beq.n	8978 <list_msgqueue+0x88>
                {
                    rt_hw_interrupt_enable(level);
    896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8970:	0018      	movs	r0, r3
    8972:	f7fc fdb1 	bl	54d8 <rt_hw_interrupt_enable>
                    continue;
    8976:	e03a      	b.n	89ee <list_msgqueue+0xfe>
                }

                rt_hw_interrupt_enable(level);
    8978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    897a:	0018      	movs	r0, r3
    897c:	f7fc fdac 	bl	54d8 <rt_hw_interrupt_enable>

                m = (struct rt_messagequeue *)obj;
    8980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8982:	637b      	str	r3, [r7, #52]	; 0x34
                if (!rt_list_isempty(&m->parent.suspend_thread))
    8984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8986:	3314      	adds	r3, #20
    8988:	0018      	movs	r0, r3
    898a:	f7ff fb27 	bl	7fdc <rt_list_isempty>
    898e:	1e03      	subs	r3, r0, #0
    8990:	d11b      	bne.n	89ca <list_msgqueue+0xda>
                {
                    rt_kprintf("%-*.*s %04d  %d:",
                               maxlen, RT_NAME_MAX,
                               m->parent.parent.name,
    8992:	6b7c      	ldr	r4, [r7, #52]	; 0x34
                               m->entry,
    8994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8996:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
                    rt_kprintf("%-*.*s %04d  %d:",
    8998:	001d      	movs	r5, r3
                               rt_list_len(&m->parent.suspend_thread));
    899a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    899c:	3314      	adds	r3, #20
                    rt_kprintf("%-*.*s %04d  %d:",
    899e:	0018      	movs	r0, r3
    89a0:	f7ff fb2b 	bl	7ffa <rt_list_len>
    89a4:	0003      	movs	r3, r0
    89a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
    89a8:	481c      	ldr	r0, [pc, #112]	; (8a1c <list_msgqueue+0x12c>)
    89aa:	9301      	str	r3, [sp, #4]
    89ac:	9500      	str	r5, [sp, #0]
    89ae:	0023      	movs	r3, r4
    89b0:	2208      	movs	r2, #8
    89b2:	f7fb f967 	bl	3c84 <rt_kprintf>
                    show_wait_queue(&(m->parent.suspend_thread));
    89b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    89b8:	3314      	adds	r3, #20
    89ba:	0018      	movs	r0, r3
    89bc:	f7ff fd1e 	bl	83fc <show_wait_queue>
                    rt_kprintf("\n");
    89c0:	4b17      	ldr	r3, [pc, #92]	; (8a20 <list_msgqueue+0x130>)
    89c2:	0018      	movs	r0, r3
    89c4:	f7fb f95e 	bl	3c84 <rt_kprintf>
    89c8:	e011      	b.n	89ee <list_msgqueue+0xfe>
                }
                else
                {
                    rt_kprintf("%-*.*s %04d  %d\n",
                               maxlen, RT_NAME_MAX,
                               m->parent.parent.name,
    89ca:	6b7c      	ldr	r4, [r7, #52]	; 0x34
                               m->entry,
    89cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    89ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
                    rt_kprintf("%-*.*s %04d  %d\n",
    89d0:	001d      	movs	r5, r3
                               rt_list_len(&m->parent.suspend_thread));
    89d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    89d4:	3314      	adds	r3, #20
                    rt_kprintf("%-*.*s %04d  %d\n",
    89d6:	0018      	movs	r0, r3
    89d8:	f7ff fb0f 	bl	7ffa <rt_list_len>
    89dc:	0003      	movs	r3, r0
    89de:	6c39      	ldr	r1, [r7, #64]	; 0x40
    89e0:	4810      	ldr	r0, [pc, #64]	; (8a24 <list_msgqueue+0x134>)
    89e2:	9301      	str	r3, [sp, #4]
    89e4:	9500      	str	r5, [sp, #0]
    89e6:	0023      	movs	r3, r4
    89e8:	2208      	movs	r2, #8
    89ea:	f7fb f94b 	bl	3c84 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
    89ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    89f0:	3301      	adds	r3, #1
    89f2:	64bb      	str	r3, [r7, #72]	; 0x48
    89f4:	2320      	movs	r3, #32
    89f6:	18fb      	adds	r3, r7, r3
    89f8:	691b      	ldr	r3, [r3, #16]
    89fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
    89fc:	429a      	cmp	r2, r3
    89fe:	dba1      	blt.n	8944 <list_msgqueue+0x54>
                }
            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
    8a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8a02:	2b00      	cmp	r3, #0
    8a04:	d192      	bne.n	892c <list_msgqueue+0x3c>

    return 0;
    8a06:	2300      	movs	r3, #0
}
    8a08:	0018      	movs	r0, r3
    8a0a:	46bd      	mov	sp, r7
    8a0c:	b014      	add	sp, #80	; 0x50
    8a0e:	bdb0      	pop	{r4, r5, r7, pc}
    8a10:	0000d334 	.word	0x0000d334
    8a14:	0000d340 	.word	0x0000d340
    8a18:	0000d35c 	.word	0x0000d35c
    8a1c:	0000d374 	.word	0x0000d374
    8a20:	0000d1cc 	.word	0x0000d1cc
    8a24:	0000d388 	.word	0x0000d388

00008a28 <list_mempool>:
MSH_CMD_EXPORT(list_memheap, list memory heap in system);
#endif

#ifdef RT_USING_MEMPOOL
long list_mempool(void)
{
    8a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a2a:	b09b      	sub	sp, #108	; 0x6c
    8a2c:	af04      	add	r7, sp, #16
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
    8a2e:	2300      	movs	r3, #0
    8a30:	657b      	str	r3, [r7, #84]	; 0x54

    int maxlen;
    const char *item_title = "mempool";
    8a32:	4b4e      	ldr	r3, [pc, #312]	; (8b6c <list_mempool+0x144>)
    8a34:	647b      	str	r3, [r7, #68]	; 0x44

    list_find_init(&find_arg, RT_Object_Class_MemPool, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
    8a36:	003a      	movs	r2, r7
    8a38:	2320      	movs	r3, #32
    8a3a:	18f8      	adds	r0, r7, r3
    8a3c:	2308      	movs	r3, #8
    8a3e:	2108      	movs	r1, #8
    8a40:	f7ff fb1e 	bl	8080 <list_find_init>

    maxlen = RT_NAME_MAX;
    8a44:	2308      	movs	r3, #8
    8a46:	643b      	str	r3, [r7, #64]	; 0x40

    rt_kprintf("%-*.s block total free suspend thread\n", maxlen, item_title);
    8a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8a4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
    8a4c:	4b48      	ldr	r3, [pc, #288]	; (8b70 <list_mempool+0x148>)
    8a4e:	0018      	movs	r0, r3
    8a50:	f7fb f918 	bl	3c84 <rt_kprintf>
    object_split(maxlen);
    8a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8a56:	0018      	movs	r0, r3
    8a58:	f7ff fafc 	bl	8054 <object_split>
    rt_kprintf(" ----  ----  ---- --------------\n");
    8a5c:	4b45      	ldr	r3, [pc, #276]	; (8b74 <list_mempool+0x14c>)
    8a5e:	0018      	movs	r0, r3
    8a60:	f7fb f910 	bl	3c84 <rt_kprintf>
    do
    {
        next = list_get_next(next, &find_arg);
    8a64:	2320      	movs	r3, #32
    8a66:	18fa      	adds	r2, r7, r3
    8a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    8a6a:	0011      	movs	r1, r2
    8a6c:	0018      	movs	r0, r3
    8a6e:	f7ff fb2f 	bl	80d0 <list_get_next>
    8a72:	0003      	movs	r3, r0
    8a74:	657b      	str	r3, [r7, #84]	; 0x54
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
    8a76:	2300      	movs	r3, #0
    8a78:	653b      	str	r3, [r7, #80]	; 0x50
    8a7a:	e068      	b.n	8b4e <list_mempool+0x126>
                struct rt_object *obj;
                struct rt_mempool *mp;
                int suspend_thread_count;
                rt_list_t *node;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
    8a7c:	003b      	movs	r3, r7
    8a7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    8a80:	0092      	lsls	r2, r2, #2
    8a82:	58d3      	ldr	r3, [r2, r3]
    8a84:	3b0c      	subs	r3, #12
    8a86:	63fb      	str	r3, [r7, #60]	; 0x3c
                level = rt_hw_interrupt_disable();
    8a88:	f7fc fd22 	bl	54d0 <rt_hw_interrupt_disable>
    8a8c:	0003      	movs	r3, r0
    8a8e:	63bb      	str	r3, [r7, #56]	; 0x38
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
    8a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8a92:	7a1b      	ldrb	r3, [r3, #8]
    8a94:	001a      	movs	r2, r3
    8a96:	2380      	movs	r3, #128	; 0x80
    8a98:	439a      	bics	r2, r3
    8a9a:	0013      	movs	r3, r2
    8a9c:	2220      	movs	r2, #32
    8a9e:	18ba      	adds	r2, r7, r2
    8aa0:	7a12      	ldrb	r2, [r2, #8]
    8aa2:	4293      	cmp	r3, r2
    8aa4:	d004      	beq.n	8ab0 <list_mempool+0x88>
                {
                    rt_hw_interrupt_enable(level);
    8aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8aa8:	0018      	movs	r0, r3
    8aaa:	f7fc fd15 	bl	54d8 <rt_hw_interrupt_enable>
                    continue;
    8aae:	e04b      	b.n	8b48 <list_mempool+0x120>
                }

                rt_hw_interrupt_enable(level);
    8ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8ab2:	0018      	movs	r0, r3
    8ab4:	f7fc fd10 	bl	54d8 <rt_hw_interrupt_enable>

                mp = (struct rt_mempool *)obj;
    8ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8aba:	637b      	str	r3, [r7, #52]	; 0x34

                suspend_thread_count = 0;
    8abc:	2300      	movs	r3, #0
    8abe:	64fb      	str	r3, [r7, #76]	; 0x4c
                rt_list_for_each(node, &mp->suspend_thread)
    8ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8ac4:	64bb      	str	r3, [r7, #72]	; 0x48
    8ac6:	e005      	b.n	8ad4 <list_mempool+0xac>
                {
                    suspend_thread_count++;
    8ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8aca:	3301      	adds	r3, #1
    8acc:	64fb      	str	r3, [r7, #76]	; 0x4c
                rt_list_for_each(node, &mp->suspend_thread)
    8ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8ad0:	681b      	ldr	r3, [r3, #0]
    8ad2:	64bb      	str	r3, [r7, #72]	; 0x48
    8ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8ad6:	332c      	adds	r3, #44	; 0x2c
    8ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    8ada:	429a      	cmp	r2, r3
    8adc:	d1f4      	bne.n	8ac8 <list_mempool+0xa0>
                }

                if (suspend_thread_count > 0)
    8ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8ae0:	2b00      	cmp	r3, #0
    8ae2:	dd1d      	ble.n	8b20 <list_mempool+0xf8>
                {
                    rt_kprintf("%-*.*s %04d  %04d  %04d %d:",
                               maxlen, RT_NAME_MAX,
                               mp->parent.name,
    8ae4:	6b7e      	ldr	r6, [r7, #52]	; 0x34
                    rt_kprintf("%-*.*s %04d  %04d  %04d %d:",
    8ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8ae8:	69da      	ldr	r2, [r3, #28]
    8aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8aec:	6a59      	ldr	r1, [r3, #36]	; 0x24
    8aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8af2:	6c3d      	ldr	r5, [r7, #64]	; 0x40
    8af4:	4c20      	ldr	r4, [pc, #128]	; (8b78 <list_mempool+0x150>)
    8af6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    8af8:	9003      	str	r0, [sp, #12]
    8afa:	9302      	str	r3, [sp, #8]
    8afc:	9101      	str	r1, [sp, #4]
    8afe:	9200      	str	r2, [sp, #0]
    8b00:	0033      	movs	r3, r6
    8b02:	2208      	movs	r2, #8
    8b04:	0029      	movs	r1, r5
    8b06:	0020      	movs	r0, r4
    8b08:	f7fb f8bc 	bl	3c84 <rt_kprintf>
                               mp->block_size,
                               mp->block_total_count,
                               mp->block_free_count,
                               suspend_thread_count);
                    show_wait_queue(&(mp->suspend_thread));
    8b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b0e:	332c      	adds	r3, #44	; 0x2c
    8b10:	0018      	movs	r0, r3
    8b12:	f7ff fc73 	bl	83fc <show_wait_queue>
                    rt_kprintf("\n");
    8b16:	4b19      	ldr	r3, [pc, #100]	; (8b7c <list_mempool+0x154>)
    8b18:	0018      	movs	r0, r3
    8b1a:	f7fb f8b3 	bl	3c84 <rt_kprintf>
    8b1e:	e013      	b.n	8b48 <list_mempool+0x120>
                }
                else
                {
                    rt_kprintf("%-*.*s %04d  %04d  %04d %d\n",
                               maxlen, RT_NAME_MAX,
                               mp->parent.name,
    8b20:	6b7e      	ldr	r6, [r7, #52]	; 0x34
                    rt_kprintf("%-*.*s %04d  %04d  %04d %d\n",
    8b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b24:	69da      	ldr	r2, [r3, #28]
    8b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b28:	6a59      	ldr	r1, [r3, #36]	; 0x24
    8b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b2e:	6c3d      	ldr	r5, [r7, #64]	; 0x40
    8b30:	4c13      	ldr	r4, [pc, #76]	; (8b80 <list_mempool+0x158>)
    8b32:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    8b34:	9003      	str	r0, [sp, #12]
    8b36:	9302      	str	r3, [sp, #8]
    8b38:	9101      	str	r1, [sp, #4]
    8b3a:	9200      	str	r2, [sp, #0]
    8b3c:	0033      	movs	r3, r6
    8b3e:	2208      	movs	r2, #8
    8b40:	0029      	movs	r1, r5
    8b42:	0020      	movs	r0, r4
    8b44:	f7fb f89e 	bl	3c84 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
    8b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    8b4a:	3301      	adds	r3, #1
    8b4c:	653b      	str	r3, [r7, #80]	; 0x50
    8b4e:	2320      	movs	r3, #32
    8b50:	18fb      	adds	r3, r7, r3
    8b52:	691b      	ldr	r3, [r3, #16]
    8b54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    8b56:	429a      	cmp	r2, r3
    8b58:	db90      	blt.n	8a7c <list_mempool+0x54>
                               suspend_thread_count);
                }
            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
    8b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    8b5c:	2b00      	cmp	r3, #0
    8b5e:	d181      	bne.n	8a64 <list_mempool+0x3c>

    return 0;
    8b60:	2300      	movs	r3, #0
}
    8b62:	0018      	movs	r0, r3
    8b64:	46bd      	mov	sp, r7
    8b66:	b017      	add	sp, #92	; 0x5c
    8b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b6a:	46c0      	nop			; (mov r8, r8)
    8b6c:	0000d39c 	.word	0x0000d39c
    8b70:	0000d3a4 	.word	0x0000d3a4
    8b74:	0000d3cc 	.word	0x0000d3cc
    8b78:	0000d3f0 	.word	0x0000d3f0
    8b7c:	0000d1cc 	.word	0x0000d1cc
    8b80:	0000d40c 	.word	0x0000d40c

00008b84 <list_timer>:
MSH_CMD_EXPORT(list_mempool, list memory pool in system);
#endif

long list_timer(void)
{
    8b84:	b590      	push	{r4, r7, lr}
    8b86:	b097      	sub	sp, #92	; 0x5c
    8b88:	af02      	add	r7, sp, #8
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
    8b8a:	2300      	movs	r3, #0
    8b8c:	64fb      	str	r3, [r7, #76]	; 0x4c

    int maxlen;
    const char *item_title = "timer";
    8b8e:	4b44      	ldr	r3, [pc, #272]	; (8ca0 <list_timer+0x11c>)
    8b90:	647b      	str	r3, [r7, #68]	; 0x44

    list_find_init(&find_arg, RT_Object_Class_Timer, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
    8b92:	003a      	movs	r2, r7
    8b94:	2320      	movs	r3, #32
    8b96:	18f8      	adds	r0, r7, r3
    8b98:	2308      	movs	r3, #8
    8b9a:	210a      	movs	r1, #10
    8b9c:	f7ff fa70 	bl	8080 <list_find_init>

    maxlen = RT_NAME_MAX;
    8ba0:	2308      	movs	r3, #8
    8ba2:	643b      	str	r3, [r7, #64]	; 0x40

    rt_kprintf("%-*.s  periodic   timeout    activated     mode\n", maxlen, item_title);
    8ba4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8ba6:	6c39      	ldr	r1, [r7, #64]	; 0x40
    8ba8:	4b3e      	ldr	r3, [pc, #248]	; (8ca4 <list_timer+0x120>)
    8baa:	0018      	movs	r0, r3
    8bac:	f7fb f86a 	bl	3c84 <rt_kprintf>
    object_split(maxlen);
    8bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8bb2:	0018      	movs	r0, r3
    8bb4:	f7ff fa4e 	bl	8054 <object_split>
    rt_kprintf(" ---------- ---------- ----------- ---------\n");
    8bb8:	4b3b      	ldr	r3, [pc, #236]	; (8ca8 <list_timer+0x124>)
    8bba:	0018      	movs	r0, r3
    8bbc:	f7fb f862 	bl	3c84 <rt_kprintf>
    do
    {
        next = list_get_next(next, &find_arg);
    8bc0:	2320      	movs	r3, #32
    8bc2:	18fa      	adds	r2, r7, r3
    8bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8bc6:	0011      	movs	r1, r2
    8bc8:	0018      	movs	r0, r3
    8bca:	f7ff fa81 	bl	80d0 <list_get_next>
    8bce:	0003      	movs	r3, r0
    8bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
    8bd2:	2300      	movs	r3, #0
    8bd4:	64bb      	str	r3, [r7, #72]	; 0x48
    8bd6:	e04d      	b.n	8c74 <list_timer+0xf0>
            {
                struct rt_object *obj;
                struct rt_timer *timer;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
    8bd8:	003b      	movs	r3, r7
    8bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
    8bdc:	0092      	lsls	r2, r2, #2
    8bde:	58d3      	ldr	r3, [r2, r3]
    8be0:	3b0c      	subs	r3, #12
    8be2:	63fb      	str	r3, [r7, #60]	; 0x3c
                level = rt_hw_interrupt_disable();
    8be4:	f7fc fc74 	bl	54d0 <rt_hw_interrupt_disable>
    8be8:	0003      	movs	r3, r0
    8bea:	63bb      	str	r3, [r7, #56]	; 0x38
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
    8bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8bee:	7a1b      	ldrb	r3, [r3, #8]
    8bf0:	001a      	movs	r2, r3
    8bf2:	2380      	movs	r3, #128	; 0x80
    8bf4:	439a      	bics	r2, r3
    8bf6:	0013      	movs	r3, r2
    8bf8:	2220      	movs	r2, #32
    8bfa:	18ba      	adds	r2, r7, r2
    8bfc:	7a12      	ldrb	r2, [r2, #8]
    8bfe:	4293      	cmp	r3, r2
    8c00:	d004      	beq.n	8c0c <list_timer+0x88>
                {
                    rt_hw_interrupt_enable(level);
    8c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8c04:	0018      	movs	r0, r3
    8c06:	f7fc fc67 	bl	54d8 <rt_hw_interrupt_enable>
                    continue;
    8c0a:	e030      	b.n	8c6e <list_timer+0xea>
                }

                rt_hw_interrupt_enable(level);
    8c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8c0e:	0018      	movs	r0, r3
    8c10:	f7fc fc62 	bl	54d8 <rt_hw_interrupt_enable>

                timer = (struct rt_timer *)obj;
    8c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8c16:	637b      	str	r3, [r7, #52]	; 0x34
                rt_kprintf("%-*.*s 0x%08x 0x%08x ",
                           maxlen, RT_NAME_MAX,
                           timer->parent.name,
    8c18:	6b7c      	ldr	r4, [r7, #52]	; 0x34
                rt_kprintf("%-*.*s 0x%08x 0x%08x ",
    8c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8c22:	6c39      	ldr	r1, [r7, #64]	; 0x40
    8c24:	4821      	ldr	r0, [pc, #132]	; (8cac <list_timer+0x128>)
    8c26:	9301      	str	r3, [sp, #4]
    8c28:	9200      	str	r2, [sp, #0]
    8c2a:	0023      	movs	r3, r4
    8c2c:	2208      	movs	r2, #8
    8c2e:	f7fb f829 	bl	3c84 <rt_kprintf>
                           timer->init_tick,
                           timer->timeout_tick);
                if (timer->parent.flag & RT_TIMER_FLAG_ACTIVATED)
    8c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8c34:	7a5b      	ldrb	r3, [r3, #9]
    8c36:	001a      	movs	r2, r3
    8c38:	2301      	movs	r3, #1
    8c3a:	4013      	ands	r3, r2
    8c3c:	d004      	beq.n	8c48 <list_timer+0xc4>
                    rt_kprintf("activated   ");
    8c3e:	4b1c      	ldr	r3, [pc, #112]	; (8cb0 <list_timer+0x12c>)
    8c40:	0018      	movs	r0, r3
    8c42:	f7fb f81f 	bl	3c84 <rt_kprintf>
    8c46:	e003      	b.n	8c50 <list_timer+0xcc>
                else
                    rt_kprintf("deactivated ");
    8c48:	4b1a      	ldr	r3, [pc, #104]	; (8cb4 <list_timer+0x130>)
    8c4a:	0018      	movs	r0, r3
    8c4c:	f7fb f81a 	bl	3c84 <rt_kprintf>
                if (timer->parent.flag & RT_TIMER_FLAG_PERIODIC)
    8c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8c52:	7a5b      	ldrb	r3, [r3, #9]
    8c54:	001a      	movs	r2, r3
    8c56:	2302      	movs	r3, #2
    8c58:	4013      	ands	r3, r2
    8c5a:	d004      	beq.n	8c66 <list_timer+0xe2>
                    rt_kprintf("periodic\n");
    8c5c:	4b16      	ldr	r3, [pc, #88]	; (8cb8 <list_timer+0x134>)
    8c5e:	0018      	movs	r0, r3
    8c60:	f7fb f810 	bl	3c84 <rt_kprintf>
    8c64:	e003      	b.n	8c6e <list_timer+0xea>
                else
                    rt_kprintf("one shot\n");
    8c66:	4b15      	ldr	r3, [pc, #84]	; (8cbc <list_timer+0x138>)
    8c68:	0018      	movs	r0, r3
    8c6a:	f7fb f80b 	bl	3c84 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
    8c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8c70:	3301      	adds	r3, #1
    8c72:	64bb      	str	r3, [r7, #72]	; 0x48
    8c74:	2320      	movs	r3, #32
    8c76:	18fb      	adds	r3, r7, r3
    8c78:	691b      	ldr	r3, [r3, #16]
    8c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    8c7c:	429a      	cmp	r2, r3
    8c7e:	dbab      	blt.n	8bd8 <list_timer+0x54>

            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
    8c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8c82:	2b00      	cmp	r3, #0
    8c84:	d19c      	bne.n	8bc0 <list_timer+0x3c>

    rt_kprintf("current tick:0x%08x\n", rt_tick_get());
    8c86:	f7fa f833 	bl	2cf0 <rt_tick_get>
    8c8a:	0002      	movs	r2, r0
    8c8c:	4b0c      	ldr	r3, [pc, #48]	; (8cc0 <list_timer+0x13c>)
    8c8e:	0011      	movs	r1, r2
    8c90:	0018      	movs	r0, r3
    8c92:	f7fa fff7 	bl	3c84 <rt_kprintf>

    return 0;
    8c96:	2300      	movs	r3, #0
}
    8c98:	0018      	movs	r0, r3
    8c9a:	46bd      	mov	sp, r7
    8c9c:	b015      	add	sp, #84	; 0x54
    8c9e:	bd90      	pop	{r4, r7, pc}
    8ca0:	0000d428 	.word	0x0000d428
    8ca4:	0000d430 	.word	0x0000d430
    8ca8:	0000d464 	.word	0x0000d464
    8cac:	0000d494 	.word	0x0000d494
    8cb0:	0000d4ac 	.word	0x0000d4ac
    8cb4:	0000d4bc 	.word	0x0000d4bc
    8cb8:	0000d4cc 	.word	0x0000d4cc
    8cbc:	0000d4d8 	.word	0x0000d4d8
    8cc0:	0000d4e4 	.word	0x0000d4e4

00008cc4 <list_device>:
    "PWM Device",
    "Unknown"
};

long list_device(void)
{
    8cc4:	b590      	push	{r4, r7, lr}
    8cc6:	b097      	sub	sp, #92	; 0x5c
    8cc8:	af02      	add	r7, sp, #8
    rt_ubase_t level;
    list_get_next_t find_arg;
    rt_list_t *obj_list[LIST_FIND_OBJ_NR];
    rt_list_t *next = (rt_list_t *)RT_NULL;
    8cca:	2300      	movs	r3, #0
    8ccc:	64fb      	str	r3, [r7, #76]	; 0x4c

    int maxlen;
    const char *item_title = "device";
    8cce:	4b36      	ldr	r3, [pc, #216]	; (8da8 <list_device+0xe4>)
    8cd0:	647b      	str	r3, [r7, #68]	; 0x44

    list_find_init(&find_arg, RT_Object_Class_Device, obj_list, sizeof(obj_list) / sizeof(obj_list[0]));
    8cd2:	003a      	movs	r2, r7
    8cd4:	2320      	movs	r3, #32
    8cd6:	18f8      	adds	r0, r7, r3
    8cd8:	2308      	movs	r3, #8
    8cda:	2109      	movs	r1, #9
    8cdc:	f7ff f9d0 	bl	8080 <list_find_init>

    maxlen = RT_NAME_MAX;
    8ce0:	2308      	movs	r3, #8
    8ce2:	643b      	str	r3, [r7, #64]	; 0x40

    rt_kprintf("%-*.s         type         ref count\n", maxlen, item_title);
    8ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8ce6:	6c39      	ldr	r1, [r7, #64]	; 0x40
    8ce8:	4b30      	ldr	r3, [pc, #192]	; (8dac <list_device+0xe8>)
    8cea:	0018      	movs	r0, r3
    8cec:	f7fa ffca 	bl	3c84 <rt_kprintf>
    object_split(maxlen);
    8cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8cf2:	0018      	movs	r0, r3
    8cf4:	f7ff f9ae 	bl	8054 <object_split>
    rt_kprintf(" -------------------- ----------\n");
    8cf8:	4b2d      	ldr	r3, [pc, #180]	; (8db0 <list_device+0xec>)
    8cfa:	0018      	movs	r0, r3
    8cfc:	f7fa ffc2 	bl	3c84 <rt_kprintf>
    do
    {
        next = list_get_next(next, &find_arg);
    8d00:	2320      	movs	r3, #32
    8d02:	18fa      	adds	r2, r7, r3
    8d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8d06:	0011      	movs	r1, r2
    8d08:	0018      	movs	r0, r3
    8d0a:	f7ff f9e1 	bl	80d0 <list_get_next>
    8d0e:	0003      	movs	r3, r0
    8d10:	64fb      	str	r3, [r7, #76]	; 0x4c
        {
            int i;
            for (i = 0; i < find_arg.nr_out; i++)
    8d12:	2300      	movs	r3, #0
    8d14:	64bb      	str	r3, [r7, #72]	; 0x48
    8d16:	e039      	b.n	8d8c <list_device+0xc8>
            {
                struct rt_object *obj;
                struct rt_device *device;

                obj = rt_list_entry(obj_list[i], struct rt_object, list);
    8d18:	003b      	movs	r3, r7
    8d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    8d1c:	0092      	lsls	r2, r2, #2
    8d1e:	58d3      	ldr	r3, [r2, r3]
    8d20:	3b0c      	subs	r3, #12
    8d22:	63fb      	str	r3, [r7, #60]	; 0x3c
                level = rt_hw_interrupt_disable();
    8d24:	f7fc fbd4 	bl	54d0 <rt_hw_interrupt_disable>
    8d28:	0003      	movs	r3, r0
    8d2a:	63bb      	str	r3, [r7, #56]	; 0x38
                if ((obj->type & ~RT_Object_Class_Static) != find_arg.type)
    8d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d2e:	7a1b      	ldrb	r3, [r3, #8]
    8d30:	001a      	movs	r2, r3
    8d32:	2380      	movs	r3, #128	; 0x80
    8d34:	439a      	bics	r2, r3
    8d36:	0013      	movs	r3, r2
    8d38:	2220      	movs	r2, #32
    8d3a:	18ba      	adds	r2, r7, r2
    8d3c:	7a12      	ldrb	r2, [r2, #8]
    8d3e:	4293      	cmp	r3, r2
    8d40:	d004      	beq.n	8d4c <list_device+0x88>
                {
                    rt_hw_interrupt_enable(level);
    8d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8d44:	0018      	movs	r0, r3
    8d46:	f7fc fbc7 	bl	54d8 <rt_hw_interrupt_enable>
                    continue;
    8d4a:	e01c      	b.n	8d86 <list_device+0xc2>
                }

                rt_hw_interrupt_enable(level);
    8d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8d4e:	0018      	movs	r0, r3
    8d50:	f7fc fbc2 	bl	54d8 <rt_hw_interrupt_enable>

                device = (struct rt_device *)obj;
    8d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d56:	637b      	str	r3, [r7, #52]	; 0x34
                rt_kprintf("%-*.*s %-20s %-8d\n",
                           maxlen, RT_NAME_MAX,
                           device->parent.name,
    8d58:	6b7c      	ldr	r4, [r7, #52]	; 0x34
                           (device->type <= RT_Device_Class_Unknown) ?
    8d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8d5c:	7d1b      	ldrb	r3, [r3, #20]
                rt_kprintf("%-*.*s %-20s %-8d\n",
    8d5e:	2b1e      	cmp	r3, #30
    8d60:	d806      	bhi.n	8d70 <list_device+0xac>
                           device_type_str[device->type] :
    8d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8d64:	7d1b      	ldrb	r3, [r3, #20]
    8d66:	001a      	movs	r2, r3
                rt_kprintf("%-*.*s %-20s %-8d\n",
    8d68:	4b12      	ldr	r3, [pc, #72]	; (8db4 <list_device+0xf0>)
    8d6a:	0092      	lsls	r2, r2, #2
    8d6c:	58d3      	ldr	r3, [r2, r3]
    8d6e:	e000      	b.n	8d72 <list_device+0xae>
    8d70:	4b11      	ldr	r3, [pc, #68]	; (8db8 <list_device+0xf4>)
                           device_type_str[RT_Device_Class_Unknown],
                           device->ref_count);
    8d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8d74:	7e92      	ldrb	r2, [r2, #26]
                rt_kprintf("%-*.*s %-20s %-8d\n",
    8d76:	6c39      	ldr	r1, [r7, #64]	; 0x40
    8d78:	4810      	ldr	r0, [pc, #64]	; (8dbc <list_device+0xf8>)
    8d7a:	9201      	str	r2, [sp, #4]
    8d7c:	9300      	str	r3, [sp, #0]
    8d7e:	0023      	movs	r3, r4
    8d80:	2208      	movs	r2, #8
    8d82:	f7fa ff7f 	bl	3c84 <rt_kprintf>
            for (i = 0; i < find_arg.nr_out; i++)
    8d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8d88:	3301      	adds	r3, #1
    8d8a:	64bb      	str	r3, [r7, #72]	; 0x48
    8d8c:	2320      	movs	r3, #32
    8d8e:	18fb      	adds	r3, r7, r3
    8d90:	691b      	ldr	r3, [r3, #16]
    8d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
    8d94:	429a      	cmp	r2, r3
    8d96:	dbbf      	blt.n	8d18 <list_device+0x54>

            }
        }
    }
    while (next != (rt_list_t *)RT_NULL);
    8d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8d9a:	2b00      	cmp	r3, #0
    8d9c:	d1b0      	bne.n	8d00 <list_device+0x3c>

    return 0;
    8d9e:	2300      	movs	r3, #0
}
    8da0:	0018      	movs	r0, r3
    8da2:	46bd      	mov	sp, r7
    8da4:	b015      	add	sp, #84	; 0x54
    8da6:	bd90      	pop	{r4, r7, pc}
    8da8:	0000d6a8 	.word	0x0000d6a8
    8dac:	0000d6b0 	.word	0x0000d6b0
    8db0:	0000d6d8 	.word	0x0000d6d8
    8db4:	0000d8b4 	.word	0x0000d8b4
    8db8:	0000d6a0 	.word	0x0000d6a0
    8dbc:	0000d6fc 	.word	0x0000d6fc

00008dc0 <__assert_func>:
    8dc0:	b570      	push	{r4, r5, r6, lr}
    8dc2:	0014      	movs	r4, r2
    8dc4:	001a      	movs	r2, r3
    8dc6:	4b0a      	ldr	r3, [pc, #40]	; (8df0 <__assert_func+0x30>)
    8dc8:	0006      	movs	r6, r0
    8dca:	681b      	ldr	r3, [r3, #0]
    8dcc:	b084      	sub	sp, #16
    8dce:	68d8      	ldr	r0, [r3, #12]
    8dd0:	2c00      	cmp	r4, #0
    8dd2:	d00a      	beq.n	8dea <__assert_func+0x2a>
    8dd4:	4b07      	ldr	r3, [pc, #28]	; (8df4 <__assert_func+0x34>)
    8dd6:	4d08      	ldr	r5, [pc, #32]	; (8df8 <__assert_func+0x38>)
    8dd8:	9301      	str	r3, [sp, #4]
    8dda:	9100      	str	r1, [sp, #0]
    8ddc:	0033      	movs	r3, r6
    8dde:	0029      	movs	r1, r5
    8de0:	9402      	str	r4, [sp, #8]
    8de2:	f000 f80d 	bl	8e00 <fiprintf>
    8de6:	f001 fa29 	bl	a23c <abort>
    8dea:	4b04      	ldr	r3, [pc, #16]	; (8dfc <__assert_func+0x3c>)
    8dec:	001c      	movs	r4, r3
    8dee:	e7f2      	b.n	8dd6 <__assert_func+0x16>
    8df0:	1ffff17c 	.word	0x1ffff17c
    8df4:	0000d930 	.word	0x0000d930
    8df8:	0000d940 	.word	0x0000d940
    8dfc:	0000d93c 	.word	0x0000d93c

00008e00 <fiprintf>:
    8e00:	b40e      	push	{r1, r2, r3}
    8e02:	b500      	push	{lr}
    8e04:	b082      	sub	sp, #8
    8e06:	ab03      	add	r3, sp, #12
    8e08:	0001      	movs	r1, r0
    8e0a:	4805      	ldr	r0, [pc, #20]	; (8e20 <fiprintf+0x20>)
    8e0c:	cb04      	ldmia	r3!, {r2}
    8e0e:	6800      	ldr	r0, [r0, #0]
    8e10:	9301      	str	r3, [sp, #4]
    8e12:	f000 f9b3 	bl	917c <_vfiprintf_r>
    8e16:	b002      	add	sp, #8
    8e18:	bc08      	pop	{r3}
    8e1a:	b003      	add	sp, #12
    8e1c:	4718      	bx	r3
    8e1e:	46c0      	nop			; (mov r8, r8)
    8e20:	1ffff17c 	.word	0x1ffff17c

00008e24 <memcmp>:
    8e24:	b530      	push	{r4, r5, lr}
    8e26:	2a03      	cmp	r2, #3
    8e28:	d90c      	bls.n	8e44 <memcmp+0x20>
    8e2a:	0003      	movs	r3, r0
    8e2c:	430b      	orrs	r3, r1
    8e2e:	079b      	lsls	r3, r3, #30
    8e30:	d119      	bne.n	8e66 <memcmp+0x42>
    8e32:	6804      	ldr	r4, [r0, #0]
    8e34:	680b      	ldr	r3, [r1, #0]
    8e36:	429c      	cmp	r4, r3
    8e38:	d115      	bne.n	8e66 <memcmp+0x42>
    8e3a:	3a04      	subs	r2, #4
    8e3c:	3004      	adds	r0, #4
    8e3e:	3104      	adds	r1, #4
    8e40:	2a03      	cmp	r2, #3
    8e42:	d8f6      	bhi.n	8e32 <memcmp+0xe>
    8e44:	1e55      	subs	r5, r2, #1
    8e46:	2a00      	cmp	r2, #0
    8e48:	d00b      	beq.n	8e62 <memcmp+0x3e>
    8e4a:	2300      	movs	r3, #0
    8e4c:	e003      	b.n	8e56 <memcmp+0x32>
    8e4e:	1c5a      	adds	r2, r3, #1
    8e50:	429d      	cmp	r5, r3
    8e52:	d006      	beq.n	8e62 <memcmp+0x3e>
    8e54:	0013      	movs	r3, r2
    8e56:	5cc2      	ldrb	r2, [r0, r3]
    8e58:	5ccc      	ldrb	r4, [r1, r3]
    8e5a:	42a2      	cmp	r2, r4
    8e5c:	d0f7      	beq.n	8e4e <memcmp+0x2a>
    8e5e:	1b10      	subs	r0, r2, r4
    8e60:	e000      	b.n	8e64 <memcmp+0x40>
    8e62:	2000      	movs	r0, #0
    8e64:	bd30      	pop	{r4, r5, pc}
    8e66:	1e55      	subs	r5, r2, #1
    8e68:	e7ef      	b.n	8e4a <memcmp+0x26>
    8e6a:	46c0      	nop			; (mov r8, r8)

00008e6c <memcpy>:
    8e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e6e:	46c6      	mov	lr, r8
    8e70:	b500      	push	{lr}
    8e72:	2a0f      	cmp	r2, #15
    8e74:	d941      	bls.n	8efa <memcpy+0x8e>
    8e76:	2403      	movs	r4, #3
    8e78:	0003      	movs	r3, r0
    8e7a:	0026      	movs	r6, r4
    8e7c:	430b      	orrs	r3, r1
    8e7e:	401e      	ands	r6, r3
    8e80:	421c      	tst	r4, r3
    8e82:	d13f      	bne.n	8f04 <memcpy+0x98>
    8e84:	0015      	movs	r5, r2
    8e86:	3d10      	subs	r5, #16
    8e88:	092d      	lsrs	r5, r5, #4
    8e8a:	46a8      	mov	r8, r5
    8e8c:	012d      	lsls	r5, r5, #4
    8e8e:	46ac      	mov	ip, r5
    8e90:	0003      	movs	r3, r0
    8e92:	000c      	movs	r4, r1
    8e94:	4484      	add	ip, r0
    8e96:	6827      	ldr	r7, [r4, #0]
    8e98:	001d      	movs	r5, r3
    8e9a:	601f      	str	r7, [r3, #0]
    8e9c:	6867      	ldr	r7, [r4, #4]
    8e9e:	605f      	str	r7, [r3, #4]
    8ea0:	68a7      	ldr	r7, [r4, #8]
    8ea2:	609f      	str	r7, [r3, #8]
    8ea4:	68e7      	ldr	r7, [r4, #12]
    8ea6:	3410      	adds	r4, #16
    8ea8:	60df      	str	r7, [r3, #12]
    8eaa:	3310      	adds	r3, #16
    8eac:	4565      	cmp	r5, ip
    8eae:	d1f2      	bne.n	8e96 <memcpy+0x2a>
    8eb0:	4645      	mov	r5, r8
    8eb2:	230f      	movs	r3, #15
    8eb4:	240c      	movs	r4, #12
    8eb6:	3501      	adds	r5, #1
    8eb8:	012d      	lsls	r5, r5, #4
    8eba:	1949      	adds	r1, r1, r5
    8ebc:	4013      	ands	r3, r2
    8ebe:	1945      	adds	r5, r0, r5
    8ec0:	4214      	tst	r4, r2
    8ec2:	d022      	beq.n	8f0a <memcpy+0x9e>
    8ec4:	598c      	ldr	r4, [r1, r6]
    8ec6:	51ac      	str	r4, [r5, r6]
    8ec8:	3604      	adds	r6, #4
    8eca:	1b9c      	subs	r4, r3, r6
    8ecc:	2c03      	cmp	r4, #3
    8ece:	d8f9      	bhi.n	8ec4 <memcpy+0x58>
    8ed0:	3b04      	subs	r3, #4
    8ed2:	089b      	lsrs	r3, r3, #2
    8ed4:	3301      	adds	r3, #1
    8ed6:	009b      	lsls	r3, r3, #2
    8ed8:	18ed      	adds	r5, r5, r3
    8eda:	18c9      	adds	r1, r1, r3
    8edc:	2303      	movs	r3, #3
    8ede:	401a      	ands	r2, r3
    8ee0:	1e56      	subs	r6, r2, #1
    8ee2:	2a00      	cmp	r2, #0
    8ee4:	d006      	beq.n	8ef4 <memcpy+0x88>
    8ee6:	2300      	movs	r3, #0
    8ee8:	5ccc      	ldrb	r4, [r1, r3]
    8eea:	001a      	movs	r2, r3
    8eec:	54ec      	strb	r4, [r5, r3]
    8eee:	3301      	adds	r3, #1
    8ef0:	4296      	cmp	r6, r2
    8ef2:	d1f9      	bne.n	8ee8 <memcpy+0x7c>
    8ef4:	bc80      	pop	{r7}
    8ef6:	46b8      	mov	r8, r7
    8ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8efa:	0005      	movs	r5, r0
    8efc:	1e56      	subs	r6, r2, #1
    8efe:	2a00      	cmp	r2, #0
    8f00:	d1f1      	bne.n	8ee6 <memcpy+0x7a>
    8f02:	e7f7      	b.n	8ef4 <memcpy+0x88>
    8f04:	0005      	movs	r5, r0
    8f06:	1e56      	subs	r6, r2, #1
    8f08:	e7ed      	b.n	8ee6 <memcpy+0x7a>
    8f0a:	001a      	movs	r2, r3
    8f0c:	e7f6      	b.n	8efc <memcpy+0x90>
    8f0e:	46c0      	nop			; (mov r8, r8)

00008f10 <memset>:
    8f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f12:	0005      	movs	r5, r0
    8f14:	0783      	lsls	r3, r0, #30
    8f16:	d049      	beq.n	8fac <memset+0x9c>
    8f18:	1e54      	subs	r4, r2, #1
    8f1a:	2a00      	cmp	r2, #0
    8f1c:	d045      	beq.n	8faa <memset+0x9a>
    8f1e:	0003      	movs	r3, r0
    8f20:	2603      	movs	r6, #3
    8f22:	b2ca      	uxtb	r2, r1
    8f24:	e002      	b.n	8f2c <memset+0x1c>
    8f26:	3501      	adds	r5, #1
    8f28:	3c01      	subs	r4, #1
    8f2a:	d33e      	bcc.n	8faa <memset+0x9a>
    8f2c:	3301      	adds	r3, #1
    8f2e:	702a      	strb	r2, [r5, #0]
    8f30:	4233      	tst	r3, r6
    8f32:	d1f8      	bne.n	8f26 <memset+0x16>
    8f34:	2c03      	cmp	r4, #3
    8f36:	d930      	bls.n	8f9a <memset+0x8a>
    8f38:	25ff      	movs	r5, #255	; 0xff
    8f3a:	400d      	ands	r5, r1
    8f3c:	022a      	lsls	r2, r5, #8
    8f3e:	432a      	orrs	r2, r5
    8f40:	0415      	lsls	r5, r2, #16
    8f42:	4315      	orrs	r5, r2
    8f44:	2c0f      	cmp	r4, #15
    8f46:	d934      	bls.n	8fb2 <memset+0xa2>
    8f48:	0027      	movs	r7, r4
    8f4a:	3f10      	subs	r7, #16
    8f4c:	093f      	lsrs	r7, r7, #4
    8f4e:	013e      	lsls	r6, r7, #4
    8f50:	46b4      	mov	ip, r6
    8f52:	001e      	movs	r6, r3
    8f54:	001a      	movs	r2, r3
    8f56:	3610      	adds	r6, #16
    8f58:	4466      	add	r6, ip
    8f5a:	6015      	str	r5, [r2, #0]
    8f5c:	6055      	str	r5, [r2, #4]
    8f5e:	6095      	str	r5, [r2, #8]
    8f60:	60d5      	str	r5, [r2, #12]
    8f62:	3210      	adds	r2, #16
    8f64:	42b2      	cmp	r2, r6
    8f66:	d1f8      	bne.n	8f5a <memset+0x4a>
    8f68:	3701      	adds	r7, #1
    8f6a:	013f      	lsls	r7, r7, #4
    8f6c:	19db      	adds	r3, r3, r7
    8f6e:	270f      	movs	r7, #15
    8f70:	220c      	movs	r2, #12
    8f72:	4027      	ands	r7, r4
    8f74:	4022      	ands	r2, r4
    8f76:	003c      	movs	r4, r7
    8f78:	2a00      	cmp	r2, #0
    8f7a:	d00e      	beq.n	8f9a <memset+0x8a>
    8f7c:	1f3e      	subs	r6, r7, #4
    8f7e:	08b6      	lsrs	r6, r6, #2
    8f80:	00b4      	lsls	r4, r6, #2
    8f82:	46a4      	mov	ip, r4
    8f84:	001a      	movs	r2, r3
    8f86:	1d1c      	adds	r4, r3, #4
    8f88:	4464      	add	r4, ip
    8f8a:	c220      	stmia	r2!, {r5}
    8f8c:	42a2      	cmp	r2, r4
    8f8e:	d1fc      	bne.n	8f8a <memset+0x7a>
    8f90:	2403      	movs	r4, #3
    8f92:	3601      	adds	r6, #1
    8f94:	00b6      	lsls	r6, r6, #2
    8f96:	199b      	adds	r3, r3, r6
    8f98:	403c      	ands	r4, r7
    8f9a:	2c00      	cmp	r4, #0
    8f9c:	d005      	beq.n	8faa <memset+0x9a>
    8f9e:	b2c9      	uxtb	r1, r1
    8fa0:	191c      	adds	r4, r3, r4
    8fa2:	7019      	strb	r1, [r3, #0]
    8fa4:	3301      	adds	r3, #1
    8fa6:	429c      	cmp	r4, r3
    8fa8:	d1fb      	bne.n	8fa2 <memset+0x92>
    8faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8fac:	0003      	movs	r3, r0
    8fae:	0014      	movs	r4, r2
    8fb0:	e7c0      	b.n	8f34 <memset+0x24>
    8fb2:	0027      	movs	r7, r4
    8fb4:	e7e2      	b.n	8f7c <memset+0x6c>
    8fb6:	46c0      	nop			; (mov r8, r8)

00008fb8 <strlen>:
    8fb8:	b510      	push	{r4, lr}
    8fba:	0783      	lsls	r3, r0, #30
    8fbc:	d00a      	beq.n	8fd4 <strlen+0x1c>
    8fbe:	0003      	movs	r3, r0
    8fc0:	2103      	movs	r1, #3
    8fc2:	e002      	b.n	8fca <strlen+0x12>
    8fc4:	3301      	adds	r3, #1
    8fc6:	420b      	tst	r3, r1
    8fc8:	d005      	beq.n	8fd6 <strlen+0x1e>
    8fca:	781a      	ldrb	r2, [r3, #0]
    8fcc:	2a00      	cmp	r2, #0
    8fce:	d1f9      	bne.n	8fc4 <strlen+0xc>
    8fd0:	1a18      	subs	r0, r3, r0
    8fd2:	bd10      	pop	{r4, pc}
    8fd4:	0003      	movs	r3, r0
    8fd6:	6819      	ldr	r1, [r3, #0]
    8fd8:	4a0c      	ldr	r2, [pc, #48]	; (900c <strlen+0x54>)
    8fda:	4c0d      	ldr	r4, [pc, #52]	; (9010 <strlen+0x58>)
    8fdc:	188a      	adds	r2, r1, r2
    8fde:	438a      	bics	r2, r1
    8fe0:	4222      	tst	r2, r4
    8fe2:	d10f      	bne.n	9004 <strlen+0x4c>
    8fe4:	6859      	ldr	r1, [r3, #4]
    8fe6:	4a09      	ldr	r2, [pc, #36]	; (900c <strlen+0x54>)
    8fe8:	3304      	adds	r3, #4
    8fea:	188a      	adds	r2, r1, r2
    8fec:	438a      	bics	r2, r1
    8fee:	4222      	tst	r2, r4
    8ff0:	d108      	bne.n	9004 <strlen+0x4c>
    8ff2:	6859      	ldr	r1, [r3, #4]
    8ff4:	4a05      	ldr	r2, [pc, #20]	; (900c <strlen+0x54>)
    8ff6:	3304      	adds	r3, #4
    8ff8:	188a      	adds	r2, r1, r2
    8ffa:	438a      	bics	r2, r1
    8ffc:	4222      	tst	r2, r4
    8ffe:	d0f1      	beq.n	8fe4 <strlen+0x2c>
    9000:	e000      	b.n	9004 <strlen+0x4c>
    9002:	3301      	adds	r3, #1
    9004:	781a      	ldrb	r2, [r3, #0]
    9006:	2a00      	cmp	r2, #0
    9008:	d1fb      	bne.n	9002 <strlen+0x4a>
    900a:	e7e1      	b.n	8fd0 <strlen+0x18>
    900c:	fefefeff 	.word	0xfefefeff
    9010:	80808080 	.word	0x80808080

00009014 <strncmp>:
    9014:	b530      	push	{r4, r5, lr}
    9016:	2a00      	cmp	r2, #0
    9018:	d026      	beq.n	9068 <strncmp+0x54>
    901a:	0003      	movs	r3, r0
    901c:	430b      	orrs	r3, r1
    901e:	079b      	lsls	r3, r3, #30
    9020:	d124      	bne.n	906c <strncmp+0x58>
    9022:	2a03      	cmp	r2, #3
    9024:	d922      	bls.n	906c <strncmp+0x58>
    9026:	4d16      	ldr	r5, [pc, #88]	; (9080 <strncmp+0x6c>)
    9028:	e00b      	b.n	9042 <strncmp+0x2e>
    902a:	3a04      	subs	r2, #4
    902c:	2a00      	cmp	r2, #0
    902e:	d01b      	beq.n	9068 <strncmp+0x54>
    9030:	4c14      	ldr	r4, [pc, #80]	; (9084 <strncmp+0x70>)
    9032:	191c      	adds	r4, r3, r4
    9034:	439c      	bics	r4, r3
    9036:	422c      	tst	r4, r5
    9038:	d116      	bne.n	9068 <strncmp+0x54>
    903a:	3004      	adds	r0, #4
    903c:	3104      	adds	r1, #4
    903e:	2a03      	cmp	r2, #3
    9040:	d914      	bls.n	906c <strncmp+0x58>
    9042:	6803      	ldr	r3, [r0, #0]
    9044:	680c      	ldr	r4, [r1, #0]
    9046:	42a3      	cmp	r3, r4
    9048:	d0ef      	beq.n	902a <strncmp+0x16>
    904a:	7804      	ldrb	r4, [r0, #0]
    904c:	780d      	ldrb	r5, [r1, #0]
    904e:	42ac      	cmp	r4, r5
    9050:	d113      	bne.n	907a <strncmp+0x66>
    9052:	2301      	movs	r3, #1
    9054:	e006      	b.n	9064 <strncmp+0x50>
    9056:	5cc4      	ldrb	r4, [r0, r3]
    9058:	5ccd      	ldrb	r5, [r1, r3]
    905a:	42ac      	cmp	r4, r5
    905c:	d10d      	bne.n	907a <strncmp+0x66>
    905e:	3301      	adds	r3, #1
    9060:	4293      	cmp	r3, r2
    9062:	d001      	beq.n	9068 <strncmp+0x54>
    9064:	2c00      	cmp	r4, #0
    9066:	d1f6      	bne.n	9056 <strncmp+0x42>
    9068:	2000      	movs	r0, #0
    906a:	bd30      	pop	{r4, r5, pc}
    906c:	7804      	ldrb	r4, [r0, #0]
    906e:	780d      	ldrb	r5, [r1, #0]
    9070:	42a5      	cmp	r5, r4
    9072:	d102      	bne.n	907a <strncmp+0x66>
    9074:	2a01      	cmp	r2, #1
    9076:	d1ec      	bne.n	9052 <strncmp+0x3e>
    9078:	e7f6      	b.n	9068 <strncmp+0x54>
    907a:	1b60      	subs	r0, r4, r5
    907c:	e7f5      	b.n	906a <strncmp+0x56>
    907e:	46c0      	nop			; (mov r8, r8)
    9080:	80808080 	.word	0x80808080
    9084:	fefefeff 	.word	0xfefefeff

00009088 <strncpy>:
    9088:	0003      	movs	r3, r0
    908a:	430b      	orrs	r3, r1
    908c:	b5f0      	push	{r4, r5, r6, r7, lr}
    908e:	0007      	movs	r7, r0
    9090:	079b      	lsls	r3, r3, #30
    9092:	d113      	bne.n	90bc <strncpy+0x34>
    9094:	2a03      	cmp	r2, #3
    9096:	d911      	bls.n	90bc <strncpy+0x34>
    9098:	4c14      	ldr	r4, [pc, #80]	; (90ec <strncpy+0x64>)
    909a:	0003      	movs	r3, r0
    909c:	46a4      	mov	ip, r4
    909e:	4667      	mov	r7, ip
    90a0:	680d      	ldr	r5, [r1, #0]
    90a2:	4c13      	ldr	r4, [pc, #76]	; (90f0 <strncpy+0x68>)
    90a4:	001e      	movs	r6, r3
    90a6:	192c      	adds	r4, r5, r4
    90a8:	43ac      	bics	r4, r5
    90aa:	423c      	tst	r4, r7
    90ac:	d11b      	bne.n	90e6 <strncpy+0x5e>
    90ae:	3304      	adds	r3, #4
    90b0:	3a04      	subs	r2, #4
    90b2:	001f      	movs	r7, r3
    90b4:	3104      	adds	r1, #4
    90b6:	6035      	str	r5, [r6, #0]
    90b8:	2a03      	cmp	r2, #3
    90ba:	d8f0      	bhi.n	909e <strncpy+0x16>
    90bc:	2400      	movs	r4, #0
    90be:	18be      	adds	r6, r7, r2
    90c0:	e006      	b.n	90d0 <strncpy+0x48>
    90c2:	5d0d      	ldrb	r5, [r1, r4]
    90c4:	3a01      	subs	r2, #1
    90c6:	553d      	strb	r5, [r7, r4]
    90c8:	1ab3      	subs	r3, r6, r2
    90ca:	3401      	adds	r4, #1
    90cc:	2d00      	cmp	r5, #0
    90ce:	d002      	beq.n	90d6 <strncpy+0x4e>
    90d0:	2a00      	cmp	r2, #0
    90d2:	d1f6      	bne.n	90c2 <strncpy+0x3a>
    90d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    90d6:	2100      	movs	r1, #0
    90d8:	2a00      	cmp	r2, #0
    90da:	d0fb      	beq.n	90d4 <strncpy+0x4c>
    90dc:	7019      	strb	r1, [r3, #0]
    90de:	3301      	adds	r3, #1
    90e0:	429e      	cmp	r6, r3
    90e2:	d1fb      	bne.n	90dc <strncpy+0x54>
    90e4:	e7f6      	b.n	90d4 <strncpy+0x4c>
    90e6:	001f      	movs	r7, r3
    90e8:	e7e8      	b.n	90bc <strncpy+0x34>
    90ea:	46c0      	nop			; (mov r8, r8)
    90ec:	80808080 	.word	0x80808080
    90f0:	fefefeff 	.word	0xfefefeff

000090f4 <__sprint_r.part.0>:
    90f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90f6:	464e      	mov	r6, r9
    90f8:	4645      	mov	r5, r8
    90fa:	46de      	mov	lr, fp
    90fc:	4657      	mov	r7, sl
    90fe:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    9100:	b5e0      	push	{r5, r6, r7, lr}
    9102:	4691      	mov	r9, r2
    9104:	0006      	movs	r6, r0
    9106:	000d      	movs	r5, r1
    9108:	049b      	lsls	r3, r3, #18
    910a:	d533      	bpl.n	9174 <__sprint_r.part.0+0x80>
    910c:	6813      	ldr	r3, [r2, #0]
    910e:	469a      	mov	sl, r3
    9110:	6893      	ldr	r3, [r2, #8]
    9112:	2b00      	cmp	r3, #0
    9114:	d02c      	beq.n	9170 <__sprint_r.part.0+0x7c>
    9116:	4652      	mov	r2, sl
    9118:	6812      	ldr	r2, [r2, #0]
    911a:	4690      	mov	r8, r2
    911c:	4652      	mov	r2, sl
    911e:	6852      	ldr	r2, [r2, #4]
    9120:	4693      	mov	fp, r2
    9122:	0897      	lsrs	r7, r2, #2
    9124:	d019      	beq.n	915a <__sprint_r.part.0+0x66>
    9126:	2400      	movs	r4, #0
    9128:	e002      	b.n	9130 <__sprint_r.part.0+0x3c>
    912a:	3401      	adds	r4, #1
    912c:	42a7      	cmp	r7, r4
    912e:	d012      	beq.n	9156 <__sprint_r.part.0+0x62>
    9130:	4642      	mov	r2, r8
    9132:	00a3      	lsls	r3, r4, #2
    9134:	58d1      	ldr	r1, [r2, r3]
    9136:	0030      	movs	r0, r6
    9138:	002a      	movs	r2, r5
    913a:	f001 fa0b 	bl	a554 <_fputwc_r>
    913e:	1c43      	adds	r3, r0, #1
    9140:	d1f3      	bne.n	912a <__sprint_r.part.0+0x36>
    9142:	464a      	mov	r2, r9
    9144:	2300      	movs	r3, #0
    9146:	6093      	str	r3, [r2, #8]
    9148:	6053      	str	r3, [r2, #4]
    914a:	bcf0      	pop	{r4, r5, r6, r7}
    914c:	46bb      	mov	fp, r7
    914e:	46b2      	mov	sl, r6
    9150:	46a9      	mov	r9, r5
    9152:	46a0      	mov	r8, r4
    9154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9156:	464b      	mov	r3, r9
    9158:	689b      	ldr	r3, [r3, #8]
    915a:	465a      	mov	r2, fp
    915c:	2103      	movs	r1, #3
    915e:	438a      	bics	r2, r1
    9160:	1a9b      	subs	r3, r3, r2
    9162:	464a      	mov	r2, r9
    9164:	6093      	str	r3, [r2, #8]
    9166:	2208      	movs	r2, #8
    9168:	4694      	mov	ip, r2
    916a:	44e2      	add	sl, ip
    916c:	2b00      	cmp	r3, #0
    916e:	d1d2      	bne.n	9116 <__sprint_r.part.0+0x22>
    9170:	2000      	movs	r0, #0
    9172:	e7e6      	b.n	9142 <__sprint_r.part.0+0x4e>
    9174:	f001 f9fe 	bl	a574 <__sfvwrite_r>
    9178:	e7e3      	b.n	9142 <__sprint_r.part.0+0x4e>
    917a:	46c0      	nop			; (mov r8, r8)

0000917c <_vfiprintf_r>:
    917c:	b5f0      	push	{r4, r5, r6, r7, lr}
    917e:	4657      	mov	r7, sl
    9180:	46de      	mov	lr, fp
    9182:	464e      	mov	r6, r9
    9184:	4645      	mov	r5, r8
    9186:	b5e0      	push	{r5, r6, r7, lr}
    9188:	b0c9      	sub	sp, #292	; 0x124
    918a:	0007      	movs	r7, r0
    918c:	4692      	mov	sl, r2
    918e:	9104      	str	r1, [sp, #16]
    9190:	2208      	movs	r2, #8
    9192:	2100      	movs	r1, #0
    9194:	a818      	add	r0, sp, #96	; 0x60
    9196:	001c      	movs	r4, r3
    9198:	930a      	str	r3, [sp, #40]	; 0x28
    919a:	f7ff feb9 	bl	8f10 <memset>
    919e:	2f00      	cmp	r7, #0
    91a0:	d003      	beq.n	91aa <_vfiprintf_r+0x2e>
    91a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    91a4:	2b00      	cmp	r3, #0
    91a6:	d100      	bne.n	91aa <_vfiprintf_r+0x2e>
    91a8:	e18d      	b.n	94c6 <_vfiprintf_r+0x34a>
    91aa:	2280      	movs	r2, #128	; 0x80
    91ac:	9804      	ldr	r0, [sp, #16]
    91ae:	0192      	lsls	r2, r2, #6
    91b0:	230c      	movs	r3, #12
    91b2:	5ec1      	ldrsh	r1, [r0, r3]
    91b4:	8983      	ldrh	r3, [r0, #12]
    91b6:	4213      	tst	r3, r2
    91b8:	d106      	bne.n	91c8 <_vfiprintf_r+0x4c>
    91ba:	430a      	orrs	r2, r1
    91bc:	6e43      	ldr	r3, [r0, #100]	; 0x64
    91be:	49c4      	ldr	r1, [pc, #784]	; (94d0 <_vfiprintf_r+0x354>)
    91c0:	8182      	strh	r2, [r0, #12]
    91c2:	400b      	ands	r3, r1
    91c4:	6643      	str	r3, [r0, #100]	; 0x64
    91c6:	b293      	uxth	r3, r2
    91c8:	071a      	lsls	r2, r3, #28
    91ca:	d569      	bpl.n	92a0 <_vfiprintf_r+0x124>
    91cc:	9a04      	ldr	r2, [sp, #16]
    91ce:	6912      	ldr	r2, [r2, #16]
    91d0:	2a00      	cmp	r2, #0
    91d2:	d065      	beq.n	92a0 <_vfiprintf_r+0x124>
    91d4:	221a      	movs	r2, #26
    91d6:	4013      	ands	r3, r2
    91d8:	2b0a      	cmp	r3, #10
    91da:	d06f      	beq.n	92bc <_vfiprintf_r+0x140>
    91dc:	ab1f      	add	r3, sp, #124	; 0x7c
    91de:	931c      	str	r3, [sp, #112]	; 0x70
    91e0:	2300      	movs	r3, #0
    91e2:	931e      	str	r3, [sp, #120]	; 0x78
    91e4:	931d      	str	r3, [sp, #116]	; 0x74
    91e6:	ab1f      	add	r3, sp, #124	; 0x7c
    91e8:	469b      	mov	fp, r3
    91ea:	2300      	movs	r3, #0
    91ec:	9311      	str	r3, [sp, #68]	; 0x44
    91ee:	9310      	str	r3, [sp, #64]	; 0x40
    91f0:	9313      	str	r3, [sp, #76]	; 0x4c
    91f2:	9312      	str	r3, [sp, #72]	; 0x48
    91f4:	9306      	str	r3, [sp, #24]
    91f6:	4bb7      	ldr	r3, [pc, #732]	; (94d4 <_vfiprintf_r+0x358>)
    91f8:	465c      	mov	r4, fp
    91fa:	930f      	str	r3, [sp, #60]	; 0x3c
    91fc:	4bb6      	ldr	r3, [pc, #728]	; (94d8 <_vfiprintf_r+0x35c>)
    91fe:	930e      	str	r3, [sp, #56]	; 0x38
    9200:	4653      	mov	r3, sl
    9202:	9302      	str	r3, [sp, #8]
    9204:	23e4      	movs	r3, #228	; 0xe4
    9206:	46a0      	mov	r8, r4
    9208:	4699      	mov	r9, r3
    920a:	9e02      	ldr	r6, [sp, #8]
    920c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    920e:	464b      	mov	r3, r9
    9210:	58ec      	ldr	r4, [r5, r3]
    9212:	f001 fb51 	bl	a8b8 <__locale_mb_cur_max>
    9216:	aa18      	add	r2, sp, #96	; 0x60
    9218:	0003      	movs	r3, r0
    921a:	9200      	str	r2, [sp, #0]
    921c:	0038      	movs	r0, r7
    921e:	0032      	movs	r2, r6
    9220:	a916      	add	r1, sp, #88	; 0x58
    9222:	47a0      	blx	r4
    9224:	2800      	cmp	r0, #0
    9226:	d063      	beq.n	92f0 <_vfiprintf_r+0x174>
    9228:	db5a      	blt.n	92e0 <_vfiprintf_r+0x164>
    922a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    922c:	2b25      	cmp	r3, #37	; 0x25
    922e:	d001      	beq.n	9234 <_vfiprintf_r+0xb8>
    9230:	1836      	adds	r6, r6, r0
    9232:	e7ec      	b.n	920e <_vfiprintf_r+0x92>
    9234:	9b02      	ldr	r3, [sp, #8]
    9236:	4644      	mov	r4, r8
    9238:	1af2      	subs	r2, r6, r3
    923a:	0005      	movs	r5, r0
    923c:	4691      	mov	r9, r2
    923e:	429e      	cmp	r6, r3
    9240:	d15d      	bne.n	92fe <_vfiprintf_r+0x182>
    9242:	1c73      	adds	r3, r6, #1
    9244:	9302      	str	r3, [sp, #8]
    9246:	2300      	movs	r3, #0
    9248:	aa12      	add	r2, sp, #72	; 0x48
    924a:	72d3      	strb	r3, [r2, #11]
    924c:	3b01      	subs	r3, #1
    924e:	469a      	mov	sl, r3
    9250:	2300      	movs	r3, #0
    9252:	7872      	ldrb	r2, [r6, #1]
    9254:	001d      	movs	r5, r3
    9256:	4656      	mov	r6, sl
    9258:	9307      	str	r3, [sp, #28]
    925a:	9b02      	ldr	r3, [sp, #8]
    925c:	3301      	adds	r3, #1
    925e:	9302      	str	r3, [sp, #8]
    9260:	0013      	movs	r3, r2
    9262:	3b20      	subs	r3, #32
    9264:	2b5a      	cmp	r3, #90	; 0x5a
    9266:	d900      	bls.n	926a <_vfiprintf_r+0xee>
    9268:	e07c      	b.n	9364 <_vfiprintf_r+0x1e8>
    926a:	990e      	ldr	r1, [sp, #56]	; 0x38
    926c:	009b      	lsls	r3, r3, #2
    926e:	58cb      	ldr	r3, [r1, r3]
    9270:	469f      	mov	pc, r3
    9272:	0038      	movs	r0, r7
    9274:	f001 fb1c 	bl	a8b0 <_localeconv_r>
    9278:	6843      	ldr	r3, [r0, #4]
    927a:	0018      	movs	r0, r3
    927c:	9312      	str	r3, [sp, #72]	; 0x48
    927e:	f7ff fe9b 	bl	8fb8 <strlen>
    9282:	4680      	mov	r8, r0
    9284:	9013      	str	r0, [sp, #76]	; 0x4c
    9286:	0038      	movs	r0, r7
    9288:	f001 fb12 	bl	a8b0 <_localeconv_r>
    928c:	6883      	ldr	r3, [r0, #8]
    928e:	9310      	str	r3, [sp, #64]	; 0x40
    9290:	4643      	mov	r3, r8
    9292:	2b00      	cmp	r3, #0
    9294:	d001      	beq.n	929a <_vfiprintf_r+0x11e>
    9296:	f000 fcd6 	bl	9c46 <_vfiprintf_r+0xaca>
    929a:	9b02      	ldr	r3, [sp, #8]
    929c:	781a      	ldrb	r2, [r3, #0]
    929e:	e7dc      	b.n	925a <_vfiprintf_r+0xde>
    92a0:	0038      	movs	r0, r7
    92a2:	9904      	ldr	r1, [sp, #16]
    92a4:	f000 ff5c 	bl	a160 <__swsetup_r>
    92a8:	2800      	cmp	r0, #0
    92aa:	d001      	beq.n	92b0 <_vfiprintf_r+0x134>
    92ac:	f000 feb5 	bl	a01a <_vfiprintf_r+0xe9e>
    92b0:	221a      	movs	r2, #26
    92b2:	9b04      	ldr	r3, [sp, #16]
    92b4:	899b      	ldrh	r3, [r3, #12]
    92b6:	4013      	ands	r3, r2
    92b8:	2b0a      	cmp	r3, #10
    92ba:	d18f      	bne.n	91dc <_vfiprintf_r+0x60>
    92bc:	9b04      	ldr	r3, [sp, #16]
    92be:	220e      	movs	r2, #14
    92c0:	5e9b      	ldrsh	r3, [r3, r2]
    92c2:	2b00      	cmp	r3, #0
    92c4:	db8a      	blt.n	91dc <_vfiprintf_r+0x60>
    92c6:	0023      	movs	r3, r4
    92c8:	4652      	mov	r2, sl
    92ca:	0038      	movs	r0, r7
    92cc:	9904      	ldr	r1, [sp, #16]
    92ce:	f000 fed9 	bl	a084 <__sbprintf>
    92d2:	9006      	str	r0, [sp, #24]
    92d4:	e03c      	b.n	9350 <_vfiprintf_r+0x1d4>
    92d6:	2320      	movs	r3, #32
    92d8:	431d      	orrs	r5, r3
    92da:	9b02      	ldr	r3, [sp, #8]
    92dc:	781a      	ldrb	r2, [r3, #0]
    92de:	e7bc      	b.n	925a <_vfiprintf_r+0xde>
    92e0:	2208      	movs	r2, #8
    92e2:	2100      	movs	r1, #0
    92e4:	a818      	add	r0, sp, #96	; 0x60
    92e6:	f7ff fe13 	bl	8f10 <memset>
    92ea:	2001      	movs	r0, #1
    92ec:	1836      	adds	r6, r6, r0
    92ee:	e78e      	b.n	920e <_vfiprintf_r+0x92>
    92f0:	9b02      	ldr	r3, [sp, #8]
    92f2:	4644      	mov	r4, r8
    92f4:	1af2      	subs	r2, r6, r3
    92f6:	0005      	movs	r5, r0
    92f8:	4691      	mov	r9, r2
    92fa:	429e      	cmp	r6, r3
    92fc:	d01c      	beq.n	9338 <_vfiprintf_r+0x1bc>
    92fe:	9b02      	ldr	r3, [sp, #8]
    9300:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    9302:	6023      	str	r3, [r4, #0]
    9304:	464b      	mov	r3, r9
    9306:	6063      	str	r3, [r4, #4]
    9308:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    930a:	444a      	add	r2, r9
    930c:	3301      	adds	r3, #1
    930e:	921e      	str	r2, [sp, #120]	; 0x78
    9310:	931d      	str	r3, [sp, #116]	; 0x74
    9312:	2b07      	cmp	r3, #7
    9314:	dd24      	ble.n	9360 <_vfiprintf_r+0x1e4>
    9316:	2a00      	cmp	r2, #0
    9318:	d101      	bne.n	931e <_vfiprintf_r+0x1a2>
    931a:	f000 fc18 	bl	9b4e <_vfiprintf_r+0x9d2>
    931e:	0038      	movs	r0, r7
    9320:	9904      	ldr	r1, [sp, #16]
    9322:	aa1c      	add	r2, sp, #112	; 0x70
    9324:	f7ff fee6 	bl	90f4 <__sprint_r.part.0>
    9328:	2800      	cmp	r0, #0
    932a:	d10a      	bne.n	9342 <_vfiprintf_r+0x1c6>
    932c:	ac1f      	add	r4, sp, #124	; 0x7c
    932e:	9b06      	ldr	r3, [sp, #24]
    9330:	444b      	add	r3, r9
    9332:	9306      	str	r3, [sp, #24]
    9334:	2d00      	cmp	r5, #0
    9336:	d184      	bne.n	9242 <_vfiprintf_r+0xc6>
    9338:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    933a:	2b00      	cmp	r3, #0
    933c:	d001      	beq.n	9342 <_vfiprintf_r+0x1c6>
    933e:	f000 fe45 	bl	9fcc <_vfiprintf_r+0xe50>
    9342:	9b04      	ldr	r3, [sp, #16]
    9344:	220c      	movs	r2, #12
    9346:	5e9b      	ldrsh	r3, [r3, r2]
    9348:	065b      	lsls	r3, r3, #25
    934a:	d501      	bpl.n	9350 <_vfiprintf_r+0x1d4>
    934c:	f000 fe65 	bl	a01a <_vfiprintf_r+0xe9e>
    9350:	9806      	ldr	r0, [sp, #24]
    9352:	b049      	add	sp, #292	; 0x124
    9354:	bcf0      	pop	{r4, r5, r6, r7}
    9356:	46bb      	mov	fp, r7
    9358:	46b2      	mov	sl, r6
    935a:	46a9      	mov	r9, r5
    935c:	46a0      	mov	r8, r4
    935e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9360:	3408      	adds	r4, #8
    9362:	e7e4      	b.n	932e <_vfiprintf_r+0x1b2>
    9364:	46ab      	mov	fp, r5
    9366:	2a00      	cmp	r2, #0
    9368:	d0e6      	beq.n	9338 <_vfiprintf_r+0x1bc>
    936a:	2300      	movs	r3, #0
    936c:	ad2f      	add	r5, sp, #188	; 0xbc
    936e:	702a      	strb	r2, [r5, #0]
    9370:	aa12      	add	r2, sp, #72	; 0x48
    9372:	72d3      	strb	r3, [r2, #11]
    9374:	3301      	adds	r3, #1
    9376:	9303      	str	r3, [sp, #12]
    9378:	9305      	str	r3, [sp, #20]
    937a:	2300      	movs	r3, #0
    937c:	469a      	mov	sl, r3
    937e:	930b      	str	r3, [sp, #44]	; 0x2c
    9380:	2302      	movs	r3, #2
    9382:	465a      	mov	r2, fp
    9384:	401a      	ands	r2, r3
    9386:	920c      	str	r2, [sp, #48]	; 0x30
    9388:	465a      	mov	r2, fp
    938a:	4213      	tst	r3, r2
    938c:	d002      	beq.n	9394 <_vfiprintf_r+0x218>
    938e:	9b03      	ldr	r3, [sp, #12]
    9390:	3302      	adds	r3, #2
    9392:	9303      	str	r3, [sp, #12]
    9394:	2384      	movs	r3, #132	; 0x84
    9396:	465a      	mov	r2, fp
    9398:	401a      	ands	r2, r3
    939a:	920d      	str	r2, [sp, #52]	; 0x34
    939c:	465a      	mov	r2, fp
    939e:	4213      	tst	r3, r2
    93a0:	d106      	bne.n	93b0 <_vfiprintf_r+0x234>
    93a2:	9b07      	ldr	r3, [sp, #28]
    93a4:	9a03      	ldr	r2, [sp, #12]
    93a6:	1a9b      	subs	r3, r3, r2
    93a8:	4698      	mov	r8, r3
    93aa:	2b00      	cmp	r3, #0
    93ac:	dd00      	ble.n	93b0 <_vfiprintf_r+0x234>
    93ae:	e325      	b.n	99fc <_vfiprintf_r+0x880>
    93b0:	991d      	ldr	r1, [sp, #116]	; 0x74
    93b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    93b4:	1c48      	adds	r0, r1, #1
    93b6:	aa12      	add	r2, sp, #72	; 0x48
    93b8:	7ad2      	ldrb	r2, [r2, #11]
    93ba:	2a00      	cmp	r2, #0
    93bc:	d00f      	beq.n	93de <_vfiprintf_r+0x262>
    93be:	a912      	add	r1, sp, #72	; 0x48
    93c0:	220b      	movs	r2, #11
    93c2:	468c      	mov	ip, r1
    93c4:	4462      	add	r2, ip
    93c6:	6022      	str	r2, [r4, #0]
    93c8:	2201      	movs	r2, #1
    93ca:	3301      	adds	r3, #1
    93cc:	6062      	str	r2, [r4, #4]
    93ce:	931e      	str	r3, [sp, #120]	; 0x78
    93d0:	901d      	str	r0, [sp, #116]	; 0x74
    93d2:	2807      	cmp	r0, #7
    93d4:	dd00      	ble.n	93d8 <_vfiprintf_r+0x25c>
    93d6:	e2f8      	b.n	99ca <_vfiprintf_r+0x84e>
    93d8:	0001      	movs	r1, r0
    93da:	3408      	adds	r4, #8
    93dc:	3001      	adds	r0, #1
    93de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    93e0:	2a00      	cmp	r2, #0
    93e2:	d019      	beq.n	9418 <_vfiprintf_r+0x29c>
    93e4:	aa15      	add	r2, sp, #84	; 0x54
    93e6:	6022      	str	r2, [r4, #0]
    93e8:	2202      	movs	r2, #2
    93ea:	3302      	adds	r3, #2
    93ec:	6062      	str	r2, [r4, #4]
    93ee:	931e      	str	r3, [sp, #120]	; 0x78
    93f0:	901d      	str	r0, [sp, #116]	; 0x74
    93f2:	2807      	cmp	r0, #7
    93f4:	dc00      	bgt.n	93f8 <_vfiprintf_r+0x27c>
    93f6:	e2fd      	b.n	99f4 <_vfiprintf_r+0x878>
    93f8:	2b00      	cmp	r3, #0
    93fa:	d101      	bne.n	9400 <_vfiprintf_r+0x284>
    93fc:	f000 fbf7 	bl	9bee <_vfiprintf_r+0xa72>
    9400:	0038      	movs	r0, r7
    9402:	9904      	ldr	r1, [sp, #16]
    9404:	aa1c      	add	r2, sp, #112	; 0x70
    9406:	f7ff fe75 	bl	90f4 <__sprint_r.part.0>
    940a:	2800      	cmp	r0, #0
    940c:	d000      	beq.n	9410 <_vfiprintf_r+0x294>
    940e:	e2cf      	b.n	99b0 <_vfiprintf_r+0x834>
    9410:	991d      	ldr	r1, [sp, #116]	; 0x74
    9412:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9414:	1c48      	adds	r0, r1, #1
    9416:	ac1f      	add	r4, sp, #124	; 0x7c
    9418:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    941a:	2a80      	cmp	r2, #128	; 0x80
    941c:	d100      	bne.n	9420 <_vfiprintf_r+0x2a4>
    941e:	e206      	b.n	982e <_vfiprintf_r+0x6b2>
    9420:	4652      	mov	r2, sl
    9422:	9e05      	ldr	r6, [sp, #20]
    9424:	1b96      	subs	r6, r2, r6
    9426:	2e00      	cmp	r6, #0
    9428:	dd00      	ble.n	942c <_vfiprintf_r+0x2b0>
    942a:	e254      	b.n	98d6 <_vfiprintf_r+0x75a>
    942c:	9a05      	ldr	r2, [sp, #20]
    942e:	6025      	str	r5, [r4, #0]
    9430:	4694      	mov	ip, r2
    9432:	4463      	add	r3, ip
    9434:	6062      	str	r2, [r4, #4]
    9436:	931e      	str	r3, [sp, #120]	; 0x78
    9438:	901d      	str	r0, [sp, #116]	; 0x74
    943a:	2807      	cmp	r0, #7
    943c:	dc00      	bgt.n	9440 <_vfiprintf_r+0x2c4>
    943e:	e1f3      	b.n	9828 <_vfiprintf_r+0x6ac>
    9440:	2b00      	cmp	r3, #0
    9442:	d100      	bne.n	9446 <_vfiprintf_r+0x2ca>
    9444:	e31a      	b.n	9a7c <_vfiprintf_r+0x900>
    9446:	0038      	movs	r0, r7
    9448:	9904      	ldr	r1, [sp, #16]
    944a:	aa1c      	add	r2, sp, #112	; 0x70
    944c:	f7ff fe52 	bl	90f4 <__sprint_r.part.0>
    9450:	2800      	cmp	r0, #0
    9452:	d000      	beq.n	9456 <_vfiprintf_r+0x2da>
    9454:	e2ac      	b.n	99b0 <_vfiprintf_r+0x834>
    9456:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9458:	aa1f      	add	r2, sp, #124	; 0x7c
    945a:	4659      	mov	r1, fp
    945c:	0749      	lsls	r1, r1, #29
    945e:	d505      	bpl.n	946c <_vfiprintf_r+0x2f0>
    9460:	9907      	ldr	r1, [sp, #28]
    9462:	9803      	ldr	r0, [sp, #12]
    9464:	1a0d      	subs	r5, r1, r0
    9466:	2d00      	cmp	r5, #0
    9468:	dd00      	ble.n	946c <_vfiprintf_r+0x2f0>
    946a:	e311      	b.n	9a90 <_vfiprintf_r+0x914>
    946c:	9a07      	ldr	r2, [sp, #28]
    946e:	9903      	ldr	r1, [sp, #12]
    9470:	428a      	cmp	r2, r1
    9472:	da00      	bge.n	9476 <_vfiprintf_r+0x2fa>
    9474:	000a      	movs	r2, r1
    9476:	9906      	ldr	r1, [sp, #24]
    9478:	468c      	mov	ip, r1
    947a:	4494      	add	ip, r2
    947c:	4662      	mov	r2, ip
    947e:	9206      	str	r2, [sp, #24]
    9480:	2b00      	cmp	r3, #0
    9482:	d000      	beq.n	9486 <_vfiprintf_r+0x30a>
    9484:	e28c      	b.n	99a0 <_vfiprintf_r+0x824>
    9486:	2300      	movs	r3, #0
    9488:	990b      	ldr	r1, [sp, #44]	; 0x2c
    948a:	931d      	str	r3, [sp, #116]	; 0x74
    948c:	ac1f      	add	r4, sp, #124	; 0x7c
    948e:	2900      	cmp	r1, #0
    9490:	d100      	bne.n	9494 <_vfiprintf_r+0x318>
    9492:	e6b7      	b.n	9204 <_vfiprintf_r+0x88>
    9494:	0038      	movs	r0, r7
    9496:	f7fd fc32 	bl	6cfe <_free_r>
    949a:	e6b3      	b.n	9204 <_vfiprintf_r+0x88>
    949c:	3a30      	subs	r2, #48	; 0x30
    949e:	2300      	movs	r3, #0
    94a0:	0011      	movs	r1, r2
    94a2:	46a4      	mov	ip, r4
    94a4:	9802      	ldr	r0, [sp, #8]
    94a6:	009a      	lsls	r2, r3, #2
    94a8:	18d3      	adds	r3, r2, r3
    94aa:	0002      	movs	r2, r0
    94ac:	7812      	ldrb	r2, [r2, #0]
    94ae:	005b      	lsls	r3, r3, #1
    94b0:	18cb      	adds	r3, r1, r3
    94b2:	0011      	movs	r1, r2
    94b4:	3001      	adds	r0, #1
    94b6:	3930      	subs	r1, #48	; 0x30
    94b8:	0004      	movs	r4, r0
    94ba:	2909      	cmp	r1, #9
    94bc:	d9f3      	bls.n	94a6 <_vfiprintf_r+0x32a>
    94be:	9307      	str	r3, [sp, #28]
    94c0:	9402      	str	r4, [sp, #8]
    94c2:	4664      	mov	r4, ip
    94c4:	e6cc      	b.n	9260 <_vfiprintf_r+0xe4>
    94c6:	0038      	movs	r0, r7
    94c8:	f000 ffec 	bl	a4a4 <__sinit>
    94cc:	e66d      	b.n	91aa <_vfiprintf_r+0x2e>
    94ce:	46c0      	nop			; (mov r8, r8)
    94d0:	ffffdfff 	.word	0xffffdfff
    94d4:	1ffff5a8 	.word	0x1ffff5a8
    94d8:	0000d9a0 	.word	0x0000d9a0
    94dc:	2300      	movs	r3, #0
    94de:	46b2      	mov	sl, r6
    94e0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    94e2:	46ab      	mov	fp, r5
    94e4:	ce20      	ldmia	r6!, {r5}
    94e6:	a912      	add	r1, sp, #72	; 0x48
    94e8:	72cb      	strb	r3, [r1, #11]
    94ea:	2d00      	cmp	r5, #0
    94ec:	d101      	bne.n	94f2 <_vfiprintf_r+0x376>
    94ee:	f000 fcdf 	bl	9eb0 <_vfiprintf_r+0xd34>
    94f2:	2a53      	cmp	r2, #83	; 0x53
    94f4:	d101      	bne.n	94fa <_vfiprintf_r+0x37e>
    94f6:	f000 fc2d 	bl	9d54 <_vfiprintf_r+0xbd8>
    94fa:	465b      	mov	r3, fp
    94fc:	06db      	lsls	r3, r3, #27
    94fe:	d501      	bpl.n	9504 <_vfiprintf_r+0x388>
    9500:	f000 fc28 	bl	9d54 <_vfiprintf_r+0xbd8>
    9504:	4653      	mov	r3, sl
    9506:	3301      	adds	r3, #1
    9508:	d101      	bne.n	950e <_vfiprintf_r+0x392>
    950a:	f000 fd72 	bl	9ff2 <_vfiprintf_r+0xe76>
    950e:	4652      	mov	r2, sl
    9510:	2100      	movs	r1, #0
    9512:	0028      	movs	r0, r5
    9514:	f001 fa60 	bl	a9d8 <memchr>
    9518:	900b      	str	r0, [sp, #44]	; 0x2c
    951a:	2800      	cmp	r0, #0
    951c:	d101      	bne.n	9522 <_vfiprintf_r+0x3a6>
    951e:	f000 fd60 	bl	9fe2 <_vfiprintf_r+0xe66>
    9522:	1b42      	subs	r2, r0, r5
    9524:	43d3      	mvns	r3, r2
    9526:	17db      	asrs	r3, r3, #31
    9528:	9205      	str	r2, [sp, #20]
    952a:	401a      	ands	r2, r3
    952c:	2300      	movs	r3, #0
    952e:	9203      	str	r2, [sp, #12]
    9530:	469a      	mov	sl, r3
    9532:	960a      	str	r6, [sp, #40]	; 0x28
    9534:	930b      	str	r3, [sp, #44]	; 0x2c
    9536:	e079      	b.n	962c <_vfiprintf_r+0x4b0>
    9538:	46ab      	mov	fp, r5
    953a:	2a43      	cmp	r2, #67	; 0x43
    953c:	d003      	beq.n	9546 <_vfiprintf_r+0x3ca>
    953e:	002b      	movs	r3, r5
    9540:	06db      	lsls	r3, r3, #27
    9542:	d400      	bmi.n	9546 <_vfiprintf_r+0x3ca>
    9544:	e3b5      	b.n	9cb2 <_vfiprintf_r+0xb36>
    9546:	2208      	movs	r2, #8
    9548:	2100      	movs	r1, #0
    954a:	a81a      	add	r0, sp, #104	; 0x68
    954c:	f7ff fce0 	bl	8f10 <memset>
    9550:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    9552:	ad2f      	add	r5, sp, #188	; 0xbc
    9554:	ab1a      	add	r3, sp, #104	; 0x68
    9556:	0029      	movs	r1, r5
    9558:	0038      	movs	r0, r7
    955a:	ce04      	ldmia	r6!, {r2}
    955c:	f000 fdcc 	bl	a0f8 <_wcrtomb_r>
    9560:	0003      	movs	r3, r0
    9562:	9005      	str	r0, [sp, #20]
    9564:	3301      	adds	r3, #1
    9566:	d101      	bne.n	956c <_vfiprintf_r+0x3f0>
    9568:	f000 fd5c 	bl	a024 <_vfiprintf_r+0xea8>
    956c:	9a05      	ldr	r2, [sp, #20]
    956e:	960a      	str	r6, [sp, #40]	; 0x28
    9570:	43d3      	mvns	r3, r2
    9572:	17db      	asrs	r3, r3, #31
    9574:	401a      	ands	r2, r3
    9576:	9203      	str	r2, [sp, #12]
    9578:	2300      	movs	r3, #0
    957a:	aa12      	add	r2, sp, #72	; 0x48
    957c:	72d3      	strb	r3, [r2, #11]
    957e:	e6fc      	b.n	937a <_vfiprintf_r+0x1fe>
    9580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9582:	cb04      	ldmia	r3!, {r2}
    9584:	9207      	str	r2, [sp, #28]
    9586:	2a00      	cmp	r2, #0
    9588:	db00      	blt.n	958c <_vfiprintf_r+0x410>
    958a:	e349      	b.n	9c20 <_vfiprintf_r+0xaa4>
    958c:	9a07      	ldr	r2, [sp, #28]
    958e:	930a      	str	r3, [sp, #40]	; 0x28
    9590:	4252      	negs	r2, r2
    9592:	9207      	str	r2, [sp, #28]
    9594:	2304      	movs	r3, #4
    9596:	431d      	orrs	r5, r3
    9598:	9b02      	ldr	r3, [sp, #8]
    959a:	781a      	ldrb	r2, [r3, #0]
    959c:	e65d      	b.n	925a <_vfiprintf_r+0xde>
    959e:	232b      	movs	r3, #43	; 0x2b
    95a0:	aa12      	add	r2, sp, #72	; 0x48
    95a2:	72d3      	strb	r3, [r2, #11]
    95a4:	9b02      	ldr	r3, [sp, #8]
    95a6:	781a      	ldrb	r2, [r3, #0]
    95a8:	e657      	b.n	925a <_vfiprintf_r+0xde>
    95aa:	2310      	movs	r3, #16
    95ac:	002a      	movs	r2, r5
    95ae:	431a      	orrs	r2, r3
    95b0:	46b2      	mov	sl, r6
    95b2:	4693      	mov	fp, r2
    95b4:	465b      	mov	r3, fp
    95b6:	069b      	lsls	r3, r3, #26
    95b8:	d400      	bmi.n	95bc <_vfiprintf_r+0x440>
    95ba:	e2ed      	b.n	9b98 <_vfiprintf_r+0xa1c>
    95bc:	2207      	movs	r2, #7
    95be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    95c0:	3307      	adds	r3, #7
    95c2:	4393      	bics	r3, r2
    95c4:	0019      	movs	r1, r3
    95c6:	c90c      	ldmia	r1!, {r2, r3}
    95c8:	9208      	str	r2, [sp, #32]
    95ca:	9309      	str	r3, [sp, #36]	; 0x24
    95cc:	910a      	str	r1, [sp, #40]	; 0x28
    95ce:	465a      	mov	r2, fp
    95d0:	4bc7      	ldr	r3, [pc, #796]	; (98f0 <_vfiprintf_r+0x774>)
    95d2:	401a      	ands	r2, r3
    95d4:	4690      	mov	r8, r2
    95d6:	2300      	movs	r3, #0
    95d8:	2200      	movs	r2, #0
    95da:	a912      	add	r1, sp, #72	; 0x48
    95dc:	72ca      	strb	r2, [r1, #11]
    95de:	4652      	mov	r2, sl
    95e0:	3201      	adds	r2, #1
    95e2:	d100      	bne.n	95e6 <_vfiprintf_r+0x46a>
    95e4:	e0e7      	b.n	97b6 <_vfiprintf_r+0x63a>
    95e6:	2280      	movs	r2, #128	; 0x80
    95e8:	4641      	mov	r1, r8
    95ea:	4391      	bics	r1, r2
    95ec:	468b      	mov	fp, r1
    95ee:	9908      	ldr	r1, [sp, #32]
    95f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    95f2:	0008      	movs	r0, r1
    95f4:	4310      	orrs	r0, r2
    95f6:	d000      	beq.n	95fa <_vfiprintf_r+0x47e>
    95f8:	e0dc      	b.n	97b4 <_vfiprintf_r+0x638>
    95fa:	4652      	mov	r2, sl
    95fc:	2a00      	cmp	r2, #0
    95fe:	d001      	beq.n	9604 <_vfiprintf_r+0x488>
    9600:	f000 fc3e 	bl	9e80 <_vfiprintf_r+0xd04>
    9604:	2b00      	cmp	r3, #0
    9606:	d000      	beq.n	960a <_vfiprintf_r+0x48e>
    9608:	e2aa      	b.n	9b60 <_vfiprintf_r+0x9e4>
    960a:	4642      	mov	r2, r8
    960c:	3301      	adds	r3, #1
    960e:	401a      	ands	r2, r3
    9610:	9205      	str	r2, [sp, #20]
    9612:	4642      	mov	r2, r8
    9614:	ad48      	add	r5, sp, #288	; 0x120
    9616:	4213      	tst	r3, r2
    9618:	d000      	beq.n	961c <_vfiprintf_r+0x4a0>
    961a:	e306      	b.n	9c2a <_vfiprintf_r+0xaae>
    961c:	9b05      	ldr	r3, [sp, #20]
    961e:	9303      	str	r3, [sp, #12]
    9620:	4553      	cmp	r3, sl
    9622:	da01      	bge.n	9628 <_vfiprintf_r+0x4ac>
    9624:	4653      	mov	r3, sl
    9626:	9303      	str	r3, [sp, #12]
    9628:	2300      	movs	r3, #0
    962a:	930b      	str	r3, [sp, #44]	; 0x2c
    962c:	ab12      	add	r3, sp, #72	; 0x48
    962e:	7adb      	ldrb	r3, [r3, #11]
    9630:	1e5a      	subs	r2, r3, #1
    9632:	4193      	sbcs	r3, r2
    9634:	9a03      	ldr	r2, [sp, #12]
    9636:	4694      	mov	ip, r2
    9638:	449c      	add	ip, r3
    963a:	4663      	mov	r3, ip
    963c:	9303      	str	r3, [sp, #12]
    963e:	e69f      	b.n	9380 <_vfiprintf_r+0x204>
    9640:	2310      	movs	r3, #16
    9642:	002a      	movs	r2, r5
    9644:	431a      	orrs	r2, r3
    9646:	46b2      	mov	sl, r6
    9648:	4693      	mov	fp, r2
    964a:	465b      	mov	r3, fp
    964c:	069b      	lsls	r3, r3, #26
    964e:	d400      	bmi.n	9652 <_vfiprintf_r+0x4d6>
    9650:	e28b      	b.n	9b6a <_vfiprintf_r+0x9ee>
    9652:	2307      	movs	r3, #7
    9654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9656:	3207      	adds	r2, #7
    9658:	439a      	bics	r2, r3
    965a:	3301      	adds	r3, #1
    965c:	469c      	mov	ip, r3
    965e:	4494      	add	ip, r2
    9660:	4663      	mov	r3, ip
    9662:	930a      	str	r3, [sp, #40]	; 0x28
    9664:	6853      	ldr	r3, [r2, #4]
    9666:	6812      	ldr	r2, [r2, #0]
    9668:	9309      	str	r3, [sp, #36]	; 0x24
    966a:	9208      	str	r2, [sp, #32]
    966c:	2b00      	cmp	r3, #0
    966e:	da00      	bge.n	9672 <_vfiprintf_r+0x4f6>
    9670:	e287      	b.n	9b82 <_vfiprintf_r+0xa06>
    9672:	4653      	mov	r3, sl
    9674:	46d8      	mov	r8, fp
    9676:	3301      	adds	r3, #1
    9678:	d009      	beq.n	968e <_vfiprintf_r+0x512>
    967a:	2380      	movs	r3, #128	; 0x80
    967c:	465a      	mov	r2, fp
    967e:	439a      	bics	r2, r3
    9680:	4690      	mov	r8, r2
    9682:	9a08      	ldr	r2, [sp, #32]
    9684:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9686:	0011      	movs	r1, r2
    9688:	4319      	orrs	r1, r3
    968a:	d100      	bne.n	968e <_vfiprintf_r+0x512>
    968c:	e263      	b.n	9b56 <_vfiprintf_r+0x9da>
    968e:	9a08      	ldr	r2, [sp, #32]
    9690:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9692:	2b00      	cmp	r3, #0
    9694:	d000      	beq.n	9698 <_vfiprintf_r+0x51c>
    9696:	e388      	b.n	9daa <_vfiprintf_r+0xc2e>
    9698:	2a09      	cmp	r2, #9
    969a:	d900      	bls.n	969e <_vfiprintf_r+0x522>
    969c:	e385      	b.n	9daa <_vfiprintf_r+0xc2e>
    969e:	2263      	movs	r2, #99	; 0x63
    96a0:	9b08      	ldr	r3, [sp, #32]
    96a2:	a92f      	add	r1, sp, #188	; 0xbc
    96a4:	3330      	adds	r3, #48	; 0x30
    96a6:	548b      	strb	r3, [r1, r2]
    96a8:	2301      	movs	r3, #1
    96aa:	9305      	str	r3, [sp, #20]
    96ac:	ab12      	add	r3, sp, #72	; 0x48
    96ae:	25d7      	movs	r5, #215	; 0xd7
    96b0:	469c      	mov	ip, r3
    96b2:	46c3      	mov	fp, r8
    96b4:	4465      	add	r5, ip
    96b6:	e7b1      	b.n	961c <_vfiprintf_r+0x4a0>
    96b8:	2380      	movs	r3, #128	; 0x80
    96ba:	431d      	orrs	r5, r3
    96bc:	9b02      	ldr	r3, [sp, #8]
    96be:	781a      	ldrb	r2, [r3, #0]
    96c0:	e5cb      	b.n	925a <_vfiprintf_r+0xde>
    96c2:	9a02      	ldr	r2, [sp, #8]
    96c4:	1c53      	adds	r3, r2, #1
    96c6:	7812      	ldrb	r2, [r2, #0]
    96c8:	2a2a      	cmp	r2, #42	; 0x2a
    96ca:	d101      	bne.n	96d0 <_vfiprintf_r+0x554>
    96cc:	f000 fcb9 	bl	a042 <_vfiprintf_r+0xec6>
    96d0:	0011      	movs	r1, r2
    96d2:	3930      	subs	r1, #48	; 0x30
    96d4:	0018      	movs	r0, r3
    96d6:	2600      	movs	r6, #0
    96d8:	2909      	cmp	r1, #9
    96da:	d900      	bls.n	96de <_vfiprintf_r+0x562>
    96dc:	e5bf      	b.n	925e <_vfiprintf_r+0xe2>
    96de:	46a4      	mov	ip, r4
    96e0:	00b3      	lsls	r3, r6, #2
    96e2:	199e      	adds	r6, r3, r6
    96e4:	0003      	movs	r3, r0
    96e6:	781a      	ldrb	r2, [r3, #0]
    96e8:	0076      	lsls	r6, r6, #1
    96ea:	1876      	adds	r6, r6, r1
    96ec:	0011      	movs	r1, r2
    96ee:	3001      	adds	r0, #1
    96f0:	3930      	subs	r1, #48	; 0x30
    96f2:	0004      	movs	r4, r0
    96f4:	2909      	cmp	r1, #9
    96f6:	d9f3      	bls.n	96e0 <_vfiprintf_r+0x564>
    96f8:	e6e2      	b.n	94c0 <_vfiprintf_r+0x344>
    96fa:	2301      	movs	r3, #1
    96fc:	431d      	orrs	r5, r3
    96fe:	9b02      	ldr	r3, [sp, #8]
    9700:	781a      	ldrb	r2, [r3, #0]
    9702:	e5aa      	b.n	925a <_vfiprintf_r+0xde>
    9704:	ab12      	add	r3, sp, #72	; 0x48
    9706:	7adb      	ldrb	r3, [r3, #11]
    9708:	2b00      	cmp	r3, #0
    970a:	d000      	beq.n	970e <_vfiprintf_r+0x592>
    970c:	e5c5      	b.n	929a <_vfiprintf_r+0x11e>
    970e:	2320      	movs	r3, #32
    9710:	aa12      	add	r2, sp, #72	; 0x48
    9712:	72d3      	strb	r3, [r2, #11]
    9714:	9b02      	ldr	r3, [sp, #8]
    9716:	781a      	ldrb	r2, [r3, #0]
    9718:	e59f      	b.n	925a <_vfiprintf_r+0xde>
    971a:	2310      	movs	r3, #16
    971c:	002a      	movs	r2, r5
    971e:	431a      	orrs	r2, r3
    9720:	46b2      	mov	sl, r6
    9722:	4690      	mov	r8, r2
    9724:	4643      	mov	r3, r8
    9726:	069b      	lsls	r3, r3, #26
    9728:	d400      	bmi.n	972c <_vfiprintf_r+0x5b0>
    972a:	e24e      	b.n	9bca <_vfiprintf_r+0xa4e>
    972c:	2207      	movs	r2, #7
    972e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9730:	3307      	adds	r3, #7
    9732:	4393      	bics	r3, r2
    9734:	0019      	movs	r1, r3
    9736:	c90c      	ldmia	r1!, {r2, r3}
    9738:	9208      	str	r2, [sp, #32]
    973a:	9309      	str	r3, [sp, #36]	; 0x24
    973c:	910a      	str	r1, [sp, #40]	; 0x28
    973e:	2301      	movs	r3, #1
    9740:	e74a      	b.n	95d8 <_vfiprintf_r+0x45c>
    9742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9744:	0029      	movs	r1, r5
    9746:	cb04      	ldmia	r3!, {r2}
    9748:	46b2      	mov	sl, r6
    974a:	9208      	str	r2, [sp, #32]
    974c:	2200      	movs	r2, #0
    974e:	9209      	str	r2, [sp, #36]	; 0x24
    9750:	3202      	adds	r2, #2
    9752:	4311      	orrs	r1, r2
    9754:	4688      	mov	r8, r1
    9756:	930a      	str	r3, [sp, #40]	; 0x28
    9758:	4966      	ldr	r1, [pc, #408]	; (98f4 <_vfiprintf_r+0x778>)
    975a:	4b67      	ldr	r3, [pc, #412]	; (98f8 <_vfiprintf_r+0x77c>)
    975c:	aa15      	add	r2, sp, #84	; 0x54
    975e:	9311      	str	r3, [sp, #68]	; 0x44
    9760:	8011      	strh	r1, [r2, #0]
    9762:	2302      	movs	r3, #2
    9764:	e738      	b.n	95d8 <_vfiprintf_r+0x45c>
    9766:	002b      	movs	r3, r5
    9768:	069b      	lsls	r3, r3, #26
    976a:	d500      	bpl.n	976e <_vfiprintf_r+0x5f2>
    976c:	e27d      	b.n	9c6a <_vfiprintf_r+0xaee>
    976e:	002b      	movs	r3, r5
    9770:	06db      	lsls	r3, r3, #27
    9772:	d500      	bpl.n	9776 <_vfiprintf_r+0x5fa>
    9774:	e395      	b.n	9ea2 <_vfiprintf_r+0xd26>
    9776:	002b      	movs	r3, r5
    9778:	065b      	lsls	r3, r3, #25
    977a:	d501      	bpl.n	9780 <_vfiprintf_r+0x604>
    977c:	f000 fc0e 	bl	9f9c <_vfiprintf_r+0xe20>
    9780:	002b      	movs	r3, r5
    9782:	059b      	lsls	r3, r3, #22
    9784:	d400      	bmi.n	9788 <_vfiprintf_r+0x60c>
    9786:	e38c      	b.n	9ea2 <_vfiprintf_r+0xd26>
    9788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    978a:	9906      	ldr	r1, [sp, #24]
    978c:	cb04      	ldmia	r3!, {r2}
    978e:	7011      	strb	r1, [r2, #0]
    9790:	930a      	str	r3, [sp, #40]	; 0x28
    9792:	e537      	b.n	9204 <_vfiprintf_r+0x88>
    9794:	9b02      	ldr	r3, [sp, #8]
    9796:	781a      	ldrb	r2, [r3, #0]
    9798:	2a6c      	cmp	r2, #108	; 0x6c
    979a:	d100      	bne.n	979e <_vfiprintf_r+0x622>
    979c:	e376      	b.n	9e8c <_vfiprintf_r+0xd10>
    979e:	2310      	movs	r3, #16
    97a0:	431d      	orrs	r5, r3
    97a2:	e55a      	b.n	925a <_vfiprintf_r+0xde>
    97a4:	9b02      	ldr	r3, [sp, #8]
    97a6:	781a      	ldrb	r2, [r3, #0]
    97a8:	2a68      	cmp	r2, #104	; 0x68
    97aa:	d100      	bne.n	97ae <_vfiprintf_r+0x632>
    97ac:	e376      	b.n	9e9c <_vfiprintf_r+0xd20>
    97ae:	2340      	movs	r3, #64	; 0x40
    97b0:	431d      	orrs	r5, r3
    97b2:	e552      	b.n	925a <_vfiprintf_r+0xde>
    97b4:	46d8      	mov	r8, fp
    97b6:	2b01      	cmp	r3, #1
    97b8:	d100      	bne.n	97bc <_vfiprintf_r+0x640>
    97ba:	e768      	b.n	968e <_vfiprintf_r+0x512>
    97bc:	ad48      	add	r5, sp, #288	; 0x120
    97be:	2b02      	cmp	r3, #2
    97c0:	d100      	bne.n	97c4 <_vfiprintf_r+0x648>
    97c2:	e0d0      	b.n	9966 <_vfiprintf_r+0x7ea>
    97c4:	2307      	movs	r3, #7
    97c6:	46a4      	mov	ip, r4
    97c8:	46bb      	mov	fp, r7
    97ca:	4699      	mov	r9, r3
    97cc:	9a08      	ldr	r2, [sp, #32]
    97ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    97d0:	075f      	lsls	r7, r3, #29
    97d2:	08d6      	lsrs	r6, r2, #3
    97d4:	4649      	mov	r1, r9
    97d6:	08d8      	lsrs	r0, r3, #3
    97d8:	4337      	orrs	r7, r6
    97da:	0003      	movs	r3, r0
    97dc:	0038      	movs	r0, r7
    97de:	4011      	ands	r1, r2
    97e0:	002c      	movs	r4, r5
    97e2:	3130      	adds	r1, #48	; 0x30
    97e4:	3d01      	subs	r5, #1
    97e6:	003a      	movs	r2, r7
    97e8:	7029      	strb	r1, [r5, #0]
    97ea:	4318      	orrs	r0, r3
    97ec:	d1f0      	bne.n	97d0 <_vfiprintf_r+0x654>
    97ee:	9208      	str	r2, [sp, #32]
    97f0:	9309      	str	r3, [sp, #36]	; 0x24
    97f2:	4642      	mov	r2, r8
    97f4:	0026      	movs	r6, r4
    97f6:	465f      	mov	r7, fp
    97f8:	4664      	mov	r4, ip
    97fa:	07d2      	lsls	r2, r2, #31
    97fc:	d400      	bmi.n	9800 <_vfiprintf_r+0x684>
    97fe:	e0ca      	b.n	9996 <_vfiprintf_r+0x81a>
    9800:	2930      	cmp	r1, #48	; 0x30
    9802:	d100      	bne.n	9806 <_vfiprintf_r+0x68a>
    9804:	e0c7      	b.n	9996 <_vfiprintf_r+0x81a>
    9806:	2230      	movs	r2, #48	; 0x30
    9808:	3d01      	subs	r5, #1
    980a:	1eb3      	subs	r3, r6, #2
    980c:	702a      	strb	r2, [r5, #0]
    980e:	aa48      	add	r2, sp, #288	; 0x120
    9810:	1ad2      	subs	r2, r2, r3
    9812:	46c3      	mov	fp, r8
    9814:	001d      	movs	r5, r3
    9816:	9205      	str	r2, [sp, #20]
    9818:	e700      	b.n	961c <_vfiprintf_r+0x4a0>
    981a:	2201      	movs	r2, #1
    981c:	9b05      	ldr	r3, [sp, #20]
    981e:	951f      	str	r5, [sp, #124]	; 0x7c
    9820:	9320      	str	r3, [sp, #128]	; 0x80
    9822:	931e      	str	r3, [sp, #120]	; 0x78
    9824:	921d      	str	r2, [sp, #116]	; 0x74
    9826:	ac1f      	add	r4, sp, #124	; 0x7c
    9828:	0022      	movs	r2, r4
    982a:	3208      	adds	r2, #8
    982c:	e615      	b.n	945a <_vfiprintf_r+0x2de>
    982e:	9a07      	ldr	r2, [sp, #28]
    9830:	9e03      	ldr	r6, [sp, #12]
    9832:	1b96      	subs	r6, r2, r6
    9834:	2e00      	cmp	r6, #0
    9836:	dc00      	bgt.n	983a <_vfiprintf_r+0x6be>
    9838:	e5f2      	b.n	9420 <_vfiprintf_r+0x2a4>
    983a:	2e10      	cmp	r6, #16
    983c:	dc00      	bgt.n	9840 <_vfiprintf_r+0x6c4>
    983e:	e3e8      	b.n	a012 <_vfiprintf_r+0xe96>
    9840:	4a2e      	ldr	r2, [pc, #184]	; (98fc <_vfiprintf_r+0x780>)
    9842:	0020      	movs	r0, r4
    9844:	4691      	mov	r9, r2
    9846:	2210      	movs	r2, #16
    9848:	464c      	mov	r4, r9
    984a:	4690      	mov	r8, r2
    984c:	46a9      	mov	r9, r5
    984e:	e005      	b.n	985c <_vfiprintf_r+0x6e0>
    9850:	1c8d      	adds	r5, r1, #2
    9852:	0011      	movs	r1, r2
    9854:	3008      	adds	r0, #8
    9856:	3e10      	subs	r6, #16
    9858:	2e10      	cmp	r6, #16
    985a:	dd1a      	ble.n	9892 <_vfiprintf_r+0x716>
    985c:	4642      	mov	r2, r8
    985e:	3310      	adds	r3, #16
    9860:	6042      	str	r2, [r0, #4]
    9862:	1c4a      	adds	r2, r1, #1
    9864:	6004      	str	r4, [r0, #0]
    9866:	931e      	str	r3, [sp, #120]	; 0x78
    9868:	921d      	str	r2, [sp, #116]	; 0x74
    986a:	2a07      	cmp	r2, #7
    986c:	ddf0      	ble.n	9850 <_vfiprintf_r+0x6d4>
    986e:	2b00      	cmp	r3, #0
    9870:	d100      	bne.n	9874 <_vfiprintf_r+0x6f8>
    9872:	e0a6      	b.n	99c2 <_vfiprintf_r+0x846>
    9874:	0038      	movs	r0, r7
    9876:	9904      	ldr	r1, [sp, #16]
    9878:	aa1c      	add	r2, sp, #112	; 0x70
    987a:	f7ff fc3b 	bl	90f4 <__sprint_r.part.0>
    987e:	2800      	cmp	r0, #0
    9880:	d000      	beq.n	9884 <_vfiprintf_r+0x708>
    9882:	e095      	b.n	99b0 <_vfiprintf_r+0x834>
    9884:	991d      	ldr	r1, [sp, #116]	; 0x74
    9886:	3e10      	subs	r6, #16
    9888:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    988a:	1c4d      	adds	r5, r1, #1
    988c:	a81f      	add	r0, sp, #124	; 0x7c
    988e:	2e10      	cmp	r6, #16
    9890:	dce4      	bgt.n	985c <_vfiprintf_r+0x6e0>
    9892:	46ac      	mov	ip, r5
    9894:	464d      	mov	r5, r9
    9896:	46a1      	mov	r9, r4
    9898:	0004      	movs	r4, r0
    989a:	464a      	mov	r2, r9
    989c:	6022      	str	r2, [r4, #0]
    989e:	4662      	mov	r2, ip
    98a0:	199b      	adds	r3, r3, r6
    98a2:	6066      	str	r6, [r4, #4]
    98a4:	931e      	str	r3, [sp, #120]	; 0x78
    98a6:	921d      	str	r2, [sp, #116]	; 0x74
    98a8:	2a07      	cmp	r2, #7
    98aa:	dc00      	bgt.n	98ae <_vfiprintf_r+0x732>
    98ac:	e1c6      	b.n	9c3c <_vfiprintf_r+0xac0>
    98ae:	2b00      	cmp	r3, #0
    98b0:	d100      	bne.n	98b4 <_vfiprintf_r+0x738>
    98b2:	e360      	b.n	9f76 <_vfiprintf_r+0xdfa>
    98b4:	0038      	movs	r0, r7
    98b6:	9904      	ldr	r1, [sp, #16]
    98b8:	aa1c      	add	r2, sp, #112	; 0x70
    98ba:	f7ff fc1b 	bl	90f4 <__sprint_r.part.0>
    98be:	2800      	cmp	r0, #0
    98c0:	d176      	bne.n	99b0 <_vfiprintf_r+0x834>
    98c2:	4652      	mov	r2, sl
    98c4:	991d      	ldr	r1, [sp, #116]	; 0x74
    98c6:	9e05      	ldr	r6, [sp, #20]
    98c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    98ca:	1c48      	adds	r0, r1, #1
    98cc:	ac1f      	add	r4, sp, #124	; 0x7c
    98ce:	1b96      	subs	r6, r2, r6
    98d0:	2e00      	cmp	r6, #0
    98d2:	dc00      	bgt.n	98d6 <_vfiprintf_r+0x75a>
    98d4:	e5aa      	b.n	942c <_vfiprintf_r+0x2b0>
    98d6:	4a09      	ldr	r2, [pc, #36]	; (98fc <_vfiprintf_r+0x780>)
    98d8:	4691      	mov	r9, r2
    98da:	2e10      	cmp	r6, #16
    98dc:	dd33      	ble.n	9946 <_vfiprintf_r+0x7ca>
    98de:	2210      	movs	r2, #16
    98e0:	4692      	mov	sl, r2
    98e2:	9a04      	ldr	r2, [sp, #16]
    98e4:	0020      	movs	r0, r4
    98e6:	46a8      	mov	r8, r5
    98e8:	464c      	mov	r4, r9
    98ea:	4691      	mov	r9, r2
    98ec:	e00e      	b.n	990c <_vfiprintf_r+0x790>
    98ee:	46c0      	nop			; (mov r8, r8)
    98f0:	fffffbff 	.word	0xfffffbff
    98f4:	00007830 	.word	0x00007830
    98f8:	0000d984 	.word	0x0000d984
    98fc:	0000db1c 	.word	0x0000db1c
    9900:	1c8d      	adds	r5, r1, #2
    9902:	0011      	movs	r1, r2
    9904:	3008      	adds	r0, #8
    9906:	3e10      	subs	r6, #16
    9908:	2e10      	cmp	r6, #16
    990a:	dd18      	ble.n	993e <_vfiprintf_r+0x7c2>
    990c:	4652      	mov	r2, sl
    990e:	3310      	adds	r3, #16
    9910:	6042      	str	r2, [r0, #4]
    9912:	1c4a      	adds	r2, r1, #1
    9914:	6004      	str	r4, [r0, #0]
    9916:	931e      	str	r3, [sp, #120]	; 0x78
    9918:	921d      	str	r2, [sp, #116]	; 0x74
    991a:	2a07      	cmp	r2, #7
    991c:	ddf0      	ble.n	9900 <_vfiprintf_r+0x784>
    991e:	2b00      	cmp	r3, #0
    9920:	d01d      	beq.n	995e <_vfiprintf_r+0x7e2>
    9922:	4649      	mov	r1, r9
    9924:	0038      	movs	r0, r7
    9926:	aa1c      	add	r2, sp, #112	; 0x70
    9928:	f7ff fbe4 	bl	90f4 <__sprint_r.part.0>
    992c:	2800      	cmp	r0, #0
    992e:	d13f      	bne.n	99b0 <_vfiprintf_r+0x834>
    9930:	991d      	ldr	r1, [sp, #116]	; 0x74
    9932:	3e10      	subs	r6, #16
    9934:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9936:	1c4d      	adds	r5, r1, #1
    9938:	a81f      	add	r0, sp, #124	; 0x7c
    993a:	2e10      	cmp	r6, #16
    993c:	dce6      	bgt.n	990c <_vfiprintf_r+0x790>
    993e:	46a1      	mov	r9, r4
    9940:	0004      	movs	r4, r0
    9942:	0028      	movs	r0, r5
    9944:	4645      	mov	r5, r8
    9946:	464a      	mov	r2, r9
    9948:	199b      	adds	r3, r3, r6
    994a:	6022      	str	r2, [r4, #0]
    994c:	6066      	str	r6, [r4, #4]
    994e:	931e      	str	r3, [sp, #120]	; 0x78
    9950:	901d      	str	r0, [sp, #116]	; 0x74
    9952:	2807      	cmp	r0, #7
    9954:	dd00      	ble.n	9958 <_vfiprintf_r+0x7dc>
    9956:	e0ea      	b.n	9b2e <_vfiprintf_r+0x9b2>
    9958:	3408      	adds	r4, #8
    995a:	3001      	adds	r0, #1
    995c:	e566      	b.n	942c <_vfiprintf_r+0x2b0>
    995e:	2501      	movs	r5, #1
    9960:	2100      	movs	r1, #0
    9962:	a81f      	add	r0, sp, #124	; 0x7c
    9964:	e7cf      	b.n	9906 <_vfiprintf_r+0x78a>
    9966:	200f      	movs	r0, #15
    9968:	9a08      	ldr	r2, [sp, #32]
    996a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    996c:	46a4      	mov	ip, r4
    996e:	46b9      	mov	r9, r7
    9970:	9f11      	ldr	r7, [sp, #68]	; 0x44
    9972:	0001      	movs	r1, r0
    9974:	4011      	ands	r1, r2
    9976:	5c79      	ldrb	r1, [r7, r1]
    9978:	071c      	lsls	r4, r3, #28
    997a:	0916      	lsrs	r6, r2, #4
    997c:	3d01      	subs	r5, #1
    997e:	4334      	orrs	r4, r6
    9980:	7029      	strb	r1, [r5, #0]
    9982:	0919      	lsrs	r1, r3, #4
    9984:	000b      	movs	r3, r1
    9986:	0021      	movs	r1, r4
    9988:	0022      	movs	r2, r4
    998a:	4319      	orrs	r1, r3
    998c:	d1f1      	bne.n	9972 <_vfiprintf_r+0x7f6>
    998e:	4664      	mov	r4, ip
    9990:	464f      	mov	r7, r9
    9992:	9208      	str	r2, [sp, #32]
    9994:	9309      	str	r3, [sp, #36]	; 0x24
    9996:	ab48      	add	r3, sp, #288	; 0x120
    9998:	1b5b      	subs	r3, r3, r5
    999a:	46c3      	mov	fp, r8
    999c:	9305      	str	r3, [sp, #20]
    999e:	e63d      	b.n	961c <_vfiprintf_r+0x4a0>
    99a0:	0038      	movs	r0, r7
    99a2:	9904      	ldr	r1, [sp, #16]
    99a4:	aa1c      	add	r2, sp, #112	; 0x70
    99a6:	f7ff fba5 	bl	90f4 <__sprint_r.part.0>
    99aa:	2800      	cmp	r0, #0
    99ac:	d100      	bne.n	99b0 <_vfiprintf_r+0x834>
    99ae:	e56a      	b.n	9486 <_vfiprintf_r+0x30a>
    99b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    99b2:	2b00      	cmp	r3, #0
    99b4:	d100      	bne.n	99b8 <_vfiprintf_r+0x83c>
    99b6:	e4c4      	b.n	9342 <_vfiprintf_r+0x1c6>
    99b8:	0038      	movs	r0, r7
    99ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
    99bc:	f7fd f99f 	bl	6cfe <_free_r>
    99c0:	e4bf      	b.n	9342 <_vfiprintf_r+0x1c6>
    99c2:	2501      	movs	r5, #1
    99c4:	2100      	movs	r1, #0
    99c6:	a81f      	add	r0, sp, #124	; 0x7c
    99c8:	e745      	b.n	9856 <_vfiprintf_r+0x6da>
    99ca:	2b00      	cmp	r3, #0
    99cc:	d100      	bne.n	99d0 <_vfiprintf_r+0x854>
    99ce:	e107      	b.n	9be0 <_vfiprintf_r+0xa64>
    99d0:	0038      	movs	r0, r7
    99d2:	9904      	ldr	r1, [sp, #16]
    99d4:	aa1c      	add	r2, sp, #112	; 0x70
    99d6:	f7ff fb8d 	bl	90f4 <__sprint_r.part.0>
    99da:	2800      	cmp	r0, #0
    99dc:	d1e8      	bne.n	99b0 <_vfiprintf_r+0x834>
    99de:	991d      	ldr	r1, [sp, #116]	; 0x74
    99e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    99e2:	1c48      	adds	r0, r1, #1
    99e4:	ac1f      	add	r4, sp, #124	; 0x7c
    99e6:	e4fa      	b.n	93de <_vfiprintf_r+0x262>
    99e8:	ab15      	add	r3, sp, #84	; 0x54
    99ea:	931f      	str	r3, [sp, #124]	; 0x7c
    99ec:	2302      	movs	r3, #2
    99ee:	2001      	movs	r0, #1
    99f0:	9320      	str	r3, [sp, #128]	; 0x80
    99f2:	ac1f      	add	r4, sp, #124	; 0x7c
    99f4:	0001      	movs	r1, r0
    99f6:	3408      	adds	r4, #8
    99f8:	1c48      	adds	r0, r1, #1
    99fa:	e50d      	b.n	9418 <_vfiprintf_r+0x29c>
    99fc:	2b10      	cmp	r3, #16
    99fe:	dc00      	bgt.n	9a02 <_vfiprintf_r+0x886>
    9a00:	e2fd      	b.n	9ffe <_vfiprintf_r+0xe82>
    9a02:	2210      	movs	r2, #16
    9a04:	0021      	movs	r1, r4
    9a06:	4691      	mov	r9, r2
    9a08:	4644      	mov	r4, r8
    9a0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9a0c:	46a8      	mov	r8, r5
    9a0e:	981d      	ldr	r0, [sp, #116]	; 0x74
    9a10:	4ecc      	ldr	r6, [pc, #816]	; (9d44 <_vfiprintf_r+0xbc8>)
    9a12:	e005      	b.n	9a20 <_vfiprintf_r+0x8a4>
    9a14:	1c85      	adds	r5, r0, #2
    9a16:	0010      	movs	r0, r2
    9a18:	3108      	adds	r1, #8
    9a1a:	3c10      	subs	r4, #16
    9a1c:	2c10      	cmp	r4, #16
    9a1e:	dd18      	ble.n	9a52 <_vfiprintf_r+0x8d6>
    9a20:	464a      	mov	r2, r9
    9a22:	3310      	adds	r3, #16
    9a24:	604a      	str	r2, [r1, #4]
    9a26:	1c42      	adds	r2, r0, #1
    9a28:	600e      	str	r6, [r1, #0]
    9a2a:	931e      	str	r3, [sp, #120]	; 0x78
    9a2c:	921d      	str	r2, [sp, #116]	; 0x74
    9a2e:	2a07      	cmp	r2, #7
    9a30:	ddf0      	ble.n	9a14 <_vfiprintf_r+0x898>
    9a32:	2b00      	cmp	r3, #0
    9a34:	d01e      	beq.n	9a74 <_vfiprintf_r+0x8f8>
    9a36:	0038      	movs	r0, r7
    9a38:	9904      	ldr	r1, [sp, #16]
    9a3a:	aa1c      	add	r2, sp, #112	; 0x70
    9a3c:	f7ff fb5a 	bl	90f4 <__sprint_r.part.0>
    9a40:	2800      	cmp	r0, #0
    9a42:	d1b5      	bne.n	99b0 <_vfiprintf_r+0x834>
    9a44:	981d      	ldr	r0, [sp, #116]	; 0x74
    9a46:	3c10      	subs	r4, #16
    9a48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9a4a:	1c45      	adds	r5, r0, #1
    9a4c:	a91f      	add	r1, sp, #124	; 0x7c
    9a4e:	2c10      	cmp	r4, #16
    9a50:	dce6      	bgt.n	9a20 <_vfiprintf_r+0x8a4>
    9a52:	002a      	movs	r2, r5
    9a54:	4645      	mov	r5, r8
    9a56:	46a0      	mov	r8, r4
    9a58:	000c      	movs	r4, r1
    9a5a:	0011      	movs	r1, r2
    9a5c:	4642      	mov	r2, r8
    9a5e:	4443      	add	r3, r8
    9a60:	6026      	str	r6, [r4, #0]
    9a62:	6062      	str	r2, [r4, #4]
    9a64:	931e      	str	r3, [sp, #120]	; 0x78
    9a66:	911d      	str	r1, [sp, #116]	; 0x74
    9a68:	2907      	cmp	r1, #7
    9a6a:	dd00      	ble.n	9a6e <_vfiprintf_r+0x8f2>
    9a6c:	e0c4      	b.n	9bf8 <_vfiprintf_r+0xa7c>
    9a6e:	3408      	adds	r4, #8
    9a70:	1c48      	adds	r0, r1, #1
    9a72:	e4a0      	b.n	93b6 <_vfiprintf_r+0x23a>
    9a74:	2000      	movs	r0, #0
    9a76:	2501      	movs	r5, #1
    9a78:	a91f      	add	r1, sp, #124	; 0x7c
    9a7a:	e7ce      	b.n	9a1a <_vfiprintf_r+0x89e>
    9a7c:	465a      	mov	r2, fp
    9a7e:	931d      	str	r3, [sp, #116]	; 0x74
    9a80:	0752      	lsls	r2, r2, #29
    9a82:	d549      	bpl.n	9b18 <_vfiprintf_r+0x99c>
    9a84:	9a07      	ldr	r2, [sp, #28]
    9a86:	9903      	ldr	r1, [sp, #12]
    9a88:	1a55      	subs	r5, r2, r1
    9a8a:	2d00      	cmp	r5, #0
    9a8c:	dd44      	ble.n	9b18 <_vfiprintf_r+0x99c>
    9a8e:	aa1f      	add	r2, sp, #124	; 0x7c
    9a90:	2d10      	cmp	r5, #16
    9a92:	dc00      	bgt.n	9a96 <_vfiprintf_r+0x91a>
    9a94:	e2b8      	b.n	a008 <_vfiprintf_r+0xe8c>
    9a96:	9904      	ldr	r1, [sp, #16]
    9a98:	2410      	movs	r4, #16
    9a9a:	4688      	mov	r8, r1
    9a9c:	981d      	ldr	r0, [sp, #116]	; 0x74
    9a9e:	4ea9      	ldr	r6, [pc, #676]	; (9d44 <_vfiprintf_r+0xbc8>)
    9aa0:	e006      	b.n	9ab0 <_vfiprintf_r+0x934>
    9aa2:	3002      	adds	r0, #2
    9aa4:	4684      	mov	ip, r0
    9aa6:	0008      	movs	r0, r1
    9aa8:	3208      	adds	r2, #8
    9aaa:	3d10      	subs	r5, #16
    9aac:	2d10      	cmp	r5, #16
    9aae:	dd19      	ble.n	9ae4 <_vfiprintf_r+0x968>
    9ab0:	3310      	adds	r3, #16
    9ab2:	1c41      	adds	r1, r0, #1
    9ab4:	6016      	str	r6, [r2, #0]
    9ab6:	6054      	str	r4, [r2, #4]
    9ab8:	931e      	str	r3, [sp, #120]	; 0x78
    9aba:	911d      	str	r1, [sp, #116]	; 0x74
    9abc:	2907      	cmp	r1, #7
    9abe:	ddf0      	ble.n	9aa2 <_vfiprintf_r+0x926>
    9ac0:	2b00      	cmp	r3, #0
    9ac2:	d024      	beq.n	9b0e <_vfiprintf_r+0x992>
    9ac4:	4641      	mov	r1, r8
    9ac6:	0038      	movs	r0, r7
    9ac8:	aa1c      	add	r2, sp, #112	; 0x70
    9aca:	f7ff fb13 	bl	90f4 <__sprint_r.part.0>
    9ace:	2800      	cmp	r0, #0
    9ad0:	d000      	beq.n	9ad4 <_vfiprintf_r+0x958>
    9ad2:	e76d      	b.n	99b0 <_vfiprintf_r+0x834>
    9ad4:	981d      	ldr	r0, [sp, #116]	; 0x74
    9ad6:	3d10      	subs	r5, #16
    9ad8:	1c42      	adds	r2, r0, #1
    9ada:	4694      	mov	ip, r2
    9adc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9ade:	aa1f      	add	r2, sp, #124	; 0x7c
    9ae0:	2d10      	cmp	r5, #16
    9ae2:	dce5      	bgt.n	9ab0 <_vfiprintf_r+0x934>
    9ae4:	6016      	str	r6, [r2, #0]
    9ae6:	6055      	str	r5, [r2, #4]
    9ae8:	4662      	mov	r2, ip
    9aea:	195b      	adds	r3, r3, r5
    9aec:	931e      	str	r3, [sp, #120]	; 0x78
    9aee:	921d      	str	r2, [sp, #116]	; 0x74
    9af0:	2a07      	cmp	r2, #7
    9af2:	dc00      	bgt.n	9af6 <_vfiprintf_r+0x97a>
    9af4:	e4ba      	b.n	946c <_vfiprintf_r+0x2f0>
    9af6:	2b00      	cmp	r3, #0
    9af8:	d00e      	beq.n	9b18 <_vfiprintf_r+0x99c>
    9afa:	0038      	movs	r0, r7
    9afc:	9904      	ldr	r1, [sp, #16]
    9afe:	aa1c      	add	r2, sp, #112	; 0x70
    9b00:	f7ff faf8 	bl	90f4 <__sprint_r.part.0>
    9b04:	2800      	cmp	r0, #0
    9b06:	d000      	beq.n	9b0a <_vfiprintf_r+0x98e>
    9b08:	e752      	b.n	99b0 <_vfiprintf_r+0x834>
    9b0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9b0c:	e4ae      	b.n	946c <_vfiprintf_r+0x2f0>
    9b0e:	2201      	movs	r2, #1
    9b10:	2000      	movs	r0, #0
    9b12:	4694      	mov	ip, r2
    9b14:	aa1f      	add	r2, sp, #124	; 0x7c
    9b16:	e7c8      	b.n	9aaa <_vfiprintf_r+0x92e>
    9b18:	9b07      	ldr	r3, [sp, #28]
    9b1a:	9a03      	ldr	r2, [sp, #12]
    9b1c:	4293      	cmp	r3, r2
    9b1e:	da00      	bge.n	9b22 <_vfiprintf_r+0x9a6>
    9b20:	0013      	movs	r3, r2
    9b22:	9a06      	ldr	r2, [sp, #24]
    9b24:	4694      	mov	ip, r2
    9b26:	449c      	add	ip, r3
    9b28:	4663      	mov	r3, ip
    9b2a:	9306      	str	r3, [sp, #24]
    9b2c:	e4ab      	b.n	9486 <_vfiprintf_r+0x30a>
    9b2e:	2b00      	cmp	r3, #0
    9b30:	d100      	bne.n	9b34 <_vfiprintf_r+0x9b8>
    9b32:	e672      	b.n	981a <_vfiprintf_r+0x69e>
    9b34:	0038      	movs	r0, r7
    9b36:	9904      	ldr	r1, [sp, #16]
    9b38:	aa1c      	add	r2, sp, #112	; 0x70
    9b3a:	f7ff fadb 	bl	90f4 <__sprint_r.part.0>
    9b3e:	2800      	cmp	r0, #0
    9b40:	d000      	beq.n	9b44 <_vfiprintf_r+0x9c8>
    9b42:	e735      	b.n	99b0 <_vfiprintf_r+0x834>
    9b44:	981d      	ldr	r0, [sp, #116]	; 0x74
    9b46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9b48:	3001      	adds	r0, #1
    9b4a:	ac1f      	add	r4, sp, #124	; 0x7c
    9b4c:	e46e      	b.n	942c <_vfiprintf_r+0x2b0>
    9b4e:	921d      	str	r2, [sp, #116]	; 0x74
    9b50:	ac1f      	add	r4, sp, #124	; 0x7c
    9b52:	f7ff fbec 	bl	932e <_vfiprintf_r+0x1b2>
    9b56:	4653      	mov	r3, sl
    9b58:	2b00      	cmp	r3, #0
    9b5a:	d000      	beq.n	9b5e <_vfiprintf_r+0x9e2>
    9b5c:	e59f      	b.n	969e <_vfiprintf_r+0x522>
    9b5e:	46c3      	mov	fp, r8
    9b60:	2300      	movs	r3, #0
    9b62:	ad48      	add	r5, sp, #288	; 0x120
    9b64:	469a      	mov	sl, r3
    9b66:	9305      	str	r3, [sp, #20]
    9b68:	e558      	b.n	961c <_vfiprintf_r+0x4a0>
    9b6a:	465b      	mov	r3, fp
    9b6c:	06db      	lsls	r3, r3, #27
    9b6e:	d400      	bmi.n	9b72 <_vfiprintf_r+0x9f6>
    9b70:	e08c      	b.n	9c8c <_vfiprintf_r+0xb10>
    9b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9b74:	ca08      	ldmia	r2!, {r3}
    9b76:	9308      	str	r3, [sp, #32]
    9b78:	17db      	asrs	r3, r3, #31
    9b7a:	9309      	str	r3, [sp, #36]	; 0x24
    9b7c:	920a      	str	r2, [sp, #40]	; 0x28
    9b7e:	d400      	bmi.n	9b82 <_vfiprintf_r+0xa06>
    9b80:	e577      	b.n	9672 <_vfiprintf_r+0x4f6>
    9b82:	9808      	ldr	r0, [sp, #32]
    9b84:	9909      	ldr	r1, [sp, #36]	; 0x24
    9b86:	2300      	movs	r3, #0
    9b88:	4242      	negs	r2, r0
    9b8a:	418b      	sbcs	r3, r1
    9b8c:	46d8      	mov	r8, fp
    9b8e:	9208      	str	r2, [sp, #32]
    9b90:	9309      	str	r3, [sp, #36]	; 0x24
    9b92:	222d      	movs	r2, #45	; 0x2d
    9b94:	2301      	movs	r3, #1
    9b96:	e520      	b.n	95da <_vfiprintf_r+0x45e>
    9b98:	465b      	mov	r3, fp
    9b9a:	06db      	lsls	r3, r3, #27
    9b9c:	d40e      	bmi.n	9bbc <_vfiprintf_r+0xa40>
    9b9e:	465b      	mov	r3, fp
    9ba0:	065b      	lsls	r3, r3, #25
    9ba2:	d507      	bpl.n	9bb4 <_vfiprintf_r+0xa38>
    9ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9ba6:	cb04      	ldmia	r3!, {r2}
    9ba8:	b292      	uxth	r2, r2
    9baa:	9208      	str	r2, [sp, #32]
    9bac:	2200      	movs	r2, #0
    9bae:	930a      	str	r3, [sp, #40]	; 0x28
    9bb0:	9209      	str	r2, [sp, #36]	; 0x24
    9bb2:	e50c      	b.n	95ce <_vfiprintf_r+0x452>
    9bb4:	465b      	mov	r3, fp
    9bb6:	059b      	lsls	r3, r3, #22
    9bb8:	d500      	bpl.n	9bbc <_vfiprintf_r+0xa40>
    9bba:	e1fe      	b.n	9fba <_vfiprintf_r+0xe3e>
    9bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9bbe:	cb04      	ldmia	r3!, {r2}
    9bc0:	9208      	str	r2, [sp, #32]
    9bc2:	2200      	movs	r2, #0
    9bc4:	930a      	str	r3, [sp, #40]	; 0x28
    9bc6:	9209      	str	r2, [sp, #36]	; 0x24
    9bc8:	e501      	b.n	95ce <_vfiprintf_r+0x452>
    9bca:	4643      	mov	r3, r8
    9bcc:	06db      	lsls	r3, r3, #27
    9bce:	d555      	bpl.n	9c7c <_vfiprintf_r+0xb00>
    9bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9bd2:	cb04      	ldmia	r3!, {r2}
    9bd4:	9208      	str	r2, [sp, #32]
    9bd6:	2200      	movs	r2, #0
    9bd8:	930a      	str	r3, [sp, #40]	; 0x28
    9bda:	9209      	str	r2, [sp, #36]	; 0x24
    9bdc:	2301      	movs	r3, #1
    9bde:	e4fb      	b.n	95d8 <_vfiprintf_r+0x45c>
    9be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9be2:	2a00      	cmp	r2, #0
    9be4:	d15e      	bne.n	9ca4 <_vfiprintf_r+0xb28>
    9be6:	2100      	movs	r1, #0
    9be8:	2001      	movs	r0, #1
    9bea:	ac1f      	add	r4, sp, #124	; 0x7c
    9bec:	e414      	b.n	9418 <_vfiprintf_r+0x29c>
    9bee:	2001      	movs	r0, #1
    9bf0:	2100      	movs	r1, #0
    9bf2:	ac1f      	add	r4, sp, #124	; 0x7c
    9bf4:	f7ff fc10 	bl	9418 <_vfiprintf_r+0x29c>
    9bf8:	2b00      	cmp	r3, #0
    9bfa:	d100      	bne.n	9bfe <_vfiprintf_r+0xa82>
    9bfc:	e093      	b.n	9d26 <_vfiprintf_r+0xbaa>
    9bfe:	0038      	movs	r0, r7
    9c00:	9904      	ldr	r1, [sp, #16]
    9c02:	aa1c      	add	r2, sp, #112	; 0x70
    9c04:	f7ff fa76 	bl	90f4 <__sprint_r.part.0>
    9c08:	2800      	cmp	r0, #0
    9c0a:	d000      	beq.n	9c0e <_vfiprintf_r+0xa92>
    9c0c:	e6d0      	b.n	99b0 <_vfiprintf_r+0x834>
    9c0e:	991d      	ldr	r1, [sp, #116]	; 0x74
    9c10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9c12:	1c48      	adds	r0, r1, #1
    9c14:	ac1f      	add	r4, sp, #124	; 0x7c
    9c16:	f7ff fbce 	bl	93b6 <_vfiprintf_r+0x23a>
    9c1a:	46ab      	mov	fp, r5
    9c1c:	46b2      	mov	sl, r6
    9c1e:	e514      	b.n	964a <_vfiprintf_r+0x4ce>
    9c20:	9a02      	ldr	r2, [sp, #8]
    9c22:	930a      	str	r3, [sp, #40]	; 0x28
    9c24:	7812      	ldrb	r2, [r2, #0]
    9c26:	f7ff fb18 	bl	925a <_vfiprintf_r+0xde>
    9c2a:	2130      	movs	r1, #48	; 0x30
    9c2c:	3362      	adds	r3, #98	; 0x62
    9c2e:	aa2f      	add	r2, sp, #188	; 0xbc
    9c30:	54d1      	strb	r1, [r2, r3]
    9c32:	ab12      	add	r3, sp, #72	; 0x48
    9c34:	25d7      	movs	r5, #215	; 0xd7
    9c36:	469c      	mov	ip, r3
    9c38:	4465      	add	r5, ip
    9c3a:	e4ef      	b.n	961c <_vfiprintf_r+0x4a0>
    9c3c:	4661      	mov	r1, ip
    9c3e:	3408      	adds	r4, #8
    9c40:	1c50      	adds	r0, r2, #1
    9c42:	f7ff fbed 	bl	9420 <_vfiprintf_r+0x2a4>
    9c46:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9c48:	2b00      	cmp	r3, #0
    9c4a:	d101      	bne.n	9c50 <_vfiprintf_r+0xad4>
    9c4c:	f7ff fb25 	bl	929a <_vfiprintf_r+0x11e>
    9c50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9c52:	781b      	ldrb	r3, [r3, #0]
    9c54:	2b00      	cmp	r3, #0
    9c56:	d101      	bne.n	9c5c <_vfiprintf_r+0xae0>
    9c58:	f7ff fb1f 	bl	929a <_vfiprintf_r+0x11e>
    9c5c:	2380      	movs	r3, #128	; 0x80
    9c5e:	00db      	lsls	r3, r3, #3
    9c60:	431d      	orrs	r5, r3
    9c62:	9b02      	ldr	r3, [sp, #8]
    9c64:	781a      	ldrb	r2, [r3, #0]
    9c66:	f7ff faf8 	bl	925a <_vfiprintf_r+0xde>
    9c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9c6c:	9906      	ldr	r1, [sp, #24]
    9c6e:	cb04      	ldmia	r3!, {r2}
    9c70:	6011      	str	r1, [r2, #0]
    9c72:	17c9      	asrs	r1, r1, #31
    9c74:	6051      	str	r1, [r2, #4]
    9c76:	930a      	str	r3, [sp, #40]	; 0x28
    9c78:	f7ff fac4 	bl	9204 <_vfiprintf_r+0x88>
    9c7c:	4643      	mov	r3, r8
    9c7e:	065b      	lsls	r3, r3, #25
    9c80:	d400      	bmi.n	9c84 <_vfiprintf_r+0xb08>
    9c82:	e11f      	b.n	9ec4 <_vfiprintf_r+0xd48>
    9c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9c86:	cb04      	ldmia	r3!, {r2}
    9c88:	b292      	uxth	r2, r2
    9c8a:	e7a3      	b.n	9bd4 <_vfiprintf_r+0xa58>
    9c8c:	465b      	mov	r3, fp
    9c8e:	065b      	lsls	r3, r3, #25
    9c90:	d400      	bmi.n	9c94 <_vfiprintf_r+0xb18>
    9c92:	e11f      	b.n	9ed4 <_vfiprintf_r+0xd58>
    9c94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9c96:	ca08      	ldmia	r2!, {r3}
    9c98:	b21b      	sxth	r3, r3
    9c9a:	9308      	str	r3, [sp, #32]
    9c9c:	17db      	asrs	r3, r3, #31
    9c9e:	9309      	str	r3, [sp, #36]	; 0x24
    9ca0:	920a      	str	r2, [sp, #40]	; 0x28
    9ca2:	e4e3      	b.n	966c <_vfiprintf_r+0x4f0>
    9ca4:	ab15      	add	r3, sp, #84	; 0x54
    9ca6:	931f      	str	r3, [sp, #124]	; 0x7c
    9ca8:	2302      	movs	r3, #2
    9caa:	2101      	movs	r1, #1
    9cac:	9320      	str	r3, [sp, #128]	; 0x80
    9cae:	ac1f      	add	r4, sp, #124	; 0x7c
    9cb0:	e6a1      	b.n	99f6 <_vfiprintf_r+0x87a>
    9cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9cb4:	ad2f      	add	r5, sp, #188	; 0xbc
    9cb6:	cb04      	ldmia	r3!, {r2}
    9cb8:	930a      	str	r3, [sp, #40]	; 0x28
    9cba:	2301      	movs	r3, #1
    9cbc:	702a      	strb	r2, [r5, #0]
    9cbe:	9303      	str	r3, [sp, #12]
    9cc0:	9305      	str	r3, [sp, #20]
    9cc2:	e459      	b.n	9578 <_vfiprintf_r+0x3fc>
    9cc4:	46b2      	mov	sl, r6
    9cc6:	46a8      	mov	r8, r5
    9cc8:	e52c      	b.n	9724 <_vfiprintf_r+0x5a8>
    9cca:	46ab      	mov	fp, r5
    9ccc:	46b2      	mov	sl, r6
    9cce:	4b1e      	ldr	r3, [pc, #120]	; (9d48 <_vfiprintf_r+0xbcc>)
    9cd0:	9311      	str	r3, [sp, #68]	; 0x44
    9cd2:	465b      	mov	r3, fp
    9cd4:	069b      	lsls	r3, r3, #26
    9cd6:	d400      	bmi.n	9cda <_vfiprintf_r+0xb5e>
    9cd8:	e0b9      	b.n	9e4e <_vfiprintf_r+0xcd2>
    9cda:	2107      	movs	r1, #7
    9cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9cde:	3307      	adds	r3, #7
    9ce0:	438b      	bics	r3, r1
    9ce2:	cb03      	ldmia	r3!, {r0, r1}
    9ce4:	9008      	str	r0, [sp, #32]
    9ce6:	9109      	str	r1, [sp, #36]	; 0x24
    9ce8:	930a      	str	r3, [sp, #40]	; 0x28
    9cea:	465b      	mov	r3, fp
    9cec:	07db      	lsls	r3, r3, #31
    9cee:	d50c      	bpl.n	9d0a <_vfiprintf_r+0xb8e>
    9cf0:	9808      	ldr	r0, [sp, #32]
    9cf2:	9909      	ldr	r1, [sp, #36]	; 0x24
    9cf4:	0003      	movs	r3, r0
    9cf6:	430b      	orrs	r3, r1
    9cf8:	d007      	beq.n	9d0a <_vfiprintf_r+0xb8e>
    9cfa:	2130      	movs	r1, #48	; 0x30
    9cfc:	ab15      	add	r3, sp, #84	; 0x54
    9cfe:	705a      	strb	r2, [r3, #1]
    9d00:	7019      	strb	r1, [r3, #0]
    9d02:	465a      	mov	r2, fp
    9d04:	2302      	movs	r3, #2
    9d06:	431a      	orrs	r2, r3
    9d08:	4693      	mov	fp, r2
    9d0a:	465a      	mov	r2, fp
    9d0c:	4b0f      	ldr	r3, [pc, #60]	; (9d4c <_vfiprintf_r+0xbd0>)
    9d0e:	401a      	ands	r2, r3
    9d10:	4690      	mov	r8, r2
    9d12:	2302      	movs	r3, #2
    9d14:	e460      	b.n	95d8 <_vfiprintf_r+0x45c>
    9d16:	4b0e      	ldr	r3, [pc, #56]	; (9d50 <_vfiprintf_r+0xbd4>)
    9d18:	46ab      	mov	fp, r5
    9d1a:	46b2      	mov	sl, r6
    9d1c:	9311      	str	r3, [sp, #68]	; 0x44
    9d1e:	e7d8      	b.n	9cd2 <_vfiprintf_r+0xb56>
    9d20:	46ab      	mov	fp, r5
    9d22:	46b2      	mov	sl, r6
    9d24:	e446      	b.n	95b4 <_vfiprintf_r+0x438>
    9d26:	aa12      	add	r2, sp, #72	; 0x48
    9d28:	7ad2      	ldrb	r2, [r2, #11]
    9d2a:	2a00      	cmp	r2, #0
    9d2c:	d000      	beq.n	9d30 <_vfiprintf_r+0xbb4>
    9d2e:	e12a      	b.n	9f86 <_vfiprintf_r+0xe0a>
    9d30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9d32:	2a00      	cmp	r2, #0
    9d34:	d000      	beq.n	9d38 <_vfiprintf_r+0xbbc>
    9d36:	e657      	b.n	99e8 <_vfiprintf_r+0x86c>
    9d38:	2100      	movs	r1, #0
    9d3a:	2001      	movs	r0, #1
    9d3c:	ac1f      	add	r4, sp, #124	; 0x7c
    9d3e:	f7ff fb6f 	bl	9420 <_vfiprintf_r+0x2a4>
    9d42:	46c0      	nop			; (mov r8, r8)
    9d44:	0000db0c 	.word	0x0000db0c
    9d48:	0000d984 	.word	0x0000d984
    9d4c:	fffffbff 	.word	0xfffffbff
    9d50:	0000d970 	.word	0x0000d970
    9d54:	2208      	movs	r2, #8
    9d56:	2100      	movs	r1, #0
    9d58:	a81a      	add	r0, sp, #104	; 0x68
    9d5a:	9517      	str	r5, [sp, #92]	; 0x5c
    9d5c:	f7ff f8d8 	bl	8f10 <memset>
    9d60:	4653      	mov	r3, sl
    9d62:	3301      	adds	r3, #1
    9d64:	d100      	bne.n	9d68 <_vfiprintf_r+0xbec>
    9d66:	e0c2      	b.n	9eee <_vfiprintf_r+0xd72>
    9d68:	2300      	movs	r3, #0
    9d6a:	46a1      	mov	r9, r4
    9d6c:	46a8      	mov	r8, r5
    9d6e:	001c      	movs	r4, r3
    9d70:	4655      	mov	r5, sl
    9d72:	46b2      	mov	sl, r6
    9d74:	001e      	movs	r6, r3
    9d76:	e00f      	b.n	9d98 <_vfiprintf_r+0xc1c>
    9d78:	ab1a      	add	r3, sp, #104	; 0x68
    9d7a:	0038      	movs	r0, r7
    9d7c:	a92f      	add	r1, sp, #188	; 0xbc
    9d7e:	f000 f9bb 	bl	a0f8 <_wcrtomb_r>
    9d82:	1c43      	adds	r3, r0, #1
    9d84:	d100      	bne.n	9d88 <_vfiprintf_r+0xc0c>
    9d86:	e14d      	b.n	a024 <_vfiprintf_r+0xea8>
    9d88:	1830      	adds	r0, r6, r0
    9d8a:	42a8      	cmp	r0, r5
    9d8c:	dc08      	bgt.n	9da0 <_vfiprintf_r+0xc24>
    9d8e:	3404      	adds	r4, #4
    9d90:	42a8      	cmp	r0, r5
    9d92:	d100      	bne.n	9d96 <_vfiprintf_r+0xc1a>
    9d94:	e14e      	b.n	a034 <_vfiprintf_r+0xeb8>
    9d96:	0006      	movs	r6, r0
    9d98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9d9a:	591a      	ldr	r2, [r3, r4]
    9d9c:	2a00      	cmp	r2, #0
    9d9e:	d1eb      	bne.n	9d78 <_vfiprintf_r+0xbfc>
    9da0:	9605      	str	r6, [sp, #20]
    9da2:	4645      	mov	r5, r8
    9da4:	464c      	mov	r4, r9
    9da6:	4656      	mov	r6, sl
    9da8:	e0af      	b.n	9f0a <_vfiprintf_r+0xd8e>
    9daa:	2380      	movs	r3, #128	; 0x80
    9dac:	4642      	mov	r2, r8
    9dae:	00db      	lsls	r3, r3, #3
    9db0:	401a      	ands	r2, r3
    9db2:	4643      	mov	r3, r8
    9db4:	2600      	movs	r6, #0
    9db6:	9305      	str	r3, [sp, #20]
    9db8:	4653      	mov	r3, sl
    9dba:	46b1      	mov	r9, r6
    9dbc:	46bb      	mov	fp, r7
    9dbe:	9e08      	ldr	r6, [sp, #32]
    9dc0:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9dc2:	46a2      	mov	sl, r4
    9dc4:	9203      	str	r2, [sp, #12]
    9dc6:	ad48      	add	r5, sp, #288	; 0x120
    9dc8:	930b      	str	r3, [sp, #44]	; 0x2c
    9dca:	e004      	b.n	9dd6 <_vfiprintf_r+0xc5a>
    9dcc:	2f00      	cmp	r7, #0
    9dce:	d100      	bne.n	9dd2 <_vfiprintf_r+0xc56>
    9dd0:	e0c6      	b.n	9f60 <_vfiprintf_r+0xde4>
    9dd2:	0026      	movs	r6, r4
    9dd4:	4647      	mov	r7, r8
    9dd6:	220a      	movs	r2, #10
    9dd8:	2300      	movs	r3, #0
    9dda:	0030      	movs	r0, r6
    9ddc:	0039      	movs	r1, r7
    9dde:	f001 f9d5 	bl	b18c <__aeabi_uldivmod>
    9de2:	2301      	movs	r3, #1
    9de4:	469c      	mov	ip, r3
    9de6:	9b03      	ldr	r3, [sp, #12]
    9de8:	3d01      	subs	r5, #1
    9dea:	3230      	adds	r2, #48	; 0x30
    9dec:	0004      	movs	r4, r0
    9dee:	4688      	mov	r8, r1
    9df0:	702a      	strb	r2, [r5, #0]
    9df2:	44e1      	add	r9, ip
    9df4:	2b00      	cmp	r3, #0
    9df6:	d0e9      	beq.n	9dcc <_vfiprintf_r+0xc50>
    9df8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9dfa:	781b      	ldrb	r3, [r3, #0]
    9dfc:	454b      	cmp	r3, r9
    9dfe:	d1e5      	bne.n	9dcc <_vfiprintf_r+0xc50>
    9e00:	464b      	mov	r3, r9
    9e02:	2bff      	cmp	r3, #255	; 0xff
    9e04:	d0e2      	beq.n	9dcc <_vfiprintf_r+0xc50>
    9e06:	2f00      	cmp	r7, #0
    9e08:	d10f      	bne.n	9e2a <_vfiprintf_r+0xcae>
    9e0a:	2e09      	cmp	r6, #9
    9e0c:	d80d      	bhi.n	9e2a <_vfiprintf_r+0xcae>
    9e0e:	9b05      	ldr	r3, [sp, #20]
    9e10:	4654      	mov	r4, sl
    9e12:	4698      	mov	r8, r3
    9e14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9e16:	9608      	str	r6, [sp, #32]
    9e18:	9709      	str	r7, [sp, #36]	; 0x24
    9e1a:	469a      	mov	sl, r3
    9e1c:	ab48      	add	r3, sp, #288	; 0x120
    9e1e:	1b5b      	subs	r3, r3, r5
    9e20:	465f      	mov	r7, fp
    9e22:	9305      	str	r3, [sp, #20]
    9e24:	46c3      	mov	fp, r8
    9e26:	f7ff fbf9 	bl	961c <_vfiprintf_r+0x4a0>
    9e2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9e2c:	9912      	ldr	r1, [sp, #72]	; 0x48
    9e2e:	1aed      	subs	r5, r5, r3
    9e30:	001a      	movs	r2, r3
    9e32:	0028      	movs	r0, r5
    9e34:	f7ff f928 	bl	9088 <strncpy>
    9e38:	9910      	ldr	r1, [sp, #64]	; 0x40
    9e3a:	784b      	ldrb	r3, [r1, #1]
    9e3c:	468c      	mov	ip, r1
    9e3e:	1e5a      	subs	r2, r3, #1
    9e40:	4193      	sbcs	r3, r2
    9e42:	449c      	add	ip, r3
    9e44:	4663      	mov	r3, ip
    9e46:	9310      	str	r3, [sp, #64]	; 0x40
    9e48:	2300      	movs	r3, #0
    9e4a:	4699      	mov	r9, r3
    9e4c:	e7c1      	b.n	9dd2 <_vfiprintf_r+0xc56>
    9e4e:	465b      	mov	r3, fp
    9e50:	06db      	lsls	r3, r3, #27
    9e52:	d40e      	bmi.n	9e72 <_vfiprintf_r+0xcf6>
    9e54:	465b      	mov	r3, fp
    9e56:	065b      	lsls	r3, r3, #25
    9e58:	d507      	bpl.n	9e6a <_vfiprintf_r+0xcee>
    9e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e5c:	cb02      	ldmia	r3!, {r1}
    9e5e:	b289      	uxth	r1, r1
    9e60:	9108      	str	r1, [sp, #32]
    9e62:	2100      	movs	r1, #0
    9e64:	930a      	str	r3, [sp, #40]	; 0x28
    9e66:	9109      	str	r1, [sp, #36]	; 0x24
    9e68:	e73f      	b.n	9cea <_vfiprintf_r+0xb6e>
    9e6a:	465b      	mov	r3, fp
    9e6c:	059b      	lsls	r3, r3, #22
    9e6e:	d500      	bpl.n	9e72 <_vfiprintf_r+0xcf6>
    9e70:	e09b      	b.n	9faa <_vfiprintf_r+0xe2e>
    9e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e74:	cb02      	ldmia	r3!, {r1}
    9e76:	9108      	str	r1, [sp, #32]
    9e78:	2100      	movs	r1, #0
    9e7a:	930a      	str	r3, [sp, #40]	; 0x28
    9e7c:	9109      	str	r1, [sp, #36]	; 0x24
    9e7e:	e734      	b.n	9cea <_vfiprintf_r+0xb6e>
    9e80:	46d8      	mov	r8, fp
    9e82:	2b01      	cmp	r3, #1
    9e84:	d000      	beq.n	9e88 <_vfiprintf_r+0xd0c>
    9e86:	e499      	b.n	97bc <_vfiprintf_r+0x640>
    9e88:	f7ff fc09 	bl	969e <_vfiprintf_r+0x522>
    9e8c:	2320      	movs	r3, #32
    9e8e:	431d      	orrs	r5, r3
    9e90:	9b02      	ldr	r3, [sp, #8]
    9e92:	785a      	ldrb	r2, [r3, #1]
    9e94:	3301      	adds	r3, #1
    9e96:	9302      	str	r3, [sp, #8]
    9e98:	f7ff f9df 	bl	925a <_vfiprintf_r+0xde>
    9e9c:	2380      	movs	r3, #128	; 0x80
    9e9e:	009b      	lsls	r3, r3, #2
    9ea0:	e7f5      	b.n	9e8e <_vfiprintf_r+0xd12>
    9ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9ea4:	9906      	ldr	r1, [sp, #24]
    9ea6:	cb04      	ldmia	r3!, {r2}
    9ea8:	6011      	str	r1, [r2, #0]
    9eaa:	930a      	str	r3, [sp, #40]	; 0x28
    9eac:	f7ff f9aa 	bl	9204 <_vfiprintf_r+0x88>
    9eb0:	4653      	mov	r3, sl
    9eb2:	9305      	str	r3, [sp, #20]
    9eb4:	2b06      	cmp	r3, #6
    9eb6:	d863      	bhi.n	9f80 <_vfiprintf_r+0xe04>
    9eb8:	9b05      	ldr	r3, [sp, #20]
    9eba:	4d6f      	ldr	r5, [pc, #444]	; (a078 <_vfiprintf_r+0xefc>)
    9ebc:	9303      	str	r3, [sp, #12]
    9ebe:	960a      	str	r6, [sp, #40]	; 0x28
    9ec0:	f7ff fa5b 	bl	937a <_vfiprintf_r+0x1fe>
    9ec4:	4643      	mov	r3, r8
    9ec6:	059b      	lsls	r3, r3, #22
    9ec8:	d400      	bmi.n	9ecc <_vfiprintf_r+0xd50>
    9eca:	e681      	b.n	9bd0 <_vfiprintf_r+0xa54>
    9ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9ece:	cb04      	ldmia	r3!, {r2}
    9ed0:	b2d2      	uxtb	r2, r2
    9ed2:	e67f      	b.n	9bd4 <_vfiprintf_r+0xa58>
    9ed4:	465b      	mov	r3, fp
    9ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9ed8:	059b      	lsls	r3, r3, #22
    9eda:	d400      	bmi.n	9ede <_vfiprintf_r+0xd62>
    9edc:	e64a      	b.n	9b74 <_vfiprintf_r+0x9f8>
    9ede:	ca08      	ldmia	r2!, {r3}
    9ee0:	b25b      	sxtb	r3, r3
    9ee2:	9308      	str	r3, [sp, #32]
    9ee4:	17db      	asrs	r3, r3, #31
    9ee6:	9309      	str	r3, [sp, #36]	; 0x24
    9ee8:	920a      	str	r2, [sp, #40]	; 0x28
    9eea:	f7ff fbbf 	bl	966c <_vfiprintf_r+0x4f0>
    9eee:	ab1a      	add	r3, sp, #104	; 0x68
    9ef0:	9300      	str	r3, [sp, #0]
    9ef2:	2100      	movs	r1, #0
    9ef4:	2300      	movs	r3, #0
    9ef6:	0038      	movs	r0, r7
    9ef8:	aa17      	add	r2, sp, #92	; 0x5c
    9efa:	f000 f925 	bl	a148 <_wcsrtombs_r>
    9efe:	0003      	movs	r3, r0
    9f00:	9005      	str	r0, [sp, #20]
    9f02:	3301      	adds	r3, #1
    9f04:	d100      	bne.n	9f08 <_vfiprintf_r+0xd8c>
    9f06:	e08d      	b.n	a024 <_vfiprintf_r+0xea8>
    9f08:	9517      	str	r5, [sp, #92]	; 0x5c
    9f0a:	9b05      	ldr	r3, [sp, #20]
    9f0c:	2b00      	cmp	r3, #0
    9f0e:	d02b      	beq.n	9f68 <_vfiprintf_r+0xdec>
    9f10:	2b63      	cmp	r3, #99	; 0x63
    9f12:	dd62      	ble.n	9fda <_vfiprintf_r+0xe5e>
    9f14:	0038      	movs	r0, r7
    9f16:	1c59      	adds	r1, r3, #1
    9f18:	f7fc fec2 	bl	6ca0 <_malloc_r>
    9f1c:	1e05      	subs	r5, r0, #0
    9f1e:	d100      	bne.n	9f22 <_vfiprintf_r+0xda6>
    9f20:	e0a1      	b.n	a066 <_vfiprintf_r+0xeea>
    9f22:	900b      	str	r0, [sp, #44]	; 0x2c
    9f24:	2208      	movs	r2, #8
    9f26:	2100      	movs	r1, #0
    9f28:	a81a      	add	r0, sp, #104	; 0x68
    9f2a:	f7fe fff1 	bl	8f10 <memset>
    9f2e:	ab1a      	add	r3, sp, #104	; 0x68
    9f30:	9300      	str	r3, [sp, #0]
    9f32:	9b05      	ldr	r3, [sp, #20]
    9f34:	0029      	movs	r1, r5
    9f36:	4698      	mov	r8, r3
    9f38:	0038      	movs	r0, r7
    9f3a:	aa17      	add	r2, sp, #92	; 0x5c
    9f3c:	f000 f904 	bl	a148 <_wcsrtombs_r>
    9f40:	4643      	mov	r3, r8
    9f42:	4283      	cmp	r3, r0
    9f44:	d000      	beq.n	9f48 <_vfiprintf_r+0xdcc>
    9f46:	e088      	b.n	a05a <_vfiprintf_r+0xede>
    9f48:	2300      	movs	r3, #0
    9f4a:	9a05      	ldr	r2, [sp, #20]
    9f4c:	960a      	str	r6, [sp, #40]	; 0x28
    9f4e:	54ab      	strb	r3, [r5, r2]
    9f50:	43d3      	mvns	r3, r2
    9f52:	17db      	asrs	r3, r3, #31
    9f54:	401a      	ands	r2, r3
    9f56:	2300      	movs	r3, #0
    9f58:	9203      	str	r2, [sp, #12]
    9f5a:	469a      	mov	sl, r3
    9f5c:	f7ff fb66 	bl	962c <_vfiprintf_r+0x4b0>
    9f60:	2e09      	cmp	r6, #9
    9f62:	d900      	bls.n	9f66 <_vfiprintf_r+0xdea>
    9f64:	e735      	b.n	9dd2 <_vfiprintf_r+0xc56>
    9f66:	e752      	b.n	9e0e <_vfiprintf_r+0xc92>
    9f68:	2300      	movs	r3, #0
    9f6a:	960a      	str	r6, [sp, #40]	; 0x28
    9f6c:	469a      	mov	sl, r3
    9f6e:	9303      	str	r3, [sp, #12]
    9f70:	930b      	str	r3, [sp, #44]	; 0x2c
    9f72:	f7ff fb5b 	bl	962c <_vfiprintf_r+0x4b0>
    9f76:	2001      	movs	r0, #1
    9f78:	2100      	movs	r1, #0
    9f7a:	ac1f      	add	r4, sp, #124	; 0x7c
    9f7c:	f7ff fa50 	bl	9420 <_vfiprintf_r+0x2a4>
    9f80:	2306      	movs	r3, #6
    9f82:	9305      	str	r3, [sp, #20]
    9f84:	e798      	b.n	9eb8 <_vfiprintf_r+0xd3c>
    9f86:	aa12      	add	r2, sp, #72	; 0x48
    9f88:	230b      	movs	r3, #11
    9f8a:	4694      	mov	ip, r2
    9f8c:	4463      	add	r3, ip
    9f8e:	931f      	str	r3, [sp, #124]	; 0x7c
    9f90:	2301      	movs	r3, #1
    9f92:	2001      	movs	r0, #1
    9f94:	9320      	str	r3, [sp, #128]	; 0x80
    9f96:	ac1f      	add	r4, sp, #124	; 0x7c
    9f98:	f7ff fa1e 	bl	93d8 <_vfiprintf_r+0x25c>
    9f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9f9e:	9906      	ldr	r1, [sp, #24]
    9fa0:	cb04      	ldmia	r3!, {r2}
    9fa2:	8011      	strh	r1, [r2, #0]
    9fa4:	930a      	str	r3, [sp, #40]	; 0x28
    9fa6:	f7ff f92d 	bl	9204 <_vfiprintf_r+0x88>
    9faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9fac:	cb02      	ldmia	r3!, {r1}
    9fae:	b2c9      	uxtb	r1, r1
    9fb0:	9108      	str	r1, [sp, #32]
    9fb2:	2100      	movs	r1, #0
    9fb4:	930a      	str	r3, [sp, #40]	; 0x28
    9fb6:	9109      	str	r1, [sp, #36]	; 0x24
    9fb8:	e697      	b.n	9cea <_vfiprintf_r+0xb6e>
    9fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9fbc:	cb04      	ldmia	r3!, {r2}
    9fbe:	b2d2      	uxtb	r2, r2
    9fc0:	9208      	str	r2, [sp, #32]
    9fc2:	2200      	movs	r2, #0
    9fc4:	930a      	str	r3, [sp, #40]	; 0x28
    9fc6:	9209      	str	r2, [sp, #36]	; 0x24
    9fc8:	f7ff fb01 	bl	95ce <_vfiprintf_r+0x452>
    9fcc:	0038      	movs	r0, r7
    9fce:	9904      	ldr	r1, [sp, #16]
    9fd0:	aa1c      	add	r2, sp, #112	; 0x70
    9fd2:	f7ff f88f 	bl	90f4 <__sprint_r.part.0>
    9fd6:	f7ff f9b4 	bl	9342 <_vfiprintf_r+0x1c6>
    9fda:	2300      	movs	r3, #0
    9fdc:	ad2f      	add	r5, sp, #188	; 0xbc
    9fde:	930b      	str	r3, [sp, #44]	; 0x2c
    9fe0:	e7a0      	b.n	9f24 <_vfiprintf_r+0xda8>
    9fe2:	4653      	mov	r3, sl
    9fe4:	9303      	str	r3, [sp, #12]
    9fe6:	9305      	str	r3, [sp, #20]
    9fe8:	2300      	movs	r3, #0
    9fea:	960a      	str	r6, [sp, #40]	; 0x28
    9fec:	469a      	mov	sl, r3
    9fee:	f7ff fb1d 	bl	962c <_vfiprintf_r+0x4b0>
    9ff2:	0028      	movs	r0, r5
    9ff4:	f7fe ffe0 	bl	8fb8 <strlen>
    9ff8:	0002      	movs	r2, r0
    9ffa:	f7ff fa93 	bl	9524 <_vfiprintf_r+0x3a8>
    9ffe:	991d      	ldr	r1, [sp, #116]	; 0x74
    a000:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    a002:	4e1e      	ldr	r6, [pc, #120]	; (a07c <_vfiprintf_r+0xf00>)
    a004:	3101      	adds	r1, #1
    a006:	e529      	b.n	9a5c <_vfiprintf_r+0x8e0>
    a008:	991d      	ldr	r1, [sp, #116]	; 0x74
    a00a:	4e1c      	ldr	r6, [pc, #112]	; (a07c <_vfiprintf_r+0xf00>)
    a00c:	3101      	adds	r1, #1
    a00e:	468c      	mov	ip, r1
    a010:	e568      	b.n	9ae4 <_vfiprintf_r+0x968>
    a012:	4a1b      	ldr	r2, [pc, #108]	; (a080 <_vfiprintf_r+0xf04>)
    a014:	4684      	mov	ip, r0
    a016:	4691      	mov	r9, r2
    a018:	e43f      	b.n	989a <_vfiprintf_r+0x71e>
    a01a:	2301      	movs	r3, #1
    a01c:	425b      	negs	r3, r3
    a01e:	9306      	str	r3, [sp, #24]
    a020:	f7ff f996 	bl	9350 <_vfiprintf_r+0x1d4>
    a024:	2240      	movs	r2, #64	; 0x40
    a026:	9904      	ldr	r1, [sp, #16]
    a028:	898b      	ldrh	r3, [r1, #12]
    a02a:	4313      	orrs	r3, r2
    a02c:	b21b      	sxth	r3, r3
    a02e:	818b      	strh	r3, [r1, #12]
    a030:	f7ff f98a 	bl	9348 <_vfiprintf_r+0x1cc>
    a034:	4656      	mov	r6, sl
    a036:	46aa      	mov	sl, r5
    a038:	4653      	mov	r3, sl
    a03a:	464c      	mov	r4, r9
    a03c:	4645      	mov	r5, r8
    a03e:	9305      	str	r3, [sp, #20]
    a040:	e763      	b.n	9f0a <_vfiprintf_r+0xd8e>
    a042:	990a      	ldr	r1, [sp, #40]	; 0x28
    a044:	c940      	ldmia	r1!, {r6}
    a046:	2e00      	cmp	r6, #0
    a048:	da01      	bge.n	a04e <_vfiprintf_r+0xed2>
    a04a:	2601      	movs	r6, #1
    a04c:	4276      	negs	r6, r6
    a04e:	9a02      	ldr	r2, [sp, #8]
    a050:	910a      	str	r1, [sp, #40]	; 0x28
    a052:	7852      	ldrb	r2, [r2, #1]
    a054:	9302      	str	r3, [sp, #8]
    a056:	f7ff f900 	bl	925a <_vfiprintf_r+0xde>
    a05a:	2240      	movs	r2, #64	; 0x40
    a05c:	9904      	ldr	r1, [sp, #16]
    a05e:	898b      	ldrh	r3, [r1, #12]
    a060:	4313      	orrs	r3, r2
    a062:	818b      	strh	r3, [r1, #12]
    a064:	e4a4      	b.n	99b0 <_vfiprintf_r+0x834>
    a066:	2340      	movs	r3, #64	; 0x40
    a068:	9904      	ldr	r1, [sp, #16]
    a06a:	898a      	ldrh	r2, [r1, #12]
    a06c:	4313      	orrs	r3, r2
    a06e:	b21b      	sxth	r3, r3
    a070:	818b      	strh	r3, [r1, #12]
    a072:	f7ff f969 	bl	9348 <_vfiprintf_r+0x1cc>
    a076:	46c0      	nop			; (mov r8, r8)
    a078:	0000d998 	.word	0x0000d998
    a07c:	0000db0c 	.word	0x0000db0c
    a080:	0000db1c 	.word	0x0000db1c

0000a084 <__sbprintf>:
    a084:	b570      	push	{r4, r5, r6, lr}
    a086:	0006      	movs	r6, r0
    a088:	2002      	movs	r0, #2
    a08a:	4c1a      	ldr	r4, [pc, #104]	; (a0f4 <__sbprintf+0x70>)
    a08c:	44a5      	add	sp, r4
    a08e:	000c      	movs	r4, r1
    a090:	8989      	ldrh	r1, [r1, #12]
    a092:	4381      	bics	r1, r0
    a094:	4668      	mov	r0, sp
    a096:	8181      	strh	r1, [r0, #12]
    a098:	6e61      	ldr	r1, [r4, #100]	; 0x64
    a09a:	9119      	str	r1, [sp, #100]	; 0x64
    a09c:	89e1      	ldrh	r1, [r4, #14]
    a09e:	81c1      	strh	r1, [r0, #14]
    a0a0:	69e1      	ldr	r1, [r4, #28]
    a0a2:	0030      	movs	r0, r6
    a0a4:	9107      	str	r1, [sp, #28]
    a0a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    a0a8:	9109      	str	r1, [sp, #36]	; 0x24
    a0aa:	a91a      	add	r1, sp, #104	; 0x68
    a0ac:	9100      	str	r1, [sp, #0]
    a0ae:	9104      	str	r1, [sp, #16]
    a0b0:	2180      	movs	r1, #128	; 0x80
    a0b2:	00c9      	lsls	r1, r1, #3
    a0b4:	9102      	str	r1, [sp, #8]
    a0b6:	9105      	str	r1, [sp, #20]
    a0b8:	2100      	movs	r1, #0
    a0ba:	9106      	str	r1, [sp, #24]
    a0bc:	4669      	mov	r1, sp
    a0be:	f7ff f85d 	bl	917c <_vfiprintf_r>
    a0c2:	1e05      	subs	r5, r0, #0
    a0c4:	da0c      	bge.n	a0e0 <__sbprintf+0x5c>
    a0c6:	466b      	mov	r3, sp
    a0c8:	899b      	ldrh	r3, [r3, #12]
    a0ca:	065b      	lsls	r3, r3, #25
    a0cc:	d503      	bpl.n	a0d6 <__sbprintf+0x52>
    a0ce:	2240      	movs	r2, #64	; 0x40
    a0d0:	89a3      	ldrh	r3, [r4, #12]
    a0d2:	4313      	orrs	r3, r2
    a0d4:	81a3      	strh	r3, [r4, #12]
    a0d6:	0028      	movs	r0, r5
    a0d8:	238d      	movs	r3, #141	; 0x8d
    a0da:	00db      	lsls	r3, r3, #3
    a0dc:	449d      	add	sp, r3
    a0de:	bd70      	pop	{r4, r5, r6, pc}
    a0e0:	4669      	mov	r1, sp
    a0e2:	0030      	movs	r0, r6
    a0e4:	f000 f94c 	bl	a380 <_fflush_r>
    a0e8:	2800      	cmp	r0, #0
    a0ea:	d0ec      	beq.n	a0c6 <__sbprintf+0x42>
    a0ec:	2501      	movs	r5, #1
    a0ee:	426d      	negs	r5, r5
    a0f0:	e7e9      	b.n	a0c6 <__sbprintf+0x42>
    a0f2:	46c0      	nop			; (mov r8, r8)
    a0f4:	fffffb98 	.word	0xfffffb98

0000a0f8 <_wcrtomb_r>:
    a0f8:	b570      	push	{r4, r5, r6, lr}
    a0fa:	0005      	movs	r5, r0
    a0fc:	001c      	movs	r4, r3
    a0fe:	b084      	sub	sp, #16
    a100:	2b00      	cmp	r3, #0
    a102:	d00b      	beq.n	a11c <_wcrtomb_r+0x24>
    a104:	4b0f      	ldr	r3, [pc, #60]	; (a144 <_wcrtomb_r+0x4c>)
    a106:	2900      	cmp	r1, #0
    a108:	d00e      	beq.n	a128 <_wcrtomb_r+0x30>
    a10a:	20e0      	movs	r0, #224	; 0xe0
    a10c:	581e      	ldr	r6, [r3, r0]
    a10e:	0023      	movs	r3, r4
    a110:	0028      	movs	r0, r5
    a112:	47b0      	blx	r6
    a114:	1c43      	adds	r3, r0, #1
    a116:	d010      	beq.n	a13a <_wcrtomb_r+0x42>
    a118:	b004      	add	sp, #16
    a11a:	bd70      	pop	{r4, r5, r6, pc}
    a11c:	0004      	movs	r4, r0
    a11e:	3415      	adds	r4, #21
    a120:	4b08      	ldr	r3, [pc, #32]	; (a144 <_wcrtomb_r+0x4c>)
    a122:	34ff      	adds	r4, #255	; 0xff
    a124:	2900      	cmp	r1, #0
    a126:	d1f0      	bne.n	a10a <_wcrtomb_r+0x12>
    a128:	22e0      	movs	r2, #224	; 0xe0
    a12a:	0028      	movs	r0, r5
    a12c:	589e      	ldr	r6, [r3, r2]
    a12e:	a901      	add	r1, sp, #4
    a130:	0023      	movs	r3, r4
    a132:	2200      	movs	r2, #0
    a134:	47b0      	blx	r6
    a136:	1c43      	adds	r3, r0, #1
    a138:	d1ee      	bne.n	a118 <_wcrtomb_r+0x20>
    a13a:	2300      	movs	r3, #0
    a13c:	6023      	str	r3, [r4, #0]
    a13e:	338a      	adds	r3, #138	; 0x8a
    a140:	602b      	str	r3, [r5, #0]
    a142:	e7e9      	b.n	a118 <_wcrtomb_r+0x20>
    a144:	1ffff5a8 	.word	0x1ffff5a8

0000a148 <_wcsrtombs_r>:
    a148:	b530      	push	{r4, r5, lr}
    a14a:	2401      	movs	r4, #1
    a14c:	b083      	sub	sp, #12
    a14e:	9d06      	ldr	r5, [sp, #24]
    a150:	9300      	str	r3, [sp, #0]
    a152:	9501      	str	r5, [sp, #4]
    a154:	4263      	negs	r3, r4
    a156:	f000 fe37 	bl	adc8 <_wcsnrtombs_r>
    a15a:	b003      	add	sp, #12
    a15c:	bd30      	pop	{r4, r5, pc}
    a15e:	46c0      	nop			; (mov r8, r8)

0000a160 <__swsetup_r>:
    a160:	4b35      	ldr	r3, [pc, #212]	; (a238 <__swsetup_r+0xd8>)
    a162:	b570      	push	{r4, r5, r6, lr}
    a164:	0005      	movs	r5, r0
    a166:	6818      	ldr	r0, [r3, #0]
    a168:	000c      	movs	r4, r1
    a16a:	2800      	cmp	r0, #0
    a16c:	d002      	beq.n	a174 <__swsetup_r+0x14>
    a16e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    a170:	2b00      	cmp	r3, #0
    a172:	d021      	beq.n	a1b8 <__swsetup_r+0x58>
    a174:	230c      	movs	r3, #12
    a176:	5ee2      	ldrsh	r2, [r4, r3]
    a178:	89a3      	ldrh	r3, [r4, #12]
    a17a:	0719      	lsls	r1, r3, #28
    a17c:	d523      	bpl.n	a1c6 <__swsetup_r+0x66>
    a17e:	6921      	ldr	r1, [r4, #16]
    a180:	2900      	cmp	r1, #0
    a182:	d02b      	beq.n	a1dc <__swsetup_r+0x7c>
    a184:	07d8      	lsls	r0, r3, #31
    a186:	d508      	bpl.n	a19a <__swsetup_r+0x3a>
    a188:	2000      	movs	r0, #0
    a18a:	60a0      	str	r0, [r4, #8]
    a18c:	6960      	ldr	r0, [r4, #20]
    a18e:	4240      	negs	r0, r0
    a190:	61a0      	str	r0, [r4, #24]
    a192:	2000      	movs	r0, #0
    a194:	2900      	cmp	r1, #0
    a196:	d008      	beq.n	a1aa <__swsetup_r+0x4a>
    a198:	bd70      	pop	{r4, r5, r6, pc}
    a19a:	2000      	movs	r0, #0
    a19c:	079d      	lsls	r5, r3, #30
    a19e:	d400      	bmi.n	a1a2 <__swsetup_r+0x42>
    a1a0:	6960      	ldr	r0, [r4, #20]
    a1a2:	60a0      	str	r0, [r4, #8]
    a1a4:	2000      	movs	r0, #0
    a1a6:	2900      	cmp	r1, #0
    a1a8:	d1f6      	bne.n	a198 <__swsetup_r+0x38>
    a1aa:	061b      	lsls	r3, r3, #24
    a1ac:	d5f4      	bpl.n	a198 <__swsetup_r+0x38>
    a1ae:	2340      	movs	r3, #64	; 0x40
    a1b0:	431a      	orrs	r2, r3
    a1b2:	81a2      	strh	r2, [r4, #12]
    a1b4:	3801      	subs	r0, #1
    a1b6:	e7ef      	b.n	a198 <__swsetup_r+0x38>
    a1b8:	f000 f974 	bl	a4a4 <__sinit>
    a1bc:	230c      	movs	r3, #12
    a1be:	5ee2      	ldrsh	r2, [r4, r3]
    a1c0:	89a3      	ldrh	r3, [r4, #12]
    a1c2:	0719      	lsls	r1, r3, #28
    a1c4:	d4db      	bmi.n	a17e <__swsetup_r+0x1e>
    a1c6:	06d9      	lsls	r1, r3, #27
    a1c8:	d52d      	bpl.n	a226 <__swsetup_r+0xc6>
    a1ca:	075b      	lsls	r3, r3, #29
    a1cc:	d416      	bmi.n	a1fc <__swsetup_r+0x9c>
    a1ce:	6921      	ldr	r1, [r4, #16]
    a1d0:	2308      	movs	r3, #8
    a1d2:	431a      	orrs	r2, r3
    a1d4:	81a2      	strh	r2, [r4, #12]
    a1d6:	b293      	uxth	r3, r2
    a1d8:	2900      	cmp	r1, #0
    a1da:	d1d3      	bne.n	a184 <__swsetup_r+0x24>
    a1dc:	20a0      	movs	r0, #160	; 0xa0
    a1de:	2680      	movs	r6, #128	; 0x80
    a1e0:	0080      	lsls	r0, r0, #2
    a1e2:	00b6      	lsls	r6, r6, #2
    a1e4:	4018      	ands	r0, r3
    a1e6:	42b0      	cmp	r0, r6
    a1e8:	d0cc      	beq.n	a184 <__swsetup_r+0x24>
    a1ea:	0021      	movs	r1, r4
    a1ec:	0028      	movs	r0, r5
    a1ee:	f000 fb6b 	bl	a8c8 <__smakebuf_r>
    a1f2:	230c      	movs	r3, #12
    a1f4:	5ee2      	ldrsh	r2, [r4, r3]
    a1f6:	6921      	ldr	r1, [r4, #16]
    a1f8:	89a3      	ldrh	r3, [r4, #12]
    a1fa:	e7c3      	b.n	a184 <__swsetup_r+0x24>
    a1fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
    a1fe:	2900      	cmp	r1, #0
    a200:	d00a      	beq.n	a218 <__swsetup_r+0xb8>
    a202:	0023      	movs	r3, r4
    a204:	3340      	adds	r3, #64	; 0x40
    a206:	4299      	cmp	r1, r3
    a208:	d004      	beq.n	a214 <__swsetup_r+0xb4>
    a20a:	0028      	movs	r0, r5
    a20c:	f7fc fd77 	bl	6cfe <_free_r>
    a210:	230c      	movs	r3, #12
    a212:	5ee2      	ldrsh	r2, [r4, r3]
    a214:	2300      	movs	r3, #0
    a216:	6323      	str	r3, [r4, #48]	; 0x30
    a218:	2324      	movs	r3, #36	; 0x24
    a21a:	439a      	bics	r2, r3
    a21c:	2300      	movs	r3, #0
    a21e:	6921      	ldr	r1, [r4, #16]
    a220:	6063      	str	r3, [r4, #4]
    a222:	6021      	str	r1, [r4, #0]
    a224:	e7d4      	b.n	a1d0 <__swsetup_r+0x70>
    a226:	2309      	movs	r3, #9
    a228:	602b      	str	r3, [r5, #0]
    a22a:	2340      	movs	r3, #64	; 0x40
    a22c:	2001      	movs	r0, #1
    a22e:	4313      	orrs	r3, r2
    a230:	81a3      	strh	r3, [r4, #12]
    a232:	4240      	negs	r0, r0
    a234:	e7b0      	b.n	a198 <__swsetup_r+0x38>
    a236:	46c0      	nop			; (mov r8, r8)
    a238:	1ffff17c 	.word	0x1ffff17c

0000a23c <abort>:
    a23c:	2006      	movs	r0, #6
    a23e:	b510      	push	{r4, lr}
    a240:	f000 fc5a 	bl	aaf8 <raise>
    a244:	2001      	movs	r0, #1
    a246:	f7fc fe5f 	bl	6f08 <_exit>
    a24a:	46c0      	nop			; (mov r8, r8)

0000a24c <__sflush_r>:
    a24c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a24e:	46c6      	mov	lr, r8
    a250:	b500      	push	{lr}
    a252:	230c      	movs	r3, #12
    a254:	5eca      	ldrsh	r2, [r1, r3]
    a256:	898b      	ldrh	r3, [r1, #12]
    a258:	0007      	movs	r7, r0
    a25a:	000c      	movs	r4, r1
    a25c:	0719      	lsls	r1, r3, #28
    a25e:	d448      	bmi.n	a2f2 <__sflush_r+0xa6>
    a260:	2380      	movs	r3, #128	; 0x80
    a262:	011b      	lsls	r3, r3, #4
    a264:	4313      	orrs	r3, r2
    a266:	6862      	ldr	r2, [r4, #4]
    a268:	81a3      	strh	r3, [r4, #12]
    a26a:	2a00      	cmp	r2, #0
    a26c:	dd63      	ble.n	a336 <__sflush_r+0xea>
    a26e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    a270:	2e00      	cmp	r6, #0
    a272:	d03a      	beq.n	a2ea <__sflush_r+0x9e>
    a274:	2200      	movs	r2, #0
    a276:	683d      	ldr	r5, [r7, #0]
    a278:	603a      	str	r2, [r7, #0]
    a27a:	b29a      	uxth	r2, r3
    a27c:	04db      	lsls	r3, r3, #19
    a27e:	d45e      	bmi.n	a33e <__sflush_r+0xf2>
    a280:	2301      	movs	r3, #1
    a282:	2200      	movs	r2, #0
    a284:	0038      	movs	r0, r7
    a286:	69e1      	ldr	r1, [r4, #28]
    a288:	47b0      	blx	r6
    a28a:	1c43      	adds	r3, r0, #1
    a28c:	d066      	beq.n	a35c <__sflush_r+0x110>
    a28e:	89a2      	ldrh	r2, [r4, #12]
    a290:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    a292:	0752      	lsls	r2, r2, #29
    a294:	d506      	bpl.n	a2a4 <__sflush_r+0x58>
    a296:	6863      	ldr	r3, [r4, #4]
    a298:	1ac0      	subs	r0, r0, r3
    a29a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a29c:	2b00      	cmp	r3, #0
    a29e:	d001      	beq.n	a2a4 <__sflush_r+0x58>
    a2a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a2a2:	1ac0      	subs	r0, r0, r3
    a2a4:	2300      	movs	r3, #0
    a2a6:	0002      	movs	r2, r0
    a2a8:	69e1      	ldr	r1, [r4, #28]
    a2aa:	0038      	movs	r0, r7
    a2ac:	47b0      	blx	r6
    a2ae:	1c43      	adds	r3, r0, #1
    a2b0:	d147      	bne.n	a342 <__sflush_r+0xf6>
    a2b2:	683b      	ldr	r3, [r7, #0]
    a2b4:	2b00      	cmp	r3, #0
    a2b6:	d044      	beq.n	a342 <__sflush_r+0xf6>
    a2b8:	2b1d      	cmp	r3, #29
    a2ba:	d001      	beq.n	a2c0 <__sflush_r+0x74>
    a2bc:	2b16      	cmp	r3, #22
    a2be:	d155      	bne.n	a36c <__sflush_r+0x120>
    a2c0:	89a3      	ldrh	r3, [r4, #12]
    a2c2:	4a2e      	ldr	r2, [pc, #184]	; (a37c <__sflush_r+0x130>)
    a2c4:	4013      	ands	r3, r2
    a2c6:	81a3      	strh	r3, [r4, #12]
    a2c8:	2300      	movs	r3, #0
    a2ca:	6063      	str	r3, [r4, #4]
    a2cc:	6923      	ldr	r3, [r4, #16]
    a2ce:	6023      	str	r3, [r4, #0]
    a2d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    a2d2:	603d      	str	r5, [r7, #0]
    a2d4:	2900      	cmp	r1, #0
    a2d6:	d008      	beq.n	a2ea <__sflush_r+0x9e>
    a2d8:	0023      	movs	r3, r4
    a2da:	3340      	adds	r3, #64	; 0x40
    a2dc:	4299      	cmp	r1, r3
    a2de:	d002      	beq.n	a2e6 <__sflush_r+0x9a>
    a2e0:	0038      	movs	r0, r7
    a2e2:	f7fc fd0c 	bl	6cfe <_free_r>
    a2e6:	2300      	movs	r3, #0
    a2e8:	6323      	str	r3, [r4, #48]	; 0x30
    a2ea:	2000      	movs	r0, #0
    a2ec:	bc80      	pop	{r7}
    a2ee:	46b8      	mov	r8, r7
    a2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2f2:	6926      	ldr	r6, [r4, #16]
    a2f4:	2e00      	cmp	r6, #0
    a2f6:	d0f8      	beq.n	a2ea <__sflush_r+0x9e>
    a2f8:	6825      	ldr	r5, [r4, #0]
    a2fa:	2200      	movs	r2, #0
    a2fc:	1bad      	subs	r5, r5, r6
    a2fe:	6026      	str	r6, [r4, #0]
    a300:	079b      	lsls	r3, r3, #30
    a302:	d100      	bne.n	a306 <__sflush_r+0xba>
    a304:	6962      	ldr	r2, [r4, #20]
    a306:	60a2      	str	r2, [r4, #8]
    a308:	2d00      	cmp	r5, #0
    a30a:	dc04      	bgt.n	a316 <__sflush_r+0xca>
    a30c:	e7ed      	b.n	a2ea <__sflush_r+0x9e>
    a30e:	1836      	adds	r6, r6, r0
    a310:	1a2d      	subs	r5, r5, r0
    a312:	2d00      	cmp	r5, #0
    a314:	dde9      	ble.n	a2ea <__sflush_r+0x9e>
    a316:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a318:	0032      	movs	r2, r6
    a31a:	4698      	mov	r8, r3
    a31c:	0038      	movs	r0, r7
    a31e:	002b      	movs	r3, r5
    a320:	69e1      	ldr	r1, [r4, #28]
    a322:	47c0      	blx	r8
    a324:	2800      	cmp	r0, #0
    a326:	dcf2      	bgt.n	a30e <__sflush_r+0xc2>
    a328:	2240      	movs	r2, #64	; 0x40
    a32a:	2001      	movs	r0, #1
    a32c:	89a3      	ldrh	r3, [r4, #12]
    a32e:	4240      	negs	r0, r0
    a330:	4313      	orrs	r3, r2
    a332:	81a3      	strh	r3, [r4, #12]
    a334:	e7da      	b.n	a2ec <__sflush_r+0xa0>
    a336:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    a338:	2a00      	cmp	r2, #0
    a33a:	dc98      	bgt.n	a26e <__sflush_r+0x22>
    a33c:	e7d5      	b.n	a2ea <__sflush_r+0x9e>
    a33e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    a340:	e7a7      	b.n	a292 <__sflush_r+0x46>
    a342:	89a3      	ldrh	r3, [r4, #12]
    a344:	4a0d      	ldr	r2, [pc, #52]	; (a37c <__sflush_r+0x130>)
    a346:	4013      	ands	r3, r2
    a348:	2200      	movs	r2, #0
    a34a:	6062      	str	r2, [r4, #4]
    a34c:	6922      	ldr	r2, [r4, #16]
    a34e:	b21b      	sxth	r3, r3
    a350:	81a3      	strh	r3, [r4, #12]
    a352:	6022      	str	r2, [r4, #0]
    a354:	04db      	lsls	r3, r3, #19
    a356:	d5bb      	bpl.n	a2d0 <__sflush_r+0x84>
    a358:	6520      	str	r0, [r4, #80]	; 0x50
    a35a:	e7b9      	b.n	a2d0 <__sflush_r+0x84>
    a35c:	683b      	ldr	r3, [r7, #0]
    a35e:	2b00      	cmp	r3, #0
    a360:	d100      	bne.n	a364 <__sflush_r+0x118>
    a362:	e794      	b.n	a28e <__sflush_r+0x42>
    a364:	2b1d      	cmp	r3, #29
    a366:	d006      	beq.n	a376 <__sflush_r+0x12a>
    a368:	2b16      	cmp	r3, #22
    a36a:	d004      	beq.n	a376 <__sflush_r+0x12a>
    a36c:	2240      	movs	r2, #64	; 0x40
    a36e:	89a3      	ldrh	r3, [r4, #12]
    a370:	4313      	orrs	r3, r2
    a372:	81a3      	strh	r3, [r4, #12]
    a374:	e7ba      	b.n	a2ec <__sflush_r+0xa0>
    a376:	2000      	movs	r0, #0
    a378:	603d      	str	r5, [r7, #0]
    a37a:	e7b7      	b.n	a2ec <__sflush_r+0xa0>
    a37c:	fffff7ff 	.word	0xfffff7ff

0000a380 <_fflush_r>:
    a380:	b570      	push	{r4, r5, r6, lr}
    a382:	0004      	movs	r4, r0
    a384:	000d      	movs	r5, r1
    a386:	2800      	cmp	r0, #0
    a388:	d002      	beq.n	a390 <_fflush_r+0x10>
    a38a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    a38c:	2b00      	cmp	r3, #0
    a38e:	d009      	beq.n	a3a4 <_fflush_r+0x24>
    a390:	220c      	movs	r2, #12
    a392:	5eab      	ldrsh	r3, [r5, r2]
    a394:	2000      	movs	r0, #0
    a396:	2b00      	cmp	r3, #0
    a398:	d003      	beq.n	a3a2 <_fflush_r+0x22>
    a39a:	0029      	movs	r1, r5
    a39c:	0020      	movs	r0, r4
    a39e:	f7ff ff55 	bl	a24c <__sflush_r>
    a3a2:	bd70      	pop	{r4, r5, r6, pc}
    a3a4:	f000 f87e 	bl	a4a4 <__sinit>
    a3a8:	e7f2      	b.n	a390 <_fflush_r+0x10>
    a3aa:	46c0      	nop			; (mov r8, r8)

0000a3ac <_cleanup_r>:
    a3ac:	b510      	push	{r4, lr}
    a3ae:	4902      	ldr	r1, [pc, #8]	; (a3b8 <_cleanup_r+0xc>)
    a3b0:	f000 fa5a 	bl	a868 <_fwalk_reent>
    a3b4:	bd10      	pop	{r4, pc}
    a3b6:	46c0      	nop			; (mov r8, r8)
    a3b8:	0000ae09 	.word	0x0000ae09

0000a3bc <__sinit.part.0>:
    a3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3be:	46d6      	mov	lr, sl
    a3c0:	464f      	mov	r7, r9
    a3c2:	4646      	mov	r6, r8
    a3c4:	4b30      	ldr	r3, [pc, #192]	; (a488 <__sinit.part.0+0xcc>)
    a3c6:	b5c0      	push	{r6, r7, lr}
    a3c8:	63c3      	str	r3, [r0, #60]	; 0x3c
    a3ca:	23b8      	movs	r3, #184	; 0xb8
    a3cc:	2400      	movs	r4, #0
    a3ce:	2203      	movs	r2, #3
    a3d0:	009b      	lsls	r3, r3, #2
    a3d2:	50c4      	str	r4, [r0, r3]
    a3d4:	3304      	adds	r3, #4
    a3d6:	6845      	ldr	r5, [r0, #4]
    a3d8:	50c2      	str	r2, [r0, r3]
    a3da:	3308      	adds	r3, #8
    a3dc:	18c2      	adds	r2, r0, r3
    a3de:	3b04      	subs	r3, #4
    a3e0:	50c2      	str	r2, [r0, r3]
    a3e2:	0006      	movs	r6, r0
    a3e4:	2304      	movs	r3, #4
    a3e6:	0028      	movs	r0, r5
    a3e8:	666c      	str	r4, [r5, #100]	; 0x64
    a3ea:	602c      	str	r4, [r5, #0]
    a3ec:	606c      	str	r4, [r5, #4]
    a3ee:	60ac      	str	r4, [r5, #8]
    a3f0:	60eb      	str	r3, [r5, #12]
    a3f2:	612c      	str	r4, [r5, #16]
    a3f4:	616c      	str	r4, [r5, #20]
    a3f6:	61ac      	str	r4, [r5, #24]
    a3f8:	2208      	movs	r2, #8
    a3fa:	2100      	movs	r1, #0
    a3fc:	305c      	adds	r0, #92	; 0x5c
    a3fe:	f7fe fd87 	bl	8f10 <memset>
    a402:	4b22      	ldr	r3, [pc, #136]	; (a48c <__sinit.part.0+0xd0>)
    a404:	4f22      	ldr	r7, [pc, #136]	; (a490 <__sinit.part.0+0xd4>)
    a406:	469a      	mov	sl, r3
    a408:	622b      	str	r3, [r5, #32]
    a40a:	4b22      	ldr	r3, [pc, #136]	; (a494 <__sinit.part.0+0xd8>)
    a40c:	62ef      	str	r7, [r5, #44]	; 0x2c
    a40e:	4699      	mov	r9, r3
    a410:	626b      	str	r3, [r5, #36]	; 0x24
    a412:	4b21      	ldr	r3, [pc, #132]	; (a498 <__sinit.part.0+0xdc>)
    a414:	61ed      	str	r5, [r5, #28]
    a416:	62ab      	str	r3, [r5, #40]	; 0x28
    a418:	68b5      	ldr	r5, [r6, #8]
    a41a:	4698      	mov	r8, r3
    a41c:	0028      	movs	r0, r5
    a41e:	4b1f      	ldr	r3, [pc, #124]	; (a49c <__sinit.part.0+0xe0>)
    a420:	666c      	str	r4, [r5, #100]	; 0x64
    a422:	602c      	str	r4, [r5, #0]
    a424:	606c      	str	r4, [r5, #4]
    a426:	60ac      	str	r4, [r5, #8]
    a428:	60eb      	str	r3, [r5, #12]
    a42a:	612c      	str	r4, [r5, #16]
    a42c:	616c      	str	r4, [r5, #20]
    a42e:	61ac      	str	r4, [r5, #24]
    a430:	2208      	movs	r2, #8
    a432:	2100      	movs	r1, #0
    a434:	305c      	adds	r0, #92	; 0x5c
    a436:	f7fe fd6b 	bl	8f10 <memset>
    a43a:	4653      	mov	r3, sl
    a43c:	622b      	str	r3, [r5, #32]
    a43e:	464b      	mov	r3, r9
    a440:	626b      	str	r3, [r5, #36]	; 0x24
    a442:	4643      	mov	r3, r8
    a444:	62ef      	str	r7, [r5, #44]	; 0x2c
    a446:	62ab      	str	r3, [r5, #40]	; 0x28
    a448:	61ed      	str	r5, [r5, #28]
    a44a:	68f5      	ldr	r5, [r6, #12]
    a44c:	4b14      	ldr	r3, [pc, #80]	; (a4a0 <__sinit.part.0+0xe4>)
    a44e:	0028      	movs	r0, r5
    a450:	60eb      	str	r3, [r5, #12]
    a452:	666c      	str	r4, [r5, #100]	; 0x64
    a454:	602c      	str	r4, [r5, #0]
    a456:	606c      	str	r4, [r5, #4]
    a458:	60ac      	str	r4, [r5, #8]
    a45a:	612c      	str	r4, [r5, #16]
    a45c:	616c      	str	r4, [r5, #20]
    a45e:	61ac      	str	r4, [r5, #24]
    a460:	2208      	movs	r2, #8
    a462:	2100      	movs	r1, #0
    a464:	305c      	adds	r0, #92	; 0x5c
    a466:	f7fe fd53 	bl	8f10 <memset>
    a46a:	4653      	mov	r3, sl
    a46c:	622b      	str	r3, [r5, #32]
    a46e:	464b      	mov	r3, r9
    a470:	626b      	str	r3, [r5, #36]	; 0x24
    a472:	4643      	mov	r3, r8
    a474:	62ab      	str	r3, [r5, #40]	; 0x28
    a476:	2301      	movs	r3, #1
    a478:	62ef      	str	r7, [r5, #44]	; 0x2c
    a47a:	61ed      	str	r5, [r5, #28]
    a47c:	63b3      	str	r3, [r6, #56]	; 0x38
    a47e:	bce0      	pop	{r5, r6, r7}
    a480:	46ba      	mov	sl, r7
    a482:	46b1      	mov	r9, r6
    a484:	46a8      	mov	r8, r5
    a486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a488:	0000a3ad 	.word	0x0000a3ad
    a48c:	0000ab59 	.word	0x0000ab59
    a490:	0000abed 	.word	0x0000abed
    a494:	0000ab81 	.word	0x0000ab81
    a498:	0000abc1 	.word	0x0000abc1
    a49c:	00010009 	.word	0x00010009
    a4a0:	00020012 	.word	0x00020012

0000a4a4 <__sinit>:
    a4a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    a4a6:	b510      	push	{r4, lr}
    a4a8:	2b00      	cmp	r3, #0
    a4aa:	d101      	bne.n	a4b0 <__sinit+0xc>
    a4ac:	f7ff ff86 	bl	a3bc <__sinit.part.0>
    a4b0:	bd10      	pop	{r4, pc}
    a4b2:	46c0      	nop			; (mov r8, r8)

0000a4b4 <__sfp_lock_acquire>:
    a4b4:	4770      	bx	lr
    a4b6:	46c0      	nop			; (mov r8, r8)

0000a4b8 <__sfp_lock_release>:
    a4b8:	4770      	bx	lr
    a4ba:	46c0      	nop			; (mov r8, r8)

0000a4bc <__fputwc>:
    a4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4be:	46ce      	mov	lr, r9
    a4c0:	4647      	mov	r7, r8
    a4c2:	b580      	push	{r7, lr}
    a4c4:	b083      	sub	sp, #12
    a4c6:	4680      	mov	r8, r0
    a4c8:	4689      	mov	r9, r1
    a4ca:	0014      	movs	r4, r2
    a4cc:	f000 f9f4 	bl	a8b8 <__locale_mb_cur_max>
    a4d0:	2801      	cmp	r0, #1
    a4d2:	d103      	bne.n	a4dc <__fputwc+0x20>
    a4d4:	464b      	mov	r3, r9
    a4d6:	3b01      	subs	r3, #1
    a4d8:	2bfe      	cmp	r3, #254	; 0xfe
    a4da:	d930      	bls.n	a53e <__fputwc+0x82>
    a4dc:	0023      	movs	r3, r4
    a4de:	af01      	add	r7, sp, #4
    a4e0:	464a      	mov	r2, r9
    a4e2:	0039      	movs	r1, r7
    a4e4:	4640      	mov	r0, r8
    a4e6:	335c      	adds	r3, #92	; 0x5c
    a4e8:	f7ff fe06 	bl	a0f8 <_wcrtomb_r>
    a4ec:	0006      	movs	r6, r0
    a4ee:	1c43      	adds	r3, r0, #1
    a4f0:	d02b      	beq.n	a54a <__fputwc+0x8e>
    a4f2:	2800      	cmp	r0, #0
    a4f4:	d021      	beq.n	a53a <__fputwc+0x7e>
    a4f6:	7839      	ldrb	r1, [r7, #0]
    a4f8:	2500      	movs	r5, #0
    a4fa:	e007      	b.n	a50c <__fputwc+0x50>
    a4fc:	6823      	ldr	r3, [r4, #0]
    a4fe:	1c5a      	adds	r2, r3, #1
    a500:	6022      	str	r2, [r4, #0]
    a502:	7019      	strb	r1, [r3, #0]
    a504:	3501      	adds	r5, #1
    a506:	42b5      	cmp	r5, r6
    a508:	d217      	bcs.n	a53a <__fputwc+0x7e>
    a50a:	5d79      	ldrb	r1, [r7, r5]
    a50c:	68a3      	ldr	r3, [r4, #8]
    a50e:	3b01      	subs	r3, #1
    a510:	60a3      	str	r3, [r4, #8]
    a512:	2b00      	cmp	r3, #0
    a514:	daf2      	bge.n	a4fc <__fputwc+0x40>
    a516:	69a2      	ldr	r2, [r4, #24]
    a518:	4293      	cmp	r3, r2
    a51a:	db01      	blt.n	a520 <__fputwc+0x64>
    a51c:	290a      	cmp	r1, #10
    a51e:	d1ed      	bne.n	a4fc <__fputwc+0x40>
    a520:	0022      	movs	r2, r4
    a522:	4640      	mov	r0, r8
    a524:	f000 fb68 	bl	abf8 <__swbuf_r>
    a528:	1c43      	adds	r3, r0, #1
    a52a:	d1eb      	bne.n	a504 <__fputwc+0x48>
    a52c:	0006      	movs	r6, r0
    a52e:	0030      	movs	r0, r6
    a530:	b003      	add	sp, #12
    a532:	bcc0      	pop	{r6, r7}
    a534:	46b9      	mov	r9, r7
    a536:	46b0      	mov	r8, r6
    a538:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a53a:	464e      	mov	r6, r9
    a53c:	e7f7      	b.n	a52e <__fputwc+0x72>
    a53e:	464b      	mov	r3, r9
    a540:	af01      	add	r7, sp, #4
    a542:	b2d9      	uxtb	r1, r3
    a544:	2601      	movs	r6, #1
    a546:	7039      	strb	r1, [r7, #0]
    a548:	e7d6      	b.n	a4f8 <__fputwc+0x3c>
    a54a:	2240      	movs	r2, #64	; 0x40
    a54c:	89a3      	ldrh	r3, [r4, #12]
    a54e:	4313      	orrs	r3, r2
    a550:	81a3      	strh	r3, [r4, #12]
    a552:	e7ec      	b.n	a52e <__fputwc+0x72>

0000a554 <_fputwc_r>:
    a554:	b570      	push	{r4, r5, r6, lr}
    a556:	230c      	movs	r3, #12
    a558:	5ed4      	ldrsh	r4, [r2, r3]
    a55a:	2380      	movs	r3, #128	; 0x80
    a55c:	019b      	lsls	r3, r3, #6
    a55e:	421c      	tst	r4, r3
    a560:	d104      	bne.n	a56c <_fputwc_r+0x18>
    a562:	6e55      	ldr	r5, [r2, #100]	; 0x64
    a564:	431c      	orrs	r4, r3
    a566:	432b      	orrs	r3, r5
    a568:	8194      	strh	r4, [r2, #12]
    a56a:	6653      	str	r3, [r2, #100]	; 0x64
    a56c:	f7ff ffa6 	bl	a4bc <__fputwc>
    a570:	bd70      	pop	{r4, r5, r6, pc}
    a572:	46c0      	nop			; (mov r8, r8)

0000a574 <__sfvwrite_r>:
    a574:	b5f0      	push	{r4, r5, r6, r7, lr}
    a576:	46de      	mov	lr, fp
    a578:	4645      	mov	r5, r8
    a57a:	4657      	mov	r7, sl
    a57c:	464e      	mov	r6, r9
    a57e:	b5e0      	push	{r5, r6, r7, lr}
    a580:	6893      	ldr	r3, [r2, #8]
    a582:	4683      	mov	fp, r0
    a584:	000c      	movs	r4, r1
    a586:	4690      	mov	r8, r2
    a588:	b083      	sub	sp, #12
    a58a:	2b00      	cmp	r3, #0
    a58c:	d024      	beq.n	a5d8 <__sfvwrite_r+0x64>
    a58e:	898b      	ldrh	r3, [r1, #12]
    a590:	071a      	lsls	r2, r3, #28
    a592:	d529      	bpl.n	a5e8 <__sfvwrite_r+0x74>
    a594:	690a      	ldr	r2, [r1, #16]
    a596:	2a00      	cmp	r2, #0
    a598:	d026      	beq.n	a5e8 <__sfvwrite_r+0x74>
    a59a:	4642      	mov	r2, r8
    a59c:	6816      	ldr	r6, [r2, #0]
    a59e:	079a      	lsls	r2, r3, #30
    a5a0:	d52e      	bpl.n	a600 <__sfvwrite_r+0x8c>
    a5a2:	4bad      	ldr	r3, [pc, #692]	; (a858 <__sfvwrite_r+0x2e4>)
    a5a4:	2700      	movs	r7, #0
    a5a6:	2500      	movs	r5, #0
    a5a8:	4699      	mov	r9, r3
    a5aa:	2d00      	cmp	r5, #0
    a5ac:	d05a      	beq.n	a664 <__sfvwrite_r+0xf0>
    a5ae:	002b      	movs	r3, r5
    a5b0:	454d      	cmp	r5, r9
    a5b2:	d900      	bls.n	a5b6 <__sfvwrite_r+0x42>
    a5b4:	4ba8      	ldr	r3, [pc, #672]	; (a858 <__sfvwrite_r+0x2e4>)
    a5b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    a5b8:	4658      	mov	r0, fp
    a5ba:	4692      	mov	sl, r2
    a5bc:	69e1      	ldr	r1, [r4, #28]
    a5be:	003a      	movs	r2, r7
    a5c0:	47d0      	blx	sl
    a5c2:	2800      	cmp	r0, #0
    a5c4:	dd58      	ble.n	a678 <__sfvwrite_r+0x104>
    a5c6:	4643      	mov	r3, r8
    a5c8:	4642      	mov	r2, r8
    a5ca:	689b      	ldr	r3, [r3, #8]
    a5cc:	183f      	adds	r7, r7, r0
    a5ce:	1a1b      	subs	r3, r3, r0
    a5d0:	1a2d      	subs	r5, r5, r0
    a5d2:	6093      	str	r3, [r2, #8]
    a5d4:	2b00      	cmp	r3, #0
    a5d6:	d1e8      	bne.n	a5aa <__sfvwrite_r+0x36>
    a5d8:	2000      	movs	r0, #0
    a5da:	b003      	add	sp, #12
    a5dc:	bcf0      	pop	{r4, r5, r6, r7}
    a5de:	46bb      	mov	fp, r7
    a5e0:	46b2      	mov	sl, r6
    a5e2:	46a9      	mov	r9, r5
    a5e4:	46a0      	mov	r8, r4
    a5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a5e8:	0021      	movs	r1, r4
    a5ea:	4658      	mov	r0, fp
    a5ec:	f7ff fdb8 	bl	a160 <__swsetup_r>
    a5f0:	2800      	cmp	r0, #0
    a5f2:	d000      	beq.n	a5f6 <__sfvwrite_r+0x82>
    a5f4:	e12c      	b.n	a850 <__sfvwrite_r+0x2dc>
    a5f6:	4642      	mov	r2, r8
    a5f8:	89a3      	ldrh	r3, [r4, #12]
    a5fa:	6816      	ldr	r6, [r2, #0]
    a5fc:	079a      	lsls	r2, r3, #30
    a5fe:	d4d0      	bmi.n	a5a2 <__sfvwrite_r+0x2e>
    a600:	07da      	lsls	r2, r3, #31
    a602:	d441      	bmi.n	a688 <__sfvwrite_r+0x114>
    a604:	2200      	movs	r2, #0
    a606:	2700      	movs	r7, #0
    a608:	4691      	mov	r9, r2
    a60a:	2f00      	cmp	r7, #0
    a60c:	d025      	beq.n	a65a <__sfvwrite_r+0xe6>
    a60e:	2280      	movs	r2, #128	; 0x80
    a610:	0092      	lsls	r2, r2, #2
    a612:	68a5      	ldr	r5, [r4, #8]
    a614:	4213      	tst	r3, r2
    a616:	d100      	bne.n	a61a <__sfvwrite_r+0xa6>
    a618:	e07f      	b.n	a71a <__sfvwrite_r+0x1a6>
    a61a:	46aa      	mov	sl, r5
    a61c:	42bd      	cmp	r5, r7
    a61e:	d900      	bls.n	a622 <__sfvwrite_r+0xae>
    a620:	e0ae      	b.n	a780 <__sfvwrite_r+0x20c>
    a622:	2290      	movs	r2, #144	; 0x90
    a624:	00d2      	lsls	r2, r2, #3
    a626:	4213      	tst	r3, r2
    a628:	d000      	beq.n	a62c <__sfvwrite_r+0xb8>
    a62a:	e0ba      	b.n	a7a2 <__sfvwrite_r+0x22e>
    a62c:	6820      	ldr	r0, [r4, #0]
    a62e:	4652      	mov	r2, sl
    a630:	4649      	mov	r1, r9
    a632:	f000 fa0b 	bl	aa4c <memmove>
    a636:	68a3      	ldr	r3, [r4, #8]
    a638:	1b5b      	subs	r3, r3, r5
    a63a:	003d      	movs	r5, r7
    a63c:	2700      	movs	r7, #0
    a63e:	60a3      	str	r3, [r4, #8]
    a640:	6823      	ldr	r3, [r4, #0]
    a642:	4453      	add	r3, sl
    a644:	6023      	str	r3, [r4, #0]
    a646:	4643      	mov	r3, r8
    a648:	4642      	mov	r2, r8
    a64a:	689b      	ldr	r3, [r3, #8]
    a64c:	44a9      	add	r9, r5
    a64e:	1b5b      	subs	r3, r3, r5
    a650:	6093      	str	r3, [r2, #8]
    a652:	d0c1      	beq.n	a5d8 <__sfvwrite_r+0x64>
    a654:	89a3      	ldrh	r3, [r4, #12]
    a656:	2f00      	cmp	r7, #0
    a658:	d1d9      	bne.n	a60e <__sfvwrite_r+0x9a>
    a65a:	6832      	ldr	r2, [r6, #0]
    a65c:	6877      	ldr	r7, [r6, #4]
    a65e:	4691      	mov	r9, r2
    a660:	3608      	adds	r6, #8
    a662:	e7d2      	b.n	a60a <__sfvwrite_r+0x96>
    a664:	6837      	ldr	r7, [r6, #0]
    a666:	6875      	ldr	r5, [r6, #4]
    a668:	3608      	adds	r6, #8
    a66a:	e79e      	b.n	a5aa <__sfvwrite_r+0x36>
    a66c:	0021      	movs	r1, r4
    a66e:	9801      	ldr	r0, [sp, #4]
    a670:	f7ff fe86 	bl	a380 <_fflush_r>
    a674:	2800      	cmp	r0, #0
    a676:	d02f      	beq.n	a6d8 <__sfvwrite_r+0x164>
    a678:	220c      	movs	r2, #12
    a67a:	5ea3      	ldrsh	r3, [r4, r2]
    a67c:	2240      	movs	r2, #64	; 0x40
    a67e:	2001      	movs	r0, #1
    a680:	4313      	orrs	r3, r2
    a682:	81a3      	strh	r3, [r4, #12]
    a684:	4240      	negs	r0, r0
    a686:	e7a8      	b.n	a5da <__sfvwrite_r+0x66>
    a688:	2300      	movs	r3, #0
    a68a:	2200      	movs	r2, #0
    a68c:	46b1      	mov	r9, r6
    a68e:	2700      	movs	r7, #0
    a690:	001e      	movs	r6, r3
    a692:	465b      	mov	r3, fp
    a694:	2000      	movs	r0, #0
    a696:	4692      	mov	sl, r2
    a698:	9301      	str	r3, [sp, #4]
    a69a:	2f00      	cmp	r7, #0
    a69c:	d028      	beq.n	a6f0 <__sfvwrite_r+0x17c>
    a69e:	2800      	cmp	r0, #0
    a6a0:	d02f      	beq.n	a702 <__sfvwrite_r+0x18e>
    a6a2:	0033      	movs	r3, r6
    a6a4:	46bb      	mov	fp, r7
    a6a6:	429f      	cmp	r7, r3
    a6a8:	d900      	bls.n	a6ac <__sfvwrite_r+0x138>
    a6aa:	469b      	mov	fp, r3
    a6ac:	6820      	ldr	r0, [r4, #0]
    a6ae:	6922      	ldr	r2, [r4, #16]
    a6b0:	68a5      	ldr	r5, [r4, #8]
    a6b2:	6963      	ldr	r3, [r4, #20]
    a6b4:	4290      	cmp	r0, r2
    a6b6:	d903      	bls.n	a6c0 <__sfvwrite_r+0x14c>
    a6b8:	18ed      	adds	r5, r5, r3
    a6ba:	45ab      	cmp	fp, r5
    a6bc:	dd00      	ble.n	a6c0 <__sfvwrite_r+0x14c>
    a6be:	e09e      	b.n	a7fe <__sfvwrite_r+0x28a>
    a6c0:	455b      	cmp	r3, fp
    a6c2:	dc61      	bgt.n	a788 <__sfvwrite_r+0x214>
    a6c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
    a6c6:	4652      	mov	r2, sl
    a6c8:	69e1      	ldr	r1, [r4, #28]
    a6ca:	9801      	ldr	r0, [sp, #4]
    a6cc:	47a8      	blx	r5
    a6ce:	1e05      	subs	r5, r0, #0
    a6d0:	ddd2      	ble.n	a678 <__sfvwrite_r+0x104>
    a6d2:	2001      	movs	r0, #1
    a6d4:	1b76      	subs	r6, r6, r5
    a6d6:	d0c9      	beq.n	a66c <__sfvwrite_r+0xf8>
    a6d8:	4643      	mov	r3, r8
    a6da:	4642      	mov	r2, r8
    a6dc:	689b      	ldr	r3, [r3, #8]
    a6de:	44aa      	add	sl, r5
    a6e0:	1b5b      	subs	r3, r3, r5
    a6e2:	1b7f      	subs	r7, r7, r5
    a6e4:	6093      	str	r3, [r2, #8]
    a6e6:	2b00      	cmp	r3, #0
    a6e8:	d100      	bne.n	a6ec <__sfvwrite_r+0x178>
    a6ea:	e775      	b.n	a5d8 <__sfvwrite_r+0x64>
    a6ec:	2f00      	cmp	r7, #0
    a6ee:	d1d6      	bne.n	a69e <__sfvwrite_r+0x12a>
    a6f0:	2208      	movs	r2, #8
    a6f2:	464b      	mov	r3, r9
    a6f4:	4694      	mov	ip, r2
    a6f6:	685f      	ldr	r7, [r3, #4]
    a6f8:	44e1      	add	r9, ip
    a6fa:	2f00      	cmp	r7, #0
    a6fc:	d0f8      	beq.n	a6f0 <__sfvwrite_r+0x17c>
    a6fe:	681b      	ldr	r3, [r3, #0]
    a700:	469a      	mov	sl, r3
    a702:	003a      	movs	r2, r7
    a704:	210a      	movs	r1, #10
    a706:	4650      	mov	r0, sl
    a708:	f000 f966 	bl	a9d8 <memchr>
    a70c:	2800      	cmp	r0, #0
    a70e:	d100      	bne.n	a712 <__sfvwrite_r+0x19e>
    a710:	e095      	b.n	a83e <__sfvwrite_r+0x2ca>
    a712:	4653      	mov	r3, sl
    a714:	3001      	adds	r0, #1
    a716:	1ac6      	subs	r6, r0, r3
    a718:	e7c3      	b.n	a6a2 <__sfvwrite_r+0x12e>
    a71a:	6820      	ldr	r0, [r4, #0]
    a71c:	6923      	ldr	r3, [r4, #16]
    a71e:	4298      	cmp	r0, r3
    a720:	d816      	bhi.n	a750 <__sfvwrite_r+0x1dc>
    a722:	6963      	ldr	r3, [r4, #20]
    a724:	469a      	mov	sl, r3
    a726:	42bb      	cmp	r3, r7
    a728:	d812      	bhi.n	a750 <__sfvwrite_r+0x1dc>
    a72a:	4b4c      	ldr	r3, [pc, #304]	; (a85c <__sfvwrite_r+0x2e8>)
    a72c:	0038      	movs	r0, r7
    a72e:	429f      	cmp	r7, r3
    a730:	d900      	bls.n	a734 <__sfvwrite_r+0x1c0>
    a732:	484b      	ldr	r0, [pc, #300]	; (a860 <__sfvwrite_r+0x2ec>)
    a734:	4651      	mov	r1, sl
    a736:	f000 fc3d 	bl	afb4 <__divsi3>
    a73a:	4653      	mov	r3, sl
    a73c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    a73e:	4343      	muls	r3, r0
    a740:	464a      	mov	r2, r9
    a742:	4658      	mov	r0, fp
    a744:	69e1      	ldr	r1, [r4, #28]
    a746:	47a8      	blx	r5
    a748:	1e05      	subs	r5, r0, #0
    a74a:	dd95      	ble.n	a678 <__sfvwrite_r+0x104>
    a74c:	1b7f      	subs	r7, r7, r5
    a74e:	e77a      	b.n	a646 <__sfvwrite_r+0xd2>
    a750:	42bd      	cmp	r5, r7
    a752:	d900      	bls.n	a756 <__sfvwrite_r+0x1e2>
    a754:	003d      	movs	r5, r7
    a756:	002a      	movs	r2, r5
    a758:	4649      	mov	r1, r9
    a75a:	f000 f977 	bl	aa4c <memmove>
    a75e:	68a3      	ldr	r3, [r4, #8]
    a760:	6822      	ldr	r2, [r4, #0]
    a762:	1b5b      	subs	r3, r3, r5
    a764:	1952      	adds	r2, r2, r5
    a766:	60a3      	str	r3, [r4, #8]
    a768:	6022      	str	r2, [r4, #0]
    a76a:	2b00      	cmp	r3, #0
    a76c:	d1ee      	bne.n	a74c <__sfvwrite_r+0x1d8>
    a76e:	0021      	movs	r1, r4
    a770:	4658      	mov	r0, fp
    a772:	f7ff fe05 	bl	a380 <_fflush_r>
    a776:	2800      	cmp	r0, #0
    a778:	d000      	beq.n	a77c <__sfvwrite_r+0x208>
    a77a:	e77d      	b.n	a678 <__sfvwrite_r+0x104>
    a77c:	1b7f      	subs	r7, r7, r5
    a77e:	e762      	b.n	a646 <__sfvwrite_r+0xd2>
    a780:	003d      	movs	r5, r7
    a782:	46ba      	mov	sl, r7
    a784:	6820      	ldr	r0, [r4, #0]
    a786:	e752      	b.n	a62e <__sfvwrite_r+0xba>
    a788:	465a      	mov	r2, fp
    a78a:	4651      	mov	r1, sl
    a78c:	f000 f95e 	bl	aa4c <memmove>
    a790:	465a      	mov	r2, fp
    a792:	68a3      	ldr	r3, [r4, #8]
    a794:	465d      	mov	r5, fp
    a796:	1a9b      	subs	r3, r3, r2
    a798:	60a3      	str	r3, [r4, #8]
    a79a:	6823      	ldr	r3, [r4, #0]
    a79c:	445b      	add	r3, fp
    a79e:	6023      	str	r3, [r4, #0]
    a7a0:	e797      	b.n	a6d2 <__sfvwrite_r+0x15e>
    a7a2:	6960      	ldr	r0, [r4, #20]
    a7a4:	6822      	ldr	r2, [r4, #0]
    a7a6:	6921      	ldr	r1, [r4, #16]
    a7a8:	1a55      	subs	r5, r2, r1
    a7aa:	0042      	lsls	r2, r0, #1
    a7ac:	1812      	adds	r2, r2, r0
    a7ae:	0fd0      	lsrs	r0, r2, #31
    a7b0:	1882      	adds	r2, r0, r2
    a7b2:	1c68      	adds	r0, r5, #1
    a7b4:	1052      	asrs	r2, r2, #1
    a7b6:	19c0      	adds	r0, r0, r7
    a7b8:	4692      	mov	sl, r2
    a7ba:	9501      	str	r5, [sp, #4]
    a7bc:	4290      	cmp	r0, r2
    a7be:	d901      	bls.n	a7c4 <__sfvwrite_r+0x250>
    a7c0:	4682      	mov	sl, r0
    a7c2:	0002      	movs	r2, r0
    a7c4:	055b      	lsls	r3, r3, #21
    a7c6:	d529      	bpl.n	a81c <__sfvwrite_r+0x2a8>
    a7c8:	0011      	movs	r1, r2
    a7ca:	4658      	mov	r0, fp
    a7cc:	f7fc fa68 	bl	6ca0 <_malloc_r>
    a7d0:	1e05      	subs	r5, r0, #0
    a7d2:	d037      	beq.n	a844 <__sfvwrite_r+0x2d0>
    a7d4:	9a01      	ldr	r2, [sp, #4]
    a7d6:	6921      	ldr	r1, [r4, #16]
    a7d8:	f7fe fb48 	bl	8e6c <memcpy>
    a7dc:	89a3      	ldrh	r3, [r4, #12]
    a7de:	4a21      	ldr	r2, [pc, #132]	; (a864 <__sfvwrite_r+0x2f0>)
    a7e0:	4013      	ands	r3, r2
    a7e2:	2280      	movs	r2, #128	; 0x80
    a7e4:	4313      	orrs	r3, r2
    a7e6:	81a3      	strh	r3, [r4, #12]
    a7e8:	4652      	mov	r2, sl
    a7ea:	9b01      	ldr	r3, [sp, #4]
    a7ec:	6125      	str	r5, [r4, #16]
    a7ee:	18e8      	adds	r0, r5, r3
    a7f0:	1ad3      	subs	r3, r2, r3
    a7f2:	003d      	movs	r5, r7
    a7f4:	46ba      	mov	sl, r7
    a7f6:	6020      	str	r0, [r4, #0]
    a7f8:	6162      	str	r2, [r4, #20]
    a7fa:	60a3      	str	r3, [r4, #8]
    a7fc:	e717      	b.n	a62e <__sfvwrite_r+0xba>
    a7fe:	4651      	mov	r1, sl
    a800:	002a      	movs	r2, r5
    a802:	f000 f923 	bl	aa4c <memmove>
    a806:	6823      	ldr	r3, [r4, #0]
    a808:	0021      	movs	r1, r4
    a80a:	195b      	adds	r3, r3, r5
    a80c:	9801      	ldr	r0, [sp, #4]
    a80e:	6023      	str	r3, [r4, #0]
    a810:	f7ff fdb6 	bl	a380 <_fflush_r>
    a814:	2800      	cmp	r0, #0
    a816:	d100      	bne.n	a81a <__sfvwrite_r+0x2a6>
    a818:	e75b      	b.n	a6d2 <__sfvwrite_r+0x15e>
    a81a:	e72d      	b.n	a678 <__sfvwrite_r+0x104>
    a81c:	4658      	mov	r0, fp
    a81e:	f7fc fa55 	bl	6ccc <_realloc_r>
    a822:	1e05      	subs	r5, r0, #0
    a824:	d1e0      	bne.n	a7e8 <__sfvwrite_r+0x274>
    a826:	6921      	ldr	r1, [r4, #16]
    a828:	4658      	mov	r0, fp
    a82a:	f7fc fa68 	bl	6cfe <_free_r>
    a82e:	2280      	movs	r2, #128	; 0x80
    a830:	4659      	mov	r1, fp
    a832:	89a3      	ldrh	r3, [r4, #12]
    a834:	4393      	bics	r3, r2
    a836:	3a74      	subs	r2, #116	; 0x74
    a838:	b21b      	sxth	r3, r3
    a83a:	600a      	str	r2, [r1, #0]
    a83c:	e71e      	b.n	a67c <__sfvwrite_r+0x108>
    a83e:	1c7b      	adds	r3, r7, #1
    a840:	001e      	movs	r6, r3
    a842:	e72f      	b.n	a6a4 <__sfvwrite_r+0x130>
    a844:	230c      	movs	r3, #12
    a846:	465a      	mov	r2, fp
    a848:	6013      	str	r3, [r2, #0]
    a84a:	220c      	movs	r2, #12
    a84c:	5ea3      	ldrsh	r3, [r4, r2]
    a84e:	e715      	b.n	a67c <__sfvwrite_r+0x108>
    a850:	2001      	movs	r0, #1
    a852:	4240      	negs	r0, r0
    a854:	e6c1      	b.n	a5da <__sfvwrite_r+0x66>
    a856:	46c0      	nop			; (mov r8, r8)
    a858:	7ffffc00 	.word	0x7ffffc00
    a85c:	7ffffffe 	.word	0x7ffffffe
    a860:	7fffffff 	.word	0x7fffffff
    a864:	fffffb7f 	.word	0xfffffb7f

0000a868 <_fwalk_reent>:
    a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a86a:	4647      	mov	r7, r8
    a86c:	46ce      	mov	lr, r9
    a86e:	b580      	push	{r7, lr}
    a870:	27b8      	movs	r7, #184	; 0xb8
    a872:	4680      	mov	r8, r0
    a874:	4689      	mov	r9, r1
    a876:	2600      	movs	r6, #0
    a878:	00bf      	lsls	r7, r7, #2
    a87a:	4447      	add	r7, r8
    a87c:	687d      	ldr	r5, [r7, #4]
    a87e:	68bc      	ldr	r4, [r7, #8]
    a880:	3d01      	subs	r5, #1
    a882:	d40d      	bmi.n	a8a0 <_fwalk_reent+0x38>
    a884:	89a3      	ldrh	r3, [r4, #12]
    a886:	2b01      	cmp	r3, #1
    a888:	d907      	bls.n	a89a <_fwalk_reent+0x32>
    a88a:	220e      	movs	r2, #14
    a88c:	5ea3      	ldrsh	r3, [r4, r2]
    a88e:	3301      	adds	r3, #1
    a890:	d003      	beq.n	a89a <_fwalk_reent+0x32>
    a892:	0021      	movs	r1, r4
    a894:	4640      	mov	r0, r8
    a896:	47c8      	blx	r9
    a898:	4306      	orrs	r6, r0
    a89a:	3468      	adds	r4, #104	; 0x68
    a89c:	3d01      	subs	r5, #1
    a89e:	d2f1      	bcs.n	a884 <_fwalk_reent+0x1c>
    a8a0:	683f      	ldr	r7, [r7, #0]
    a8a2:	2f00      	cmp	r7, #0
    a8a4:	d1ea      	bne.n	a87c <_fwalk_reent+0x14>
    a8a6:	0030      	movs	r0, r6
    a8a8:	bcc0      	pop	{r6, r7}
    a8aa:	46b9      	mov	r9, r7
    a8ac:	46b0      	mov	r8, r6
    a8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a8b0 <_localeconv_r>:
    a8b0:	4800      	ldr	r0, [pc, #0]	; (a8b4 <_localeconv_r+0x4>)
    a8b2:	4770      	bx	lr
    a8b4:	1ffff698 	.word	0x1ffff698

0000a8b8 <__locale_mb_cur_max>:
    a8b8:	2294      	movs	r2, #148	; 0x94
    a8ba:	4b02      	ldr	r3, [pc, #8]	; (a8c4 <__locale_mb_cur_max+0xc>)
    a8bc:	0052      	lsls	r2, r2, #1
    a8be:	5c98      	ldrb	r0, [r3, r2]
    a8c0:	4770      	bx	lr
    a8c2:	46c0      	nop			; (mov r8, r8)
    a8c4:	1ffff5a8 	.word	0x1ffff5a8

0000a8c8 <__smakebuf_r>:
    a8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a8ca:	46c6      	mov	lr, r8
    a8cc:	b500      	push	{lr}
    a8ce:	898b      	ldrh	r3, [r1, #12]
    a8d0:	0005      	movs	r5, r0
    a8d2:	000c      	movs	r4, r1
    a8d4:	b096      	sub	sp, #88	; 0x58
    a8d6:	079a      	lsls	r2, r3, #30
    a8d8:	d509      	bpl.n	a8ee <__smakebuf_r+0x26>
    a8da:	0023      	movs	r3, r4
    a8dc:	3343      	adds	r3, #67	; 0x43
    a8de:	6023      	str	r3, [r4, #0]
    a8e0:	6123      	str	r3, [r4, #16]
    a8e2:	2301      	movs	r3, #1
    a8e4:	6163      	str	r3, [r4, #20]
    a8e6:	b016      	add	sp, #88	; 0x58
    a8e8:	bc80      	pop	{r7}
    a8ea:	46b8      	mov	r8, r7
    a8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a8ee:	220e      	movs	r2, #14
    a8f0:	5e89      	ldrsh	r1, [r1, r2]
    a8f2:	2900      	cmp	r1, #0
    a8f4:	db29      	blt.n	a94a <__smakebuf_r+0x82>
    a8f6:	466a      	mov	r2, sp
    a8f8:	f7fc fa3e 	bl	6d78 <_fstat_r>
    a8fc:	2800      	cmp	r0, #0
    a8fe:	db23      	blt.n	a948 <__smakebuf_r+0x80>
    a900:	23f0      	movs	r3, #240	; 0xf0
    a902:	9f01      	ldr	r7, [sp, #4]
    a904:	021b      	lsls	r3, r3, #8
    a906:	401f      	ands	r7, r3
    a908:	4b26      	ldr	r3, [pc, #152]	; (a9a4 <__smakebuf_r+0xdc>)
    a90a:	2680      	movs	r6, #128	; 0x80
    a90c:	469c      	mov	ip, r3
    a90e:	4467      	add	r7, ip
    a910:	427b      	negs	r3, r7
    a912:	415f      	adcs	r7, r3
    a914:	2380      	movs	r3, #128	; 0x80
    a916:	00db      	lsls	r3, r3, #3
    a918:	4698      	mov	r8, r3
    a91a:	0136      	lsls	r6, r6, #4
    a91c:	4641      	mov	r1, r8
    a91e:	0028      	movs	r0, r5
    a920:	f7fc f9be 	bl	6ca0 <_malloc_r>
    a924:	2800      	cmp	r0, #0
    a926:	d01c      	beq.n	a962 <__smakebuf_r+0x9a>
    a928:	2280      	movs	r2, #128	; 0x80
    a92a:	4b1f      	ldr	r3, [pc, #124]	; (a9a8 <__smakebuf_r+0xe0>)
    a92c:	63eb      	str	r3, [r5, #60]	; 0x3c
    a92e:	89a3      	ldrh	r3, [r4, #12]
    a930:	6020      	str	r0, [r4, #0]
    a932:	4313      	orrs	r3, r2
    a934:	4642      	mov	r2, r8
    a936:	b21b      	sxth	r3, r3
    a938:	81a3      	strh	r3, [r4, #12]
    a93a:	6120      	str	r0, [r4, #16]
    a93c:	6162      	str	r2, [r4, #20]
    a93e:	2f00      	cmp	r7, #0
    a940:	d11e      	bne.n	a980 <__smakebuf_r+0xb8>
    a942:	4333      	orrs	r3, r6
    a944:	81a3      	strh	r3, [r4, #12]
    a946:	e7ce      	b.n	a8e6 <__smakebuf_r+0x1e>
    a948:	89a3      	ldrh	r3, [r4, #12]
    a94a:	2700      	movs	r7, #0
    a94c:	061b      	lsls	r3, r3, #24
    a94e:	d512      	bpl.n	a976 <__smakebuf_r+0xae>
    a950:	2340      	movs	r3, #64	; 0x40
    a952:	4698      	mov	r8, r3
    a954:	0028      	movs	r0, r5
    a956:	4641      	mov	r1, r8
    a958:	2600      	movs	r6, #0
    a95a:	f7fc f9a1 	bl	6ca0 <_malloc_r>
    a95e:	2800      	cmp	r0, #0
    a960:	d1e2      	bne.n	a928 <__smakebuf_r+0x60>
    a962:	220c      	movs	r2, #12
    a964:	5ea3      	ldrsh	r3, [r4, r2]
    a966:	059a      	lsls	r2, r3, #22
    a968:	d4bd      	bmi.n	a8e6 <__smakebuf_r+0x1e>
    a96a:	2203      	movs	r2, #3
    a96c:	4393      	bics	r3, r2
    a96e:	2202      	movs	r2, #2
    a970:	4313      	orrs	r3, r2
    a972:	81a3      	strh	r3, [r4, #12]
    a974:	e7b1      	b.n	a8da <__smakebuf_r+0x12>
    a976:	2380      	movs	r3, #128	; 0x80
    a978:	00db      	lsls	r3, r3, #3
    a97a:	4698      	mov	r8, r3
    a97c:	2600      	movs	r6, #0
    a97e:	e7cd      	b.n	a91c <__smakebuf_r+0x54>
    a980:	0028      	movs	r0, r5
    a982:	230e      	movs	r3, #14
    a984:	5ee1      	ldrsh	r1, [r4, r3]
    a986:	f7fc fa06 	bl	6d96 <_isatty_r>
    a98a:	2800      	cmp	r0, #0
    a98c:	d102      	bne.n	a994 <__smakebuf_r+0xcc>
    a98e:	220c      	movs	r2, #12
    a990:	5ea3      	ldrsh	r3, [r4, r2]
    a992:	e7d6      	b.n	a942 <__smakebuf_r+0x7a>
    a994:	2203      	movs	r2, #3
    a996:	89a3      	ldrh	r3, [r4, #12]
    a998:	4393      	bics	r3, r2
    a99a:	2201      	movs	r2, #1
    a99c:	4313      	orrs	r3, r2
    a99e:	b21b      	sxth	r3, r3
    a9a0:	e7cf      	b.n	a942 <__smakebuf_r+0x7a>
    a9a2:	46c0      	nop			; (mov r8, r8)
    a9a4:	ffffe000 	.word	0xffffe000
    a9a8:	0000a3ad 	.word	0x0000a3ad

0000a9ac <__ascii_mbtowc>:
    a9ac:	b082      	sub	sp, #8
    a9ae:	2900      	cmp	r1, #0
    a9b0:	d00a      	beq.n	a9c8 <__ascii_mbtowc+0x1c>
    a9b2:	2a00      	cmp	r2, #0
    a9b4:	d00b      	beq.n	a9ce <__ascii_mbtowc+0x22>
    a9b6:	2b00      	cmp	r3, #0
    a9b8:	d00b      	beq.n	a9d2 <__ascii_mbtowc+0x26>
    a9ba:	7813      	ldrb	r3, [r2, #0]
    a9bc:	600b      	str	r3, [r1, #0]
    a9be:	7810      	ldrb	r0, [r2, #0]
    a9c0:	1e43      	subs	r3, r0, #1
    a9c2:	4198      	sbcs	r0, r3
    a9c4:	b002      	add	sp, #8
    a9c6:	4770      	bx	lr
    a9c8:	a901      	add	r1, sp, #4
    a9ca:	2a00      	cmp	r2, #0
    a9cc:	d1f3      	bne.n	a9b6 <__ascii_mbtowc+0xa>
    a9ce:	2000      	movs	r0, #0
    a9d0:	e7f8      	b.n	a9c4 <__ascii_mbtowc+0x18>
    a9d2:	2002      	movs	r0, #2
    a9d4:	4240      	negs	r0, r0
    a9d6:	e7f5      	b.n	a9c4 <__ascii_mbtowc+0x18>

0000a9d8 <memchr>:
    a9d8:	b570      	push	{r4, r5, r6, lr}
    a9da:	b2cc      	uxtb	r4, r1
    a9dc:	0783      	lsls	r3, r0, #30
    a9de:	d00d      	beq.n	a9fc <memchr+0x24>
    a9e0:	1e53      	subs	r3, r2, #1
    a9e2:	2a00      	cmp	r2, #0
    a9e4:	d00f      	beq.n	aa06 <memchr+0x2e>
    a9e6:	2503      	movs	r5, #3
    a9e8:	e004      	b.n	a9f4 <memchr+0x1c>
    a9ea:	3001      	adds	r0, #1
    a9ec:	4228      	tst	r0, r5
    a9ee:	d006      	beq.n	a9fe <memchr+0x26>
    a9f0:	3b01      	subs	r3, #1
    a9f2:	d308      	bcc.n	aa06 <memchr+0x2e>
    a9f4:	7802      	ldrb	r2, [r0, #0]
    a9f6:	42a2      	cmp	r2, r4
    a9f8:	d1f7      	bne.n	a9ea <memchr+0x12>
    a9fa:	bd70      	pop	{r4, r5, r6, pc}
    a9fc:	0013      	movs	r3, r2
    a9fe:	2b03      	cmp	r3, #3
    aa00:	d80c      	bhi.n	aa1c <memchr+0x44>
    aa02:	2b00      	cmp	r3, #0
    aa04:	d101      	bne.n	aa0a <memchr+0x32>
    aa06:	2000      	movs	r0, #0
    aa08:	e7f7      	b.n	a9fa <memchr+0x22>
    aa0a:	18c3      	adds	r3, r0, r3
    aa0c:	e002      	b.n	aa14 <memchr+0x3c>
    aa0e:	3001      	adds	r0, #1
    aa10:	4283      	cmp	r3, r0
    aa12:	d0f8      	beq.n	aa06 <memchr+0x2e>
    aa14:	7802      	ldrb	r2, [r0, #0]
    aa16:	42a2      	cmp	r2, r4
    aa18:	d1f9      	bne.n	aa0e <memchr+0x36>
    aa1a:	e7ee      	b.n	a9fa <memchr+0x22>
    aa1c:	22ff      	movs	r2, #255	; 0xff
    aa1e:	4011      	ands	r1, r2
    aa20:	020a      	lsls	r2, r1, #8
    aa22:	430a      	orrs	r2, r1
    aa24:	0415      	lsls	r5, r2, #16
    aa26:	4e07      	ldr	r6, [pc, #28]	; (aa44 <memchr+0x6c>)
    aa28:	4315      	orrs	r5, r2
    aa2a:	6802      	ldr	r2, [r0, #0]
    aa2c:	4906      	ldr	r1, [pc, #24]	; (aa48 <memchr+0x70>)
    aa2e:	406a      	eors	r2, r5
    aa30:	1851      	adds	r1, r2, r1
    aa32:	4391      	bics	r1, r2
    aa34:	4231      	tst	r1, r6
    aa36:	d1e8      	bne.n	aa0a <memchr+0x32>
    aa38:	3b04      	subs	r3, #4
    aa3a:	3004      	adds	r0, #4
    aa3c:	2b03      	cmp	r3, #3
    aa3e:	d8f4      	bhi.n	aa2a <memchr+0x52>
    aa40:	e7df      	b.n	aa02 <memchr+0x2a>
    aa42:	46c0      	nop			; (mov r8, r8)
    aa44:	80808080 	.word	0x80808080
    aa48:	fefefeff 	.word	0xfefefeff

0000aa4c <memmove>:
    aa4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa4e:	4288      	cmp	r0, r1
    aa50:	d90a      	bls.n	aa68 <memmove+0x1c>
    aa52:	188b      	adds	r3, r1, r2
    aa54:	4298      	cmp	r0, r3
    aa56:	d207      	bcs.n	aa68 <memmove+0x1c>
    aa58:	1e53      	subs	r3, r2, #1
    aa5a:	2a00      	cmp	r2, #0
    aa5c:	d003      	beq.n	aa66 <memmove+0x1a>
    aa5e:	5cca      	ldrb	r2, [r1, r3]
    aa60:	54c2      	strb	r2, [r0, r3]
    aa62:	3b01      	subs	r3, #1
    aa64:	d2fb      	bcs.n	aa5e <memmove+0x12>
    aa66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa68:	2a0f      	cmp	r2, #15
    aa6a:	d80b      	bhi.n	aa84 <memmove+0x38>
    aa6c:	0005      	movs	r5, r0
    aa6e:	1e56      	subs	r6, r2, #1
    aa70:	2a00      	cmp	r2, #0
    aa72:	d0f8      	beq.n	aa66 <memmove+0x1a>
    aa74:	2300      	movs	r3, #0
    aa76:	5ccc      	ldrb	r4, [r1, r3]
    aa78:	001a      	movs	r2, r3
    aa7a:	54ec      	strb	r4, [r5, r3]
    aa7c:	3301      	adds	r3, #1
    aa7e:	4296      	cmp	r6, r2
    aa80:	d1f9      	bne.n	aa76 <memmove+0x2a>
    aa82:	e7f0      	b.n	aa66 <memmove+0x1a>
    aa84:	2403      	movs	r4, #3
    aa86:	0003      	movs	r3, r0
    aa88:	0026      	movs	r6, r4
    aa8a:	430b      	orrs	r3, r1
    aa8c:	401e      	ands	r6, r3
    aa8e:	421c      	tst	r4, r3
    aa90:	d12d      	bne.n	aaee <memmove+0xa2>
    aa92:	0015      	movs	r5, r2
    aa94:	3d10      	subs	r5, #16
    aa96:	092d      	lsrs	r5, r5, #4
    aa98:	0003      	movs	r3, r0
    aa9a:	000c      	movs	r4, r1
    aa9c:	46ac      	mov	ip, r5
    aa9e:	012f      	lsls	r7, r5, #4
    aaa0:	183f      	adds	r7, r7, r0
    aaa2:	6825      	ldr	r5, [r4, #0]
    aaa4:	601d      	str	r5, [r3, #0]
    aaa6:	6865      	ldr	r5, [r4, #4]
    aaa8:	605d      	str	r5, [r3, #4]
    aaaa:	68a5      	ldr	r5, [r4, #8]
    aaac:	609d      	str	r5, [r3, #8]
    aaae:	68e5      	ldr	r5, [r4, #12]
    aab0:	3410      	adds	r4, #16
    aab2:	60dd      	str	r5, [r3, #12]
    aab4:	001d      	movs	r5, r3
    aab6:	3310      	adds	r3, #16
    aab8:	42bd      	cmp	r5, r7
    aaba:	d1f2      	bne.n	aaa2 <memmove+0x56>
    aabc:	4665      	mov	r5, ip
    aabe:	230f      	movs	r3, #15
    aac0:	240c      	movs	r4, #12
    aac2:	3501      	adds	r5, #1
    aac4:	012d      	lsls	r5, r5, #4
    aac6:	1949      	adds	r1, r1, r5
    aac8:	4013      	ands	r3, r2
    aaca:	1945      	adds	r5, r0, r5
    aacc:	4214      	tst	r4, r2
    aace:	d011      	beq.n	aaf4 <memmove+0xa8>
    aad0:	598c      	ldr	r4, [r1, r6]
    aad2:	51ac      	str	r4, [r5, r6]
    aad4:	3604      	adds	r6, #4
    aad6:	1b9c      	subs	r4, r3, r6
    aad8:	2c03      	cmp	r4, #3
    aada:	d8f9      	bhi.n	aad0 <memmove+0x84>
    aadc:	3b04      	subs	r3, #4
    aade:	089b      	lsrs	r3, r3, #2
    aae0:	3301      	adds	r3, #1
    aae2:	009b      	lsls	r3, r3, #2
    aae4:	18ed      	adds	r5, r5, r3
    aae6:	18c9      	adds	r1, r1, r3
    aae8:	2303      	movs	r3, #3
    aaea:	401a      	ands	r2, r3
    aaec:	e7bf      	b.n	aa6e <memmove+0x22>
    aaee:	0005      	movs	r5, r0
    aaf0:	1e56      	subs	r6, r2, #1
    aaf2:	e7bf      	b.n	aa74 <memmove+0x28>
    aaf4:	001a      	movs	r2, r3
    aaf6:	e7ba      	b.n	aa6e <memmove+0x22>

0000aaf8 <raise>:
    aaf8:	4b16      	ldr	r3, [pc, #88]	; (ab54 <raise+0x5c>)
    aafa:	b570      	push	{r4, r5, r6, lr}
    aafc:	0004      	movs	r4, r0
    aafe:	681d      	ldr	r5, [r3, #0]
    ab00:	281f      	cmp	r0, #31
    ab02:	d821      	bhi.n	ab48 <raise+0x50>
    ab04:	23b7      	movs	r3, #183	; 0xb7
    ab06:	009b      	lsls	r3, r3, #2
    ab08:	58eb      	ldr	r3, [r5, r3]
    ab0a:	2b00      	cmp	r3, #0
    ab0c:	d00d      	beq.n	ab2a <raise+0x32>
    ab0e:	0082      	lsls	r2, r0, #2
    ab10:	189b      	adds	r3, r3, r2
    ab12:	681a      	ldr	r2, [r3, #0]
    ab14:	2a00      	cmp	r2, #0
    ab16:	d008      	beq.n	ab2a <raise+0x32>
    ab18:	2a01      	cmp	r2, #1
    ab1a:	d013      	beq.n	ab44 <raise+0x4c>
    ab1c:	1c51      	adds	r1, r2, #1
    ab1e:	d00d      	beq.n	ab3c <raise+0x44>
    ab20:	2100      	movs	r1, #0
    ab22:	6019      	str	r1, [r3, #0]
    ab24:	4790      	blx	r2
    ab26:	2000      	movs	r0, #0
    ab28:	bd70      	pop	{r4, r5, r6, pc}
    ab2a:	0028      	movs	r0, r5
    ab2c:	f7fc f8f4 	bl	6d18 <_getpid_r>
    ab30:	0022      	movs	r2, r4
    ab32:	0001      	movs	r1, r0
    ab34:	0028      	movs	r0, r5
    ab36:	f7fc f940 	bl	6dba <_kill_r>
    ab3a:	e7f5      	b.n	ab28 <raise+0x30>
    ab3c:	2316      	movs	r3, #22
    ab3e:	2001      	movs	r0, #1
    ab40:	602b      	str	r3, [r5, #0]
    ab42:	e7f1      	b.n	ab28 <raise+0x30>
    ab44:	2000      	movs	r0, #0
    ab46:	e7ef      	b.n	ab28 <raise+0x30>
    ab48:	2316      	movs	r3, #22
    ab4a:	2001      	movs	r0, #1
    ab4c:	602b      	str	r3, [r5, #0]
    ab4e:	4240      	negs	r0, r0
    ab50:	e7ea      	b.n	ab28 <raise+0x30>
    ab52:	46c0      	nop			; (mov r8, r8)
    ab54:	1ffff17c 	.word	0x1ffff17c

0000ab58 <__sread>:
    ab58:	b570      	push	{r4, r5, r6, lr}
    ab5a:	000c      	movs	r4, r1
    ab5c:	250e      	movs	r5, #14
    ab5e:	5f49      	ldrsh	r1, [r1, r5]
    ab60:	f7fc f962 	bl	6e28 <_read_r>
    ab64:	2800      	cmp	r0, #0
    ab66:	db03      	blt.n	ab70 <__sread+0x18>
    ab68:	6d23      	ldr	r3, [r4, #80]	; 0x50
    ab6a:	181b      	adds	r3, r3, r0
    ab6c:	6523      	str	r3, [r4, #80]	; 0x50
    ab6e:	bd70      	pop	{r4, r5, r6, pc}
    ab70:	89a3      	ldrh	r3, [r4, #12]
    ab72:	4a02      	ldr	r2, [pc, #8]	; (ab7c <__sread+0x24>)
    ab74:	4013      	ands	r3, r2
    ab76:	81a3      	strh	r3, [r4, #12]
    ab78:	e7f9      	b.n	ab6e <__sread+0x16>
    ab7a:	46c0      	nop			; (mov r8, r8)
    ab7c:	ffffefff 	.word	0xffffefff

0000ab80 <__swrite>:
    ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab82:	000c      	movs	r4, r1
    ab84:	001f      	movs	r7, r3
    ab86:	230c      	movs	r3, #12
    ab88:	5ec9      	ldrsh	r1, [r1, r3]
    ab8a:	0005      	movs	r5, r0
    ab8c:	0016      	movs	r6, r2
    ab8e:	05cb      	lsls	r3, r1, #23
    ab90:	d40a      	bmi.n	aba8 <__swrite+0x28>
    ab92:	4b0a      	ldr	r3, [pc, #40]	; (abbc <__swrite+0x3c>)
    ab94:	0032      	movs	r2, r6
    ab96:	4019      	ands	r1, r3
    ab98:	0028      	movs	r0, r5
    ab9a:	81a1      	strh	r1, [r4, #12]
    ab9c:	230e      	movs	r3, #14
    ab9e:	5ee1      	ldrsh	r1, [r4, r3]
    aba0:	003b      	movs	r3, r7
    aba2:	f7fc f969 	bl	6e78 <_write_r>
    aba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aba8:	230e      	movs	r3, #14
    abaa:	5ee1      	ldrsh	r1, [r4, r3]
    abac:	2200      	movs	r2, #0
    abae:	2302      	movs	r3, #2
    abb0:	f7fc f912 	bl	6dd8 <_lseek_r>
    abb4:	230c      	movs	r3, #12
    abb6:	5ee1      	ldrsh	r1, [r4, r3]
    abb8:	e7eb      	b.n	ab92 <__swrite+0x12>
    abba:	46c0      	nop			; (mov r8, r8)
    abbc:	ffffefff 	.word	0xffffefff

0000abc0 <__sseek>:
    abc0:	b570      	push	{r4, r5, r6, lr}
    abc2:	000c      	movs	r4, r1
    abc4:	250e      	movs	r5, #14
    abc6:	5f49      	ldrsh	r1, [r1, r5]
    abc8:	f7fc f906 	bl	6dd8 <_lseek_r>
    abcc:	1c43      	adds	r3, r0, #1
    abce:	d006      	beq.n	abde <__sseek+0x1e>
    abd0:	2380      	movs	r3, #128	; 0x80
    abd2:	89a2      	ldrh	r2, [r4, #12]
    abd4:	015b      	lsls	r3, r3, #5
    abd6:	4313      	orrs	r3, r2
    abd8:	81a3      	strh	r3, [r4, #12]
    abda:	6520      	str	r0, [r4, #80]	; 0x50
    abdc:	bd70      	pop	{r4, r5, r6, pc}
    abde:	89a3      	ldrh	r3, [r4, #12]
    abe0:	4a01      	ldr	r2, [pc, #4]	; (abe8 <__sseek+0x28>)
    abe2:	4013      	ands	r3, r2
    abe4:	81a3      	strh	r3, [r4, #12]
    abe6:	e7f9      	b.n	abdc <__sseek+0x1c>
    abe8:	ffffefff 	.word	0xffffefff

0000abec <__sclose>:
    abec:	b510      	push	{r4, lr}
    abee:	230e      	movs	r3, #14
    abf0:	5ec9      	ldrsh	r1, [r1, r3]
    abf2:	f7fc f89b 	bl	6d2c <_close_r>
    abf6:	bd10      	pop	{r4, pc}

0000abf8 <__swbuf_r>:
    abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abfa:	0005      	movs	r5, r0
    abfc:	000e      	movs	r6, r1
    abfe:	0014      	movs	r4, r2
    ac00:	2800      	cmp	r0, #0
    ac02:	d002      	beq.n	ac0a <__swbuf_r+0x12>
    ac04:	6b83      	ldr	r3, [r0, #56]	; 0x38
    ac06:	2b00      	cmp	r3, #0
    ac08:	d04b      	beq.n	aca2 <__swbuf_r+0xaa>
    ac0a:	69a3      	ldr	r3, [r4, #24]
    ac0c:	89a2      	ldrh	r2, [r4, #12]
    ac0e:	60a3      	str	r3, [r4, #8]
    ac10:	230c      	movs	r3, #12
    ac12:	5ee0      	ldrsh	r0, [r4, r3]
    ac14:	0713      	lsls	r3, r2, #28
    ac16:	d51f      	bpl.n	ac58 <__swbuf_r+0x60>
    ac18:	6923      	ldr	r3, [r4, #16]
    ac1a:	2b00      	cmp	r3, #0
    ac1c:	d01c      	beq.n	ac58 <__swbuf_r+0x60>
    ac1e:	21ff      	movs	r1, #255	; 0xff
    ac20:	b2f7      	uxtb	r7, r6
    ac22:	400e      	ands	r6, r1
    ac24:	2180      	movs	r1, #128	; 0x80
    ac26:	0189      	lsls	r1, r1, #6
    ac28:	420a      	tst	r2, r1
    ac2a:	d026      	beq.n	ac7a <__swbuf_r+0x82>
    ac2c:	6822      	ldr	r2, [r4, #0]
    ac2e:	6961      	ldr	r1, [r4, #20]
    ac30:	1ad3      	subs	r3, r2, r3
    ac32:	4299      	cmp	r1, r3
    ac34:	dd2c      	ble.n	ac90 <__swbuf_r+0x98>
    ac36:	3301      	adds	r3, #1
    ac38:	68a1      	ldr	r1, [r4, #8]
    ac3a:	3901      	subs	r1, #1
    ac3c:	60a1      	str	r1, [r4, #8]
    ac3e:	1c51      	adds	r1, r2, #1
    ac40:	6021      	str	r1, [r4, #0]
    ac42:	7017      	strb	r7, [r2, #0]
    ac44:	6962      	ldr	r2, [r4, #20]
    ac46:	429a      	cmp	r2, r3
    ac48:	d02e      	beq.n	aca8 <__swbuf_r+0xb0>
    ac4a:	89a3      	ldrh	r3, [r4, #12]
    ac4c:	07db      	lsls	r3, r3, #31
    ac4e:	d501      	bpl.n	ac54 <__swbuf_r+0x5c>
    ac50:	2e0a      	cmp	r6, #10
    ac52:	d029      	beq.n	aca8 <__swbuf_r+0xb0>
    ac54:	0030      	movs	r0, r6
    ac56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac58:	0021      	movs	r1, r4
    ac5a:	0028      	movs	r0, r5
    ac5c:	f7ff fa80 	bl	a160 <__swsetup_r>
    ac60:	2800      	cmp	r0, #0
    ac62:	d127      	bne.n	acb4 <__swbuf_r+0xbc>
    ac64:	21ff      	movs	r1, #255	; 0xff
    ac66:	b2f7      	uxtb	r7, r6
    ac68:	400e      	ands	r6, r1
    ac6a:	2180      	movs	r1, #128	; 0x80
    ac6c:	89a2      	ldrh	r2, [r4, #12]
    ac6e:	0189      	lsls	r1, r1, #6
    ac70:	230c      	movs	r3, #12
    ac72:	5ee0      	ldrsh	r0, [r4, r3]
    ac74:	6923      	ldr	r3, [r4, #16]
    ac76:	420a      	tst	r2, r1
    ac78:	d1d8      	bne.n	ac2c <__swbuf_r+0x34>
    ac7a:	4301      	orrs	r1, r0
    ac7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
    ac7e:	81a1      	strh	r1, [r4, #12]
    ac80:	490e      	ldr	r1, [pc, #56]	; (acbc <__swbuf_r+0xc4>)
    ac82:	400a      	ands	r2, r1
    ac84:	6662      	str	r2, [r4, #100]	; 0x64
    ac86:	6961      	ldr	r1, [r4, #20]
    ac88:	6822      	ldr	r2, [r4, #0]
    ac8a:	1ad3      	subs	r3, r2, r3
    ac8c:	4299      	cmp	r1, r3
    ac8e:	dcd2      	bgt.n	ac36 <__swbuf_r+0x3e>
    ac90:	0021      	movs	r1, r4
    ac92:	0028      	movs	r0, r5
    ac94:	f7ff fb74 	bl	a380 <_fflush_r>
    ac98:	2800      	cmp	r0, #0
    ac9a:	d10b      	bne.n	acb4 <__swbuf_r+0xbc>
    ac9c:	2301      	movs	r3, #1
    ac9e:	6822      	ldr	r2, [r4, #0]
    aca0:	e7ca      	b.n	ac38 <__swbuf_r+0x40>
    aca2:	f7ff fbff 	bl	a4a4 <__sinit>
    aca6:	e7b0      	b.n	ac0a <__swbuf_r+0x12>
    aca8:	0021      	movs	r1, r4
    acaa:	0028      	movs	r0, r5
    acac:	f7ff fb68 	bl	a380 <_fflush_r>
    acb0:	2800      	cmp	r0, #0
    acb2:	d0cf      	beq.n	ac54 <__swbuf_r+0x5c>
    acb4:	2601      	movs	r6, #1
    acb6:	4276      	negs	r6, r6
    acb8:	e7cc      	b.n	ac54 <__swbuf_r+0x5c>
    acba:	46c0      	nop			; (mov r8, r8)
    acbc:	ffffdfff 	.word	0xffffdfff

0000acc0 <_wcsnrtombs_l>:
    acc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    acc2:	46de      	mov	lr, fp
    acc4:	4657      	mov	r7, sl
    acc6:	464e      	mov	r6, r9
    acc8:	4645      	mov	r5, r8
    acca:	b5e0      	push	{r5, r6, r7, lr}
    accc:	b089      	sub	sp, #36	; 0x24
    acce:	4691      	mov	r9, r2
    acd0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    acd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    acd4:	4683      	mov	fp, r0
    acd6:	4692      	mov	sl, r2
    acd8:	9102      	str	r1, [sp, #8]
    acda:	2c00      	cmp	r4, #0
    acdc:	d05d      	beq.n	ad9a <_wcsnrtombs_l+0xda>
    acde:	9a02      	ldr	r2, [sp, #8]
    ace0:	2a00      	cmp	r2, #0
    ace2:	d060      	beq.n	ada6 <_wcsnrtombs_l+0xe6>
    ace4:	464a      	mov	r2, r9
    ace6:	6815      	ldr	r5, [r2, #0]
    ace8:	4652      	mov	r2, sl
    acea:	2a00      	cmp	r2, #0
    acec:	d06a      	beq.n	adc4 <_wcsnrtombs_l+0x104>
    acee:	1e5e      	subs	r6, r3, #1
    acf0:	2b00      	cmp	r3, #0
    acf2:	d067      	beq.n	adc4 <_wcsnrtombs_l+0x104>
    acf4:	2700      	movs	r7, #0
    acf6:	9b02      	ldr	r3, [sp, #8]
    acf8:	46b8      	mov	r8, r7
    acfa:	9303      	str	r3, [sp, #12]
    acfc:	e00b      	b.n	ad16 <_wcsnrtombs_l+0x56>
    acfe:	9b02      	ldr	r3, [sp, #8]
    ad00:	2b00      	cmp	r3, #0
    ad02:	d127      	bne.n	ad54 <_wcsnrtombs_l+0x94>
    ad04:	682b      	ldr	r3, [r5, #0]
    ad06:	2b00      	cmp	r3, #0
    ad08:	d03e      	beq.n	ad88 <_wcsnrtombs_l+0xc8>
    ad0a:	4552      	cmp	r2, sl
    ad0c:	d258      	bcs.n	adc0 <_wcsnrtombs_l+0x100>
    ad0e:	3504      	adds	r5, #4
    ad10:	3e01      	subs	r6, #1
    ad12:	d355      	bcc.n	adc0 <_wcsnrtombs_l+0x100>
    ad14:	4690      	mov	r8, r2
    ad16:	21e0      	movs	r1, #224	; 0xe0
    ad18:	6823      	ldr	r3, [r4, #0]
    ad1a:	4658      	mov	r0, fp
    ad1c:	9300      	str	r3, [sp, #0]
    ad1e:	6863      	ldr	r3, [r4, #4]
    ad20:	682a      	ldr	r2, [r5, #0]
    ad22:	9301      	str	r3, [sp, #4]
    ad24:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ad26:	585f      	ldr	r7, [r3, r1]
    ad28:	0023      	movs	r3, r4
    ad2a:	a905      	add	r1, sp, #20
    ad2c:	47b8      	blx	r7
    ad2e:	1c43      	adds	r3, r0, #1
    ad30:	d03f      	beq.n	adb2 <_wcsnrtombs_l+0xf2>
    ad32:	4643      	mov	r3, r8
    ad34:	18c2      	adds	r2, r0, r3
    ad36:	4552      	cmp	r2, sl
    ad38:	d9e1      	bls.n	acfe <_wcsnrtombs_l+0x3e>
    ad3a:	4647      	mov	r7, r8
    ad3c:	9b00      	ldr	r3, [sp, #0]
    ad3e:	6023      	str	r3, [r4, #0]
    ad40:	9b01      	ldr	r3, [sp, #4]
    ad42:	6063      	str	r3, [r4, #4]
    ad44:	0038      	movs	r0, r7
    ad46:	b009      	add	sp, #36	; 0x24
    ad48:	bcf0      	pop	{r4, r5, r6, r7}
    ad4a:	46bb      	mov	fp, r7
    ad4c:	46b2      	mov	sl, r6
    ad4e:	46a9      	mov	r9, r5
    ad50:	46a0      	mov	r8, r4
    ad52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad54:	2800      	cmp	r0, #0
    ad56:	dd0f      	ble.n	ad78 <_wcsnrtombs_l+0xb8>
    ad58:	2301      	movs	r3, #1
    ad5a:	9903      	ldr	r1, [sp, #12]
    ad5c:	1e4f      	subs	r7, r1, #1
    ad5e:	a904      	add	r1, sp, #16
    ad60:	3103      	adds	r1, #3
    ad62:	5cc9      	ldrb	r1, [r1, r3]
    ad64:	54f9      	strb	r1, [r7, r3]
    ad66:	0019      	movs	r1, r3
    ad68:	3301      	adds	r3, #1
    ad6a:	4288      	cmp	r0, r1
    ad6c:	d1f7      	bne.n	ad5e <_wcsnrtombs_l+0x9e>
    ad6e:	9b03      	ldr	r3, [sp, #12]
    ad70:	469c      	mov	ip, r3
    ad72:	4484      	add	ip, r0
    ad74:	4663      	mov	r3, ip
    ad76:	9303      	str	r3, [sp, #12]
    ad78:	464b      	mov	r3, r9
    ad7a:	4649      	mov	r1, r9
    ad7c:	681b      	ldr	r3, [r3, #0]
    ad7e:	3304      	adds	r3, #4
    ad80:	600b      	str	r3, [r1, #0]
    ad82:	682b      	ldr	r3, [r5, #0]
    ad84:	2b00      	cmp	r3, #0
    ad86:	d1c0      	bne.n	ad0a <_wcsnrtombs_l+0x4a>
    ad88:	9902      	ldr	r1, [sp, #8]
    ad8a:	2900      	cmp	r1, #0
    ad8c:	d001      	beq.n	ad92 <_wcsnrtombs_l+0xd2>
    ad8e:	4649      	mov	r1, r9
    ad90:	600b      	str	r3, [r1, #0]
    ad92:	2300      	movs	r3, #0
    ad94:	1e57      	subs	r7, r2, #1
    ad96:	6023      	str	r3, [r4, #0]
    ad98:	e7d4      	b.n	ad44 <_wcsnrtombs_l+0x84>
    ad9a:	0004      	movs	r4, r0
    ad9c:	9a02      	ldr	r2, [sp, #8]
    ad9e:	341d      	adds	r4, #29
    ada0:	34ff      	adds	r4, #255	; 0xff
    ada2:	2a00      	cmp	r2, #0
    ada4:	d19e      	bne.n	ace4 <_wcsnrtombs_l+0x24>
    ada6:	464a      	mov	r2, r9
    ada8:	6815      	ldr	r5, [r2, #0]
    adaa:	2201      	movs	r2, #1
    adac:	4252      	negs	r2, r2
    adae:	4692      	mov	sl, r2
    adb0:	e79d      	b.n	acee <_wcsnrtombs_l+0x2e>
    adb2:	238a      	movs	r3, #138	; 0x8a
    adb4:	465a      	mov	r2, fp
    adb6:	6013      	str	r3, [r2, #0]
    adb8:	2300      	movs	r3, #0
    adba:	0007      	movs	r7, r0
    adbc:	6023      	str	r3, [r4, #0]
    adbe:	e7c1      	b.n	ad44 <_wcsnrtombs_l+0x84>
    adc0:	0017      	movs	r7, r2
    adc2:	e7bf      	b.n	ad44 <_wcsnrtombs_l+0x84>
    adc4:	2700      	movs	r7, #0
    adc6:	e7bd      	b.n	ad44 <_wcsnrtombs_l+0x84>

0000adc8 <_wcsnrtombs_r>:
    adc8:	b510      	push	{r4, lr}
    adca:	4806      	ldr	r0, [pc, #24]	; (ade4 <_wcsnrtombs_r+0x1c>)
    adcc:	4c06      	ldr	r4, [pc, #24]	; (ade8 <_wcsnrtombs_r+0x20>)
    adce:	b084      	sub	sp, #16
    add0:	6800      	ldr	r0, [r0, #0]
    add2:	9402      	str	r4, [sp, #8]
    add4:	9c07      	ldr	r4, [sp, #28]
    add6:	9401      	str	r4, [sp, #4]
    add8:	9c06      	ldr	r4, [sp, #24]
    adda:	9400      	str	r4, [sp, #0]
    addc:	f7ff ff70 	bl	acc0 <_wcsnrtombs_l>
    ade0:	b004      	add	sp, #16
    ade2:	bd10      	pop	{r4, pc}
    ade4:	1ffff17c 	.word	0x1ffff17c
    ade8:	1ffff5a8 	.word	0x1ffff5a8

0000adec <__ascii_wctomb>:
    adec:	2900      	cmp	r1, #0
    adee:	d009      	beq.n	ae04 <__ascii_wctomb+0x18>
    adf0:	2aff      	cmp	r2, #255	; 0xff
    adf2:	d802      	bhi.n	adfa <__ascii_wctomb+0xe>
    adf4:	2001      	movs	r0, #1
    adf6:	700a      	strb	r2, [r1, #0]
    adf8:	4770      	bx	lr
    adfa:	238a      	movs	r3, #138	; 0x8a
    adfc:	6003      	str	r3, [r0, #0]
    adfe:	2001      	movs	r0, #1
    ae00:	4240      	negs	r0, r0
    ae02:	e7f9      	b.n	adf8 <__ascii_wctomb+0xc>
    ae04:	2000      	movs	r0, #0
    ae06:	e7f7      	b.n	adf8 <__ascii_wctomb+0xc>

0000ae08 <_fclose_r>:
    ae08:	b570      	push	{r4, r5, r6, lr}
    ae0a:	0006      	movs	r6, r0
    ae0c:	1e0c      	subs	r4, r1, #0
    ae0e:	d008      	beq.n	ae22 <_fclose_r+0x1a>
    ae10:	2800      	cmp	r0, #0
    ae12:	d002      	beq.n	ae1a <_fclose_r+0x12>
    ae14:	6b83      	ldr	r3, [r0, #56]	; 0x38
    ae16:	2b00      	cmp	r3, #0
    ae18:	d031      	beq.n	ae7e <_fclose_r+0x76>
    ae1a:	220c      	movs	r2, #12
    ae1c:	5ea3      	ldrsh	r3, [r4, r2]
    ae1e:	2b00      	cmp	r3, #0
    ae20:	d102      	bne.n	ae28 <_fclose_r+0x20>
    ae22:	2500      	movs	r5, #0
    ae24:	0028      	movs	r0, r5
    ae26:	bd70      	pop	{r4, r5, r6, pc}
    ae28:	0021      	movs	r1, r4
    ae2a:	0030      	movs	r0, r6
    ae2c:	f7ff fa0e 	bl	a24c <__sflush_r>
    ae30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ae32:	0005      	movs	r5, r0
    ae34:	2b00      	cmp	r3, #0
    ae36:	d004      	beq.n	ae42 <_fclose_r+0x3a>
    ae38:	0030      	movs	r0, r6
    ae3a:	69e1      	ldr	r1, [r4, #28]
    ae3c:	4798      	blx	r3
    ae3e:	2800      	cmp	r0, #0
    ae40:	db24      	blt.n	ae8c <_fclose_r+0x84>
    ae42:	89a3      	ldrh	r3, [r4, #12]
    ae44:	061b      	lsls	r3, r3, #24
    ae46:	d426      	bmi.n	ae96 <_fclose_r+0x8e>
    ae48:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ae4a:	2900      	cmp	r1, #0
    ae4c:	d008      	beq.n	ae60 <_fclose_r+0x58>
    ae4e:	0023      	movs	r3, r4
    ae50:	3340      	adds	r3, #64	; 0x40
    ae52:	4299      	cmp	r1, r3
    ae54:	d002      	beq.n	ae5c <_fclose_r+0x54>
    ae56:	0030      	movs	r0, r6
    ae58:	f7fb ff51 	bl	6cfe <_free_r>
    ae5c:	2300      	movs	r3, #0
    ae5e:	6323      	str	r3, [r4, #48]	; 0x30
    ae60:	6c61      	ldr	r1, [r4, #68]	; 0x44
    ae62:	2900      	cmp	r1, #0
    ae64:	d004      	beq.n	ae70 <_fclose_r+0x68>
    ae66:	0030      	movs	r0, r6
    ae68:	f7fb ff49 	bl	6cfe <_free_r>
    ae6c:	2300      	movs	r3, #0
    ae6e:	6463      	str	r3, [r4, #68]	; 0x44
    ae70:	f7ff fb20 	bl	a4b4 <__sfp_lock_acquire>
    ae74:	2300      	movs	r3, #0
    ae76:	81a3      	strh	r3, [r4, #12]
    ae78:	f7ff fb1e 	bl	a4b8 <__sfp_lock_release>
    ae7c:	e7d2      	b.n	ae24 <_fclose_r+0x1c>
    ae7e:	f7ff fb11 	bl	a4a4 <__sinit>
    ae82:	220c      	movs	r2, #12
    ae84:	5ea3      	ldrsh	r3, [r4, r2]
    ae86:	2b00      	cmp	r3, #0
    ae88:	d0cb      	beq.n	ae22 <_fclose_r+0x1a>
    ae8a:	e7cd      	b.n	ae28 <_fclose_r+0x20>
    ae8c:	2501      	movs	r5, #1
    ae8e:	89a3      	ldrh	r3, [r4, #12]
    ae90:	426d      	negs	r5, r5
    ae92:	061b      	lsls	r3, r3, #24
    ae94:	d5d8      	bpl.n	ae48 <_fclose_r+0x40>
    ae96:	0030      	movs	r0, r6
    ae98:	6921      	ldr	r1, [r4, #16]
    ae9a:	f7fb ff30 	bl	6cfe <_free_r>
    ae9e:	e7d3      	b.n	ae48 <_fclose_r+0x40>

0000aea0 <__udivsi3>:
    aea0:	2200      	movs	r2, #0
    aea2:	0843      	lsrs	r3, r0, #1
    aea4:	428b      	cmp	r3, r1
    aea6:	d374      	bcc.n	af92 <__udivsi3+0xf2>
    aea8:	0903      	lsrs	r3, r0, #4
    aeaa:	428b      	cmp	r3, r1
    aeac:	d35f      	bcc.n	af6e <__udivsi3+0xce>
    aeae:	0a03      	lsrs	r3, r0, #8
    aeb0:	428b      	cmp	r3, r1
    aeb2:	d344      	bcc.n	af3e <__udivsi3+0x9e>
    aeb4:	0b03      	lsrs	r3, r0, #12
    aeb6:	428b      	cmp	r3, r1
    aeb8:	d328      	bcc.n	af0c <__udivsi3+0x6c>
    aeba:	0c03      	lsrs	r3, r0, #16
    aebc:	428b      	cmp	r3, r1
    aebe:	d30d      	bcc.n	aedc <__udivsi3+0x3c>
    aec0:	22ff      	movs	r2, #255	; 0xff
    aec2:	0209      	lsls	r1, r1, #8
    aec4:	ba12      	rev	r2, r2
    aec6:	0c03      	lsrs	r3, r0, #16
    aec8:	428b      	cmp	r3, r1
    aeca:	d302      	bcc.n	aed2 <__udivsi3+0x32>
    aecc:	1212      	asrs	r2, r2, #8
    aece:	0209      	lsls	r1, r1, #8
    aed0:	d065      	beq.n	af9e <__udivsi3+0xfe>
    aed2:	0b03      	lsrs	r3, r0, #12
    aed4:	428b      	cmp	r3, r1
    aed6:	d319      	bcc.n	af0c <__udivsi3+0x6c>
    aed8:	e000      	b.n	aedc <__udivsi3+0x3c>
    aeda:	0a09      	lsrs	r1, r1, #8
    aedc:	0bc3      	lsrs	r3, r0, #15
    aede:	428b      	cmp	r3, r1
    aee0:	d301      	bcc.n	aee6 <__udivsi3+0x46>
    aee2:	03cb      	lsls	r3, r1, #15
    aee4:	1ac0      	subs	r0, r0, r3
    aee6:	4152      	adcs	r2, r2
    aee8:	0b83      	lsrs	r3, r0, #14
    aeea:	428b      	cmp	r3, r1
    aeec:	d301      	bcc.n	aef2 <__udivsi3+0x52>
    aeee:	038b      	lsls	r3, r1, #14
    aef0:	1ac0      	subs	r0, r0, r3
    aef2:	4152      	adcs	r2, r2
    aef4:	0b43      	lsrs	r3, r0, #13
    aef6:	428b      	cmp	r3, r1
    aef8:	d301      	bcc.n	aefe <__udivsi3+0x5e>
    aefa:	034b      	lsls	r3, r1, #13
    aefc:	1ac0      	subs	r0, r0, r3
    aefe:	4152      	adcs	r2, r2
    af00:	0b03      	lsrs	r3, r0, #12
    af02:	428b      	cmp	r3, r1
    af04:	d301      	bcc.n	af0a <__udivsi3+0x6a>
    af06:	030b      	lsls	r3, r1, #12
    af08:	1ac0      	subs	r0, r0, r3
    af0a:	4152      	adcs	r2, r2
    af0c:	0ac3      	lsrs	r3, r0, #11
    af0e:	428b      	cmp	r3, r1
    af10:	d301      	bcc.n	af16 <__udivsi3+0x76>
    af12:	02cb      	lsls	r3, r1, #11
    af14:	1ac0      	subs	r0, r0, r3
    af16:	4152      	adcs	r2, r2
    af18:	0a83      	lsrs	r3, r0, #10
    af1a:	428b      	cmp	r3, r1
    af1c:	d301      	bcc.n	af22 <__udivsi3+0x82>
    af1e:	028b      	lsls	r3, r1, #10
    af20:	1ac0      	subs	r0, r0, r3
    af22:	4152      	adcs	r2, r2
    af24:	0a43      	lsrs	r3, r0, #9
    af26:	428b      	cmp	r3, r1
    af28:	d301      	bcc.n	af2e <__udivsi3+0x8e>
    af2a:	024b      	lsls	r3, r1, #9
    af2c:	1ac0      	subs	r0, r0, r3
    af2e:	4152      	adcs	r2, r2
    af30:	0a03      	lsrs	r3, r0, #8
    af32:	428b      	cmp	r3, r1
    af34:	d301      	bcc.n	af3a <__udivsi3+0x9a>
    af36:	020b      	lsls	r3, r1, #8
    af38:	1ac0      	subs	r0, r0, r3
    af3a:	4152      	adcs	r2, r2
    af3c:	d2cd      	bcs.n	aeda <__udivsi3+0x3a>
    af3e:	09c3      	lsrs	r3, r0, #7
    af40:	428b      	cmp	r3, r1
    af42:	d301      	bcc.n	af48 <__udivsi3+0xa8>
    af44:	01cb      	lsls	r3, r1, #7
    af46:	1ac0      	subs	r0, r0, r3
    af48:	4152      	adcs	r2, r2
    af4a:	0983      	lsrs	r3, r0, #6
    af4c:	428b      	cmp	r3, r1
    af4e:	d301      	bcc.n	af54 <__udivsi3+0xb4>
    af50:	018b      	lsls	r3, r1, #6
    af52:	1ac0      	subs	r0, r0, r3
    af54:	4152      	adcs	r2, r2
    af56:	0943      	lsrs	r3, r0, #5
    af58:	428b      	cmp	r3, r1
    af5a:	d301      	bcc.n	af60 <__udivsi3+0xc0>
    af5c:	014b      	lsls	r3, r1, #5
    af5e:	1ac0      	subs	r0, r0, r3
    af60:	4152      	adcs	r2, r2
    af62:	0903      	lsrs	r3, r0, #4
    af64:	428b      	cmp	r3, r1
    af66:	d301      	bcc.n	af6c <__udivsi3+0xcc>
    af68:	010b      	lsls	r3, r1, #4
    af6a:	1ac0      	subs	r0, r0, r3
    af6c:	4152      	adcs	r2, r2
    af6e:	08c3      	lsrs	r3, r0, #3
    af70:	428b      	cmp	r3, r1
    af72:	d301      	bcc.n	af78 <__udivsi3+0xd8>
    af74:	00cb      	lsls	r3, r1, #3
    af76:	1ac0      	subs	r0, r0, r3
    af78:	4152      	adcs	r2, r2
    af7a:	0883      	lsrs	r3, r0, #2
    af7c:	428b      	cmp	r3, r1
    af7e:	d301      	bcc.n	af84 <__udivsi3+0xe4>
    af80:	008b      	lsls	r3, r1, #2
    af82:	1ac0      	subs	r0, r0, r3
    af84:	4152      	adcs	r2, r2
    af86:	0843      	lsrs	r3, r0, #1
    af88:	428b      	cmp	r3, r1
    af8a:	d301      	bcc.n	af90 <__udivsi3+0xf0>
    af8c:	004b      	lsls	r3, r1, #1
    af8e:	1ac0      	subs	r0, r0, r3
    af90:	4152      	adcs	r2, r2
    af92:	1a41      	subs	r1, r0, r1
    af94:	d200      	bcs.n	af98 <__udivsi3+0xf8>
    af96:	4601      	mov	r1, r0
    af98:	4152      	adcs	r2, r2
    af9a:	4610      	mov	r0, r2
    af9c:	4770      	bx	lr
    af9e:	e7ff      	b.n	afa0 <__udivsi3+0x100>
    afa0:	b501      	push	{r0, lr}
    afa2:	2000      	movs	r0, #0
    afa4:	f000 f8f0 	bl	b188 <__aeabi_idiv0>
    afa8:	bd02      	pop	{r1, pc}
    afaa:	46c0      	nop			; (mov r8, r8)

0000afac <__aeabi_uidivmod>:
    afac:	2900      	cmp	r1, #0
    afae:	d0f7      	beq.n	afa0 <__udivsi3+0x100>
    afb0:	e776      	b.n	aea0 <__udivsi3>
    afb2:	4770      	bx	lr

0000afb4 <__divsi3>:
    afb4:	4603      	mov	r3, r0
    afb6:	430b      	orrs	r3, r1
    afb8:	d47f      	bmi.n	b0ba <__divsi3+0x106>
    afba:	2200      	movs	r2, #0
    afbc:	0843      	lsrs	r3, r0, #1
    afbe:	428b      	cmp	r3, r1
    afc0:	d374      	bcc.n	b0ac <__divsi3+0xf8>
    afc2:	0903      	lsrs	r3, r0, #4
    afc4:	428b      	cmp	r3, r1
    afc6:	d35f      	bcc.n	b088 <__divsi3+0xd4>
    afc8:	0a03      	lsrs	r3, r0, #8
    afca:	428b      	cmp	r3, r1
    afcc:	d344      	bcc.n	b058 <__divsi3+0xa4>
    afce:	0b03      	lsrs	r3, r0, #12
    afd0:	428b      	cmp	r3, r1
    afd2:	d328      	bcc.n	b026 <__divsi3+0x72>
    afd4:	0c03      	lsrs	r3, r0, #16
    afd6:	428b      	cmp	r3, r1
    afd8:	d30d      	bcc.n	aff6 <__divsi3+0x42>
    afda:	22ff      	movs	r2, #255	; 0xff
    afdc:	0209      	lsls	r1, r1, #8
    afde:	ba12      	rev	r2, r2
    afe0:	0c03      	lsrs	r3, r0, #16
    afe2:	428b      	cmp	r3, r1
    afe4:	d302      	bcc.n	afec <__divsi3+0x38>
    afe6:	1212      	asrs	r2, r2, #8
    afe8:	0209      	lsls	r1, r1, #8
    afea:	d065      	beq.n	b0b8 <__divsi3+0x104>
    afec:	0b03      	lsrs	r3, r0, #12
    afee:	428b      	cmp	r3, r1
    aff0:	d319      	bcc.n	b026 <__divsi3+0x72>
    aff2:	e000      	b.n	aff6 <__divsi3+0x42>
    aff4:	0a09      	lsrs	r1, r1, #8
    aff6:	0bc3      	lsrs	r3, r0, #15
    aff8:	428b      	cmp	r3, r1
    affa:	d301      	bcc.n	b000 <__divsi3+0x4c>
    affc:	03cb      	lsls	r3, r1, #15
    affe:	1ac0      	subs	r0, r0, r3
    b000:	4152      	adcs	r2, r2
    b002:	0b83      	lsrs	r3, r0, #14
    b004:	428b      	cmp	r3, r1
    b006:	d301      	bcc.n	b00c <__divsi3+0x58>
    b008:	038b      	lsls	r3, r1, #14
    b00a:	1ac0      	subs	r0, r0, r3
    b00c:	4152      	adcs	r2, r2
    b00e:	0b43      	lsrs	r3, r0, #13
    b010:	428b      	cmp	r3, r1
    b012:	d301      	bcc.n	b018 <__divsi3+0x64>
    b014:	034b      	lsls	r3, r1, #13
    b016:	1ac0      	subs	r0, r0, r3
    b018:	4152      	adcs	r2, r2
    b01a:	0b03      	lsrs	r3, r0, #12
    b01c:	428b      	cmp	r3, r1
    b01e:	d301      	bcc.n	b024 <__divsi3+0x70>
    b020:	030b      	lsls	r3, r1, #12
    b022:	1ac0      	subs	r0, r0, r3
    b024:	4152      	adcs	r2, r2
    b026:	0ac3      	lsrs	r3, r0, #11
    b028:	428b      	cmp	r3, r1
    b02a:	d301      	bcc.n	b030 <__divsi3+0x7c>
    b02c:	02cb      	lsls	r3, r1, #11
    b02e:	1ac0      	subs	r0, r0, r3
    b030:	4152      	adcs	r2, r2
    b032:	0a83      	lsrs	r3, r0, #10
    b034:	428b      	cmp	r3, r1
    b036:	d301      	bcc.n	b03c <__divsi3+0x88>
    b038:	028b      	lsls	r3, r1, #10
    b03a:	1ac0      	subs	r0, r0, r3
    b03c:	4152      	adcs	r2, r2
    b03e:	0a43      	lsrs	r3, r0, #9
    b040:	428b      	cmp	r3, r1
    b042:	d301      	bcc.n	b048 <__divsi3+0x94>
    b044:	024b      	lsls	r3, r1, #9
    b046:	1ac0      	subs	r0, r0, r3
    b048:	4152      	adcs	r2, r2
    b04a:	0a03      	lsrs	r3, r0, #8
    b04c:	428b      	cmp	r3, r1
    b04e:	d301      	bcc.n	b054 <__divsi3+0xa0>
    b050:	020b      	lsls	r3, r1, #8
    b052:	1ac0      	subs	r0, r0, r3
    b054:	4152      	adcs	r2, r2
    b056:	d2cd      	bcs.n	aff4 <__divsi3+0x40>
    b058:	09c3      	lsrs	r3, r0, #7
    b05a:	428b      	cmp	r3, r1
    b05c:	d301      	bcc.n	b062 <__divsi3+0xae>
    b05e:	01cb      	lsls	r3, r1, #7
    b060:	1ac0      	subs	r0, r0, r3
    b062:	4152      	adcs	r2, r2
    b064:	0983      	lsrs	r3, r0, #6
    b066:	428b      	cmp	r3, r1
    b068:	d301      	bcc.n	b06e <__divsi3+0xba>
    b06a:	018b      	lsls	r3, r1, #6
    b06c:	1ac0      	subs	r0, r0, r3
    b06e:	4152      	adcs	r2, r2
    b070:	0943      	lsrs	r3, r0, #5
    b072:	428b      	cmp	r3, r1
    b074:	d301      	bcc.n	b07a <__divsi3+0xc6>
    b076:	014b      	lsls	r3, r1, #5
    b078:	1ac0      	subs	r0, r0, r3
    b07a:	4152      	adcs	r2, r2
    b07c:	0903      	lsrs	r3, r0, #4
    b07e:	428b      	cmp	r3, r1
    b080:	d301      	bcc.n	b086 <__divsi3+0xd2>
    b082:	010b      	lsls	r3, r1, #4
    b084:	1ac0      	subs	r0, r0, r3
    b086:	4152      	adcs	r2, r2
    b088:	08c3      	lsrs	r3, r0, #3
    b08a:	428b      	cmp	r3, r1
    b08c:	d301      	bcc.n	b092 <__divsi3+0xde>
    b08e:	00cb      	lsls	r3, r1, #3
    b090:	1ac0      	subs	r0, r0, r3
    b092:	4152      	adcs	r2, r2
    b094:	0883      	lsrs	r3, r0, #2
    b096:	428b      	cmp	r3, r1
    b098:	d301      	bcc.n	b09e <__divsi3+0xea>
    b09a:	008b      	lsls	r3, r1, #2
    b09c:	1ac0      	subs	r0, r0, r3
    b09e:	4152      	adcs	r2, r2
    b0a0:	0843      	lsrs	r3, r0, #1
    b0a2:	428b      	cmp	r3, r1
    b0a4:	d301      	bcc.n	b0aa <__divsi3+0xf6>
    b0a6:	004b      	lsls	r3, r1, #1
    b0a8:	1ac0      	subs	r0, r0, r3
    b0aa:	4152      	adcs	r2, r2
    b0ac:	1a41      	subs	r1, r0, r1
    b0ae:	d200      	bcs.n	b0b2 <__divsi3+0xfe>
    b0b0:	4601      	mov	r1, r0
    b0b2:	4152      	adcs	r2, r2
    b0b4:	4610      	mov	r0, r2
    b0b6:	4770      	bx	lr
    b0b8:	e05d      	b.n	b176 <__divsi3+0x1c2>
    b0ba:	0fca      	lsrs	r2, r1, #31
    b0bc:	d000      	beq.n	b0c0 <__divsi3+0x10c>
    b0be:	4249      	negs	r1, r1
    b0c0:	1003      	asrs	r3, r0, #32
    b0c2:	d300      	bcc.n	b0c6 <__divsi3+0x112>
    b0c4:	4240      	negs	r0, r0
    b0c6:	4053      	eors	r3, r2
    b0c8:	2200      	movs	r2, #0
    b0ca:	469c      	mov	ip, r3
    b0cc:	0903      	lsrs	r3, r0, #4
    b0ce:	428b      	cmp	r3, r1
    b0d0:	d32d      	bcc.n	b12e <__divsi3+0x17a>
    b0d2:	0a03      	lsrs	r3, r0, #8
    b0d4:	428b      	cmp	r3, r1
    b0d6:	d312      	bcc.n	b0fe <__divsi3+0x14a>
    b0d8:	22fc      	movs	r2, #252	; 0xfc
    b0da:	0189      	lsls	r1, r1, #6
    b0dc:	ba12      	rev	r2, r2
    b0de:	0a03      	lsrs	r3, r0, #8
    b0e0:	428b      	cmp	r3, r1
    b0e2:	d30c      	bcc.n	b0fe <__divsi3+0x14a>
    b0e4:	0189      	lsls	r1, r1, #6
    b0e6:	1192      	asrs	r2, r2, #6
    b0e8:	428b      	cmp	r3, r1
    b0ea:	d308      	bcc.n	b0fe <__divsi3+0x14a>
    b0ec:	0189      	lsls	r1, r1, #6
    b0ee:	1192      	asrs	r2, r2, #6
    b0f0:	428b      	cmp	r3, r1
    b0f2:	d304      	bcc.n	b0fe <__divsi3+0x14a>
    b0f4:	0189      	lsls	r1, r1, #6
    b0f6:	d03a      	beq.n	b16e <__divsi3+0x1ba>
    b0f8:	1192      	asrs	r2, r2, #6
    b0fa:	e000      	b.n	b0fe <__divsi3+0x14a>
    b0fc:	0989      	lsrs	r1, r1, #6
    b0fe:	09c3      	lsrs	r3, r0, #7
    b100:	428b      	cmp	r3, r1
    b102:	d301      	bcc.n	b108 <__divsi3+0x154>
    b104:	01cb      	lsls	r3, r1, #7
    b106:	1ac0      	subs	r0, r0, r3
    b108:	4152      	adcs	r2, r2
    b10a:	0983      	lsrs	r3, r0, #6
    b10c:	428b      	cmp	r3, r1
    b10e:	d301      	bcc.n	b114 <__divsi3+0x160>
    b110:	018b      	lsls	r3, r1, #6
    b112:	1ac0      	subs	r0, r0, r3
    b114:	4152      	adcs	r2, r2
    b116:	0943      	lsrs	r3, r0, #5
    b118:	428b      	cmp	r3, r1
    b11a:	d301      	bcc.n	b120 <__divsi3+0x16c>
    b11c:	014b      	lsls	r3, r1, #5
    b11e:	1ac0      	subs	r0, r0, r3
    b120:	4152      	adcs	r2, r2
    b122:	0903      	lsrs	r3, r0, #4
    b124:	428b      	cmp	r3, r1
    b126:	d301      	bcc.n	b12c <__divsi3+0x178>
    b128:	010b      	lsls	r3, r1, #4
    b12a:	1ac0      	subs	r0, r0, r3
    b12c:	4152      	adcs	r2, r2
    b12e:	08c3      	lsrs	r3, r0, #3
    b130:	428b      	cmp	r3, r1
    b132:	d301      	bcc.n	b138 <__divsi3+0x184>
    b134:	00cb      	lsls	r3, r1, #3
    b136:	1ac0      	subs	r0, r0, r3
    b138:	4152      	adcs	r2, r2
    b13a:	0883      	lsrs	r3, r0, #2
    b13c:	428b      	cmp	r3, r1
    b13e:	d301      	bcc.n	b144 <__divsi3+0x190>
    b140:	008b      	lsls	r3, r1, #2
    b142:	1ac0      	subs	r0, r0, r3
    b144:	4152      	adcs	r2, r2
    b146:	d2d9      	bcs.n	b0fc <__divsi3+0x148>
    b148:	0843      	lsrs	r3, r0, #1
    b14a:	428b      	cmp	r3, r1
    b14c:	d301      	bcc.n	b152 <__divsi3+0x19e>
    b14e:	004b      	lsls	r3, r1, #1
    b150:	1ac0      	subs	r0, r0, r3
    b152:	4152      	adcs	r2, r2
    b154:	1a41      	subs	r1, r0, r1
    b156:	d200      	bcs.n	b15a <__divsi3+0x1a6>
    b158:	4601      	mov	r1, r0
    b15a:	4663      	mov	r3, ip
    b15c:	4152      	adcs	r2, r2
    b15e:	105b      	asrs	r3, r3, #1
    b160:	4610      	mov	r0, r2
    b162:	d301      	bcc.n	b168 <__divsi3+0x1b4>
    b164:	4240      	negs	r0, r0
    b166:	2b00      	cmp	r3, #0
    b168:	d500      	bpl.n	b16c <__divsi3+0x1b8>
    b16a:	4249      	negs	r1, r1
    b16c:	4770      	bx	lr
    b16e:	4663      	mov	r3, ip
    b170:	105b      	asrs	r3, r3, #1
    b172:	d300      	bcc.n	b176 <__divsi3+0x1c2>
    b174:	4240      	negs	r0, r0
    b176:	b501      	push	{r0, lr}
    b178:	2000      	movs	r0, #0
    b17a:	f000 f805 	bl	b188 <__aeabi_idiv0>
    b17e:	bd02      	pop	{r1, pc}

0000b180 <__aeabi_idivmod>:
    b180:	2900      	cmp	r1, #0
    b182:	d0f8      	beq.n	b176 <__divsi3+0x1c2>
    b184:	e716      	b.n	afb4 <__divsi3>
    b186:	4770      	bx	lr

0000b188 <__aeabi_idiv0>:
    b188:	4770      	bx	lr
    b18a:	46c0      	nop			; (mov r8, r8)

0000b18c <__aeabi_uldivmod>:
    b18c:	2b00      	cmp	r3, #0
    b18e:	d111      	bne.n	b1b4 <__aeabi_uldivmod+0x28>
    b190:	2a00      	cmp	r2, #0
    b192:	d10f      	bne.n	b1b4 <__aeabi_uldivmod+0x28>
    b194:	2900      	cmp	r1, #0
    b196:	d100      	bne.n	b19a <__aeabi_uldivmod+0xe>
    b198:	2800      	cmp	r0, #0
    b19a:	d002      	beq.n	b1a2 <__aeabi_uldivmod+0x16>
    b19c:	2100      	movs	r1, #0
    b19e:	43c9      	mvns	r1, r1
    b1a0:	0008      	movs	r0, r1
    b1a2:	b407      	push	{r0, r1, r2}
    b1a4:	4802      	ldr	r0, [pc, #8]	; (b1b0 <__aeabi_uldivmod+0x24>)
    b1a6:	a102      	add	r1, pc, #8	; (adr r1, b1b0 <__aeabi_uldivmod+0x24>)
    b1a8:	1840      	adds	r0, r0, r1
    b1aa:	9002      	str	r0, [sp, #8]
    b1ac:	bd03      	pop	{r0, r1, pc}
    b1ae:	46c0      	nop			; (mov r8, r8)
    b1b0:	ffffffd9 	.word	0xffffffd9
    b1b4:	b403      	push	{r0, r1}
    b1b6:	4668      	mov	r0, sp
    b1b8:	b501      	push	{r0, lr}
    b1ba:	9802      	ldr	r0, [sp, #8]
    b1bc:	f000 f806 	bl	b1cc <__udivmoddi4>
    b1c0:	9b01      	ldr	r3, [sp, #4]
    b1c2:	469e      	mov	lr, r3
    b1c4:	b002      	add	sp, #8
    b1c6:	bc0c      	pop	{r2, r3}
    b1c8:	4770      	bx	lr
    b1ca:	46c0      	nop			; (mov r8, r8)

0000b1cc <__udivmoddi4>:
    b1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1ce:	4657      	mov	r7, sl
    b1d0:	464e      	mov	r6, r9
    b1d2:	4645      	mov	r5, r8
    b1d4:	46de      	mov	lr, fp
    b1d6:	b5e0      	push	{r5, r6, r7, lr}
    b1d8:	0004      	movs	r4, r0
    b1da:	000d      	movs	r5, r1
    b1dc:	4692      	mov	sl, r2
    b1de:	4699      	mov	r9, r3
    b1e0:	b083      	sub	sp, #12
    b1e2:	428b      	cmp	r3, r1
    b1e4:	d830      	bhi.n	b248 <__udivmoddi4+0x7c>
    b1e6:	d02d      	beq.n	b244 <__udivmoddi4+0x78>
    b1e8:	4649      	mov	r1, r9
    b1ea:	4650      	mov	r0, sl
    b1ec:	f000 f8ba 	bl	b364 <__clzdi2>
    b1f0:	0029      	movs	r1, r5
    b1f2:	0006      	movs	r6, r0
    b1f4:	0020      	movs	r0, r4
    b1f6:	f000 f8b5 	bl	b364 <__clzdi2>
    b1fa:	1a33      	subs	r3, r6, r0
    b1fc:	4698      	mov	r8, r3
    b1fe:	3b20      	subs	r3, #32
    b200:	d434      	bmi.n	b26c <__udivmoddi4+0xa0>
    b202:	469b      	mov	fp, r3
    b204:	4653      	mov	r3, sl
    b206:	465a      	mov	r2, fp
    b208:	4093      	lsls	r3, r2
    b20a:	4642      	mov	r2, r8
    b20c:	001f      	movs	r7, r3
    b20e:	4653      	mov	r3, sl
    b210:	4093      	lsls	r3, r2
    b212:	001e      	movs	r6, r3
    b214:	42af      	cmp	r7, r5
    b216:	d83b      	bhi.n	b290 <__udivmoddi4+0xc4>
    b218:	42af      	cmp	r7, r5
    b21a:	d100      	bne.n	b21e <__udivmoddi4+0x52>
    b21c:	e079      	b.n	b312 <__udivmoddi4+0x146>
    b21e:	465b      	mov	r3, fp
    b220:	1ba4      	subs	r4, r4, r6
    b222:	41bd      	sbcs	r5, r7
    b224:	2b00      	cmp	r3, #0
    b226:	da00      	bge.n	b22a <__udivmoddi4+0x5e>
    b228:	e076      	b.n	b318 <__udivmoddi4+0x14c>
    b22a:	2200      	movs	r2, #0
    b22c:	2300      	movs	r3, #0
    b22e:	9200      	str	r2, [sp, #0]
    b230:	9301      	str	r3, [sp, #4]
    b232:	2301      	movs	r3, #1
    b234:	465a      	mov	r2, fp
    b236:	4093      	lsls	r3, r2
    b238:	9301      	str	r3, [sp, #4]
    b23a:	2301      	movs	r3, #1
    b23c:	4642      	mov	r2, r8
    b23e:	4093      	lsls	r3, r2
    b240:	9300      	str	r3, [sp, #0]
    b242:	e029      	b.n	b298 <__udivmoddi4+0xcc>
    b244:	4282      	cmp	r2, r0
    b246:	d9cf      	bls.n	b1e8 <__udivmoddi4+0x1c>
    b248:	2200      	movs	r2, #0
    b24a:	2300      	movs	r3, #0
    b24c:	9200      	str	r2, [sp, #0]
    b24e:	9301      	str	r3, [sp, #4]
    b250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b252:	2b00      	cmp	r3, #0
    b254:	d001      	beq.n	b25a <__udivmoddi4+0x8e>
    b256:	601c      	str	r4, [r3, #0]
    b258:	605d      	str	r5, [r3, #4]
    b25a:	9800      	ldr	r0, [sp, #0]
    b25c:	9901      	ldr	r1, [sp, #4]
    b25e:	b003      	add	sp, #12
    b260:	bcf0      	pop	{r4, r5, r6, r7}
    b262:	46bb      	mov	fp, r7
    b264:	46b2      	mov	sl, r6
    b266:	46a9      	mov	r9, r5
    b268:	46a0      	mov	r8, r4
    b26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b26c:	4642      	mov	r2, r8
    b26e:	469b      	mov	fp, r3
    b270:	2320      	movs	r3, #32
    b272:	1a9b      	subs	r3, r3, r2
    b274:	4652      	mov	r2, sl
    b276:	40da      	lsrs	r2, r3
    b278:	4641      	mov	r1, r8
    b27a:	0013      	movs	r3, r2
    b27c:	464a      	mov	r2, r9
    b27e:	408a      	lsls	r2, r1
    b280:	0017      	movs	r7, r2
    b282:	4642      	mov	r2, r8
    b284:	431f      	orrs	r7, r3
    b286:	4653      	mov	r3, sl
    b288:	4093      	lsls	r3, r2
    b28a:	001e      	movs	r6, r3
    b28c:	42af      	cmp	r7, r5
    b28e:	d9c3      	bls.n	b218 <__udivmoddi4+0x4c>
    b290:	2200      	movs	r2, #0
    b292:	2300      	movs	r3, #0
    b294:	9200      	str	r2, [sp, #0]
    b296:	9301      	str	r3, [sp, #4]
    b298:	4643      	mov	r3, r8
    b29a:	2b00      	cmp	r3, #0
    b29c:	d0d8      	beq.n	b250 <__udivmoddi4+0x84>
    b29e:	07fb      	lsls	r3, r7, #31
    b2a0:	0872      	lsrs	r2, r6, #1
    b2a2:	431a      	orrs	r2, r3
    b2a4:	4646      	mov	r6, r8
    b2a6:	087b      	lsrs	r3, r7, #1
    b2a8:	e00e      	b.n	b2c8 <__udivmoddi4+0xfc>
    b2aa:	42ab      	cmp	r3, r5
    b2ac:	d101      	bne.n	b2b2 <__udivmoddi4+0xe6>
    b2ae:	42a2      	cmp	r2, r4
    b2b0:	d80c      	bhi.n	b2cc <__udivmoddi4+0x100>
    b2b2:	1aa4      	subs	r4, r4, r2
    b2b4:	419d      	sbcs	r5, r3
    b2b6:	2001      	movs	r0, #1
    b2b8:	1924      	adds	r4, r4, r4
    b2ba:	416d      	adcs	r5, r5
    b2bc:	2100      	movs	r1, #0
    b2be:	3e01      	subs	r6, #1
    b2c0:	1824      	adds	r4, r4, r0
    b2c2:	414d      	adcs	r5, r1
    b2c4:	2e00      	cmp	r6, #0
    b2c6:	d006      	beq.n	b2d6 <__udivmoddi4+0x10a>
    b2c8:	42ab      	cmp	r3, r5
    b2ca:	d9ee      	bls.n	b2aa <__udivmoddi4+0xde>
    b2cc:	3e01      	subs	r6, #1
    b2ce:	1924      	adds	r4, r4, r4
    b2d0:	416d      	adcs	r5, r5
    b2d2:	2e00      	cmp	r6, #0
    b2d4:	d1f8      	bne.n	b2c8 <__udivmoddi4+0xfc>
    b2d6:	9800      	ldr	r0, [sp, #0]
    b2d8:	9901      	ldr	r1, [sp, #4]
    b2da:	465b      	mov	r3, fp
    b2dc:	1900      	adds	r0, r0, r4
    b2de:	4169      	adcs	r1, r5
    b2e0:	2b00      	cmp	r3, #0
    b2e2:	db24      	blt.n	b32e <__udivmoddi4+0x162>
    b2e4:	002b      	movs	r3, r5
    b2e6:	465a      	mov	r2, fp
    b2e8:	4644      	mov	r4, r8
    b2ea:	40d3      	lsrs	r3, r2
    b2ec:	002a      	movs	r2, r5
    b2ee:	40e2      	lsrs	r2, r4
    b2f0:	001c      	movs	r4, r3
    b2f2:	465b      	mov	r3, fp
    b2f4:	0015      	movs	r5, r2
    b2f6:	2b00      	cmp	r3, #0
    b2f8:	db2a      	blt.n	b350 <__udivmoddi4+0x184>
    b2fa:	0026      	movs	r6, r4
    b2fc:	409e      	lsls	r6, r3
    b2fe:	0033      	movs	r3, r6
    b300:	0026      	movs	r6, r4
    b302:	4647      	mov	r7, r8
    b304:	40be      	lsls	r6, r7
    b306:	0032      	movs	r2, r6
    b308:	1a80      	subs	r0, r0, r2
    b30a:	4199      	sbcs	r1, r3
    b30c:	9000      	str	r0, [sp, #0]
    b30e:	9101      	str	r1, [sp, #4]
    b310:	e79e      	b.n	b250 <__udivmoddi4+0x84>
    b312:	42a3      	cmp	r3, r4
    b314:	d8bc      	bhi.n	b290 <__udivmoddi4+0xc4>
    b316:	e782      	b.n	b21e <__udivmoddi4+0x52>
    b318:	4642      	mov	r2, r8
    b31a:	2320      	movs	r3, #32
    b31c:	2100      	movs	r1, #0
    b31e:	1a9b      	subs	r3, r3, r2
    b320:	2200      	movs	r2, #0
    b322:	9100      	str	r1, [sp, #0]
    b324:	9201      	str	r2, [sp, #4]
    b326:	2201      	movs	r2, #1
    b328:	40da      	lsrs	r2, r3
    b32a:	9201      	str	r2, [sp, #4]
    b32c:	e785      	b.n	b23a <__udivmoddi4+0x6e>
    b32e:	4642      	mov	r2, r8
    b330:	2320      	movs	r3, #32
    b332:	1a9b      	subs	r3, r3, r2
    b334:	002a      	movs	r2, r5
    b336:	4646      	mov	r6, r8
    b338:	409a      	lsls	r2, r3
    b33a:	0023      	movs	r3, r4
    b33c:	40f3      	lsrs	r3, r6
    b33e:	4644      	mov	r4, r8
    b340:	4313      	orrs	r3, r2
    b342:	002a      	movs	r2, r5
    b344:	40e2      	lsrs	r2, r4
    b346:	001c      	movs	r4, r3
    b348:	465b      	mov	r3, fp
    b34a:	0015      	movs	r5, r2
    b34c:	2b00      	cmp	r3, #0
    b34e:	dad4      	bge.n	b2fa <__udivmoddi4+0x12e>
    b350:	4642      	mov	r2, r8
    b352:	002f      	movs	r7, r5
    b354:	2320      	movs	r3, #32
    b356:	0026      	movs	r6, r4
    b358:	4097      	lsls	r7, r2
    b35a:	1a9b      	subs	r3, r3, r2
    b35c:	40de      	lsrs	r6, r3
    b35e:	003b      	movs	r3, r7
    b360:	4333      	orrs	r3, r6
    b362:	e7cd      	b.n	b300 <__udivmoddi4+0x134>

0000b364 <__clzdi2>:
    b364:	b510      	push	{r4, lr}
    b366:	2900      	cmp	r1, #0
    b368:	d103      	bne.n	b372 <__clzdi2+0xe>
    b36a:	f000 f807 	bl	b37c <__clzsi2>
    b36e:	3020      	adds	r0, #32
    b370:	e002      	b.n	b378 <__clzdi2+0x14>
    b372:	0008      	movs	r0, r1
    b374:	f000 f802 	bl	b37c <__clzsi2>
    b378:	bd10      	pop	{r4, pc}
    b37a:	46c0      	nop			; (mov r8, r8)

0000b37c <__clzsi2>:
    b37c:	211c      	movs	r1, #28
    b37e:	2301      	movs	r3, #1
    b380:	041b      	lsls	r3, r3, #16
    b382:	4298      	cmp	r0, r3
    b384:	d301      	bcc.n	b38a <__clzsi2+0xe>
    b386:	0c00      	lsrs	r0, r0, #16
    b388:	3910      	subs	r1, #16
    b38a:	0a1b      	lsrs	r3, r3, #8
    b38c:	4298      	cmp	r0, r3
    b38e:	d301      	bcc.n	b394 <__clzsi2+0x18>
    b390:	0a00      	lsrs	r0, r0, #8
    b392:	3908      	subs	r1, #8
    b394:	091b      	lsrs	r3, r3, #4
    b396:	4298      	cmp	r0, r3
    b398:	d301      	bcc.n	b39e <__clzsi2+0x22>
    b39a:	0900      	lsrs	r0, r0, #4
    b39c:	3904      	subs	r1, #4
    b39e:	a202      	add	r2, pc, #8	; (adr r2, b3a8 <__clzsi2+0x2c>)
    b3a0:	5c10      	ldrb	r0, [r2, r0]
    b3a2:	1840      	adds	r0, r0, r1
    b3a4:	4770      	bx	lr
    b3a6:	46c0      	nop			; (mov r8, r8)
    b3a8:	02020304 	.word	0x02020304
    b3ac:	01010101 	.word	0x01010101
	...
    b3b8:	74696e69 	.word	0x74696e69
    b3bc:	00000000 	.word	0x00000000
    b3c0:	5f64656c 	.word	0x5f64656c
    b3c4:	6f6d6564 	.word	0x6f6d6564
    b3c8:	00000000 	.word	0x00000000
    b3cc:	57200d0a 	.word	0x57200d0a
    b3d0:	676e6f72 	.word	0x676e6f72
    b3d4:	72617020 	.word	0x72617020
    b3d8:	74656d61 	.word	0x74656d61
    b3dc:	76207265 	.word	0x76207265
    b3e0:	65756c61 	.word	0x65756c61
    b3e4:	74656420 	.word	0x74656420
    b3e8:	65746365 	.word	0x65746365
    b3ec:	6e6f2064 	.word	0x6e6f2064
    b3f0:	00000a0d 	.word	0x00000a0d
    b3f4:	20202020 	.word	0x20202020
    b3f8:	66202020 	.word	0x66202020
    b3fc:	20656c69 	.word	0x20656c69
    b400:	0d732520 	.word	0x0d732520
    b404:	0000000a 	.word	0x0000000a
    b408:	20202020 	.word	0x20202020
    b40c:	6c202020 	.word	0x6c202020
    b410:	20656e69 	.word	0x20656e69
    b414:	0d642520 	.word	0x0d642520
    b418:	0000000a 	.word	0x0000000a
    b41c:	74726175 	.word	0x74726175
    b420:	00000030 	.word	0x00000030
    b424:	74785f67 	.word	0x74785f67
    b428:	46306c61 	.word	0x46306c61
    b42c:	00716572 	.word	0x00716572
    b430:	69766564 	.word	0x69766564
    b434:	4d2f6563 	.word	0x4d2f6563
    b438:	36324c4b 	.word	0x36324c4b
    b43c:	662f345a 	.word	0x662f345a
    b440:	635f6c73 	.word	0x635f6c73
    b444:	6b636f6c 	.word	0x6b636f6c
    b448:	0000632e 	.word	0x0000632e
    b44c:	74785f67 	.word	0x74785f67
    b450:	32336c61 	.word	0x32336c61
    b454:	71657246 	.word	0x71657246
    b458:	00000000 	.word	0x00000000
    b45c:	7067636d 	.word	0x7067636d
    b460:	63306c6c 	.word	0x63306c6c
    b464:	00006b6c 	.word	0x00006b6c
    b468:	666e6f63 	.word	0x666e6f63
    b46c:	00006769 	.word	0x00006769

0000b470 <__func__.3>:
    b470:	434f4c43 6e455f4b 656c6261 306c6c50     CLOCK_EnablePll0
    b480:	00000000                                ....

0000b484 <__func__.1>:
    b484:	434f4c43 65535f4b 65625074 65646f4d     CLOCK_SetPbeMode
    b494:	00000000                                ....

0000b498 <__func__.0>:
    b498:	434f4c43 6f425f4b 6f54746f 4d656550     CLOCK_BootToPeeM
    b4a8:	0065646f                                ode.

0000b4ac <mcgConfig_BOARD_BootClockRUN>:
    b4ac:	00000207 00000000 00000001              ............

0000b4b8 <simConfig_BOARD_BootClockRUN>:
    b4b8:	00000301 10010000                       ........

0000b4c0 <oscConfig_BOARD_BootClockRUN>:
    b4c0:	007a1200 00800400                       ..z.....

0000b4c8 <led_mask>:
    b4c8:	00200000 00400000 04000000              .. ...@.....

0000b4d4 <_kl26z4_ops>:
    b4d4:	00000fbd 0000120d 000012f9 0000132f     ............/...
    b4e4:	00000000 74726175 00000030 74726175     ....uart0...uart
    b4f4:	00000030 65726874 21206461 5452203d     0...thread != RT
    b504:	4c554e5f 0000004c 65726874 253a6461     _NULL...thread:%
    b514:	74732073 206b6361 7265766f 776f6c66     s stack overflow
    b524:	0000000a 6e726177 3a676e69 20732520     ....warning: %s 
    b534:	63617473 7369206b 6f6c6320 74206573     stack is close t
    b544:	6e65206f 666f2064 61747320 61206b63     o end of stack a
    b554:	65726464 0a2e7373 00000000              ddress......

0000b560 <__FUNCTION__.2>:
    b560:	5f74725f 65686373 656c7564 74735f72     _rt_scheduler_st
    b570:	5f6b6361 63656863 0000006b              ack_check...

0000b57c <__FUNCTION__.1>:
    b57c:	735f7472 64656863 5f656c75 65736e69     rt_schedule_inse
    b58c:	745f7472 61657268 00000064              rt_thread...

0000b598 <__FUNCTION__.0>:
    b598:	735f7472 64656863 5f656c75 6f6d6572     rt_schedule_remo
    b5a8:	745f6576 61657268 00000064 656d6974     ve_thread...time
    b5b8:	3d212072 5f545220 4c4c554e 00000000     r != RT_NULL....
    b5c8:	656d6974 2074756f 52203d21 554e5f54     timeout != RT_NU
    b5d8:	00004c4c 656d6974 52203c20 49545f54     LL..time < RT_TI
    b5e8:	4d5f4b43 2f205841 00003220 6f5f7472     CK_MAX / 2..rt_o
    b5f8:	63656a62 65675f74 79745f74 26286570     bject_get_type(&
    b608:	656d6974 703e2d72 6e657261 3d202974     timer->parent) =
    b618:	5452203d 6a624f5f 5f746365 73616c43     = RT_Object_Clas
    b628:	69545f73 0072656d 6f5f7472 63656a62     s_Timer.rt_objec
    b638:	73695f74 7379735f 6f6d6574 63656a62     t_is_systemobjec
    b648:	74262874 72656d69 61703e2d 746e6572     t(&timer->parent
    b658:	00000029 6f5f7472 63656a62 73695f74     )...rt_object_is
    b668:	7379735f 6f6d6574 63656a62 74262874     _systemobject(&t
    b678:	72656d69 61703e2d 746e6572 3d3d2029     imer->parent) ==
    b688:	5f545220 534c4146 00000045 72282a28      RT_FALSE...(*(r
    b698:	69745f74 745f6b63 61292a20 20296772     t_tick_t *)arg) 
    b6a8:	5452203c 4349545f 414d5f4b 202f2058     < RT_TICK_MAX / 
    b6b8:	00000032 00002054 0000204a 00002074     2...T ..J ..t ..
    b6c8:	00002084 00002094 000020ae              . ... ... ..

0000b6d4 <__FUNCTION__.7>:
    b6d4:	745f7472 72656d69 696e695f 00000074     rt_timer_init...

0000b6e4 <__FUNCTION__.6>:
    b6e4:	745f7472 72656d69 7465645f 00686361     rt_timer_detach.

0000b6f4 <__FUNCTION__.3>:
    b6f4:	745f7472 72656d69 6174735f 00007472     rt_timer_start..

0000b704 <__FUNCTION__.1>:
    b704:	745f7472 72656d69 6f74735f 00000070     rt_timer_stop...

0000b714 <__FUNCTION__.0>:
    b714:	745f7472 72656d69 6e6f635f 6c6f7274     rt_timer_control
    b724:	00000000 20766564 52203d21 554e5f54     ....dev != RT_NU
    b734:	00004c4c 6f5f7472 63656a62 65675f74     LL..rt_object_ge
    b744:	79745f74 26286570 2d766564 7261703e     t_type(&dev->par
    b754:	29746e65 203d3d20 4f5f5452 63656a62     ent) == RT_Objec
    b764:	6c435f74 5f737361 69766544 00006563     t_Class_Device..
    b774:	6f5f7472 63656a62 73695f74 7379735f     rt_object_is_sys
    b784:	6f6d6574 63656a62 64262874 3e2d7665     temobject(&dev->
    b794:	65726170 0029746e 6f5f7472 63656a62     parent).rt_objec
    b7a4:	73695f74 7379735f 6f6d6574 63656a62     t_is_systemobjec
    b7b4:	64262874 3e2d7665 65726170 2029746e     t(&dev->parent) 
    b7c4:	52203d3d 41465f54 0045534c 2d766564     == RT_FALSE.dev-
    b7d4:	6665723e 756f635f 2120746e 0030203d     >ref_count != 0.

0000b7e4 <__FUNCTION__.6>:
    b7e4:	645f7472 63697665 706f5f65 00006e65     rt_device_open..

0000b7f4 <__FUNCTION__.5>:
    b7f4:	645f7472 63697665 6c635f65 0065736f     rt_device_close.

0000b804 <__FUNCTION__.4>:
    b804:	645f7472 63697665 65725f65 00006461     rt_device_read..

0000b814 <__FUNCTION__.3>:
    b814:	645f7472 63697665 72775f65 00657469     rt_device_write.

0000b824 <__FUNCTION__.1>:
    b824:	645f7472 63697665 65735f65 78725f74     rt_device_set_rx
    b834:	646e695f 74616369 00000065 5f747228     _indicate...(rt_
    b844:	746e6975 20745f38 656d292a 3d3e206d     uint8_t *)mem >=
    b854:	3e2d6d20 70616568 7274705f 00000000      m->heap_ptr....
    b864:	5f747228 746e6975 20745f38 656d292a     (rt_uint8_t *)me
    b874:	203c206d 5f747228 746e6975 20745f38     m < (rt_uint8_t 
    b884:	2d6d292a 6165683e 6e655f70 00000064     *)m->heap_end...
    b894:	6c616d73 0000006c 206d656d 74696e69     small...mem init
    b8a4:	7265202c 20726f72 69676562 6461206e     , error begin ad
    b8b4:	73657264 78302073 202c7825 20646e61     dress 0x%x, and 
    b8c4:	20646e65 72646461 20737365 78257830     end address 0x%x
    b8d4:	0000000a 3d21206d 5f545220 4c4c554e     ....m != RT_NULL
    b8e4:	00000000 6f5f7472 63656a62 65675f74     ....rt_object_ge
    b8f4:	79745f74 26286570 703e2d6d 6e657261     t_type(&m->paren
    b904:	3d202974 5452203d 6a624f5f 5f746365     t) == RT_Object_
    b914:	73616c43 654d5f73 79726f6d 00000000     Class_Memory....
    b924:	6f5f7472 63656a62 73695f74 7379735f     rt_object_is_sys
    b934:	6f6d6574 63656a62 6d262874 61703e2d     temobject(&m->pa
    b944:	746e6572 00000029 6d732828 5f6c6c61     rent)...((small_
    b954:	2d6d656d 72666c3e 3d206565 6d73203d     mem->lfree == sm
    b964:	5f6c6c61 2d6d656d 6165683e 6e655f70     all_mem->heap_en
    b974:	7c202964 2128207c 5f4d454d 53555349     d) || (!MEM_ISUS
    b984:	73284445 6c6c616d 6d656d5f 666c3e2d     ED(small_mem->lf
    b994:	29656572 00002929 5f747228 73616275     ree)))..(rt_ubas
    b9a4:	29745f65 206d656d 4953202b 464f455a     e_t)mem + SIZEOF
    b9b4:	5254535f 5f544355 204d454d 6973202b     _STRUCT_MEM + si
    b9c4:	3c20657a 7228203d 62755f74 5f657361     ze <= (rt_ubase_
    b9d4:	6d732974 5f6c6c61 2d6d656d 6165683e     t)small_mem->hea
    b9e4:	6e655f70 00000064 5f747228 73616275     p_end...(rt_ubas
    b9f4:	29745f65 74722828 6e69755f 745f3874     e_t)((rt_uint8_t
    ba04:	6d292a20 2b206d65 5a495320 5f464f45      *)mem + SIZEOF_
    ba14:	55525453 4d5f5443 20294d45 54522025     STRUCT_MEM) % RT
    ba24:	494c415f 535f4e47 20455a49 30203d3d     _ALIGN_SIZE == 0
    ba34:	00000000 72282828 62755f74 5f657361     ....(((rt_ubase_
    ba44:	656d2974 2620296d 54522820 494c415f     t)mem) & (RT_ALI
    ba54:	535f4e47 20455a49 2931202d 3d3d2029     GN_SIZE - 1)) ==
    ba64:	00003020 72282828 62755f74 5f657361      0..(((rt_ubase_
    ba74:	6d722974 20296d65 52282026 4c415f54     t)rmem) & (RT_AL
    ba84:	5f4e4749 455a4953 31202d20 3d202929     IGN_SIZE - 1)) =
    ba94:	0030203d 5f747228 746e6975 20745f38     = 0.(rt_uint8_t 
    baa4:	6d72292a 3e206d65 7228203d 69755f74     *)rmem >= (rt_ui
    bab4:	5f38746e 292a2074 6c616d73 656d5f6c     nt8_t *)small_me
    bac4:	683e2d6d 5f706165 00727470 5f747228     m->heap_ptr.(rt_
    bad4:	746e6975 20745f38 6d72292a 3c206d65     uint8_t *)rmem <
    bae4:	74722820 6e69755f 745f3874 73292a20      (rt_uint8_t *)s
    baf4:	6c6c616d 6d656d5f 65683e2d 655f7061     mall_mem->heap_e
    bb04:	0000646e 6c616d73 656d5f6c 3d21206d     nd..small_mem !=
    bb14:	5f545220 4c4c554e 00000000 5f4d454d      RT_NULL....MEM_
    bb24:	53555349 6d284445 00296d65 6f5f7472     ISUSED(mem).rt_o
    bb34:	63656a62 65675f74 79745f74 26286570     bject_get_type(&
    bb44:	6c616d73 656d5f6c 703e2d6d 6e657261     small_mem->paren
    bb54:	61702e74 746e6572 3d3d2029 5f545220     t.parent) == RT_
    bb64:	656a624f 435f7463 7373616c 6d654d5f     Object_Class_Mem
    bb74:	0079726f 6f5f7472 63656a62 73695f74     ory.rt_object_is
    bb84:	7379735f 6f6d6574 63656a62 73262874     _systemobject(&s
    bb94:	6c6c616d 6d656d5f 61703e2d 746e6572     mall_mem->parent
    bba4:	7261702e 29746e65 00000000 5f747228     .parent)....(rt_
    bbb4:	746e6975 20745f38 6d72292a 3e206d65     uint8_t *)rmem >
    bbc4:	7228203d 69755f74 5f38746e 292a2074     = (rt_uint8_t *)
    bbd4:	6c616d73 656d5f6c 683e2d6d 5f706165     small_mem->heap_
    bbe4:	20727470 28202626 755f7472 38746e69     ptr && (rt_uint8
    bbf4:	2a20745f 656d7229 203c206d 5f747228     _t *)rmem < (rt_
    bc04:	746e6975 20745f38 6d73292a 5f6c6c61     uint8_t *)small_
    bc14:	2d6d656d 6165683e 6e655f70 00000064     mem->heap_end...
    bc24:	5f4d454d 4c4f4f50 6d732628 5f6c6c61     MEM_POOL(&small_
    bc34:	2d6d656d 6165683e 74705f70 656d5b72     mem->heap_ptr[me
    bc44:	6e3e2d6d 5d747865 3d3d2029 616d7320     m->next]) == sma
    bc54:	6d5f6c6c 00006d65                       ll_mem..

0000bc5c <__FUNCTION__.4>:
    bc5c:	67756c70 6c6f685f 00007365              plug_holes..

0000bc68 <__FUNCTION__.2>:
    bc68:	735f7472 5f6d656d 6f6c6c61 00000063     rt_smem_alloc...

0000bc78 <__FUNCTION__.1>:
    bc78:	735f7472 5f6d656d 6c616572 00636f6c     rt_smem_realloc.

0000bc88 <__FUNCTION__.0>:
    bc88:	735f7472 5f6d656d 65657266 00000000     rt_smem_free....
    bc98:	6f666e69 74616d72 206e6f69 52203d21     information != R
    bca8:	554e5f54 00004c4c 206a626f 6f203d21     T_NULL..obj != o
    bcb8:	63656a62 00000074 656a626f 21207463     bject...object !
    bcc8:	5452203d 4c554e5f 0000004c 636e7546     = RT_NULL...Func
    bcd8:	6e6f6974 5d73255b 61687320 6e206c6c     tion[%s] shall n
    bce8:	6220746f 73752065 69206465 5349206e     ot be used in IS
    bcf8:	00000a52 00000030 626f2821 7463656a     R...0...!(object
    bd08:	79743e2d 26206570 5f545220 656a624f     ->type & RT_Obje
    bd18:	435f7463 7373616c 6174535f 29636974     ct_Class_Static)
    bd28:	00000000                                ....

0000bd2c <__FUNCTION__.6>:
    bd2c:	6f5f7472 63656a62 6e695f74 00007469     rt_object_init..

0000bd3c <__FUNCTION__.5>:
    bd3c:	6f5f7472 63656a62 65645f74 68636174     rt_object_detach
    bd4c:	00000000                                ....

0000bd50 <__FUNCTION__.4>:
    bd50:	6f5f7472 63656a62 6c615f74 61636f6c     rt_object_alloca
    bd60:	00006574                                te..

0000bd64 <__FUNCTION__.3>:
    bd64:	6f5f7472 63656a62 65645f74 6574656c     rt_object_delete
    bd74:	00000000                                ....

0000bd78 <__FUNCTION__.2>:
    bd78:	6f5f7472 63656a62 73695f74 7379735f     rt_object_is_sys
    bd88:	6f6d6574 63656a62 00000074              temobject...

0000bd94 <__FUNCTION__.1>:
    bd94:	6f5f7472 63656a62 65675f74 79745f74     rt_object_get_ty
    bda4:	00006570                                pe..

0000bda8 <__FUNCTION__.0>:
    bda8:	6f5f7472 63656a62 69665f74 0000646e     rt_object_find..
    bdb8:	205c200a 0a2f207c 00000000 5452202d     . \ | /.....- RT
    bdc8:	20202d20 54202020 61657268 704f2064      -     Thread Op
    bdd8:	74617265 20676e69 74737953 000a6d65     erating System..
    bde8:	7c202f20 20205c20 25202020 64252e64      / | \     %d.%d
    bdf8:	2064252e 6c697562 73252064 0a732520     .%d build %s %s.
    be08:	00000000 323a3831 30313a37 00000000     ....18:27:10....
    be18:	206c754a 32203631 00323230 30303220     Jul 16 2022. 200
    be28:	202d2036 32323032 706f4320 67697279     6 - 2022 Copyrig
    be38:	62207468 54522079 7268542d 20646165     ht by RT-Thread 
    be48:	6d616574 0000000a 4c554e28 0000294c     team....(NULL)..
    be58:	70616568 00000000 6576656c 3d3d206c     heap....level ==
    be68:	5f545220 004b4f45 5f646e65 67696c61      RT_EOK.end_alig
    be78:	203e206e 69676562 6c615f6e 006e6769     n > begin_align.
    be88:	29732528 73736120 69747265 66206e6f     (%s) assertion f
    be98:	656c6961 74612064 6e756620 6f697463     ailed at functio
    bea8:	73253a6e 696c202c 6e20656e 65626d75     n:%s, line numbe
    beb8:	64253a72 00000a20 00003aa6 00003ace     r:%d ....:...:..
    bec8:	00003ace 00003ace 00003ace 00003ace     .:...:...:...:..
    bed8:	00003ace 00003ace 00003ace 00003ace     .:...:...:...:..
    bee8:	00003ace 00003906 00003abe 00003ace     .:...9...:...:..
    bef8:	00003ace 00003ace 00003ace 00003abe     .:...:...:...:..
    bf08:	00003ace 00003ace 00003ace 00003ace     .:...:...:...:..
    bf18:	00003ace 00003a9c 00003a44 00003ace     .:...:..D:...:..
    bf28:	00003ace 0000397c 00003ace 00003b0a     .:..|9...:...;..
    bf38:	00003ace 00003ace 00003ab4              .:...:...:..

0000bf44 <__lowest_bit_bitmap>:
    bf44:	00010000 00010002 00010003 00010002     ................
    bf54:	00010004 00010002 00010003 00010002     ................
    bf64:	00010005 00010002 00010003 00010002     ................
    bf74:	00010004 00010002 00010003 00010002     ................
    bf84:	00010006 00010002 00010003 00010002     ................
    bf94:	00010004 00010002 00010003 00010002     ................
    bfa4:	00010005 00010002 00010003 00010002     ................
    bfb4:	00010004 00010002 00010003 00010002     ................
    bfc4:	00010007 00010002 00010003 00010002     ................
    bfd4:	00010004 00010002 00010003 00010002     ................
    bfe4:	00010005 00010002 00010003 00010002     ................
    bff4:	00010004 00010002 00010003 00010002     ................
    c004:	00010006 00010002 00010003 00010002     ................
    c014:	00010004 00010002 00010003 00010002     ................
    c024:	00010005 00010002 00010003 00010002     ................
    c034:	00010004 00010002 00010003 00010002     ................

0000c044 <large_digits.4>:
    c044:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    c054:	00000000                                ....

0000c058 <small_digits.3>:
    c058:	33323130 37363534 62613938 66656463     0123456789abcdef
    c068:	00000000                                ....

0000c06c <__FUNCTION__.1>:
    c06c:	735f7472 65747379 65685f6d 695f7061     rt_system_heap_i
    c07c:	0074696e                                nit.

0000c080 <__FUNCTION__.0>:
    c080:	6165685f 6e755f70 6b636f6c 00000000     _heap_unlock....
    c090:	00000030 206d6573 52203d21 554e5f54     0...sem != RT_NU
    c0a0:	00004c4c 756c6176 203c2065 30317830     LL..value < 0x10
    c0b0:	55303030 00000000 616c6628 3d3d2067     000U....(flag ==
    c0c0:	5f545220 5f435049 47414c46 4649465f      RT_IPC_FLAG_FIF
    c0d0:	7c20294f 6628207c 2067616c 52203d3d     O) || (flag == R
    c0e0:	50495f54 4c465f43 505f4741 294f4952     T_IPC_FLAG_PRIO)
    c0f0:	00000000 6f5f7472 63656a62 65675f74     ....rt_object_ge
    c100:	79745f74 26286570 2d6d6573 7261703e     t_type(&sem->par
    c110:	2e746e65 65726170 2029746e 52203d3d     ent.parent) == R
    c120:	624f5f54 7463656a 616c435f 535f7373     T_Object_Class_S
    c130:	70616d65 65726f68 00000000 6f5f7472     emaphore....rt_o
    c140:	63656a62 73695f74 7379735f 6f6d6574     bject_is_systemo
    c150:	63656a62 73262874 3e2d6d65 65726170     bject(&sem->pare
    c160:	702e746e 6e657261 00002974 636e7546     nt.parent)..Func
    c170:	6e6f6974 5d73255b 61687320 6e206c6c     tion[%s] shall n
    c180:	6220746f 73752065 69206465 5349206e     ot be used in IS
    c190:	00000a52 6f5f7472 63656a62 73695f74     R...rt_object_is
    c1a0:	7379735f 6f6d6574 63656a62 73262874     _systemobject(&s
    c1b0:	3e2d6d65 65726170 702e746e 6e657261     em->parent.paren
    c1c0:	3d202974 5452203d 4c41465f 00004553     t) == RT_FALSE..
    c1d0:	636e7546 6e6f6974 5d73255b 6373203a     Function[%s]: sc
    c1e0:	75646568 2072656c 6e207369 6120746f     heduler is not a
    c1f0:	6c696176 656c6261 0000000a 636e7546     vailable....Func
    c200:	6e6f6974 5d73255b 61687320 6e206c6c     tion[%s] shall n
    c210:	6220746f 73752065 62206465 726f6665     ot be used befor
    c220:	63732065 75646568 2072656c 72617473     e scheduler star
    c230:	00000a74 6574756d 3d212078 5f545220     t...mutex != RT_
    c240:	4c4c554e 00000000 6f5f7472 63656a62     NULL....rt_objec
    c250:	65675f74 79745f74 26286570 6574756d     t_get_type(&mute
    c260:	703e2d78 6e657261 61702e74 746e6572     x->parent.parent
    c270:	3d3d2029 5f545220 656a624f 435f7463     ) == RT_Object_C
    c280:	7373616c 74754d5f 00007865 6f5f7472     lass_Mutex..rt_o
    c290:	63656a62 73695f74 7379735f 6f6d6574     bject_is_systemo
    c2a0:	63656a62 6d262874 78657475 61703e2d     bject(&mutex->pa
    c2b0:	746e6572 7261702e 29746e65 00000000     rent.parent)....
    c2c0:	6f5f7472 63656a62 73695f74 7379735f     rt_object_is_sys
    c2d0:	6f6d6574 63656a62 6d262874 78657475     temobject(&mutex
    c2e0:	61703e2d 746e6572 7261702e 29746e65     ->parent.parent)
    c2f0:	203d3d20 465f5452 45534c41 00000000      == RT_FALSE....
    c300:	6e657665 3d212074 5f545220 4c4c554e     event != RT_NULL
    c310:	00000000 6f5f7472 63656a62 65675f74     ....rt_object_ge
    c320:	79745f74 26286570 6e657665 703e2d74     t_type(&event->p
    c330:	6e657261 61702e74 746e6572 3d3d2029     arent.parent) ==
    c340:	5f545220 656a624f 435f7463 7373616c      RT_Object_Class
    c350:	6576455f 0000746e 6f5f7472 63656a62     _Event..rt_objec
    c360:	73695f74 7379735f 6f6d6574 63656a62     t_is_systemobjec
    c370:	65262874 746e6576 61703e2d 746e6572     t(&event->parent
    c380:	7261702e 29746e65 00000000 6f5f7472     .parent)....rt_o
    c390:	63656a62 73695f74 7379735f 6f6d6574     bject_is_systemo
    c3a0:	63656a62 65262874 746e6576 61703e2d     bject(&event->pa
    c3b0:	746e6572 7261702e 29746e65 203d3d20     rent.parent) == 
    c3c0:	465f5452 45534c41 00000000 2120626d     RT_FALSE....mb !
    c3d0:	5452203d 4c554e5f 0000004c 6f5f7472     = RT_NULL...rt_o
    c3e0:	63656a62 65675f74 79745f74 26286570     bject_get_type(&
    c3f0:	3e2d626d 65726170 702e746e 6e657261     mb->parent.paren
    c400:	3d202974 5452203d 6a624f5f 5f746365     t) == RT_Object_
    c410:	73616c43 614d5f73 6f426c69 00000078     Class_MailBox...
    c420:	6f5f7472 63656a62 73695f74 7379735f     rt_object_is_sys
    c430:	6f6d6574 63656a62 6d262874 703e2d62     temobject(&mb->p
    c440:	6e657261 61702e74 746e6572 00000029     arent.parent)...
    c450:	6f5f7472 63656a62 73695f74 7379735f     rt_object_is_sys
    c460:	6f6d6574 63656a62 6d262874 703e2d62     temobject(&mb->p
    c470:	6e657261 61702e74 746e6572 3d3d2029     arent.parent) ==
    c480:	5f545220 534c4146 00000045 2120716d      RT_FALSE...mq !
    c490:	5452203d 4c554e5f 0000004c 6f5f7472     = RT_NULL...rt_o
    c4a0:	63656a62 65675f74 79745f74 26286570     bject_get_type(&
    c4b0:	3e2d716d 65726170 702e746e 6e657261     mq->parent.paren
    c4c0:	3d202974 5452203d 6a624f5f 5f746365     t) == RT_Object_
    c4d0:	73616c43 654d5f73 67617373 65755165     Class_MessageQue
    c4e0:	00006575 6f5f7472 63656a62 73695f74     ue..rt_object_is
    c4f0:	7379735f 6f6d6574 63656a62 6d262874     _systemobject(&m
    c500:	703e2d71 6e657261 61702e74 746e6572     q->parent.parent
    c510:	00000029 6f5f7472 63656a62 73695f74     )...rt_object_is
    c520:	7379735f 6f6d6574 63656a62 6d262874     _systemobject(&m
    c530:	703e2d71 6e657261 61702e74 746e6572     q->parent.parent
    c540:	3d3d2029 5f545220 534c4146 00000045     ) == RT_FALSE...
    c550:	66667562 21207265 5452203d 4c554e5f     buffer != RT_NUL
    c560:	0000004c 657a6973 203d2120 00000030     L...size != 0...

0000c570 <__FUNCTION__.37>:
    c570:	735f7472 695f6d65 0074696e              rt_sem_init.

0000c57c <__FUNCTION__.33>:
    c57c:	735f7472 745f6d65 00656b61              rt_sem_take.

0000c588 <__FUNCTION__.32>:
    c588:	6370695f 73696c5f 75735f74 6e657073     _ipc_list_suspen
    c598:	00000064                                d...

0000c59c <__FUNCTION__.31>:
    c59c:	735f7472 725f6d65 61656c65 00006573     rt_sem_release..

0000c5ac <__FUNCTION__.29>:
    c5ac:	6d5f7472 78657475 696e695f 00000074     rt_mutex_init...

0000c5bc <__FUNCTION__.25>:
    c5bc:	6d5f7472 78657475 6b61745f 00000065     rt_mutex_take...

0000c5cc <__FUNCTION__.24>:
    c5cc:	6d5f7472 78657475 6c65725f 65736165     rt_mutex_release
    c5dc:	00000000 65726874 21206461 5452203d     ....thread != RT
    c5ec:	4c554e5f 0000004c 72687428 2d646165     _NULL...(thread-
    c5fc:	6174733e 20262074 545f5452 41455248     >stat & RT_THREA
    c60c:	54535f44 4d5f5441 294b5341 203d3d20     D_STAT_MASK) == 
    c61c:	545f5452 41455248 55535f44 4e455053     RT_THREAD_SUSPEN
    c62c:	00000044 6f5f7472 63656a62 65675f74     D...rt_object_ge
    c63c:	79745f74 28286570 6f5f7472 63656a62     t_type((rt_objec
    c64c:	29745f74 65726874 20296461 52203d3d     t_t)thread) == R
    c65c:	624f5f54 7463656a 616c435f 545f7373     T_Object_Class_T
    c66c:	61657268 00000064 6f697270 79746972     hread...priority
    c67c:	52203c20 48545f54 44414552 4952505f      < RT_THREAD_PRI
    c68c:	5449524f 414d5f59 00000058 63617473     ORITY_MAX...stac
    c69c:	74735f6b 20747261 52203d21 554e5f54     k_start != RT_NU
    c6ac:	00004c4c 72687428 2d646165 6174733e     LL..(thread->sta
    c6bc:	20262074 545f5452 41455248 54535f44     t & RT_THREAD_ST
    c6cc:	4d5f5441 294b5341 203d3d20 545f5452     AT_MASK) == RT_T
    c6dc:	41455248 4e495f44 00005449 6f5f7472     HREAD_INIT..rt_o
    c6ec:	63656a62 73695f74 7379735f 6f6d6574     bject_is_systemo
    c6fc:	63656a62 72282874 626f5f74 7463656a     bject((rt_object
    c70c:	7429745f 61657268 00002964 6f5f7472     _t)thread)..rt_o
    c71c:	63656a62 73695f74 7379735f 6f6d6574     bject_is_systemo
    c72c:	63656a62 72282874 626f5f74 7463656a     bject((rt_object
    c73c:	7429745f 61657268 3d202964 5452203d     _t)thread) == RT
    c74c:	4c41465f 00004553 6b636974 203d2120     _FALSE..tick != 
    c75c:	4e5f5452 004c4c55 65726874 3d206461     RT_NULL.thread =
    c76c:	7472203d 7268745f 5f646165 666c6573     = rt_thread_self
    c77c:	00002928                                ()..

0000c780 <__FUNCTION__.10>:
    c780:	7268745f 5f646165 656d6974 0074756f     _thread_timeout.

0000c790 <__FUNCTION__.9>:
    c790:	7268745f 5f646165 74696e69 00000000     _thread_init....

0000c7a0 <__FUNCTION__.8>:
    c7a0:	745f7472 61657268 6e695f64 00007469     rt_thread_init..

0000c7b0 <__FUNCTION__.7>:
    c7b0:	745f7472 61657268 74735f64 75747261     rt_thread_startu
    c7c0:	00000070                                p...

0000c7c4 <__FUNCTION__.6>:
    c7c4:	745f7472 61657268 65645f64 68636174     rt_thread_detach
    c7d4:	00000000                                ....

0000c7d8 <__FUNCTION__.5>:
    c7d8:	745f7472 61657268 65645f64 6574656c     rt_thread_delete
    c7e8:	00000000                                ....

0000c7ec <__FUNCTION__.4>:
    c7ec:	745f7472 61657268 6c735f64 00706565     rt_thread_sleep.

0000c7fc <__FUNCTION__.2>:
    c7fc:	745f7472 61657268 6f635f64 6f72746e     rt_thread_contro
    c80c:	0000006c                                l...

0000c810 <__FUNCTION__.1>:
    c810:	745f7472 61657268 75735f64 6e657073     rt_thread_suspen
    c820:	00000064                                d...

0000c824 <__FUNCTION__.0>:
    c824:	745f7472 61657268 65725f64 656d7573     rt_thread_resume
    c834:	00000000 6c646974 00642565 3a727370     ....tidle%d.psr:
    c844:	25783020 0a783830 00000000 3a637020      0x%08x..... pc:
    c854:	25783020 0a783830 00000000 3a726c20      0x%08x..... lr:
    c864:	25783020 0a783830 00000000 3a323172      0x%08x.....r12:
    c874:	25783020 0a783830 00000000 3a333072      0x%08x.....r03:
    c884:	25783020 0a783830 00000000 3a323072      0x%08x.....r02:
    c894:	25783020 0a783830 00000000 3a313072      0x%08x.....r01:
    c8a4:	25783020 0a783830 00000000 3a303072      0x%08x.....r00:
    c8b4:	25783020 0a783830 00000000 64726168      0x%08x.....hard
    c8c4:	75616620 6f20746c 6874206e 64616572      fault on thread
    c8d4:	7325203a 0000000a 75657571 3d212065     : %s....queue !=
    c8e4:	5f545220 4c4c554e 00000000 657a6973      RT_NULL....size
    c8f4:	30203e20 00000000 75657571 6d3e2d65      > 0....queue->m
    c904:	63696761 203d3d20 41544144 55455551     agic == DATAQUEU
    c914:	414d5f45 00434947 636e7546 6e6f6974     E_MAGIC.Function
    c924:	5d73255b 6373203a 75646568 2072656c     [%s]: scheduler 
    c934:	6e207369 6120746f 6c696176 656c6261     is not available
    c944:	0000000a 00000030 636e7546 6e6f6974     ....0...Function
    c954:	5d73255b 61687320 6e206c6c 6220746f     [%s] shall not b
    c964:	73752065 62206465 726f6665 63732065     e used before sc
    c974:	75646568 2072656c 72617473 00000a74     heduler start...
    c984:	636e7546 6e6f6974 5d73255b 61687320     Function[%s] sha
    c994:	6e206c6c 6220746f 73752065 69206465     ll not be used i
    c9a4:	5349206e 00000a52 61746164 7274705f     n ISR...data_ptr
    c9b4:	203d2120 4e5f5452 004c4c55 657a6973      != RT_NULL.size
    c9c4:	203d2120 4e5f5452 004c4c55               != RT_NULL.

0000c9d0 <__FUNCTION__.6>:
    c9d0:	645f7472 5f617461 75657571 6e695f65     rt_data_queue_in
    c9e0:	00007469                                it..

0000c9e4 <__FUNCTION__.5>:
    c9e4:	645f7472 5f617461 75657571 75705f65     rt_data_queue_pu
    c9f4:	00006873                                sh..

0000c9f8 <__FUNCTION__.2>:
    c9f8:	645f7472 5f617461 75657571 65725f65     rt_data_queue_re
    ca08:	00746573                                set.

0000ca0c <__FUNCTION__.1>:
    ca0c:	645f7472 5f617461 75657571 65645f65     rt_data_queue_de
    ca1c:	74696e69 00000000 706d6f63 6974656c     init....completi
    ca2c:	21206e6f 5452203d 4c554e5f 0000004c     on != RT_NULL...
    ca3c:	636e7546 6e6f6974 5d73255b 6373203a     Function[%s]: sc
    ca4c:	75646568 2072656c 6e207369 6120746f     heduler is not a
    ca5c:	6c696176 656c6261 0000000a 00000030     vailable....0...
    ca6c:	636e7546 6e6f6974 5d73255b 61687320     Function[%s] sha
    ca7c:	6e206c6c 6220746f 73752065 62206465     ll not be used b
    ca8c:	726f6665 63732065 75646568 2072656c     efore scheduler 
    ca9c:	72617473 00000a74 636e7546 6e6f6974     start...Function
    caac:	5d73255b 61687320 6e206c6c 6220746f     [%s] shall not b
    cabc:	73752065 69206465 5349206e 00000a52     e used in ISR...
    cacc:	6c5f7472 5f747369 6d657369 28797470     rt_list_isempty(
    cadc:	6f632826 656c706d 6e6f6974 75733e2d     &(completion->su
    caec:	6e657073 5f646564 7473696c 00002929     spended_list))..

0000cafc <__FUNCTION__.2>:
    cafc:	635f7472 6c706d6f 6f697465 6e695f6e     rt_completion_in
    cb0c:	00007469                                it..

0000cb10 <__FUNCTION__.1>:
    cb10:	635f7472 6c706d6f 6f697465 61775f6e     rt_completion_wa
    cb20:	00007469 69726573 21206c61 5452203d     it..serial != RT
    cb30:	4c554e5f 0000004c 665f7872 206f6669     _NULL...rx_fifo 
    cb40:	52203d21 554e5f54 00004c4c 21207874     != RT_NULL..tx !
    cb50:	5452203d 4c554e5f 0000004c 552f575b     = RT_NULL...[W/U
    cb60:	5d545241 00000020 6e726157 3a676e69     ART] ...Warning:
    cb70:	65685420 69206572 6f6e2073 6f6e6520      There is no eno
    cb80:	20686775 66667562 66207265 7320726f     ugh buffer for s
    cb90:	6e697661 61642067 202c6174 61656c70     aving data, plea
    cba0:	69206573 6572636e 20657361 20656874     se increase the 
    cbb0:	535f5452 41495245 42525f4c 4655425f     RT_SERIAL_RB_BUF
    cbc0:	6f205a53 6f697470 00002e6e 0000000a     SZ option.......
    cbd0:	206e656c 72203d3c 6d645f74 61635f61     len <= rt_dma_ca
    cbe0:	725f636c 65766365 656c5f64 6573286e     lc_recved_len(se
    cbf0:	6c616972 00000029 72657328 206c6169     rial)...(serial 
    cc00:	52203d21 554e5f54 20294c4c 28202626     != RT_NULL) && (
    cc10:	61746164 203d2120 4e5f5452 294c4c55     data != RT_NULL)
    cc20:	00000000 645f7872 2120616d 5452203d     ....rx_dma != RT
    cc30:	4c554e5f 0000004c 69726573 3e2d6c61     _NULL...serial->
    cc40:	2d73706f 616d643e 6172745f 696d736e     ops->dma_transmi
    cc50:	3d212074 5f545220 4c4c554e 00000000     t != RT_NULL....
    cc60:	20766564 52203d21 554e5f54 00004c4c     dev != RT_NULL..
    cc70:	665f7874 206f6669 52203d21 554e5f54     tx_fifo != RT_NU
    cc80:	00004c4c 645f7874 2120616d 5452203d     LL..tx_dma != RT
    cc90:	4c554e5f 0000004c 69726573 3e2d6c61     _NULL...serial->
    cca0:	65726170 722e746e 6e695f78 61636964     parent.rx_indica
    ccb0:	21206574 5452203d 4c554e5f 0000004c     te != RT_NULL...

0000ccc0 <__FUNCTION__.15>:
    ccc0:	7265735f 5f6c6169 6f666966 6c61635f     _serial_fifo_cal
    ccd0:	65725f63 64657663 6e656c5f 00000000     c_recved_len....

0000cce0 <__FUNCTION__.14>:
    cce0:	645f7472 725f616d 5f766365 61647075     rt_dma_recv_upda
    ccf0:	675f6574 695f7465 7865646e 00000000     te_get_index....

0000cd00 <__FUNCTION__.12>:
    cd00:	735f7472 61697265 6e695f6c 00007469     rt_serial_init..

0000cd10 <__FUNCTION__.11>:
    cd10:	735f7472 61697265 706f5f6c 00006e65     rt_serial_open..

0000cd20 <__FUNCTION__.10>:
    cd20:	735f7472 61697265 6c635f6c 0065736f     rt_serial_close.

0000cd30 <__FUNCTION__.9>:
    cd30:	735f7472 61697265 65725f6c 00006461     rt_serial_read..

0000cd40 <__FUNCTION__.8>:
    cd40:	7265735f 5f6c6169 5f746e69 00007872     _serial_int_rx..

0000cd50 <__FUNCTION__.7>:
    cd50:	7265735f 5f6c6169 5f616d64 00007872     _serial_dma_rx..

0000cd60 <__FUNCTION__.6>:
    cd60:	7265735f 5f6c6169 6c6c6f70 0078725f     _serial_poll_rx.

0000cd70 <__FUNCTION__.5>:
    cd70:	735f7472 61697265 72775f6c 00657469     rt_serial_write.

0000cd80 <__FUNCTION__.4>:
    cd80:	7265735f 5f6c6169 5f746e69 00007874     _serial_int_tx..

0000cd90 <__FUNCTION__.3>:
    cd90:	7265735f 5f6c6169 6c6c6f70 0078745f     _serial_poll_tx.

0000cda0 <__FUNCTION__.2>:
    cda0:	735f7472 61697265 6f635f6c 6f72746e     rt_serial_contro
    cdb0:	0000006c                                l...

0000cdb4 <__FUNCTION__.1>:
    cdb4:	685f7472 65735f77 6c616972 6765725f     rt_hw_serial_reg
    cdc4:	65747369 00000072 732f455b 696c6474     ister...[E/stdli
    cdd4:	00205d62 65726874 253a6461 78652073     b] .thread:%s ex
    cde4:	253a7469 00002164 0000000a 6e2f575b     it:%d!......[W/n
    cdf4:	696c7765 79732e62 6c616373 205d736c     ewlib.syscalls] 
    ce04:	00000000 61656c50 65206573 6c62616e     ....Please enabl
    ce14:	54522065 4953555f 505f474e 5849534f     e RT_USING_POSIX
    ce24:	0053465f 203a7325 00007325 0000000a     _FS.%s: %s......

0000ce34 <__func__.8>:
    ce34:	6f6c635f 725f6573 00000000              _close_r....

0000ce40 <__func__.7>:
    ce40:	65736c5f 725f6b65 00000000              _lseek_r....

0000ce4c <__func__.4>:
    ce4c:	6165725f 00725f64                       _read_r.

0000ce54 <__func__.0>:
    ce54:	6972775f 725f6574 00000000 2068736d     _write_r....msh 
    ce64:	00000000 0000003e 6c656873 3d21206c     ....>...shell !=
    ce74:	5f545220 4c4c554e 00000000 736e6966      RT_NULL....fins
    ce84:	63203a68 6e206e61 6620746f 20646e69     h: can not find 
    ce94:	69766564 203a6563 000a7325 0000000a     device: %s......
    cea4:	73257325 00000000 4b325b1b 0000000d     %s%s.....[2K....
    ceb4:	00000008 00006325 20732508 00000820     ....%c...%s  ...
    cec4:	00082008 00007325 6d206f6e 726f6d65     . ..%s..no memor
    ced4:	6f662079 68732072 0a6c6c65 00000000     y for shell.....
    cee4:	65687374 00006c6c 78726873 00000000     tshell..shrx....

0000cef4 <__FUNCTION__.6>:
    cef4:	736e6966 65735f68 72705f74 74706d6f     finsh_set_prompt
    cf04:	646f6d5f 00000065                       _mode...

0000cf0c <__FUNCTION__.5>:
    cf0c:	736e6966 65675f68 61686374 00000072     finsh_getchar...

0000cf1c <__FUNCTION__.4>:
    cf1c:	736e6966 78725f68 646e695f 00000000     finsh_rx_ind....

0000cf2c <__FUNCTION__.3>:
    cf2c:	736e6966 65735f68 65645f74 65636976     finsh_set_device
    cf3c:	00000000 542d5452 61657268 68732064     ....RT-Thread sh
    cf4c:	206c6c65 6d6d6f63 73646e61 00000a3a     ell commands:...
    cf5c:	36312d25 202d2073 000a7325 0000000a     %-16s - %s......
    cf6c:	61746f74 2020206c 6425203a 0000000a     total   : %d....
    cf7c:	64657375 20202020 6425203a 0000000a     used    : %d....
    cf8c:	6978616d 206d756d 6425203a 0000000a     maximum : %d....
    cf9c:	206f6f54 796e616d 67726120 20212073     Too many args ! 
    cfac:	6f206557 20796c6e 3a657355 0000000a     We only Use:....
    cfbc:	00207325 00646d63 70746572 00000000     %s .cmd.retp....
    cfcc:	203a7325 6d6d6f63 20646e61 20746f6e     %s: command not 
    cfdc:	6e756f66 000a2e64 000a7325              found...%s..

0000cfe8 <__fsym_help_name>:
    cfe8:	706c6568 00000000                       help....

0000cff0 <__fsym_help_desc>:
    cff0:	542d5452 61657268 68732064 206c6c65     RT-Thread shell 
    d000:	706c6568 0000002e                       help....

0000d008 <__fsym_ps_name>:
    d008:	00007370                                ps..

0000d00c <__fsym_ps_desc>:
    d00c:	7473694c 72687420 73646165 206e6920     List threads in 
    d01c:	20656874 74737973 002e6d65              the system..

0000d028 <__fsym_free_name>:
    d028:	65657266 00000000                       free....

0000d030 <__fsym_free_desc>:
    d030:	776f6853 65687420 6d656d20 2079726f     Show the memory 
    d040:	67617375 6e692065 65687420 73797320     usage in the sys
    d050:	2e6d6574 00000000                       tem.....

0000d058 <__FUNCTION__.0>:
    d058:	68736d5f 6578655f 6d635f63 00000064     _msh_exec_cmd...
    d068:	4a325b1b 00485b1b 0000002d 65726874     .[2J.[H.-...thre
    d078:	00006461 2e2a2d25 72702073 73202069     ad..%-*.s pri  s
    d088:	75746174 20202073 73202020 20202070     tatus      sp   
    d098:	74732020 206b6361 657a6973 78616d20       stack size max
    d0a8:	65737520 656c2064 74207466 206b6369      used left tick 
    d0b8:	72726520 000a726f 2d2d2d20 2d2d2020      error.. ---  --
    d0c8:	2d2d2d2d 2d2d202d 2d2d2d2d 2d2d2d2d     ----- ----------
    d0d8:	2d2d2d20 2d2d2d2d 202d2d2d 2d2d2d20      ----------  ---
    d0e8:	202d2d2d 2d2d2d20 2d2d2d2d 202d2d2d     ---  ---------- 
    d0f8:	0a2d2d2d 00000000 2e2a2d25 2520732a     ---.....%-*.*s %
    d108:	00206433 61657220 20207964 00000000     3d . ready  ....
    d118:	73757320 646e6570 00000000 696e6920      suspend.... ini
    d128:	20202074 00000000 6f6c6320 20206573     t   .... close  
    d138:	00000000 6e757220 676e696e 00000000     .... running....
    d148:	25783020 20783830 30257830 20207838      0x%08x 0x%08x  
    d158:	30252020 25256432 30202020 38302578       %02d%%   0x%08
    d168:	30252078 000a6433 732a2e25 00000000     x %03d..%.*s....
    d178:	0000002f 616d6573 726f6870 00000065     /...semaphore...
    d188:	2e2a2d25 20762073 75732020 6e657073     %-*.s v   suspen
    d198:	68742064 64616572 0000000a 2d2d2d20     d thread.... ---
    d1a8:	2d2d2d20 2d2d2d2d 2d2d2d2d 0a2d2d2d      --------------.
    d1b8:	00000000 2e2a2d25 2520732a 20643330     ....%-*.*s %03d 
    d1c8:	003a6425 0000000a 2e2a2d25 2520732a     %d:.....%-*.*s %
    d1d8:	20643330 000a6425 6e657665 00000074     03d %d..event...
    d1e8:	2e2a2d25 20202073 73202020 20207465     %-*.s      set  
    d1f8:	75732020 6e657073 68742064 64616572       suspend thread
    d208:	0000000a 2d2d2020 2d2d2d2d 2d2d2d2d     ....  ----------
    d218:	2d2d2d20 2d2d2d2d 2d2d2d2d 0a2d2d2d      --------------.
    d228:	00000000 2e2a2d25 2020732a 30257830     ....%-*.*s  0x%0
    d238:	25207838 3a643330 00000000 2e2a2d25     8x %03d:....%-*.
    d248:	2020732a 30257830 30207838 0000000a     *s  0x%08x 0....
    d258:	6574756d 00000078 2e2a2d25 20202073     mutex...%-*.s   
    d268:	656e776f 68202072 20646c6f 70737573     owner  hold susp
    d278:	20646e65 65726874 000a6461 2d2d2d20     end thread.. ---
    d288:	2d2d2d2d 2d2d202d 2d202d2d 2d2d2d2d     ----- ---- -----
    d298:	2d2d2d2d 2d2d2d2d 00000a2d 2e2a2d25     ---------...%-*.
    d2a8:	2520732a 2a2e382d 30252073 25206434     *s %-8.*s %04d %
    d2b8:	00000a64 6c69616d 00786f62 2e2a2d25     d...mailbox.%-*.
    d2c8:	6e652073 20797274 657a6973 73757320     s entry size sus
    d2d8:	646e6570 72687420 0a646165 00000000     pend thread.....
    d2e8:	2d2d2d20 2d20202d 202d2d2d 2d2d2d2d      ----  ---- ----
    d2f8:	2d2d2d2d 2d2d2d2d 000a2d2d 2e2a2d25     ----------..%-*.
    d308:	2520732a 20643430 34302520 64252064     *s %04d  %04d %d
    d318:	0000003a 2e2a2d25 2520732a 20643430     :...%-*.*s %04d 
    d328:	34302520 64252064 0000000a 7167736d      %04d %d....msgq
    d338:	65756575 00000000 2e2a2d25 6e652073     ueue....%-*.s en
    d348:	20797274 70737573 20646e65 65726874     try suspend thre
    d358:	000a6461 2d2d2d20 2d20202d 2d2d2d2d     ad.. ----  -----
    d368:	2d2d2d2d 2d2d2d2d 00000a2d 2e2a2d25     ---------...%-*.
    d378:	2520732a 20643430 3a642520 00000000     *s %04d  %d:....
    d388:	2e2a2d25 2520732a 20643430 0a642520     %-*.*s %04d  %d.
    d398:	00000000 706d656d 006c6f6f 2e2a2d25     ....mempool.%-*.
    d3a8:	6c622073 206b636f 61746f74 7266206c     s block total fr
    d3b8:	73206565 65707375 7420646e 61657268     ee suspend threa
    d3c8:	00000a64 2d2d2d20 2d20202d 202d2d2d     d... ----  ---- 
    d3d8:	2d2d2d20 2d2d202d 2d2d2d2d 2d2d2d2d      ---- ----------
    d3e8:	2d2d2d2d 0000000a 2e2a2d25 2520732a     ----....%-*.*s %
    d3f8:	20643430 34302520 25202064 20643430     04d  %04d  %04d 
    d408:	003a6425 2e2a2d25 2520732a 20643430     %d:.%-*.*s %04d 
    d418:	34302520 25202064 20643430 000a6425      %04d  %04d %d..
    d428:	656d6974 00000072 2e2a2d25 70202073     timer...%-*.s  p
    d438:	6f697265 20636964 69742020 756f656d     eriodic   timeou
    d448:	20202074 74636120 74617669 20206465     t    activated  
    d458:	6d202020 0a65646f 00000000 2d2d2d20        mode..... ---
    d468:	2d2d2d2d 202d2d2d 2d2d2d2d 2d2d2d2d     ------- --------
    d478:	2d202d2d 2d2d2d2d 2d2d2d2d 2d202d2d     -- ----------- -
    d488:	2d2d2d2d 2d2d2d2d 0000000a 2e2a2d25     --------....%-*.
    d498:	3020732a 38302578 78302078 78383025     *s 0x%08x 0x%08x
    d4a8:	00000020 69746361 65746176 20202064      ...activated   
    d4b8:	00000000 63616564 61766974 20646574     ....deactivated 
    d4c8:	00000000 69726570 6369646f 0000000a     ....periodic....
    d4d8:	20656e6f 746f6873 0000000a 72727563     one shot....curr
    d4e8:	20746e65 6b636974 2578303a 0a783830     ent tick:0x%08x.
    d4f8:	00000000 72616843 65746361 65442072     ....Character De
    d508:	65636976 00000000 636f6c42 6544206b     vice....Block De
    d518:	65636976 00000000 7774654e 206b726f     vice....Network 
    d528:	65746e49 63616672 00000065 2044544d     Interface...MTD 
    d538:	69766544 00006563 204e4143 69766544     Device..CAN Devi
    d548:	00006563 00435452 6e756f53 65442064     ce..RTC.Sound De
    d558:	65636976 00000000 70617247 20636968     vice....Graphic 
    d568:	69766544 00006563 20433249 00737542     Device..I2C Bus.
    d578:	20425355 76616c53 65442065 65636976     USB Slave Device
    d588:	00000000 20425355 74736f48 73754220     ....USB Host Bus
    d598:	00000000 20425355 2047544f 00737542     ....USB OTG Bus.
    d5a8:	20495053 00737542 20495053 69766544     SPI Bus.SPI Devi
    d5b8:	00006563 4f494453 73754220 00000000     ce..SDIO Bus....
    d5c8:	50204d50 64756573 6544206f 65636976     PM Pseudo Device
    d5d8:	00000000 65706950 00000000 74726f50     ....Pipe....Port
    d5e8:	44206c61 63697665 00000065 656d6954     al Device...Time
    d5f8:	65442072 65636976 00000000 6373694d     r Device....Misc
    d608:	616c6c65 756f656e 65442073 65636976     ellaneous Device
    d618:	00000000 736e6553 4420726f 63697665     ....Sensor Devic
    d628:	00000065 63756f54 65442068 65636976     e...Touch Device
    d638:	00000000 20796850 69766544 00006563     ....Phy Device..
    d648:	75636553 79746972 76654420 00656369     Security Device.
    d658:	4e414c57 76654420 00656369 206e6950     WLAN Device.Pin 
    d668:	69766544 00006563 20434441 69766544     Device..ADC Devi
    d678:	00006563 20434144 69766544 00006563     ce..DAC Device..
    d688:	20544457 69766544 00006563 204d5750     WDT Device..PWM 
    d698:	69766544 00006563 6e6b6e55 006e776f     Device..Unknown.
    d6a8:	69766564 00006563 2e2a2d25 20202073     device..%-*.s   
    d6b8:	20202020 79742020 20206570 20202020           type      
    d6c8:	72202020 63206665 746e756f 0000000a        ref count....
    d6d8:	2d2d2d20 2d2d2d2d 2d2d2d2d 2d2d2d2d      ---------------
    d6e8:	2d2d2d2d 2d2d202d 2d2d2d2d 2d2d2d2d     ----- ----------
    d6f8:	0000000a 2e2a2d25 2520732a 7330322d     ....%-*.*s %-20s
    d708:	382d2520 00000a64                        %-8d...

0000d710 <__fsym_clear_name>:
    d710:	61656c63 00000072                       clear...

0000d718 <__fsym_clear_desc>:
    d718:	61656c63 68742072 65742065 6e696d72     clear the termin
    d728:	73206c61 65657263 0000006e              al screen...

0000d734 <__fsym_version_name>:
    d734:	73726576 006e6f69                       version.

0000d73c <__fsym_version_desc>:
    d73c:	776f6873 2d545220 65726854 76206461     show RT-Thread v
    d74c:	69737265 69206e6f 726f666e 6974616d     ersion informati
    d75c:	00006e6f                                on..

0000d760 <__fsym_list_thread_name>:
    d760:	7473696c 7268745f 00646165              list_thread.

0000d76c <__fsym_list_thread_desc>:
    d76c:	7473696c 72687420 00646165              list thread.

0000d778 <__fsym_list_sem_name>:
    d778:	7473696c 6d65735f 00000000              list_sem....

0000d784 <__fsym_list_sem_desc>:
    d784:	7473696c 6d657320 6f687061 69206572     list semaphore i
    d794:	7973206e 6d657473 00000000              n system....

0000d7a0 <__fsym_list_event_name>:
    d7a0:	7473696c 6576655f 0000746e              list_event..

0000d7ac <__fsym_list_event_desc>:
    d7ac:	7473696c 65766520 6920746e 7973206e     list event in sy
    d7bc:	6d657473 00000000                       stem....

0000d7c4 <__fsym_list_mutex_name>:
    d7c4:	7473696c 74756d5f 00007865              list_mutex..

0000d7d0 <__fsym_list_mutex_desc>:
    d7d0:	7473696c 74756d20 69207865 7973206e     list mutex in sy
    d7e0:	6d657473 00000000                       stem....

0000d7e8 <__fsym_list_mailbox_name>:
    d7e8:	7473696c 69616d5f 786f626c 00000000     list_mailbox....

0000d7f8 <__fsym_list_mailbox_desc>:
    d7f8:	7473696c 69616d20 6f62206c 6e692078     list mail box in
    d808:	73797320 006d6574                        system.

0000d810 <__fsym_list_msgqueue_name>:
    d810:	7473696c 67736d5f 75657571 00000065     list_msgqueue...

0000d820 <__fsym_list_msgqueue_desc>:
    d820:	7473696c 73656d20 65676173 65757120     list message que
    d830:	69206575 7973206e 6d657473 00000000     ue in system....

0000d840 <__fsym_list_mempool_name>:
    d840:	7473696c 6d656d5f 6c6f6f70 00000000     list_mempool....

0000d850 <__fsym_list_mempool_desc>:
    d850:	7473696c 6d656d20 2079726f 6c6f6f70     list memory pool
    d860:	206e6920 74737973 00006d65               in system..

0000d86c <__fsym_list_timer_name>:
    d86c:	7473696c 6d69745f 00007265              list_timer..

0000d878 <__fsym_list_timer_desc>:
    d878:	7473696c 6d697420 69207265 7973206e     list timer in sy
    d888:	6d657473 00000000                       stem....

0000d890 <__fsym_list_device_name>:
    d890:	7473696c 7665645f 00656369              list_device.

0000d89c <__fsym_list_device_desc>:
    d89c:	7473696c 76656420 20656369 73206e69     list device in s
    d8ac:	65747379 0000006d                       ystem...

0000d8b4 <device_type_str>:
    d8b4:	0000d4fc 0000d510 0000d520 0000d534     ........ ...4...
    d8c4:	0000d540 0000d54c 0000d550 0000d560     @...L...P...`...
    d8d4:	0000d570 0000d578 0000d58c 0000d59c     p...x...........
    d8e4:	0000d5a8 0000d5b0 0000d5bc 0000d5c8     ................
    d8f4:	0000d5dc 0000d5e4 0000d5f4 0000d604     ................
    d904:	0000d61c 0000d62c 0000d63c 0000d648     ....,...<...H...
    d914:	0000d658 0000d664 0000d670 0000d67c     X...d...p...|...
    d924:	0000d688 0000d694 0000d6a0 7566202c     ............, fu
    d934:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
    d944:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
    d954:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
    d964:	2520656e 25732564 00000a73 33323130     ne %d%s%s...0123
    d974:	37363534 42413938 46454443 00000000     456789ABCDEF....
    d984:	33323130 37363534 62613938 66656463     0123456789abcdef
    d994:	00000000 6c756e28 0000296c 00009704     ....(null)......
    d9a4:	00009364 00009364 000096fa 00009364     d...d.......d...
    d9b4:	00009364 00009364 00009272 00009364     d...d...r...d...
    d9c4:	00009364 00009580 0000959e 00009364     d...........d...
    d9d4:	00009594 000096c2 00009364 000096b8     ........d.......
    d9e4:	0000949c 0000949c 0000949c 0000949c     ................
    d9f4:	0000949c 0000949c 0000949c 0000949c     ................
    da04:	0000949c 00009364 00009364 00009364     ....d...d...d...
    da14:	00009364 00009364 00009364 00009364     d...d...d...d...
    da24:	00009364 00009364 00009538 00009640     d...d...8...@...
    da34:	00009364 00009364 00009364 00009364     d...d...d...d...
    da44:	00009364 00009364 00009364 00009364     d...d...d...d...
    da54:	00009364 00009364 000095aa 00009364     d...d.......d...
    da64:	00009364 00009364 000094dc 00009364     d...d.......d...
    da74:	0000971a 00009364 00009364 00009d16     ....d...d.......
    da84:	00009364 00009364 00009364 00009364     d...d...d...d...
    da94:	00009364 00009364 00009364 00009364     d...d...d...d...
    daa4:	00009364 00009364 00009538 00009c1a     d...d...8.......
    dab4:	00009364 00009364 00009364 000097a4     d...d...d.......
    dac4:	00009c1a 000092d6 00009364 00009794     ........d.......
    dad4:	00009364 00009766 00009d20 00009742     d...f... ...B...
    dae4:	000092d6 00009364 000094dc 0000929a     ....d...........
    daf4:	00009cc4 00009364 00009364 00009cca     ....d...d.......
    db04:	00009364 0000929a                       d.......

0000db0c <blanks.1>:
    db0c:	20202020 20202020 20202020 20202020                     

0000db1c <zeroes.0>:
    db1c:	30303030 30303030 30303030 30303030     0000000000000000
    db2c:	0000002e 435f434c 414c4c4f 00004554     ....LC_COLLATE..
    db3c:	435f434c 45505954 00000000 4d5f434c     LC_CTYPE....LC_M
    db4c:	54454e4f 00595241 4e5f434c 52454d55     ONETARY.LC_NUMER
    db5c:	00004349 545f434c 00454d49 4d5f434c     IC..LC_TIME.LC_M
    db6c:	41535345 00534547                       ESSAGES.

0000db74 <_ctype_>:
    db74:	20202000 20202020 28282020 20282828     .         ((((( 
    db84:	20202020 20202020 20202020 20202020                     
    db94:	10108820 10101010 10101010 10101010      ...............
    dba4:	04040410 04040404 10040404 10101010     ................
    dbb4:	41411010 41414141 01010101 01010101     ..AAAAAA........
    dbc4:	01010101 01010101 01010101 10101010     ................
    dbd4:	42421010 42424242 02020202 02020202     ..BBBBBB........
    dbe4:	02020202 02020202 02020202 10101010     ................
    dbf4:	00000020 00000000 00000000 00000000      ...............
	...

0000dc78 <__fsym_help>:
    dc78:	0000cfe8 0000cff0 00007abd              .........z..

0000dc84 <__fsym_ps>:
    dc84:	0000d008 0000d00c 00007b1d              .........{..

0000dc90 <__fsym_free>:
    dc90:	0000d028 0000d030 00007b35              (...0...5{..

0000dc9c <__fsym_clear>:
    dc9c:	0000d710 0000d718 0000802d              ........-...

0000dca8 <__fsym_version>:
    dca8:	0000d734 0000d73c 00008045              4...<...E...

0000dcb4 <__fsym_list_thread>:
    dcb4:	0000d760 0000d76c 0000819d              `...l.......

0000dcc0 <__fsym_list_sem>:
    dcc0:	0000d778 0000d784 00008451              x.......Q...

0000dccc <__fsym_list_event>:
    dccc:	0000d7a0 0000d7ac 00008589              ............

0000dcd8 <__fsym_list_mutex>:
    dcd8:	0000d7c4 0000d7d0 000086b1              ............

0000dce4 <__fsym_list_mailbox>:
    dce4:	0000d7e8 0000d7f8 000087a9              ............

0000dcf0 <__fsym_list_msgqueue>:
    dcf0:	0000d810 0000d820 000088f1              .... .......

0000dcfc <__fsym_list_mempool>:
    dcfc:	0000d840 0000d850 00008a29              @...P...)...

0000dd08 <__fsym_list_timer>:
    dd08:	0000d86c 0000d878 00008b85              l...x.......

0000dd14 <__fsym_list_device>:
    dd14:	0000d890 0000d89c 00008cc5              ............

0000dd20 <__rt_init_rti_start>:
    dd20:	000024d1                                .$..

0000dd24 <__rt_init_rti_board_start>:
    dd24:	000024dd                                .$..

0000dd28 <__rt_init_rti_board_end>:
    dd28:	000024e9                                .$..

0000dd2c <__rt_init_finsh_system_init>:
    dd2c:	00007a15                                .z..

0000dd30 <__rt_init_rti_end>:
    dd30:	000024f5                                .$..
